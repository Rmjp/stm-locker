
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  08005da4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005da4  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dc1  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296e  00000000  00000000  0001ae59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0001d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef1  00000000  00000000  0001ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222ab  00000000  00000000  0001f9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161f2  00000000  00000000  00041c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce848  00000000  00000000  00057e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001266ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  001266f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0012bfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c58 	.word	0x08005c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005c58 	.word	0x08005c58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f003 feb9 	bl	8004324 <HAL_UART_Transmit>

  return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000016c 	.word	0x2000016c

080005c0 <main>:
  * @brief  The application entry point.
  * @retval int
  */
volatile int esp32_data_ready = 0;
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd0d 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f81c 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f98c 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f96c 	bl	80008ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f93a 	bl	800084c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005d8:	f000 f876 	bl	80006c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005dc:	f000 f8b4 	bl	8000748 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello \n");
 80005e0:	4806      	ldr	r0, [pc, #24]	@ (80005fc <main+0x3c>)
 80005e2:	f004 fca3 	bl	8004f2c <puts>

  while (1)
  {
    /* USER CODE END WHILE */
    
    if (esp32_data_ready)
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <main+0x40>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0fb      	beq.n	80005e6 <main+0x26>
	      {
	          esp32_data_ready = 0;
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <main+0x40>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	          // do the read
	          SlaveDataReady_Callback();
 80005f4:	f000 fa0e 	bl	8000a14 <SlaveDataReady_Callback>
    if (esp32_data_ready)
 80005f8:	e7f5      	b.n	80005e6 <main+0x26>
 80005fa:	bf00      	nop
 80005fc:	08005c70 	.word	0x08005c70
 8000600:	200001f4 	.word	0x200001f4

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	@ 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	@ 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fd6a 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800062a:	f001 fe23 	bl	8002274 <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 f9e8 	bl	8000a08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000638:	f001 fdfe 	bl	8002238 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800063c:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <SystemClock_Config+0xc0>)
 800063e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000642:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <SystemClock_Config+0xc0>)
 8000644:	f023 0318 	bic.w	r3, r3, #24
 8000648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800064c:	2314      	movs	r3, #20
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065c:	2360      	movs	r3, #96	@ 0x60
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000664:	2301      	movs	r3, #1
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800066c:	2318      	movs	r3, #24
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fe4d 	bl	8002320 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800068c:	f000 f9bc 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2303      	movs	r3, #3
 8000696:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa4d 	bl	8002b48 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006b4:	f000 f9a8 	bl	8000a08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b8:	f002 fe60 	bl	800337c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	@ 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	480e      	ldr	r0, [pc, #56]	@ (800073c <MX_I2C1_Init+0x74>)
 8000704:	f001 f8f6 	bl	80018f4 <HAL_I2C_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 f97b 	bl	8000a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <MX_I2C1_Init+0x74>)
 8000716:	f001 fcf7 	bl	8002108 <HAL_I2CEx_ConfigAnalogFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f972 	bl	8000a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_I2C1_Init+0x74>)
 8000728:	f001 fd39 	bl	800219e <HAL_I2CEx_ConfigDigitalFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f969 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084
 8000740:	40005400 	.word	0x40005400
 8000744:	10805d88 	.word	0x10805d88

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	@ 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077a:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <MX_TIM2_Init+0x100>)
 800077c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <MX_TIM2_Init+0x100>)
 8000784:	f240 3283 	movw	r2, #899	@ 0x383
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <MX_TIM2_Init+0x100>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000790:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <MX_TIM2_Init+0x100>)
 8000792:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_TIM2_Init+0x100>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <MX_TIM2_Init+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a4:	4828      	ldr	r0, [pc, #160]	@ (8000848 <MX_TIM2_Init+0x100>)
 80007a6:	f002 feeb 	bl	8003580 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007b0:	f000 f92a 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007be:	4619      	mov	r1, r3
 80007c0:	4821      	ldr	r0, [pc, #132]	@ (8000848 <MX_TIM2_Init+0x100>)
 80007c2:	f003 f8a9 	bl	8003918 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007cc:	f000 f91c 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d0:	481d      	ldr	r0, [pc, #116]	@ (8000848 <MX_TIM2_Init+0x100>)
 80007d2:	f002 ff2c 	bl	800362e <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007dc:	f000 f914 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	@ (8000848 <MX_TIM2_Init+0x100>)
 80007f0:	f003 fce4 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007fa:	f000 f905 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fe:	2360      	movs	r3, #96	@ 0x60
 8000800:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_TIM2_Init+0x100>)
 8000816:	f002 ff6b 	bl	80036f0 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000820:	f000 f8f2 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <MX_TIM2_Init+0x100>)
 800082c:	f002 ff60 	bl	80036f0 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000836:	f000 f8e7 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_TIM2_Init+0x100>)
 800083c:	f000 f9f4 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	@ 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000120 	.word	0x20000120

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000890:	f003 fcfa 	bl	8004288 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f8b5 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000016c 	.word	0x2000016c
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_DMA_Init+0x38>)
 80008b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008b6:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <MX_DMA_Init+0x38>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_DMA_Init+0x38>)
 80008c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 fcd7 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008d4:	2011      	movs	r0, #17
 80008d6:	f000 fcf0 	bl	80012ba <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b40      	ldr	r3, [pc, #256]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a3f      	ldr	r2, [pc, #252]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a00 <MX_GPIO_Init+0x118>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b3a      	ldr	r3, [pc, #232]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a39      	ldr	r2, [pc, #228]	@ (8000a00 <MX_GPIO_Init+0x118>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b37      	ldr	r3, [pc, #220]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b34      	ldr	r3, [pc, #208]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a33      	ldr	r2, [pc, #204]	@ (8000a00 <MX_GPIO_Init+0x118>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_GPIO_Init+0x118>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 ffa0 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	210a      	movs	r1, #10
 8000958:	482a      	ldr	r0, [pc, #168]	@ (8000a04 <MX_GPIO_Init+0x11c>)
 800095a:	f000 ff9b 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 800095e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fe21 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097e:	2301      	movs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000982:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0x11c>)
 8000994:	f000 fe14 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000998:	230a      	movs	r3, #10
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4815      	ldr	r0, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0x11c>)
 80009b0:	f000 fe06 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 80009b4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009cc:	f000 fdf8 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 80009d0:	2330      	movs	r3, #48	@ 0x30
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <MX_GPIO_Init+0x11c>)
 80009e4:	f000 fdec 	bl	80015c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2006      	movs	r0, #6
 80009ee:	f000 fc48 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 fc61 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 4, 100) == HAL_OK)
 8000a22:	1d3a      	adds	r2, r7, #4
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2304      	movs	r3, #4
 8000a2a:	21c0      	movs	r1, #192	@ 0xc0
 8000a2c:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <SlaveDataReady_Callback+0x64>)
 8000a2e:	f000 fffd 	bl	8001a2c <HAL_I2C_Master_Receive>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d117      	bne.n	8000a68 <SlaveDataReady_Callback+0x54>
    {
        printf("Received from ESP32 1:");
 8000a38:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <SlaveDataReady_Callback+0x68>)
 8000a3a:	f004 fa07 	bl	8004e4c <iprintf>
        for(int i=0; i<8; i++){
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e00a      	b.n	8000a5a <SlaveDataReady_Callback+0x46>
        	printf("0x%02X ", rxBuffer[i]);
 8000a44:	1d3a      	adds	r2, r7, #4
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <SlaveDataReady_Callback+0x6c>)
 8000a50:	f004 f9fc 	bl	8004e4c <iprintf>
        for(int i=0; i<8; i++){
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	ddf1      	ble.n	8000a44 <SlaveDataReady_Callback+0x30>
        }
        printf("\n");
 8000a60:	200a      	movs	r0, #10
 8000a62:	f004 fa05 	bl	8004e70 <putchar>
    }
    else
    {
        printf("I2C read error ESP 1\n");
    }
}
 8000a66:	e002      	b.n	8000a6e <SlaveDataReady_Callback+0x5a>
        printf("I2C read error ESP 1\n");
 8000a68:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <SlaveDataReady_Callback+0x70>)
 8000a6a:	f004 fa5f 	bl	8004f2c <puts>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	08005c78 	.word	0x08005c78
 8000a80:	08005c90 	.word	0x08005c90
 8000a84:	08005c98 	.word	0x08005c98

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	@ (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09e      	sub	sp, #120	@ 0x78
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2254      	movs	r2, #84	@ 0x54
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 fafb 	bl	80050ec <memset>
  if(hi2c->Instance==I2C1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a37      	ldr	r2, [pc, #220]	@ (8000bd8 <HAL_I2C_MspInit+0x108>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d166      	bne.n	8000bce <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b00:	2340      	movs	r3, #64	@ 0x40
 8000b02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fa3f 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b18:	f7ff ff76 	bl	8000a08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a2e      	ldr	r2, [pc, #184]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b28:	4b2c      	ldr	r3, [pc, #176]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b34:	23c0      	movs	r3, #192	@ 0xc0
 8000b36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4824      	ldr	r0, [pc, #144]	@ (8000be0 <HAL_I2C_MspInit+0x110>)
 8000b50:	f000 fd36 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_I2C_MspInit+0x10c>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000be8 <HAL_I2C_MspInit+0x118>)
 8000b70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ba2:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000ba4:	f000 fba4 	bl	80012f0 <HAL_DMA_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 8000bae:	f7ff ff2b 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_I2C_MspInit+0x114>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	201f      	movs	r0, #31
 8000bc4:	f000 fb5d 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bc8:	201f      	movs	r0, #31
 8000bca:	f000 fb76 	bl	80012ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3778      	adds	r7, #120	@ 0x78
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	200000d8 	.word	0x200000d8
 8000be8:	40020080 	.word	0x40020080

08000bec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bfc:	d10b      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_TIM_Base_MspInit+0x38>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_TIM_Base_MspInit+0x38>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_TIM_Base_MspInit+0x38>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c48:	d11c      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <HAL_TIM_MspPostInit+0x64>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <HAL_TIM_MspPostInit+0x64>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_TIM_MspPostInit+0x64>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 8000c62:	2322      	movs	r3, #34	@ 0x22
 8000c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f000 fc9e 	bl	80015c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09e      	sub	sp, #120	@ 0x78
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2254      	movs	r2, #84	@ 0x54
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fa1b 	bl	80050ec <memset>
  if(huart->Instance==USART2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a28      	ldr	r2, [pc, #160]	@ (8000d5c <HAL_UART_MspInit+0xcc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d148      	bne.n	8000d52 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 f95f 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd8:	f7ff fe96 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xd0>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f000 fc49 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d40:	2303      	movs	r3, #3
 8000d42:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f000 fc37 	bl	80015c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d52:	bf00      	nop
 8000d54:	3778      	adds	r7, #120	@ 0x78
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f967 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <DMA1_Channel7_IRQHandler+0x10>)
 8000dca:	f000 fb49 	bl	8001460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000d8 	.word	0x200000d8

08000dd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <I2C1_EV_IRQHandler+0x10>)
 8000dde:	f000 ff1b 	bl	8001c18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000084 	.word	0x20000084

08000dec <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fd67 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
    }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001f4 	.word	0x200001f4

08000e24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
  }

  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb8f 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
  }
  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f004 f92a 	bl	8005188 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000c000 	.word	0x2000c000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	20000350 	.word	0x20000350

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f004 f8e9 	bl	8005194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fafd 	bl	80005c0 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd4:	08005d3c 	.word	0x08005d3c
  ldr r2, =_sbss
 8000fd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fdc:	2000034c 	.word	0x2000034c

08000fe0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f93d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fd40 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_InitTick+0x70>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f949 	bl	80012d6 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f913 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_InitTick+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e007      	b.n	8001074 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e004      	b.n	8001074 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e001      	b.n	8001074 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000000 	.word	0x20000000
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	200001fc 	.word	0x200001fc

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e098      	b.n	8001434 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_DMA_Init+0x150>)
 800130a:	429a      	cmp	r2, r3
 800130c:	d80f      	bhi.n	800132e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <HAL_DMA_Init+0x154>)
 8001316:	4413      	add	r3, r2
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_DMA_Init+0x158>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	009a      	lsls	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a48      	ldr	r2, [pc, #288]	@ (800144c <HAL_DMA_Init+0x15c>)
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40
 800132c:	e00e      	b.n	800134c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b46      	ldr	r3, [pc, #280]	@ (8001450 <HAL_DMA_Init+0x160>)
 8001336:	4413      	add	r3, r2
 8001338:	4a43      	ldr	r2, [pc, #268]	@ (8001448 <HAL_DMA_Init+0x158>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a42      	ldr	r2, [pc, #264]	@ (8001454 <HAL_DMA_Init+0x164>)
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013a6:	d039      	beq.n	800141c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_DMA_Init+0x15c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11a      	bne.n	80013e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <HAL_DMA_Init+0x168>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f003 031c 	and.w	r3, r3, #28
 80013be:	210f      	movs	r1, #15
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4924      	ldr	r1, [pc, #144]	@ (8001458 <HAL_DMA_Init+0x168>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_DMA_Init+0x168>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	f003 031c 	and.w	r3, r3, #28
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	491d      	ldr	r1, [pc, #116]	@ (8001458 <HAL_DMA_Init+0x168>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
 80013e6:	e019      	b.n	800141c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_DMA_Init+0x16c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f0:	f003 031c 	and.w	r3, r3, #28
 80013f4:	210f      	movs	r1, #15
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4917      	ldr	r1, [pc, #92]	@ (800145c <HAL_DMA_Init+0x16c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_DMA_Init+0x16c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f003 031c 	and.w	r3, r3, #28
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	4911      	ldr	r1, [pc, #68]	@ (800145c <HAL_DMA_Init+0x16c>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40020407 	.word	0x40020407
 8001444:	bffdfff8 	.word	0xbffdfff8
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	40020000 	.word	0x40020000
 8001450:	bffdfbf8 	.word	0xbffdfbf8
 8001454:	40020400 	.word	0x40020400
 8001458:	400200a8 	.word	0x400200a8
 800145c:	400204a8 	.word	0x400204a8

08001460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	f003 031c 	and.w	r3, r3, #28
 8001480:	2204      	movs	r2, #4
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d026      	beq.n	80014da <HAL_DMA_IRQHandler+0x7a>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d021      	beq.n	80014da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0204 	bic.w	r2, r2, #4
 80014b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b8:	f003 021c 	and.w	r2, r3, #28
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	2104      	movs	r1, #4
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d071      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014d8:	e06c      	b.n	80015b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f003 031c 	and.w	r3, r3, #28
 80014e2:	2202      	movs	r2, #2
 80014e4:	409a      	lsls	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d02e      	beq.n	800154c <HAL_DMA_IRQHandler+0xec>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d029      	beq.n	800154c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10b      	bne.n	800151e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020a 	bic.w	r2, r2, #10
 8001514:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f003 021c 	and.w	r2, r3, #28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	2102      	movs	r1, #2
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d038      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800154a:	e033      	b.n	80015b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	f003 031c 	and.w	r3, r3, #28
 8001554:	2208      	movs	r2, #8
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02a      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x156>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d025      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f003 021c 	and.w	r2, r3, #28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
}
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e148      	b.n	8001862 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 813a 	beq.w	800185c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d005      	beq.n	8001600 <HAL_GPIO_Init+0x40>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d130      	bne.n	8001662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001636:	2201      	movs	r2, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 0201 	and.w	r2, r3, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b03      	cmp	r3, #3
 800166c:	d017      	beq.n	800169e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d123      	bne.n	80016f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	6939      	ldr	r1, [r7, #16]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0203 	and.w	r2, r3, #3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8094 	beq.w	800185c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_GPIO_Init+0x2c0>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	4a51      	ldr	r2, [pc, #324]	@ (8001880 <HAL_GPIO_Init+0x2c0>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001740:	4b4f      	ldr	r3, [pc, #316]	@ (8001880 <HAL_GPIO_Init+0x2c0>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800174c:	4a4d      	ldr	r2, [pc, #308]	@ (8001884 <HAL_GPIO_Init+0x2c4>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1d4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a43      	ldr	r2, [pc, #268]	@ (8001888 <HAL_GPIO_Init+0x2c8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1d0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a42      	ldr	r2, [pc, #264]	@ (800188c <HAL_GPIO_Init+0x2cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1cc>
 8001788:	2302      	movs	r3, #2
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 800178c:	2307      	movs	r3, #7
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1d6>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	@ (8001884 <HAL_GPIO_Init+0x2c4>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b4:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001802:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800182c:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <HAL_GPIO_Init+0x2d0>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aeaf 	bne.w	80015d0 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fa8a 	bl	8000dfc <HAL_GPIO_EXTI_Callback>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e08d      	b.n	8001a22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f8d8 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2224      	movs	r2, #36	@ 0x24
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e006      	b.n	800197c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800197a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d108      	bne.n	8001996 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	e007      	b.n	80019a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69d9      	ldr	r1, [r3, #28]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	f040 80db 	bne.w	8001c04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2C_Master_Receive+0x30>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0d4      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff fb26 	bl	80010b4 <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2319      	movs	r3, #25
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f90c 	bl	8001c94 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0bf      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2222      	movs	r2, #34	@ 0x22
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	893a      	ldrh	r2, [r7, #8]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2bff      	cmp	r3, #255	@ 0xff
 8001ab6:	d90e      	bls.n	8001ad6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	8979      	ldrh	r1, [r7, #10]
 8001ac6:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_I2C_Master_Receive+0x1e4>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fae8 	bl	80020a4 <I2C_TransferConfig>
 8001ad4:	e06d      	b.n	8001bb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	8979      	ldrh	r1, [r7, #10]
 8001ae8:	4b49      	ldr	r3, [pc, #292]	@ (8001c10 <HAL_I2C_Master_Receive+0x1e4>)
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 fad7 	bl	80020a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001af6:	e05c      	b.n	8001bb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f965 	bl	8001dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e07c      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d034      	beq.n	8001bb2 <HAL_I2C_Master_Receive+0x186>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d130      	bne.n	8001bb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f89a 	bl	8001c94 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e04d      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2bff      	cmp	r3, #255	@ 0xff
 8001b72:	d90e      	bls.n	8001b92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	22ff      	movs	r2, #255	@ 0xff
 8001b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	2300      	movs	r3, #0
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fa8a 	bl	80020a4 <I2C_TransferConfig>
 8001b90:	e00f      	b.n	8001bb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	8979      	ldrh	r1, [r7, #10]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fa79 	bl	80020a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d19d      	bne.n	8001af8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f8c0 	bl	8001d46 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e01a      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <HAL_I2C_Master_Receive+0x1e8>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	80002400 	.word	0x80002400
 8001c14:	fe00e800 	.word	0xfe00e800

08001c18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
  }
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d103      	bne.n	8001c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d007      	beq.n	8001c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	619a      	str	r2, [r3, #24]
  }
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca4:	e03b      	b.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f91a 	bl	8001ee4 <I2C_IsErrorOccurred>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d02d      	beq.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f9f7 	bl	80010b4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d122      	bne.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d113      	bne.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4013      	ands	r3, r2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d0b4      	beq.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d52:	e02f      	b.n	8001db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f8c3 	bl	8001ee4 <I2C_IsErrorOccurred>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e02d      	b.n	8001dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d68:	f7ff f9a4 	bl	80010b4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d302      	bcc.n	8001d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11a      	bne.n	8001db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d013      	beq.n	8001db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d1c8      	bne.n	8001d54 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001ddc:	e071      	b.n	8001ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f87e 	bl	8001ee4 <I2C_IsErrorOccurred>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d13b      	bne.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d138      	bne.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d105      	bne.n	8001e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d121      	bne.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2210      	movs	r2, #16
 8001e34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2220      	movs	r2, #32
 8001e42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001e50:	400b      	ands	r3, r1
 8001e52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
 8001e70:	e002      	b.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e78:	f7ff f91c 	bl	80010b4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d302      	bcc.n	8001e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d119      	bne.n	8001ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d116      	bne.n	8001ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00f      	beq.n	8001ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d002      	beq.n	8001ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d083      	beq.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	fe00e800 	.word	0xfe00e800

08001ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d068      	beq.n	8001fe2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f18:	e049      	b.n	8001fae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d045      	beq.n	8001fae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7ff f8c7 	bl	80010b4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_IsErrorOccurred+0x54>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d13a      	bne.n	8001fae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f5a:	d121      	bne.n	8001fa0 <I2C_IsErrorOccurred+0xbc>
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f62:	d01d      	beq.n	8001fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d01a      	beq.n	8001fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f7a:	f7ff f89b 	bl	80010b4 <HAL_GetTick>
 8001f7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f80:	e00e      	b.n	8001fa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f82:	f7ff f897 	bl	80010b4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b19      	cmp	r3, #25
 8001f8e:	d907      	bls.n	8001fa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f043 0320 	orr.w	r3, r3, #32
 8001f96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f9e:	e006      	b.n	8001fae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d1e9      	bne.n	8001f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d003      	beq.n	8001fc4 <I2C_IsErrorOccurred+0xe0>
 8001fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0aa      	beq.n	8001f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01c      	beq.n	8002092 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff fdf7 	bl	8001c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <I2C_IsErrorOccurred+0x1bc>)
 800206a:	400b      	ands	r3, r1
 800206c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	431a      	orrs	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002096:	4618      	mov	r0, r3
 8002098:	3728      	adds	r7, #40	@ 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	fe00e800 	.word	0xfe00e800

080020a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	817b      	strh	r3, [r7, #10]
 80020b2:	4613      	mov	r3, r2
 80020b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020bc:	7a7b      	ldrb	r3, [r7, #9]
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	0d5b      	lsrs	r3, r3, #21
 80020de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020e2:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <I2C_TransferConfig+0x60>)
 80020e4:	430b      	orrs	r3, r1
 80020e6:	43db      	mvns	r3, r3
 80020e8:	ea02 0103 	and.w	r1, r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	03ff63ff 	.word	0x03ff63ff

08002108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d138      	bne.n	8002190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002128:	2302      	movs	r3, #2
 800212a:	e032      	b.n	8002192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800215a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d139      	bne.n	8002228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021be:	2302      	movs	r3, #2
 80021c0:	e033      	b.n	800222a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2224      	movs	r2, #36	@ 0x24
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007000 	.word	0x40007000

08002258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_PWREx_GetVoltageRange+0x18>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000

08002274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002282:	d130      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800228c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002290:	d038      	beq.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2232      	movs	r2, #50	@ 0x32
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	3301      	adds	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b8:	e002      	b.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022cc:	d102      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f2      	bne.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e0:	d110      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e00f      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	d007      	beq.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022fc:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40007000 	.word	0x40007000
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 bc02 	b.w	8002b38 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002334:	4b96      	ldr	r3, [pc, #600]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233e:	4b94      	ldr	r3, [pc, #592]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80e4 	beq.w	800251e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_RCC_OscConfig+0x4c>
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	f040 808b 	bne.w	800247a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 8087 	bne.w	800247a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800236c:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x64>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e3d9      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	4b81      	ldr	r3, [pc, #516]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_RCC_OscConfig+0x7e>
 8002394:	4b7e      	ldr	r3, [pc, #504]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239c:	e005      	b.n	80023aa <HAL_RCC_OscConfig+0x8a>
 800239e:	4b7c      	ldr	r3, [pc, #496]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d223      	bcs.n	80023f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fd8c 	bl	8002ed0 <RCC_SetFlashLatencyFromMSIRange>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e3ba      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c2:	4b73      	ldr	r3, [pc, #460]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a72      	ldr	r2, [pc, #456]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b70      	ldr	r3, [pc, #448]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	496d      	ldr	r1, [pc, #436]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4968      	ldr	r1, [pc, #416]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e025      	b.n	8002442 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f6:	4b66      	ldr	r3, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a65      	ldr	r2, [pc, #404]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b63      	ldr	r3, [pc, #396]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4960      	ldr	r1, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002414:	4b5e      	ldr	r3, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	495b      	ldr	r1, [pc, #364]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fd4c 	bl	8002ed0 <RCC_SetFlashLatencyFromMSIRange>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e37a      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002442:	f000 fc81 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b51      	ldr	r3, [pc, #324]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4950      	ldr	r1, [pc, #320]	@ (8002594 <HAL_RCC_OscConfig+0x274>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a4e      	ldr	r2, [pc, #312]	@ (8002598 <HAL_RCC_OscConfig+0x278>)
 8002460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002462:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <HAL_RCC_OscConfig+0x27c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fdd4 	bl	8001014 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d052      	beq.n	800251c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	e35e      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d032      	beq.n	80024e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002482:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a42      	ldr	r2, [pc, #264]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248e:	f7fe fe11 	bl	80010b4 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002496:	f7fe fe0d 	bl	80010b4 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e347      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b4:	4b36      	ldr	r3, [pc, #216]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a35      	ldr	r2, [pc, #212]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b33      	ldr	r3, [pc, #204]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4930      	ldr	r1, [pc, #192]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	492b      	ldr	r1, [pc, #172]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e01a      	b.n	800251e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fdde 	bl	80010b4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fc:	f7fe fdda 	bl	80010b4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e314      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1dc>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d073      	beq.n	8002612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x21c>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d10e      	bne.n	8002554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d10b      	bne.n	8002554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d063      	beq.n	8002610 <HAL_RCC_OscConfig+0x2f0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15f      	bne.n	8002610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e2f1      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d106      	bne.n	800256c <HAL_RCC_OscConfig+0x24c>
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e025      	b.n	80025b8 <HAL_RCC_OscConfig+0x298>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002574:	d114      	bne.n	80025a0 <HAL_RCC_OscConfig+0x280>
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a02      	ldr	r2, [pc, #8]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e013      	b.n	80025b8 <HAL_RCC_OscConfig+0x298>
 8002590:	40021000 	.word	0x40021000
 8002594:	08005cb0 	.word	0x08005cb0
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004
 80025a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd78 	bl	80010b4 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fd74 	bl	80010b4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2ae      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025da:	4b92      	ldr	r3, [pc, #584]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2a8>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fd64 	bl	80010b4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fd60 	bl	80010b4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e29a      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002602:	4b88      	ldr	r3, [pc, #544]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2d0>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d060      	beq.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x310>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d119      	bne.n	800265e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d116      	bne.n	800265e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002630:	4b7c      	ldr	r3, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_OscConfig+0x328>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e277      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	4973      	ldr	r1, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265c:	e040      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d023      	beq.n	80026ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002666:	4b6f      	ldr	r3, [pc, #444]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6e      	ldr	r2, [pc, #440]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fd1f 	bl	80010b4 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fd1b 	bl	80010b4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e255      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b62      	ldr	r3, [pc, #392]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	495f      	ldr	r1, [pc, #380]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fcfb 	bl	80010b4 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe fcf7 	bl	80010b4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e231      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03c      	beq.n	8002766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fcd6 	bl	80010b4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe fcd2 	bl	80010b4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e20c      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x3ec>
 800272c:	e01b      	b.n	8002766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002734:	4a3b      	ldr	r2, [pc, #236]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fcb9 	bl	80010b4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe fcb5 	bl	80010b4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1ef      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ef      	bne.n	8002746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80a6 	beq.w	80028c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002778:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279c:	2301      	movs	r3, #1
 800279e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d118      	bne.n	80027de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b8:	f7fe fc7c 	bl	80010b4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe fc78 	bl	80010b4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1b2      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4d8>
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f6:	e029      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d115      	bne.n	800282c <HAL_RCC_OscConfig+0x50c>
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	4a03      	ldr	r2, [pc, #12]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	4b9a      	ldr	r3, [pc, #616]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a99      	ldr	r2, [pc, #612]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800283c:	4b96      	ldr	r3, [pc, #600]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a95      	ldr	r2, [pc, #596]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fc2e 	bl	80010b4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fc2a 	bl	80010b4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e162      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002872:	4b89      	ldr	r3, [pc, #548]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ed      	beq.n	800285c <HAL_RCC_OscConfig+0x53c>
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fc17 	bl	80010b4 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fc13 	bl	80010b4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e14b      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ed      	bne.n	800288a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b78      	ldr	r3, [pc, #480]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4a77      	ldr	r2, [pc, #476]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b70      	ldr	r3, [pc, #448]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80028d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028da:	4a6f      	ldr	r2, [pc, #444]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe fbe6 	bl	80010b4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ec:	f7fe fbe2 	bl	80010b4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e11c      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028fe:	4b66      	ldr	r3, [pc, #408]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x5cc>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800290e:	4b62      	ldr	r3, [pc, #392]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002914:	4a60      	ldr	r2, [pc, #384]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fbc9 	bl	80010b4 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fe fbc5 	bl	80010b4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0ff      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002938:	4b57      	ldr	r3, [pc, #348]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 800293a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80f3 	beq.w	8002b36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 80c9 	bne.w	8002aec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	429a      	cmp	r2, r3
 800296c:	d12c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	3b01      	subs	r3, #1
 800297a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d123      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d11b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d113      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d06b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d062      	beq.n	8002a94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ce:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0ac      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029de:	4b2e      	ldr	r3, [pc, #184]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ea:	f7fe fb63 	bl	80010b4 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe fb5f 	bl	80010b4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e099      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a10:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_RCC_OscConfig+0x77c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a2a:	0212      	lsls	r2, r2, #8
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a32:	0852      	lsrs	r2, r2, #1
 8002a34:	3a01      	subs	r2, #1
 8002a36:	0552      	lsls	r2, r2, #21
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a3e:	0852      	lsrs	r2, r2, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	0652      	lsls	r2, r2, #25
 8002a44:	4311      	orrs	r1, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a4a:	06d2      	lsls	r2, r2, #27
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	4912      	ldr	r1, [pc, #72]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a60:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a6c:	f7fe fb22 	bl	80010b4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fb1e 	bl	80010b4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e058      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a92:	e050      	b.n	8002b36 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04f      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d144      	bne.n	8002b36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aac:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab8:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac4:	f7fe faf6 	bl	80010b4 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe faf2 	bl	80010b4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e02c      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x7ac>
 8002aea:	e024      	b.n	8002b36 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d01f      	beq.n	8002b32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fad9 	bl	80010b4 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fad5 	bl	80010b4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e00f      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4905      	ldr	r1, [pc, #20]	@ (8002b40 <HAL_RCC_OscConfig+0x820>)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x824>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60cb      	str	r3, [r1, #12]
 8002b30:	e001      	b.n	8002b36 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	feeefffc 	.word	0xfeeefffc

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0e7      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b75      	ldr	r3, [pc, #468]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4970      	ldr	r1, [pc, #448]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0cf      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d908      	bls.n	8002bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b63      	ldr	r3, [pc, #396]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4960      	ldr	r1, [pc, #384]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04c      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b5a      	ldr	r3, [pc, #360]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d121      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a6      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	4b54      	ldr	r3, [pc, #336]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e09a      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e08e      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e086      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4943      	ldr	r1, [pc, #268]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe fa40 	bl	80010b4 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fa3c 	bl	80010b4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e06e      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d208      	bcs.n	8002c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	492b      	ldr	r1, [pc, #172]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8e:	4b29      	ldr	r3, [pc, #164]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d210      	bcs.n	8002cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	4923      	ldr	r1, [pc, #140]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e036      	b.n	8002d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4918      	ldr	r1, [pc, #96]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4910      	ldr	r1, [pc, #64]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfc:	f000 f824 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	490b      	ldr	r1, [pc, #44]	@ (8002d3c <HAL_RCC_ClockConfig+0x1f4>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1fc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f977 	bl	8001014 <HAL_InitTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08005cb0 	.word	0x08005cb0
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d60:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d121      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d11e      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d7c:	4b34      	ldr	r3, [pc, #208]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d88:	4b31      	ldr	r3, [pc, #196]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d98:	4b2d      	ldr	r3, [pc, #180]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002da4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dcc:	4b23      	ldr	r3, [pc, #140]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d134      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0xa6>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d003      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0xac>
 8002dec:	e005      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df0:	617b      	str	r3, [r7, #20]
      break;
 8002df2:	e005      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002df6:	617b      	str	r3, [r7, #20]
      break;
 8002df8:	e002      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	617b      	str	r3, [r7, #20]
      break;
 8002dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	0e5b      	lsrs	r3, r3, #25
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	3301      	adds	r3, #1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e40:	69bb      	ldr	r3, [r7, #24]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	@ 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08005cc8 	.word	0x08005cc8
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	007a1200 	.word	0x007a1200

08002e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4904      	ldr	r1, [pc, #16]	@ (8002ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08005cc0 	.word	0x08005cc0

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea8:	f7ff ffda 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0adb      	lsrs	r3, r3, #11
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4904      	ldr	r1, [pc, #16]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	08005cc0 	.word	0x08005cc0

08002ed0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002edc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ee8:	f7ff f9b6 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 8002eec:	6178      	str	r0, [r7, #20]
 8002eee:	e014      	b.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	4a24      	ldr	r2, [pc, #144]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efc:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f08:	f7ff f9a6 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 8002f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f20:	d10b      	bne.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b80      	cmp	r3, #128	@ 0x80
 8002f26:	d919      	bls.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f2c:	d902      	bls.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f2e:	2302      	movs	r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e013      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e010      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d902      	bls.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f40:	2303      	movs	r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e00a      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b80      	cmp	r3, #128	@ 0x80
 8002f4a:	d102      	bne.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e004      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b70      	cmp	r3, #112	@ 0x70
 8002f56:	d101      	bne.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4909      	ldr	r1, [pc, #36]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40022000 	.word	0x40022000

08002f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d031      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fb4:	d01a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fba:	d814      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd2:	e00c      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f9de 	bl	800339c <RCCEx_PLLSAI1_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe4:	e003      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8002fea:	e000      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff4:	4b51      	ldr	r3, [pc, #324]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003002:	494e      	ldr	r1, [pc, #312]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800300a:	e001      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 809e 	beq.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003022:	4b46      	ldr	r3, [pc, #280]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b40      	ldr	r3, [pc, #256]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	4a3f      	ldr	r2, [pc, #252]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003042:	6593      	str	r3, [r2, #88]	@ 0x58
 8003044:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003054:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a39      	ldr	r2, [pc, #228]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003060:	f7fe f828 	bl	80010b4 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003066:	e009      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fe f824 	bl	80010b4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d902      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	74fb      	strb	r3, [r7, #19]
        break;
 800307a:	e005      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800307c:	4b30      	ldr	r3, [pc, #192]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ef      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d15a      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800308e:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01e      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d019      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030bc:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030c6:	4b1d      	ldr	r3, [pc, #116]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	4a1b      	ldr	r2, [pc, #108]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030d6:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd ffe4 	bl	80010b4 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	e00b      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fd ffe0 	bl	80010b4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d902      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	74fb      	strb	r3, [r7, #19]
            break;
 8003106:	e006      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ec      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800311c:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003122:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312a:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003148:	7c7b      	ldrb	r3, [r7, #17]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b8a      	ldr	r3, [pc, #552]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	4a89      	ldr	r2, [pc, #548]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003166:	4b84      	ldr	r3, [pc, #528]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 0203 	bic.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4980      	ldr	r1, [pc, #512]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003188:	4b7b      	ldr	r3, [pc, #492]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 020c 	bic.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	4978      	ldr	r1, [pc, #480]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031aa:	4b73      	ldr	r3, [pc, #460]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	496f      	ldr	r1, [pc, #444]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031da:	4967      	ldr	r1, [pc, #412]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ee:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	495e      	ldr	r1, [pc, #376]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003210:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	4956      	ldr	r1, [pc, #344]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d028      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003254:	4b48      	ldr	r3, [pc, #288]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	4945      	ldr	r1, [pc, #276]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003272:	d106      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b40      	ldr	r3, [pc, #256]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a3f      	ldr	r2, [pc, #252]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
 8003280:	e011      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800328a:	d10c      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f882 	bl	800339c <RCCEx_PLLSAI1_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b2:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c0:	492d      	ldr	r1, [pc, #180]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d0:	d106      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	e011      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f853 	bl	800339c <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01c      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331e:	4916      	ldr	r1, [pc, #88]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800332e:	d10c      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f830 	bl	800339c <RCCEx_PLLSAI1_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800336c:	7cbb      	ldrb	r3, [r7, #18]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033aa:	4b74      	ldr	r3, [pc, #464]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d018      	beq.n	80033e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033b6:	4b71      	ldr	r3, [pc, #452]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d10d      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
       ||
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033ce:	4b6b      	ldr	r3, [pc, #428]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
       ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d047      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e044      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d018      	beq.n	8003422 <RCCEx_PLLSAI1_Config+0x86>
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d825      	bhi.n	8003440 <RCCEx_PLLSAI1_Config+0xa4>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <RCCEx_PLLSAI1_Config+0x62>
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d009      	beq.n	8003410 <RCCEx_PLLSAI1_Config+0x74>
 80033fc:	e020      	b.n	8003440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033fe:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11d      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340e:	e01a      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003410:	4b5a      	ldr	r3, [pc, #360]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e013      	b.n	800344a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003422:	4b56      	ldr	r3, [pc, #344]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800342e:	4b53      	ldr	r3, [pc, #332]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800343e:	e006      	b.n	800344e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e004      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800344e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003456:	4b49      	ldr	r3, [pc, #292]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	430b      	orrs	r3, r1
 800346c:	4943      	ldr	r1, [pc, #268]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d17c      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003478:	4b40      	ldr	r3, [pc, #256]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3f      	ldr	r2, [pc, #252]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fd fe16 	bl	80010b4 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800348a:	e009      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800348c:	f7fd fe12 	bl	80010b4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	73fb      	strb	r3, [r7, #15]
        break;
 800349e:	e005      	b.n	80034ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034a0:	4b36      	ldr	r3, [pc, #216]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ef      	bne.n	800348c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d15f      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d110      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b8:	4b30      	ldr	r3, [pc, #192]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	06d2      	lsls	r2, r2, #27
 80034d0:	430a      	orrs	r2, r1
 80034d2:	492a      	ldr	r1, [pc, #168]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	610b      	str	r3, [r1, #16]
 80034d8:	e027      	b.n	800352a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d112      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b26      	ldr	r3, [pc, #152]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6912      	ldr	r2, [r2, #16]
 80034f6:	0852      	lsrs	r2, r2, #1
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0552      	lsls	r2, r2, #21
 80034fc:	430a      	orrs	r2, r1
 80034fe:	491f      	ldr	r1, [pc, #124]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
 8003504:	e011      	b.n	800352a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003506:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800350e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	0211      	lsls	r1, r2, #8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6952      	ldr	r2, [r2, #20]
 800351c:	0852      	lsrs	r2, r2, #1
 800351e:	3a01      	subs	r2, #1
 8003520:	0652      	lsls	r2, r2, #25
 8003522:	430a      	orrs	r2, r1
 8003524:	4915      	ldr	r1, [pc, #84]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800352a:	4b14      	ldr	r3, [pc, #80]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a13      	ldr	r2, [pc, #76]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003534:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd fdbd 	bl	80010b4 <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800353c:	e009      	b.n	8003552 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353e:	f7fd fdb9 	bl	80010b4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d902      	bls.n	8003552 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	73fb      	strb	r3, [r7, #15]
          break;
 8003550:	e005      	b.n	800355e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003552:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ef      	beq.n	800353e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	4903      	ldr	r1, [pc, #12]	@ (800357c <RCCEx_PLLSAI1_Config+0x1e0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e049      	b.n	8003626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fb20 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fa74 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e049      	b.n	80036d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f841 	bl	80036dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 fa1d 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800370a:	2302      	movs	r3, #2
 800370c:	e0ff      	b.n	800390e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b14      	cmp	r3, #20
 800371a:	f200 80f0 	bhi.w	80038fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800371e:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003779 	.word	0x08003779
 8003728:	080038ff 	.word	0x080038ff
 800372c:	080038ff 	.word	0x080038ff
 8003730:	080038ff 	.word	0x080038ff
 8003734:	080037b9 	.word	0x080037b9
 8003738:	080038ff 	.word	0x080038ff
 800373c:	080038ff 	.word	0x080038ff
 8003740:	080038ff 	.word	0x080038ff
 8003744:	080037fb 	.word	0x080037fb
 8003748:	080038ff 	.word	0x080038ff
 800374c:	080038ff 	.word	0x080038ff
 8003750:	080038ff 	.word	0x080038ff
 8003754:	0800383b 	.word	0x0800383b
 8003758:	080038ff 	.word	0x080038ff
 800375c:	080038ff 	.word	0x080038ff
 8003760:	080038ff 	.word	0x080038ff
 8003764:	0800387d 	.word	0x0800387d
 8003768:	080038ff 	.word	0x080038ff
 800376c:	080038ff 	.word	0x080038ff
 8003770:	080038ff 	.word	0x080038ff
 8003774:	080038bd 	.word	0x080038bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa04 	bl	8003b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0208 	orr.w	r2, r2, #8
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e0a5      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa60 	bl	8003c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e084      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fab9 	bl	8003d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0204 	bic.w	r2, r2, #4
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e064      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb11 	bl	8003e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e043      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb4e 	bl	8003f24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0208 	orr.w	r2, r2, #8
 8003896:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038ba:	e023      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb86 	bl	8003fd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038fc:	e002      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
      break;
 8003902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop

08003918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_TIM_ConfigClockSource+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e0b6      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x18a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800395e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003970:	d03e      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0xd8>
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003976:	f200 8087 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397e:	f000 8086 	beq.w	8003a8e <HAL_TIM_ConfigClockSource+0x176>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003986:	d87f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 8003988:	2b70      	cmp	r3, #112	@ 0x70
 800398a:	d01a      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xaa>
 800398c:	2b70      	cmp	r3, #112	@ 0x70
 800398e:	d87b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 8003990:	2b60      	cmp	r3, #96	@ 0x60
 8003992:	d050      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x11e>
 8003994:	2b60      	cmp	r3, #96	@ 0x60
 8003996:	d877      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 8003998:	2b50      	cmp	r3, #80	@ 0x50
 800399a:	d03c      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xfe>
 800399c:	2b50      	cmp	r3, #80	@ 0x50
 800399e:	d873      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d058      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x13e>
 80039a4:	2b40      	cmp	r3, #64	@ 0x40
 80039a6:	d86f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 80039a8:	2b30      	cmp	r3, #48	@ 0x30
 80039aa:	d064      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15e>
 80039ac:	2b30      	cmp	r3, #48	@ 0x30
 80039ae:	d86b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d060      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15e>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d867      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05c      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15e>
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d05a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15e>
 80039c0:	e062      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d2:	f000 fbd3 	bl	800417c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	609a      	str	r2, [r3, #8]
      break;
 80039ee:	e04f      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a00:	f000 fbbc 	bl	800417c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e03c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 fb30 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2150      	movs	r1, #80	@ 0x50
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fb89 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a34:	e02c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 fb4f 	bl	80040e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2160      	movs	r1, #96	@ 0x60
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fb79 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e01c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fb10 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	@ 0x40
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fb69 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e00c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f000 fb60 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a86:	e003      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e000      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a30      	ldr	r2, [pc, #192]	@ (8003b80 <TIM_Base_SetConfig+0xd4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x20>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <TIM_Base_SetConfig+0xd4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x52>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x52>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a24      	ldr	r2, [pc, #144]	@ (8003b84 <TIM_Base_SetConfig+0xd8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x52>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <TIM_Base_SetConfig+0xdc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a12      	ldr	r2, [pc, #72]	@ (8003b80 <TIM_Base_SetConfig+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0xa0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a11      	ldr	r2, [pc, #68]	@ (8003b84 <TIM_Base_SetConfig+0xd8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0xa0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <TIM_Base_SetConfig+0xdc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]
  }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0201 	bic.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0302 	bic.w	r3, r3, #2
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a24      	ldr	r2, [pc, #144]	@ (8003c78 <TIM_OC1_SetConfig+0xec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_OC1_SetConfig+0x70>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a23      	ldr	r2, [pc, #140]	@ (8003c7c <TIM_OC1_SetConfig+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC1_SetConfig+0x70>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <TIM_OC1_SetConfig+0xf4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10c      	bne.n	8003c16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0308 	bic.w	r3, r3, #8
 8003c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0304 	bic.w	r3, r3, #4
 8003c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <TIM_OC1_SetConfig+0xec>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_OC1_SetConfig+0xa2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <TIM_OC1_SetConfig+0xf0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC1_SetConfig+0xa2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a15      	ldr	r2, [pc, #84]	@ (8003c80 <TIM_OC1_SetConfig+0xf4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400

08003c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 0210 	bic.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0320 	bic.w	r3, r3, #32
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10d      	bne.n	8003d04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a19      	ldr	r2, [pc, #100]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_OC2_SetConfig+0x98>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <TIM_OC2_SetConfig+0xec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC2_SetConfig+0x98>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <TIM_OC2_SetConfig+0xf0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d113      	bne.n	8003d44 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400

08003d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a21      	ldr	r2, [pc, #132]	@ (8003e5c <TIM_OC3_SetConfig+0xe4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d10d      	bne.n	8003df6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <TIM_OC3_SetConfig+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC3_SetConfig+0x96>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <TIM_OC3_SetConfig+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC3_SetConfig+0x96>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a16      	ldr	r2, [pc, #88]	@ (8003e64 <TIM_OC3_SetConfig+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d113      	bne.n	8003e36 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400

08003e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <TIM_OC4_SetConfig+0xb0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_OC4_SetConfig+0x74>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a13      	ldr	r2, [pc, #76]	@ (8003f1c <TIM_OC4_SetConfig+0xb4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_OC4_SetConfig+0x74>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <TIM_OC4_SetConfig+0xb8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d109      	bne.n	8003ef0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400

08003f24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <TIM_OC5_SetConfig+0xa4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_OC5_SetConfig+0x6a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <TIM_OC5_SetConfig+0xa8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_OC5_SetConfig+0x6a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a11      	ldr	r2, [pc, #68]	@ (8003fd0 <TIM_OC5_SetConfig+0xac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d109      	bne.n	8003fa2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400

08003fd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800401a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	051b      	lsls	r3, r3, #20
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a14      	ldr	r2, [pc, #80]	@ (800407c <TIM_OC6_SetConfig+0xa8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_OC6_SetConfig+0x6c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <TIM_OC6_SetConfig+0xac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC6_SetConfig+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a12      	ldr	r2, [pc, #72]	@ (8004084 <TIM_OC6_SetConfig+0xb0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d109      	bne.n	8004054 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400

08004088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 030a 	bic.w	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0210 	bic.w	r2, r3, #16
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	031b      	lsls	r3, r3, #12
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	431a      	orrs	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e04f      	b.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004204:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10c      	bne.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40014000 	.word	0x40014000

08004288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e040      	b.n	800431c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc fcf0 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	@ 0x24
 80042b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fade 	bl	8004890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8af 	bl	8004438 <UART_SetConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01b      	b.n	800431c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb5d 	bl	80049d4 <UART_CheckIdleState>
 800431a:	4603      	mov	r3, r0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004338:	2b20      	cmp	r3, #32
 800433a:	d177      	bne.n	800442c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_UART_Transmit+0x24>
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e070      	b.n	800442e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2221      	movs	r2, #33	@ 0x21
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435a:	f7fc feab 	bl	80010b4 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004378:	d108      	bne.n	800438c <HAL_UART_Transmit+0x68>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004394:	e02f      	b.n	80043f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	@ 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fbbf 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e03b      	b.n	800442e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c8:	b292      	uxth	r2, r2
 80043ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3302      	adds	r3, #2
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e007      	b.n	80043e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1c9      	bne.n	8004396 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	2140      	movs	r1, #64	@ 0x40
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fb89 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e005      	b.n	800442e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b08a      	sub	sp, #40	@ 0x28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4bb4      	ldr	r3, [pc, #720]	@ (8004738 <UART_SetConfig+0x300>)
 8004468:	4013      	ands	r3, r2
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004470:	430b      	orrs	r3, r1
 8004472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4aa9      	ldr	r2, [pc, #676]	@ (800473c <UART_SetConfig+0x304>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	4313      	orrs	r3, r2
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4aa0      	ldr	r2, [pc, #640]	@ (8004740 <UART_SetConfig+0x308>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d126      	bne.n	8004510 <UART_SetConfig+0xd8>
 80044c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004744 <UART_SetConfig+0x30c>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d81b      	bhi.n	8004508 <UART_SetConfig+0xd0>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <UART_SetConfig+0xa0>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044f9 	.word	0x080044f9
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	08004501 	.word	0x08004501
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e080      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80044f0:	2302      	movs	r3, #2
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e07c      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80044f8:	2304      	movs	r3, #4
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e078      	b.n	80045f2 <UART_SetConfig+0x1ba>
 8004500:	2308      	movs	r3, #8
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004506:	e074      	b.n	80045f2 <UART_SetConfig+0x1ba>
 8004508:	2310      	movs	r3, #16
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800450e:	e070      	b.n	80045f2 <UART_SetConfig+0x1ba>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a8c      	ldr	r2, [pc, #560]	@ (8004748 <UART_SetConfig+0x310>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d138      	bne.n	800458c <UART_SetConfig+0x154>
 800451a:	4b8a      	ldr	r3, [pc, #552]	@ (8004744 <UART_SetConfig+0x30c>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d82d      	bhi.n	8004584 <UART_SetConfig+0x14c>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <UART_SetConfig+0xf8>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004565 	.word	0x08004565
 8004534:	08004585 	.word	0x08004585
 8004538:	08004585 	.word	0x08004585
 800453c:	08004585 	.word	0x08004585
 8004540:	08004575 	.word	0x08004575
 8004544:	08004585 	.word	0x08004585
 8004548:	08004585 	.word	0x08004585
 800454c:	08004585 	.word	0x08004585
 8004550:	0800456d 	.word	0x0800456d
 8004554:	08004585 	.word	0x08004585
 8004558:	08004585 	.word	0x08004585
 800455c:	08004585 	.word	0x08004585
 8004560:	0800457d 	.word	0x0800457d
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e042      	b.n	80045f2 <UART_SetConfig+0x1ba>
 800456c:	2302      	movs	r3, #2
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e03e      	b.n	80045f2 <UART_SetConfig+0x1ba>
 8004574:	2304      	movs	r3, #4
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457a:	e03a      	b.n	80045f2 <UART_SetConfig+0x1ba>
 800457c:	2308      	movs	r3, #8
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e036      	b.n	80045f2 <UART_SetConfig+0x1ba>
 8004584:	2310      	movs	r3, #16
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458a:	e032      	b.n	80045f2 <UART_SetConfig+0x1ba>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6a      	ldr	r2, [pc, #424]	@ (800473c <UART_SetConfig+0x304>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d12a      	bne.n	80045ec <UART_SetConfig+0x1b4>
 8004596:	4b6b      	ldr	r3, [pc, #428]	@ (8004744 <UART_SetConfig+0x30c>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045a4:	d01a      	beq.n	80045dc <UART_SetConfig+0x1a4>
 80045a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045aa:	d81b      	bhi.n	80045e4 <UART_SetConfig+0x1ac>
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b0:	d00c      	beq.n	80045cc <UART_SetConfig+0x194>
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b6:	d815      	bhi.n	80045e4 <UART_SetConfig+0x1ac>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <UART_SetConfig+0x18c>
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c0:	d008      	beq.n	80045d4 <UART_SetConfig+0x19c>
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x1ac>
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e012      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045cc:	2302      	movs	r3, #2
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e00e      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045d4:	2304      	movs	r3, #4
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e00a      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045dc:	2308      	movs	r3, #8
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e006      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e002      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a51      	ldr	r2, [pc, #324]	@ (800473c <UART_SetConfig+0x304>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d17a      	bne.n	80046f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004600:	2b08      	cmp	r3, #8
 8004602:	d824      	bhi.n	800464e <UART_SetConfig+0x216>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x1d4>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004631 	.word	0x08004631
 8004610:	0800464f 	.word	0x0800464f
 8004614:	08004639 	.word	0x08004639
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800463f 	.word	0x0800463f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	0800464f 	.word	0x0800464f
 8004628:	0800464f 	.word	0x0800464f
 800462c:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe fc22 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b44      	ldr	r3, [pc, #272]	@ (800474c <UART_SetConfig+0x314>)
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe fb83 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8004642:	61f8      	str	r0, [r7, #28]
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8107 	beq.w	8004870 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	429a      	cmp	r2, r3
 8004670:	d305      	bcc.n	800467e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004684:	e0f4      	b.n	8004870 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2200      	movs	r2, #0
 800468a:	461c      	mov	r4, r3
 800468c:	4615      	mov	r5, r2
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	022b      	lsls	r3, r5, #8
 8004698:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800469c:	0222      	lsls	r2, r4, #8
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6849      	ldr	r1, [r1, #4]
 80046a2:	0849      	lsrs	r1, r1, #1
 80046a4:	2000      	movs	r0, #0
 80046a6:	4688      	mov	r8, r1
 80046a8:	4681      	mov	r9, r0
 80046aa:	eb12 0a08 	adds.w	sl, r2, r8
 80046ae:	eb43 0b09 	adc.w	fp, r3, r9
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c0:	4650      	mov	r0, sl
 80046c2:	4659      	mov	r1, fp
 80046c4:	f7fb fdd4 	bl	8000270 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4613      	mov	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d6:	d308      	bcc.n	80046ea <UART_SetConfig+0x2b2>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046de:	d204      	bcs.n	80046ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e0c2      	b.n	8004870 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046f0:	e0be      	b.n	8004870 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fa:	d16a      	bne.n	80047d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004700:	2b08      	cmp	r3, #8
 8004702:	d834      	bhi.n	800476e <UART_SetConfig+0x336>
 8004704:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <UART_SetConfig+0x2d4>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	08004751 	.word	0x08004751
 8004714:	08004759 	.word	0x08004759
 8004718:	0800476f 	.word	0x0800476f
 800471c:	0800475f 	.word	0x0800475f
 8004720:	0800476f 	.word	0x0800476f
 8004724:	0800476f 	.word	0x0800476f
 8004728:	0800476f 	.word	0x0800476f
 800472c:	08004767 	.word	0x08004767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fba2 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004734:	61f8      	str	r0, [r7, #28]
        break;
 8004736:	e020      	b.n	800477a <UART_SetConfig+0x342>
 8004738:	efff69f3 	.word	0xefff69f3
 800473c:	40008000 	.word	0x40008000
 8004740:	40013800 	.word	0x40013800
 8004744:	40021000 	.word	0x40021000
 8004748:	40004400 	.word	0x40004400
 800474c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe fba8 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8004754:	61f8      	str	r0, [r7, #28]
        break;
 8004756:	e010      	b.n	800477a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004758:	4b4c      	ldr	r3, [pc, #304]	@ (800488c <UART_SetConfig+0x454>)
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475e:	f7fe faf3 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8004762:	61f8      	str	r0, [r7, #28]
        break;
 8004764:	e009      	b.n	800477a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476a:	61fb      	str	r3, [r7, #28]
        break;
 800476c:	e005      	b.n	800477a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d077      	beq.n	8004870 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005a      	lsls	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	441a      	add	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d916      	bls.n	80047ca <UART_SetConfig+0x392>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a2:	d212      	bcs.n	80047ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f023 030f 	bic.w	r3, r3, #15
 80047ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	8afb      	ldrh	r3, [r7, #22]
 80047bc:	4313      	orrs	r3, r2
 80047be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	8afa      	ldrh	r2, [r7, #22]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e052      	b.n	8004870 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047d0:	e04e      	b.n	8004870 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d827      	bhi.n	800482a <UART_SetConfig+0x3f2>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0x3a8>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fb38 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004808:	61f8      	str	r0, [r7, #28]
        break;
 800480a:	e014      	b.n	8004836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fb4a 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8004810:	61f8      	str	r0, [r7, #28]
        break;
 8004812:	e010      	b.n	8004836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <UART_SetConfig+0x454>)
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e00d      	b.n	8004836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe fa95 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 800481e:	61f8      	str	r0, [r7, #28]
        break;
 8004820:	e009      	b.n	8004836 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e005      	b.n	8004836 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004834:	bf00      	nop
    }

    if (pclk != 0U)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d019      	beq.n	8004870 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	085a      	lsrs	r2, r3, #1
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d909      	bls.n	800486a <UART_SetConfig+0x432>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485c:	d205      	bcs.n	800486a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e002      	b.n	8004870 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800487c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	@ 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	00f42400 	.word	0x00f42400

08004890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01a      	beq.n	80049a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498e:	d10a      	bne.n	80049a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b098      	sub	sp, #96	@ 0x60
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e4:	f7fc fb66 	bl	80010b4 <HAL_GetTick>
 80049e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d12e      	bne.n	8004a56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a00:	2200      	movs	r2, #0
 8004a02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f88c 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d021      	beq.n	8004a56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e6      	bne.n	8004a12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e062      	b.n	8004b1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d149      	bne.n	8004af8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f856 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d03c      	beq.n	8004af8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e6      	bne.n	8004a7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad0:	61fa      	str	r2, [r7, #28]
 8004ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e011      	b.n	8004b1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3758      	adds	r7, #88	@ 0x58
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b34:	e04f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d04b      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fc fab9 	bl	80010b4 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e04e      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d037      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b80      	cmp	r3, #128	@ 0x80
 8004b6a:	d034      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b40      	cmp	r3, #64	@ 0x40
 8004b70:	d031      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d110      	bne.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2208      	movs	r2, #8
 8004b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f838 	bl	8004bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2208      	movs	r2, #8
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e029      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb0:	d111      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f81e 	bl	8004bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e00f      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d0a0      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b095      	sub	sp, #84	@ 0x54
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d118      	bne.n	8004ca6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0310 	bic.w	r3, r3, #16
 8004c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e6      	bne.n	8004c74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cba:	bf00      	nop
 8004cbc:	3754      	adds	r7, #84	@ 0x54
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <std>:
 8004cc8:	2300      	movs	r3, #0
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	4604      	mov	r4, r0
 8004cce:	e9c0 3300 	strd	r3, r3, [r0]
 8004cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cd6:	6083      	str	r3, [r0, #8]
 8004cd8:	8181      	strh	r1, [r0, #12]
 8004cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cdc:	81c2      	strh	r2, [r0, #14]
 8004cde:	6183      	str	r3, [r0, #24]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	305c      	adds	r0, #92	@ 0x5c
 8004ce6:	f000 fa01 	bl	80050ec <memset>
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <std+0x58>)
 8004cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cee:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <std+0x5c>)
 8004cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <std+0x60>)
 8004cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d2c <std+0x64>)
 8004cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004d30 <std+0x68>)
 8004cfc:	6224      	str	r4, [r4, #32]
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d006      	beq.n	8004d10 <std+0x48>
 8004d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d06:	4294      	cmp	r4, r2
 8004d08:	d002      	beq.n	8004d10 <std+0x48>
 8004d0a:	33d0      	adds	r3, #208	@ 0xd0
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	d105      	bne.n	8004d1c <std+0x54>
 8004d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d18:	f000 ba60 	b.w	80051dc <__retarget_lock_init_recursive>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	bf00      	nop
 8004d20:	08004f3d 	.word	0x08004f3d
 8004d24:	08004f5f 	.word	0x08004f5f
 8004d28:	08004f97 	.word	0x08004f97
 8004d2c:	08004fbb 	.word	0x08004fbb
 8004d30:	20000200 	.word	0x20000200

08004d34 <stdio_exit_handler>:
 8004d34:	4a02      	ldr	r2, [pc, #8]	@ (8004d40 <stdio_exit_handler+0xc>)
 8004d36:	4903      	ldr	r1, [pc, #12]	@ (8004d44 <stdio_exit_handler+0x10>)
 8004d38:	4803      	ldr	r0, [pc, #12]	@ (8004d48 <stdio_exit_handler+0x14>)
 8004d3a:	f000 b869 	b.w	8004e10 <_fwalk_sglue>
 8004d3e:	bf00      	nop
 8004d40:	2000000c 	.word	0x2000000c
 8004d44:	08005a79 	.word	0x08005a79
 8004d48:	2000001c 	.word	0x2000001c

08004d4c <cleanup_stdio>:
 8004d4c:	6841      	ldr	r1, [r0, #4]
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <cleanup_stdio+0x34>)
 8004d50:	4299      	cmp	r1, r3
 8004d52:	b510      	push	{r4, lr}
 8004d54:	4604      	mov	r4, r0
 8004d56:	d001      	beq.n	8004d5c <cleanup_stdio+0x10>
 8004d58:	f000 fe8e 	bl	8005a78 <_fflush_r>
 8004d5c:	68a1      	ldr	r1, [r4, #8]
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <cleanup_stdio+0x38>)
 8004d60:	4299      	cmp	r1, r3
 8004d62:	d002      	beq.n	8004d6a <cleanup_stdio+0x1e>
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 fe87 	bl	8005a78 <_fflush_r>
 8004d6a:	68e1      	ldr	r1, [r4, #12]
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <cleanup_stdio+0x3c>)
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d004      	beq.n	8004d7c <cleanup_stdio+0x30>
 8004d72:	4620      	mov	r0, r4
 8004d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d78:	f000 be7e 	b.w	8005a78 <_fflush_r>
 8004d7c:	bd10      	pop	{r4, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000200 	.word	0x20000200
 8004d84:	20000268 	.word	0x20000268
 8004d88:	200002d0 	.word	0x200002d0

08004d8c <global_stdio_init.part.0>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dbc <global_stdio_init.part.0+0x30>)
 8004d90:	4c0b      	ldr	r4, [pc, #44]	@ (8004dc0 <global_stdio_init.part.0+0x34>)
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <global_stdio_init.part.0+0x38>)
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	4620      	mov	r0, r4
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	f7ff ff94 	bl	8004cc8 <std>
 8004da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004da4:	2201      	movs	r2, #1
 8004da6:	2109      	movs	r1, #9
 8004da8:	f7ff ff8e 	bl	8004cc8 <std>
 8004dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004db0:	2202      	movs	r2, #2
 8004db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db6:	2112      	movs	r1, #18
 8004db8:	f7ff bf86 	b.w	8004cc8 <std>
 8004dbc:	20000338 	.word	0x20000338
 8004dc0:	20000200 	.word	0x20000200
 8004dc4:	08004d35 	.word	0x08004d35

08004dc8 <__sfp_lock_acquire>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	@ (8004dd0 <__sfp_lock_acquire+0x8>)
 8004dca:	f000 ba08 	b.w	80051de <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000341 	.word	0x20000341

08004dd4 <__sfp_lock_release>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	@ (8004ddc <__sfp_lock_release+0x8>)
 8004dd6:	f000 ba03 	b.w	80051e0 <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000341 	.word	0x20000341

08004de0 <__sinit>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	f7ff fff0 	bl	8004dc8 <__sfp_lock_acquire>
 8004de8:	6a23      	ldr	r3, [r4, #32]
 8004dea:	b11b      	cbz	r3, 8004df4 <__sinit+0x14>
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f7ff bff0 	b.w	8004dd4 <__sfp_lock_release>
 8004df4:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <__sinit+0x28>)
 8004df6:	6223      	str	r3, [r4, #32]
 8004df8:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <__sinit+0x2c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f5      	bne.n	8004dec <__sinit+0xc>
 8004e00:	f7ff ffc4 	bl	8004d8c <global_stdio_init.part.0>
 8004e04:	e7f2      	b.n	8004dec <__sinit+0xc>
 8004e06:	bf00      	nop
 8004e08:	08004d4d 	.word	0x08004d4d
 8004e0c:	20000338 	.word	0x20000338

08004e10 <_fwalk_sglue>:
 8004e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e14:	4607      	mov	r7, r0
 8004e16:	4688      	mov	r8, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e20:	f1b9 0901 	subs.w	r9, r9, #1
 8004e24:	d505      	bpl.n	8004e32 <_fwalk_sglue+0x22>
 8004e26:	6824      	ldr	r4, [r4, #0]
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	d1f7      	bne.n	8004e1c <_fwalk_sglue+0xc>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d907      	bls.n	8004e48 <_fwalk_sglue+0x38>
 8004e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	d003      	beq.n	8004e48 <_fwalk_sglue+0x38>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c0      	blx	r8
 8004e46:	4306      	orrs	r6, r0
 8004e48:	3568      	adds	r5, #104	@ 0x68
 8004e4a:	e7e9      	b.n	8004e20 <_fwalk_sglue+0x10>

08004e4c <iprintf>:
 8004e4c:	b40f      	push	{r0, r1, r2, r3}
 8004e4e:	b507      	push	{r0, r1, r2, lr}
 8004e50:	4906      	ldr	r1, [pc, #24]	@ (8004e6c <iprintf+0x20>)
 8004e52:	ab04      	add	r3, sp, #16
 8004e54:	6808      	ldr	r0, [r1, #0]
 8004e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e5a:	6881      	ldr	r1, [r0, #8]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	f000 fae3 	bl	8005428 <_vfiprintf_r>
 8004e62:	b003      	add	sp, #12
 8004e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e68:	b004      	add	sp, #16
 8004e6a:	4770      	bx	lr
 8004e6c:	20000018 	.word	0x20000018

08004e70 <putchar>:
 8004e70:	4b02      	ldr	r3, [pc, #8]	@ (8004e7c <putchar+0xc>)
 8004e72:	4601      	mov	r1, r0
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	6882      	ldr	r2, [r0, #8]
 8004e78:	f000 be88 	b.w	8005b8c <_putc_r>
 8004e7c:	20000018 	.word	0x20000018

08004e80 <_puts_r>:
 8004e80:	6a03      	ldr	r3, [r0, #32]
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	6884      	ldr	r4, [r0, #8]
 8004e86:	4605      	mov	r5, r0
 8004e88:	460e      	mov	r6, r1
 8004e8a:	b90b      	cbnz	r3, 8004e90 <_puts_r+0x10>
 8004e8c:	f7ff ffa8 	bl	8004de0 <__sinit>
 8004e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e92:	07db      	lsls	r3, r3, #31
 8004e94:	d405      	bmi.n	8004ea2 <_puts_r+0x22>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	0598      	lsls	r0, r3, #22
 8004e9a:	d402      	bmi.n	8004ea2 <_puts_r+0x22>
 8004e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e9e:	f000 f99e 	bl	80051de <__retarget_lock_acquire_recursive>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d502      	bpl.n	8004eae <_puts_r+0x2e>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d135      	bne.n	8004f1a <_puts_r+0x9a>
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f8c5 	bl	8005040 <__swsetup_r>
 8004eb6:	b380      	cbz	r0, 8004f1a <_puts_r+0x9a>
 8004eb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ebe:	07da      	lsls	r2, r3, #31
 8004ec0:	d405      	bmi.n	8004ece <_puts_r+0x4e>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	059b      	lsls	r3, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_puts_r+0x4e>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eca:	f000 f989 	bl	80051e0 <__retarget_lock_release_recursive>
 8004ece:	4628      	mov	r0, r5
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da04      	bge.n	8004ee0 <_puts_r+0x60>
 8004ed6:	69a2      	ldr	r2, [r4, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	dc17      	bgt.n	8004f0c <_puts_r+0x8c>
 8004edc:	290a      	cmp	r1, #10
 8004ede:	d015      	beq.n	8004f0c <_puts_r+0x8c>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	7019      	strb	r1, [r3, #0]
 8004ee8:	68a3      	ldr	r3, [r4, #8]
 8004eea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	60a3      	str	r3, [r4, #8]
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d1ed      	bne.n	8004ed2 <_puts_r+0x52>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da11      	bge.n	8004f1e <_puts_r+0x9e>
 8004efa:	4622      	mov	r2, r4
 8004efc:	210a      	movs	r1, #10
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f85f 	bl	8004fc2 <__swbuf_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d0d7      	beq.n	8004eb8 <_puts_r+0x38>
 8004f08:	250a      	movs	r5, #10
 8004f0a:	e7d7      	b.n	8004ebc <_puts_r+0x3c>
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 f857 	bl	8004fc2 <__swbuf_r>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d1e7      	bne.n	8004ee8 <_puts_r+0x68>
 8004f18:	e7ce      	b.n	8004eb8 <_puts_r+0x38>
 8004f1a:	3e01      	subs	r6, #1
 8004f1c:	e7e4      	b.n	8004ee8 <_puts_r+0x68>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	220a      	movs	r2, #10
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e7ee      	b.n	8004f08 <_puts_r+0x88>
	...

08004f2c <puts>:
 8004f2c:	4b02      	ldr	r3, [pc, #8]	@ (8004f38 <puts+0xc>)
 8004f2e:	4601      	mov	r1, r0
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	f7ff bfa5 	b.w	8004e80 <_puts_r>
 8004f36:	bf00      	nop
 8004f38:	20000018 	.word	0x20000018

08004f3c <__sread>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	f000 f8fc 	bl	8005140 <_read_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	bfab      	itete	ge
 8004f4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f50:	181b      	addge	r3, r3, r0
 8004f52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f56:	bfac      	ite	ge
 8004f58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f5a:	81a3      	strhlt	r3, [r4, #12]
 8004f5c:	bd10      	pop	{r4, pc}

08004f5e <__swrite>:
 8004f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	461f      	mov	r7, r3
 8004f64:	898b      	ldrh	r3, [r1, #12]
 8004f66:	05db      	lsls	r3, r3, #23
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	d505      	bpl.n	8004f7c <__swrite+0x1e>
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	2302      	movs	r3, #2
 8004f76:	2200      	movs	r2, #0
 8004f78:	f000 f8d0 	bl	800511c <_lseek_r>
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	4632      	mov	r2, r6
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	f000 b8e7 	b.w	8005164 <_write_r>

08004f96 <__sseek>:
 8004f96:	b510      	push	{r4, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 f8bd 	bl	800511c <_lseek_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	bf15      	itete	ne
 8004fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fb2:	81a3      	strheq	r3, [r4, #12]
 8004fb4:	bf18      	it	ne
 8004fb6:	81a3      	strhne	r3, [r4, #12]
 8004fb8:	bd10      	pop	{r4, pc}

08004fba <__sclose>:
 8004fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbe:	f000 b89d 	b.w	80050fc <_close_r>

08004fc2 <__swbuf_r>:
 8004fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc4:	460e      	mov	r6, r1
 8004fc6:	4614      	mov	r4, r2
 8004fc8:	4605      	mov	r5, r0
 8004fca:	b118      	cbz	r0, 8004fd4 <__swbuf_r+0x12>
 8004fcc:	6a03      	ldr	r3, [r0, #32]
 8004fce:	b90b      	cbnz	r3, 8004fd4 <__swbuf_r+0x12>
 8004fd0:	f7ff ff06 	bl	8004de0 <__sinit>
 8004fd4:	69a3      	ldr	r3, [r4, #24]
 8004fd6:	60a3      	str	r3, [r4, #8]
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	071a      	lsls	r2, r3, #28
 8004fdc:	d501      	bpl.n	8004fe2 <__swbuf_r+0x20>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	b943      	cbnz	r3, 8004ff4 <__swbuf_r+0x32>
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 f82b 	bl	8005040 <__swsetup_r>
 8004fea:	b118      	cbz	r0, 8004ff4 <__swbuf_r+0x32>
 8004fec:	f04f 37ff 	mov.w	r7, #4294967295
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	6922      	ldr	r2, [r4, #16]
 8004ff8:	1a98      	subs	r0, r3, r2
 8004ffa:	6963      	ldr	r3, [r4, #20]
 8004ffc:	b2f6      	uxtb	r6, r6
 8004ffe:	4283      	cmp	r3, r0
 8005000:	4637      	mov	r7, r6
 8005002:	dc05      	bgt.n	8005010 <__swbuf_r+0x4e>
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fd36 	bl	8005a78 <_fflush_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	d1ed      	bne.n	8004fec <__swbuf_r+0x2a>
 8005010:	68a3      	ldr	r3, [r4, #8]
 8005012:	3b01      	subs	r3, #1
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	701e      	strb	r6, [r3, #0]
 800501e:	6962      	ldr	r2, [r4, #20]
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	429a      	cmp	r2, r3
 8005024:	d004      	beq.n	8005030 <__swbuf_r+0x6e>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	07db      	lsls	r3, r3, #31
 800502a:	d5e1      	bpl.n	8004ff0 <__swbuf_r+0x2e>
 800502c:	2e0a      	cmp	r6, #10
 800502e:	d1df      	bne.n	8004ff0 <__swbuf_r+0x2e>
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fd20 	bl	8005a78 <_fflush_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	d0d9      	beq.n	8004ff0 <__swbuf_r+0x2e>
 800503c:	e7d6      	b.n	8004fec <__swbuf_r+0x2a>
	...

08005040 <__swsetup_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4b29      	ldr	r3, [pc, #164]	@ (80050e8 <__swsetup_r+0xa8>)
 8005044:	4605      	mov	r5, r0
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	460c      	mov	r4, r1
 800504a:	b118      	cbz	r0, 8005054 <__swsetup_r+0x14>
 800504c:	6a03      	ldr	r3, [r0, #32]
 800504e:	b90b      	cbnz	r3, 8005054 <__swsetup_r+0x14>
 8005050:	f7ff fec6 	bl	8004de0 <__sinit>
 8005054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005058:	0719      	lsls	r1, r3, #28
 800505a:	d422      	bmi.n	80050a2 <__swsetup_r+0x62>
 800505c:	06da      	lsls	r2, r3, #27
 800505e:	d407      	bmi.n	8005070 <__swsetup_r+0x30>
 8005060:	2209      	movs	r2, #9
 8005062:	602a      	str	r2, [r5, #0]
 8005064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	f04f 30ff 	mov.w	r0, #4294967295
 800506e:	e033      	b.n	80050d8 <__swsetup_r+0x98>
 8005070:	0758      	lsls	r0, r3, #29
 8005072:	d512      	bpl.n	800509a <__swsetup_r+0x5a>
 8005074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005076:	b141      	cbz	r1, 800508a <__swsetup_r+0x4a>
 8005078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <__swsetup_r+0x46>
 8005080:	4628      	mov	r0, r5
 8005082:	f000 f8af 	bl	80051e4 <_free_r>
 8005086:	2300      	movs	r3, #0
 8005088:	6363      	str	r3, [r4, #52]	@ 0x34
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	2300      	movs	r3, #0
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	f043 0308 	orr.w	r3, r3, #8
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	b94b      	cbnz	r3, 80050ba <__swsetup_r+0x7a>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b0:	d003      	beq.n	80050ba <__swsetup_r+0x7a>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 fd2d 	bl	8005b14 <__smakebuf_r>
 80050ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050be:	f013 0201 	ands.w	r2, r3, #1
 80050c2:	d00a      	beq.n	80050da <__swsetup_r+0x9a>
 80050c4:	2200      	movs	r2, #0
 80050c6:	60a2      	str	r2, [r4, #8]
 80050c8:	6962      	ldr	r2, [r4, #20]
 80050ca:	4252      	negs	r2, r2
 80050cc:	61a2      	str	r2, [r4, #24]
 80050ce:	6922      	ldr	r2, [r4, #16]
 80050d0:	b942      	cbnz	r2, 80050e4 <__swsetup_r+0xa4>
 80050d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050d6:	d1c5      	bne.n	8005064 <__swsetup_r+0x24>
 80050d8:	bd38      	pop	{r3, r4, r5, pc}
 80050da:	0799      	lsls	r1, r3, #30
 80050dc:	bf58      	it	pl
 80050de:	6962      	ldrpl	r2, [r4, #20]
 80050e0:	60a2      	str	r2, [r4, #8]
 80050e2:	e7f4      	b.n	80050ce <__swsetup_r+0x8e>
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7f7      	b.n	80050d8 <__swsetup_r+0x98>
 80050e8:	20000018 	.word	0x20000018

080050ec <memset>:
 80050ec:	4402      	add	r2, r0
 80050ee:	4603      	mov	r3, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <_close_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4d06      	ldr	r5, [pc, #24]	@ (8005118 <_close_r+0x1c>)
 8005100:	2300      	movs	r3, #0
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	f7fb fec5 	bl	8000e96 <_close>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d102      	bne.n	8005116 <_close_r+0x1a>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b103      	cbz	r3, 8005116 <_close_r+0x1a>
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	2000033c 	.word	0x2000033c

0800511c <_lseek_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d07      	ldr	r5, [pc, #28]	@ (800513c <_lseek_r+0x20>)
 8005120:	4604      	mov	r4, r0
 8005122:	4608      	mov	r0, r1
 8005124:	4611      	mov	r1, r2
 8005126:	2200      	movs	r2, #0
 8005128:	602a      	str	r2, [r5, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fb feda 	bl	8000ee4 <_lseek>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_lseek_r+0x1e>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	b103      	cbz	r3, 800513a <_lseek_r+0x1e>
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	2000033c 	.word	0x2000033c

08005140 <_read_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d07      	ldr	r5, [pc, #28]	@ (8005160 <_read_r+0x20>)
 8005144:	4604      	mov	r4, r0
 8005146:	4608      	mov	r0, r1
 8005148:	4611      	mov	r1, r2
 800514a:	2200      	movs	r2, #0
 800514c:	602a      	str	r2, [r5, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	f7fb fe68 	bl	8000e24 <_read>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_read_r+0x1e>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_read_r+0x1e>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	2000033c 	.word	0x2000033c

08005164 <_write_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	@ (8005184 <_write_r+0x20>)
 8005168:	4604      	mov	r4, r0
 800516a:	4608      	mov	r0, r1
 800516c:	4611      	mov	r1, r2
 800516e:	2200      	movs	r2, #0
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f7fb fe73 	bl	8000e5e <_write>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_write_r+0x1e>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_write_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	2000033c 	.word	0x2000033c

08005188 <__errno>:
 8005188:	4b01      	ldr	r3, [pc, #4]	@ (8005190 <__errno+0x8>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000018 	.word	0x20000018

08005194 <__libc_init_array>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4d0d      	ldr	r5, [pc, #52]	@ (80051cc <__libc_init_array+0x38>)
 8005198:	4c0d      	ldr	r4, [pc, #52]	@ (80051d0 <__libc_init_array+0x3c>)
 800519a:	1b64      	subs	r4, r4, r5
 800519c:	10a4      	asrs	r4, r4, #2
 800519e:	2600      	movs	r6, #0
 80051a0:	42a6      	cmp	r6, r4
 80051a2:	d109      	bne.n	80051b8 <__libc_init_array+0x24>
 80051a4:	4d0b      	ldr	r5, [pc, #44]	@ (80051d4 <__libc_init_array+0x40>)
 80051a6:	4c0c      	ldr	r4, [pc, #48]	@ (80051d8 <__libc_init_array+0x44>)
 80051a8:	f000 fd56 	bl	8005c58 <_init>
 80051ac:	1b64      	subs	r4, r4, r5
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	2600      	movs	r6, #0
 80051b2:	42a6      	cmp	r6, r4
 80051b4:	d105      	bne.n	80051c2 <__libc_init_array+0x2e>
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051bc:	4798      	blx	r3
 80051be:	3601      	adds	r6, #1
 80051c0:	e7ee      	b.n	80051a0 <__libc_init_array+0xc>
 80051c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c6:	4798      	blx	r3
 80051c8:	3601      	adds	r6, #1
 80051ca:	e7f2      	b.n	80051b2 <__libc_init_array+0x1e>
 80051cc:	08005d34 	.word	0x08005d34
 80051d0:	08005d34 	.word	0x08005d34
 80051d4:	08005d34 	.word	0x08005d34
 80051d8:	08005d38 	.word	0x08005d38

080051dc <__retarget_lock_init_recursive>:
 80051dc:	4770      	bx	lr

080051de <__retarget_lock_acquire_recursive>:
 80051de:	4770      	bx	lr

080051e0 <__retarget_lock_release_recursive>:
 80051e0:	4770      	bx	lr
	...

080051e4 <_free_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4605      	mov	r5, r0
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d041      	beq.n	8005270 <_free_r+0x8c>
 80051ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f0:	1f0c      	subs	r4, r1, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfb8      	it	lt
 80051f6:	18e4      	addlt	r4, r4, r3
 80051f8:	f000 f8e0 	bl	80053bc <__malloc_lock>
 80051fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005274 <_free_r+0x90>)
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	b933      	cbnz	r3, 8005210 <_free_r+0x2c>
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	6014      	str	r4, [r2, #0]
 8005206:	4628      	mov	r0, r5
 8005208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800520c:	f000 b8dc 	b.w	80053c8 <__malloc_unlock>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d908      	bls.n	8005226 <_free_r+0x42>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	e7ed      	b.n	8005202 <_free_r+0x1e>
 8005226:	461a      	mov	r2, r3
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b10b      	cbz	r3, 8005230 <_free_r+0x4c>
 800522c:	42a3      	cmp	r3, r4
 800522e:	d9fa      	bls.n	8005226 <_free_r+0x42>
 8005230:	6811      	ldr	r1, [r2, #0]
 8005232:	1850      	adds	r0, r2, r1
 8005234:	42a0      	cmp	r0, r4
 8005236:	d10b      	bne.n	8005250 <_free_r+0x6c>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	4401      	add	r1, r0
 800523c:	1850      	adds	r0, r2, r1
 800523e:	4283      	cmp	r3, r0
 8005240:	6011      	str	r1, [r2, #0]
 8005242:	d1e0      	bne.n	8005206 <_free_r+0x22>
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	6053      	str	r3, [r2, #4]
 800524a:	4408      	add	r0, r1
 800524c:	6010      	str	r0, [r2, #0]
 800524e:	e7da      	b.n	8005206 <_free_r+0x22>
 8005250:	d902      	bls.n	8005258 <_free_r+0x74>
 8005252:	230c      	movs	r3, #12
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	e7d6      	b.n	8005206 <_free_r+0x22>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	1821      	adds	r1, r4, r0
 800525c:	428b      	cmp	r3, r1
 800525e:	bf04      	itt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	bf04      	itt	eq
 8005268:	1809      	addeq	r1, r1, r0
 800526a:	6021      	streq	r1, [r4, #0]
 800526c:	6054      	str	r4, [r2, #4]
 800526e:	e7ca      	b.n	8005206 <_free_r+0x22>
 8005270:	bd38      	pop	{r3, r4, r5, pc}
 8005272:	bf00      	nop
 8005274:	20000348 	.word	0x20000348

08005278 <sbrk_aligned>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4e0f      	ldr	r6, [pc, #60]	@ (80052b8 <sbrk_aligned+0x40>)
 800527c:	460c      	mov	r4, r1
 800527e:	6831      	ldr	r1, [r6, #0]
 8005280:	4605      	mov	r5, r0
 8005282:	b911      	cbnz	r1, 800528a <sbrk_aligned+0x12>
 8005284:	f000 fcd8 	bl	8005c38 <_sbrk_r>
 8005288:	6030      	str	r0, [r6, #0]
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 fcd3 	bl	8005c38 <_sbrk_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d103      	bne.n	800529e <sbrk_aligned+0x26>
 8005296:	f04f 34ff 	mov.w	r4, #4294967295
 800529a:	4620      	mov	r0, r4
 800529c:	bd70      	pop	{r4, r5, r6, pc}
 800529e:	1cc4      	adds	r4, r0, #3
 80052a0:	f024 0403 	bic.w	r4, r4, #3
 80052a4:	42a0      	cmp	r0, r4
 80052a6:	d0f8      	beq.n	800529a <sbrk_aligned+0x22>
 80052a8:	1a21      	subs	r1, r4, r0
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 fcc4 	bl	8005c38 <_sbrk_r>
 80052b0:	3001      	adds	r0, #1
 80052b2:	d1f2      	bne.n	800529a <sbrk_aligned+0x22>
 80052b4:	e7ef      	b.n	8005296 <sbrk_aligned+0x1e>
 80052b6:	bf00      	nop
 80052b8:	20000344 	.word	0x20000344

080052bc <_malloc_r>:
 80052bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c0:	1ccd      	adds	r5, r1, #3
 80052c2:	f025 0503 	bic.w	r5, r5, #3
 80052c6:	3508      	adds	r5, #8
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	bf38      	it	cc
 80052cc:	250c      	movcc	r5, #12
 80052ce:	2d00      	cmp	r5, #0
 80052d0:	4606      	mov	r6, r0
 80052d2:	db01      	blt.n	80052d8 <_malloc_r+0x1c>
 80052d4:	42a9      	cmp	r1, r5
 80052d6:	d904      	bls.n	80052e2 <_malloc_r+0x26>
 80052d8:	230c      	movs	r3, #12
 80052da:	6033      	str	r3, [r6, #0]
 80052dc:	2000      	movs	r0, #0
 80052de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053b8 <_malloc_r+0xfc>
 80052e6:	f000 f869 	bl	80053bc <__malloc_lock>
 80052ea:	f8d8 3000 	ldr.w	r3, [r8]
 80052ee:	461c      	mov	r4, r3
 80052f0:	bb44      	cbnz	r4, 8005344 <_malloc_r+0x88>
 80052f2:	4629      	mov	r1, r5
 80052f4:	4630      	mov	r0, r6
 80052f6:	f7ff ffbf 	bl	8005278 <sbrk_aligned>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	4604      	mov	r4, r0
 80052fe:	d158      	bne.n	80053b2 <_malloc_r+0xf6>
 8005300:	f8d8 4000 	ldr.w	r4, [r8]
 8005304:	4627      	mov	r7, r4
 8005306:	2f00      	cmp	r7, #0
 8005308:	d143      	bne.n	8005392 <_malloc_r+0xd6>
 800530a:	2c00      	cmp	r4, #0
 800530c:	d04b      	beq.n	80053a6 <_malloc_r+0xea>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	4639      	mov	r1, r7
 8005312:	4630      	mov	r0, r6
 8005314:	eb04 0903 	add.w	r9, r4, r3
 8005318:	f000 fc8e 	bl	8005c38 <_sbrk_r>
 800531c:	4581      	cmp	r9, r0
 800531e:	d142      	bne.n	80053a6 <_malloc_r+0xea>
 8005320:	6821      	ldr	r1, [r4, #0]
 8005322:	1a6d      	subs	r5, r5, r1
 8005324:	4629      	mov	r1, r5
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff ffa6 	bl	8005278 <sbrk_aligned>
 800532c:	3001      	adds	r0, #1
 800532e:	d03a      	beq.n	80053a6 <_malloc_r+0xea>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	442b      	add	r3, r5
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	f8d8 3000 	ldr.w	r3, [r8]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	bb62      	cbnz	r2, 8005398 <_malloc_r+0xdc>
 800533e:	f8c8 7000 	str.w	r7, [r8]
 8005342:	e00f      	b.n	8005364 <_malloc_r+0xa8>
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	1b52      	subs	r2, r2, r5
 8005348:	d420      	bmi.n	800538c <_malloc_r+0xd0>
 800534a:	2a0b      	cmp	r2, #11
 800534c:	d917      	bls.n	800537e <_malloc_r+0xc2>
 800534e:	1961      	adds	r1, r4, r5
 8005350:	42a3      	cmp	r3, r4
 8005352:	6025      	str	r5, [r4, #0]
 8005354:	bf18      	it	ne
 8005356:	6059      	strne	r1, [r3, #4]
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	bf08      	it	eq
 800535c:	f8c8 1000 	streq.w	r1, [r8]
 8005360:	5162      	str	r2, [r4, r5]
 8005362:	604b      	str	r3, [r1, #4]
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f82f 	bl	80053c8 <__malloc_unlock>
 800536a:	f104 000b 	add.w	r0, r4, #11
 800536e:	1d23      	adds	r3, r4, #4
 8005370:	f020 0007 	bic.w	r0, r0, #7
 8005374:	1ac2      	subs	r2, r0, r3
 8005376:	bf1c      	itt	ne
 8005378:	1a1b      	subne	r3, r3, r0
 800537a:	50a3      	strne	r3, [r4, r2]
 800537c:	e7af      	b.n	80052de <_malloc_r+0x22>
 800537e:	6862      	ldr	r2, [r4, #4]
 8005380:	42a3      	cmp	r3, r4
 8005382:	bf0c      	ite	eq
 8005384:	f8c8 2000 	streq.w	r2, [r8]
 8005388:	605a      	strne	r2, [r3, #4]
 800538a:	e7eb      	b.n	8005364 <_malloc_r+0xa8>
 800538c:	4623      	mov	r3, r4
 800538e:	6864      	ldr	r4, [r4, #4]
 8005390:	e7ae      	b.n	80052f0 <_malloc_r+0x34>
 8005392:	463c      	mov	r4, r7
 8005394:	687f      	ldr	r7, [r7, #4]
 8005396:	e7b6      	b.n	8005306 <_malloc_r+0x4a>
 8005398:	461a      	mov	r2, r3
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	d1fb      	bne.n	8005398 <_malloc_r+0xdc>
 80053a0:	2300      	movs	r3, #0
 80053a2:	6053      	str	r3, [r2, #4]
 80053a4:	e7de      	b.n	8005364 <_malloc_r+0xa8>
 80053a6:	230c      	movs	r3, #12
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	4630      	mov	r0, r6
 80053ac:	f000 f80c 	bl	80053c8 <__malloc_unlock>
 80053b0:	e794      	b.n	80052dc <_malloc_r+0x20>
 80053b2:	6005      	str	r5, [r0, #0]
 80053b4:	e7d6      	b.n	8005364 <_malloc_r+0xa8>
 80053b6:	bf00      	nop
 80053b8:	20000348 	.word	0x20000348

080053bc <__malloc_lock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__malloc_lock+0x8>)
 80053be:	f7ff bf0e 	b.w	80051de <__retarget_lock_acquire_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000340 	.word	0x20000340

080053c8 <__malloc_unlock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	@ (80053d0 <__malloc_unlock+0x8>)
 80053ca:	f7ff bf09 	b.w	80051e0 <__retarget_lock_release_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000340 	.word	0x20000340

080053d4 <__sfputc_r>:
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	b410      	push	{r4}
 80053dc:	6093      	str	r3, [r2, #8]
 80053de:	da08      	bge.n	80053f2 <__sfputc_r+0x1e>
 80053e0:	6994      	ldr	r4, [r2, #24]
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	db01      	blt.n	80053ea <__sfputc_r+0x16>
 80053e6:	290a      	cmp	r1, #10
 80053e8:	d103      	bne.n	80053f2 <__sfputc_r+0x1e>
 80053ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ee:	f7ff bde8 	b.w	8004fc2 <__swbuf_r>
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	1c58      	adds	r0, r3, #1
 80053f6:	6010      	str	r0, [r2, #0]
 80053f8:	7019      	strb	r1, [r3, #0]
 80053fa:	4608      	mov	r0, r1
 80053fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005400:	4770      	bx	lr

08005402 <__sfputs_r>:
 8005402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005404:	4606      	mov	r6, r0
 8005406:	460f      	mov	r7, r1
 8005408:	4614      	mov	r4, r2
 800540a:	18d5      	adds	r5, r2, r3
 800540c:	42ac      	cmp	r4, r5
 800540e:	d101      	bne.n	8005414 <__sfputs_r+0x12>
 8005410:	2000      	movs	r0, #0
 8005412:	e007      	b.n	8005424 <__sfputs_r+0x22>
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	463a      	mov	r2, r7
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ffda 	bl	80053d4 <__sfputc_r>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d1f3      	bne.n	800540c <__sfputs_r+0xa>
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005428 <_vfiprintf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	460d      	mov	r5, r1
 800542e:	b09d      	sub	sp, #116	@ 0x74
 8005430:	4614      	mov	r4, r2
 8005432:	4698      	mov	r8, r3
 8005434:	4606      	mov	r6, r0
 8005436:	b118      	cbz	r0, 8005440 <_vfiprintf_r+0x18>
 8005438:	6a03      	ldr	r3, [r0, #32]
 800543a:	b90b      	cbnz	r3, 8005440 <_vfiprintf_r+0x18>
 800543c:	f7ff fcd0 	bl	8004de0 <__sinit>
 8005440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005442:	07d9      	lsls	r1, r3, #31
 8005444:	d405      	bmi.n	8005452 <_vfiprintf_r+0x2a>
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	059a      	lsls	r2, r3, #22
 800544a:	d402      	bmi.n	8005452 <_vfiprintf_r+0x2a>
 800544c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800544e:	f7ff fec6 	bl	80051de <__retarget_lock_acquire_recursive>
 8005452:	89ab      	ldrh	r3, [r5, #12]
 8005454:	071b      	lsls	r3, r3, #28
 8005456:	d501      	bpl.n	800545c <_vfiprintf_r+0x34>
 8005458:	692b      	ldr	r3, [r5, #16]
 800545a:	b99b      	cbnz	r3, 8005484 <_vfiprintf_r+0x5c>
 800545c:	4629      	mov	r1, r5
 800545e:	4630      	mov	r0, r6
 8005460:	f7ff fdee 	bl	8005040 <__swsetup_r>
 8005464:	b170      	cbz	r0, 8005484 <_vfiprintf_r+0x5c>
 8005466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005468:	07dc      	lsls	r4, r3, #31
 800546a:	d504      	bpl.n	8005476 <_vfiprintf_r+0x4e>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	b01d      	add	sp, #116	@ 0x74
 8005472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	0598      	lsls	r0, r3, #22
 800547a:	d4f7      	bmi.n	800546c <_vfiprintf_r+0x44>
 800547c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800547e:	f7ff feaf 	bl	80051e0 <__retarget_lock_release_recursive>
 8005482:	e7f3      	b.n	800546c <_vfiprintf_r+0x44>
 8005484:	2300      	movs	r3, #0
 8005486:	9309      	str	r3, [sp, #36]	@ 0x24
 8005488:	2320      	movs	r3, #32
 800548a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800548e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005492:	2330      	movs	r3, #48	@ 0x30
 8005494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005644 <_vfiprintf_r+0x21c>
 8005498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800549c:	f04f 0901 	mov.w	r9, #1
 80054a0:	4623      	mov	r3, r4
 80054a2:	469a      	mov	sl, r3
 80054a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a8:	b10a      	cbz	r2, 80054ae <_vfiprintf_r+0x86>
 80054aa:	2a25      	cmp	r2, #37	@ 0x25
 80054ac:	d1f9      	bne.n	80054a2 <_vfiprintf_r+0x7a>
 80054ae:	ebba 0b04 	subs.w	fp, sl, r4
 80054b2:	d00b      	beq.n	80054cc <_vfiprintf_r+0xa4>
 80054b4:	465b      	mov	r3, fp
 80054b6:	4622      	mov	r2, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7ff ffa1 	bl	8005402 <__sfputs_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	f000 80a7 	beq.w	8005614 <_vfiprintf_r+0x1ec>
 80054c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054c8:	445a      	add	r2, fp
 80054ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80054cc:	f89a 3000 	ldrb.w	r3, [sl]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 809f 	beq.w	8005614 <_vfiprintf_r+0x1ec>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e0:	f10a 0a01 	add.w	sl, sl, #1
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	9307      	str	r3, [sp, #28]
 80054e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80054ee:	4654      	mov	r4, sl
 80054f0:	2205      	movs	r2, #5
 80054f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f6:	4853      	ldr	r0, [pc, #332]	@ (8005644 <_vfiprintf_r+0x21c>)
 80054f8:	f7fa fe6a 	bl	80001d0 <memchr>
 80054fc:	9a04      	ldr	r2, [sp, #16]
 80054fe:	b9d8      	cbnz	r0, 8005538 <_vfiprintf_r+0x110>
 8005500:	06d1      	lsls	r1, r2, #27
 8005502:	bf44      	itt	mi
 8005504:	2320      	movmi	r3, #32
 8005506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800550a:	0713      	lsls	r3, r2, #28
 800550c:	bf44      	itt	mi
 800550e:	232b      	movmi	r3, #43	@ 0x2b
 8005510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005514:	f89a 3000 	ldrb.w	r3, [sl]
 8005518:	2b2a      	cmp	r3, #42	@ 0x2a
 800551a:	d015      	beq.n	8005548 <_vfiprintf_r+0x120>
 800551c:	9a07      	ldr	r2, [sp, #28]
 800551e:	4654      	mov	r4, sl
 8005520:	2000      	movs	r0, #0
 8005522:	f04f 0c0a 	mov.w	ip, #10
 8005526:	4621      	mov	r1, r4
 8005528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800552c:	3b30      	subs	r3, #48	@ 0x30
 800552e:	2b09      	cmp	r3, #9
 8005530:	d94b      	bls.n	80055ca <_vfiprintf_r+0x1a2>
 8005532:	b1b0      	cbz	r0, 8005562 <_vfiprintf_r+0x13a>
 8005534:	9207      	str	r2, [sp, #28]
 8005536:	e014      	b.n	8005562 <_vfiprintf_r+0x13a>
 8005538:	eba0 0308 	sub.w	r3, r0, r8
 800553c:	fa09 f303 	lsl.w	r3, r9, r3
 8005540:	4313      	orrs	r3, r2
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	46a2      	mov	sl, r4
 8005546:	e7d2      	b.n	80054ee <_vfiprintf_r+0xc6>
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	1d19      	adds	r1, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	9103      	str	r1, [sp, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	bfbb      	ittet	lt
 8005554:	425b      	neglt	r3, r3
 8005556:	f042 0202 	orrlt.w	r2, r2, #2
 800555a:	9307      	strge	r3, [sp, #28]
 800555c:	9307      	strlt	r3, [sp, #28]
 800555e:	bfb8      	it	lt
 8005560:	9204      	strlt	r2, [sp, #16]
 8005562:	7823      	ldrb	r3, [r4, #0]
 8005564:	2b2e      	cmp	r3, #46	@ 0x2e
 8005566:	d10a      	bne.n	800557e <_vfiprintf_r+0x156>
 8005568:	7863      	ldrb	r3, [r4, #1]
 800556a:	2b2a      	cmp	r3, #42	@ 0x2a
 800556c:	d132      	bne.n	80055d4 <_vfiprintf_r+0x1ac>
 800556e:	9b03      	ldr	r3, [sp, #12]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	9203      	str	r2, [sp, #12]
 8005576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800557a:	3402      	adds	r4, #2
 800557c:	9305      	str	r3, [sp, #20]
 800557e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005654 <_vfiprintf_r+0x22c>
 8005582:	7821      	ldrb	r1, [r4, #0]
 8005584:	2203      	movs	r2, #3
 8005586:	4650      	mov	r0, sl
 8005588:	f7fa fe22 	bl	80001d0 <memchr>
 800558c:	b138      	cbz	r0, 800559e <_vfiprintf_r+0x176>
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	eba0 000a 	sub.w	r0, r0, sl
 8005594:	2240      	movs	r2, #64	@ 0x40
 8005596:	4082      	lsls	r2, r0
 8005598:	4313      	orrs	r3, r2
 800559a:	3401      	adds	r4, #1
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a2:	4829      	ldr	r0, [pc, #164]	@ (8005648 <_vfiprintf_r+0x220>)
 80055a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055a8:	2206      	movs	r2, #6
 80055aa:	f7fa fe11 	bl	80001d0 <memchr>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d03f      	beq.n	8005632 <_vfiprintf_r+0x20a>
 80055b2:	4b26      	ldr	r3, [pc, #152]	@ (800564c <_vfiprintf_r+0x224>)
 80055b4:	bb1b      	cbnz	r3, 80055fe <_vfiprintf_r+0x1d6>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	3307      	adds	r3, #7
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	3308      	adds	r3, #8
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c4:	443b      	add	r3, r7
 80055c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055c8:	e76a      	b.n	80054a0 <_vfiprintf_r+0x78>
 80055ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ce:	460c      	mov	r4, r1
 80055d0:	2001      	movs	r0, #1
 80055d2:	e7a8      	b.n	8005526 <_vfiprintf_r+0xfe>
 80055d4:	2300      	movs	r3, #0
 80055d6:	3401      	adds	r4, #1
 80055d8:	9305      	str	r3, [sp, #20]
 80055da:	4619      	mov	r1, r3
 80055dc:	f04f 0c0a 	mov.w	ip, #10
 80055e0:	4620      	mov	r0, r4
 80055e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e6:	3a30      	subs	r2, #48	@ 0x30
 80055e8:	2a09      	cmp	r2, #9
 80055ea:	d903      	bls.n	80055f4 <_vfiprintf_r+0x1cc>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0c6      	beq.n	800557e <_vfiprintf_r+0x156>
 80055f0:	9105      	str	r1, [sp, #20]
 80055f2:	e7c4      	b.n	800557e <_vfiprintf_r+0x156>
 80055f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055f8:	4604      	mov	r4, r0
 80055fa:	2301      	movs	r3, #1
 80055fc:	e7f0      	b.n	80055e0 <_vfiprintf_r+0x1b8>
 80055fe:	ab03      	add	r3, sp, #12
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <_vfiprintf_r+0x228>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	4630      	mov	r0, r6
 800560a:	f3af 8000 	nop.w
 800560e:	4607      	mov	r7, r0
 8005610:	1c78      	adds	r0, r7, #1
 8005612:	d1d6      	bne.n	80055c2 <_vfiprintf_r+0x19a>
 8005614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d405      	bmi.n	8005626 <_vfiprintf_r+0x1fe>
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d402      	bmi.n	8005626 <_vfiprintf_r+0x1fe>
 8005620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005622:	f7ff fddd 	bl	80051e0 <__retarget_lock_release_recursive>
 8005626:	89ab      	ldrh	r3, [r5, #12]
 8005628:	065b      	lsls	r3, r3, #25
 800562a:	f53f af1f 	bmi.w	800546c <_vfiprintf_r+0x44>
 800562e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005630:	e71e      	b.n	8005470 <_vfiprintf_r+0x48>
 8005632:	ab03      	add	r3, sp, #12
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	462a      	mov	r2, r5
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <_vfiprintf_r+0x228>)
 800563a:	a904      	add	r1, sp, #16
 800563c:	4630      	mov	r0, r6
 800563e:	f000 f879 	bl	8005734 <_printf_i>
 8005642:	e7e4      	b.n	800560e <_vfiprintf_r+0x1e6>
 8005644:	08005cf8 	.word	0x08005cf8
 8005648:	08005d02 	.word	0x08005d02
 800564c:	00000000 	.word	0x00000000
 8005650:	08005403 	.word	0x08005403
 8005654:	08005cfe 	.word	0x08005cfe

08005658 <_printf_common>:
 8005658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	4616      	mov	r6, r2
 800565e:	4698      	mov	r8, r3
 8005660:	688a      	ldr	r2, [r1, #8]
 8005662:	690b      	ldr	r3, [r1, #16]
 8005664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005668:	4293      	cmp	r3, r2
 800566a:	bfb8      	it	lt
 800566c:	4613      	movlt	r3, r2
 800566e:	6033      	str	r3, [r6, #0]
 8005670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005674:	4607      	mov	r7, r0
 8005676:	460c      	mov	r4, r1
 8005678:	b10a      	cbz	r2, 800567e <_printf_common+0x26>
 800567a:	3301      	adds	r3, #1
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	0699      	lsls	r1, r3, #26
 8005682:	bf42      	ittt	mi
 8005684:	6833      	ldrmi	r3, [r6, #0]
 8005686:	3302      	addmi	r3, #2
 8005688:	6033      	strmi	r3, [r6, #0]
 800568a:	6825      	ldr	r5, [r4, #0]
 800568c:	f015 0506 	ands.w	r5, r5, #6
 8005690:	d106      	bne.n	80056a0 <_printf_common+0x48>
 8005692:	f104 0a19 	add.w	sl, r4, #25
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	6832      	ldr	r2, [r6, #0]
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	42ab      	cmp	r3, r5
 800569e:	dc26      	bgt.n	80056ee <_printf_common+0x96>
 80056a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	3b00      	subs	r3, #0
 80056a8:	bf18      	it	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	0692      	lsls	r2, r2, #26
 80056ae:	d42b      	bmi.n	8005708 <_printf_common+0xb0>
 80056b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056b4:	4641      	mov	r1, r8
 80056b6:	4638      	mov	r0, r7
 80056b8:	47c8      	blx	r9
 80056ba:	3001      	adds	r0, #1
 80056bc:	d01e      	beq.n	80056fc <_printf_common+0xa4>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	6922      	ldr	r2, [r4, #16]
 80056c2:	f003 0306 	and.w	r3, r3, #6
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	bf02      	ittt	eq
 80056ca:	68e5      	ldreq	r5, [r4, #12]
 80056cc:	6833      	ldreq	r3, [r6, #0]
 80056ce:	1aed      	subeq	r5, r5, r3
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	bf0c      	ite	eq
 80056d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d8:	2500      	movne	r5, #0
 80056da:	4293      	cmp	r3, r2
 80056dc:	bfc4      	itt	gt
 80056de:	1a9b      	subgt	r3, r3, r2
 80056e0:	18ed      	addgt	r5, r5, r3
 80056e2:	2600      	movs	r6, #0
 80056e4:	341a      	adds	r4, #26
 80056e6:	42b5      	cmp	r5, r6
 80056e8:	d11a      	bne.n	8005720 <_printf_common+0xc8>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e008      	b.n	8005700 <_printf_common+0xa8>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4652      	mov	r2, sl
 80056f2:	4641      	mov	r1, r8
 80056f4:	4638      	mov	r0, r7
 80056f6:	47c8      	blx	r9
 80056f8:	3001      	adds	r0, #1
 80056fa:	d103      	bne.n	8005704 <_printf_common+0xac>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005704:	3501      	adds	r5, #1
 8005706:	e7c6      	b.n	8005696 <_printf_common+0x3e>
 8005708:	18e1      	adds	r1, r4, r3
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	2030      	movs	r0, #48	@ 0x30
 800570e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005712:	4422      	add	r2, r4
 8005714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800571c:	3302      	adds	r3, #2
 800571e:	e7c7      	b.n	80056b0 <_printf_common+0x58>
 8005720:	2301      	movs	r3, #1
 8005722:	4622      	mov	r2, r4
 8005724:	4641      	mov	r1, r8
 8005726:	4638      	mov	r0, r7
 8005728:	47c8      	blx	r9
 800572a:	3001      	adds	r0, #1
 800572c:	d0e6      	beq.n	80056fc <_printf_common+0xa4>
 800572e:	3601      	adds	r6, #1
 8005730:	e7d9      	b.n	80056e6 <_printf_common+0x8e>
	...

08005734 <_printf_i>:
 8005734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	7e0f      	ldrb	r7, [r1, #24]
 800573a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800573c:	2f78      	cmp	r7, #120	@ 0x78
 800573e:	4691      	mov	r9, r2
 8005740:	4680      	mov	r8, r0
 8005742:	460c      	mov	r4, r1
 8005744:	469a      	mov	sl, r3
 8005746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800574a:	d807      	bhi.n	800575c <_printf_i+0x28>
 800574c:	2f62      	cmp	r7, #98	@ 0x62
 800574e:	d80a      	bhi.n	8005766 <_printf_i+0x32>
 8005750:	2f00      	cmp	r7, #0
 8005752:	f000 80d1 	beq.w	80058f8 <_printf_i+0x1c4>
 8005756:	2f58      	cmp	r7, #88	@ 0x58
 8005758:	f000 80b8 	beq.w	80058cc <_printf_i+0x198>
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005764:	e03a      	b.n	80057dc <_printf_i+0xa8>
 8005766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800576a:	2b15      	cmp	r3, #21
 800576c:	d8f6      	bhi.n	800575c <_printf_i+0x28>
 800576e:	a101      	add	r1, pc, #4	@ (adr r1, 8005774 <_printf_i+0x40>)
 8005770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005774:	080057cd 	.word	0x080057cd
 8005778:	080057e1 	.word	0x080057e1
 800577c:	0800575d 	.word	0x0800575d
 8005780:	0800575d 	.word	0x0800575d
 8005784:	0800575d 	.word	0x0800575d
 8005788:	0800575d 	.word	0x0800575d
 800578c:	080057e1 	.word	0x080057e1
 8005790:	0800575d 	.word	0x0800575d
 8005794:	0800575d 	.word	0x0800575d
 8005798:	0800575d 	.word	0x0800575d
 800579c:	0800575d 	.word	0x0800575d
 80057a0:	080058df 	.word	0x080058df
 80057a4:	0800580b 	.word	0x0800580b
 80057a8:	08005899 	.word	0x08005899
 80057ac:	0800575d 	.word	0x0800575d
 80057b0:	0800575d 	.word	0x0800575d
 80057b4:	08005901 	.word	0x08005901
 80057b8:	0800575d 	.word	0x0800575d
 80057bc:	0800580b 	.word	0x0800580b
 80057c0:	0800575d 	.word	0x0800575d
 80057c4:	0800575d 	.word	0x0800575d
 80057c8:	080058a1 	.word	0x080058a1
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	1d1a      	adds	r2, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6032      	str	r2, [r6, #0]
 80057d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057dc:	2301      	movs	r3, #1
 80057de:	e09c      	b.n	800591a <_printf_i+0x1e6>
 80057e0:	6833      	ldr	r3, [r6, #0]
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	6031      	str	r1, [r6, #0]
 80057e8:	0606      	lsls	r6, r0, #24
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0xbc>
 80057ec:	681d      	ldr	r5, [r3, #0]
 80057ee:	e003      	b.n	80057f8 <_printf_i+0xc4>
 80057f0:	0645      	lsls	r5, r0, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0xb8>
 80057f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	da03      	bge.n	8005804 <_printf_i+0xd0>
 80057fc:	232d      	movs	r3, #45	@ 0x2d
 80057fe:	426d      	negs	r5, r5
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005804:	4858      	ldr	r0, [pc, #352]	@ (8005968 <_printf_i+0x234>)
 8005806:	230a      	movs	r3, #10
 8005808:	e011      	b.n	800582e <_printf_i+0xfa>
 800580a:	6821      	ldr	r1, [r4, #0]
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	0608      	lsls	r0, r1, #24
 8005810:	f853 5b04 	ldr.w	r5, [r3], #4
 8005814:	d402      	bmi.n	800581c <_printf_i+0xe8>
 8005816:	0649      	lsls	r1, r1, #25
 8005818:	bf48      	it	mi
 800581a:	b2ad      	uxthmi	r5, r5
 800581c:	2f6f      	cmp	r7, #111	@ 0x6f
 800581e:	4852      	ldr	r0, [pc, #328]	@ (8005968 <_printf_i+0x234>)
 8005820:	6033      	str	r3, [r6, #0]
 8005822:	bf14      	ite	ne
 8005824:	230a      	movne	r3, #10
 8005826:	2308      	moveq	r3, #8
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800582e:	6866      	ldr	r6, [r4, #4]
 8005830:	60a6      	str	r6, [r4, #8]
 8005832:	2e00      	cmp	r6, #0
 8005834:	db05      	blt.n	8005842 <_printf_i+0x10e>
 8005836:	6821      	ldr	r1, [r4, #0]
 8005838:	432e      	orrs	r6, r5
 800583a:	f021 0104 	bic.w	r1, r1, #4
 800583e:	6021      	str	r1, [r4, #0]
 8005840:	d04b      	beq.n	80058da <_printf_i+0x1a6>
 8005842:	4616      	mov	r6, r2
 8005844:	fbb5 f1f3 	udiv	r1, r5, r3
 8005848:	fb03 5711 	mls	r7, r3, r1, r5
 800584c:	5dc7      	ldrb	r7, [r0, r7]
 800584e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005852:	462f      	mov	r7, r5
 8005854:	42bb      	cmp	r3, r7
 8005856:	460d      	mov	r5, r1
 8005858:	d9f4      	bls.n	8005844 <_printf_i+0x110>
 800585a:	2b08      	cmp	r3, #8
 800585c:	d10b      	bne.n	8005876 <_printf_i+0x142>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	07df      	lsls	r7, r3, #31
 8005862:	d508      	bpl.n	8005876 <_printf_i+0x142>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	6861      	ldr	r1, [r4, #4]
 8005868:	4299      	cmp	r1, r3
 800586a:	bfde      	ittt	le
 800586c:	2330      	movle	r3, #48	@ 0x30
 800586e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005872:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005876:	1b92      	subs	r2, r2, r6
 8005878:	6122      	str	r2, [r4, #16]
 800587a:	f8cd a000 	str.w	sl, [sp]
 800587e:	464b      	mov	r3, r9
 8005880:	aa03      	add	r2, sp, #12
 8005882:	4621      	mov	r1, r4
 8005884:	4640      	mov	r0, r8
 8005886:	f7ff fee7 	bl	8005658 <_printf_common>
 800588a:	3001      	adds	r0, #1
 800588c:	d14a      	bne.n	8005924 <_printf_i+0x1f0>
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	b004      	add	sp, #16
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	4832      	ldr	r0, [pc, #200]	@ (800596c <_printf_i+0x238>)
 80058a2:	2778      	movs	r7, #120	@ 0x78
 80058a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	061f      	lsls	r7, r3, #24
 80058ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80058b2:	d402      	bmi.n	80058ba <_printf_i+0x186>
 80058b4:	065f      	lsls	r7, r3, #25
 80058b6:	bf48      	it	mi
 80058b8:	b2ad      	uxthmi	r5, r5
 80058ba:	6031      	str	r1, [r6, #0]
 80058bc:	07d9      	lsls	r1, r3, #31
 80058be:	bf44      	itt	mi
 80058c0:	f043 0320 	orrmi.w	r3, r3, #32
 80058c4:	6023      	strmi	r3, [r4, #0]
 80058c6:	b11d      	cbz	r5, 80058d0 <_printf_i+0x19c>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e7ad      	b.n	8005828 <_printf_i+0xf4>
 80058cc:	4826      	ldr	r0, [pc, #152]	@ (8005968 <_printf_i+0x234>)
 80058ce:	e7e9      	b.n	80058a4 <_printf_i+0x170>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	f023 0320 	bic.w	r3, r3, #32
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e7f6      	b.n	80058c8 <_printf_i+0x194>
 80058da:	4616      	mov	r6, r2
 80058dc:	e7bd      	b.n	800585a <_printf_i+0x126>
 80058de:	6833      	ldr	r3, [r6, #0]
 80058e0:	6825      	ldr	r5, [r4, #0]
 80058e2:	6961      	ldr	r1, [r4, #20]
 80058e4:	1d18      	adds	r0, r3, #4
 80058e6:	6030      	str	r0, [r6, #0]
 80058e8:	062e      	lsls	r6, r5, #24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	d501      	bpl.n	80058f2 <_printf_i+0x1be>
 80058ee:	6019      	str	r1, [r3, #0]
 80058f0:	e002      	b.n	80058f8 <_printf_i+0x1c4>
 80058f2:	0668      	lsls	r0, r5, #25
 80058f4:	d5fb      	bpl.n	80058ee <_printf_i+0x1ba>
 80058f6:	8019      	strh	r1, [r3, #0]
 80058f8:	2300      	movs	r3, #0
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	4616      	mov	r6, r2
 80058fe:	e7bc      	b.n	800587a <_printf_i+0x146>
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	6032      	str	r2, [r6, #0]
 8005906:	681e      	ldr	r6, [r3, #0]
 8005908:	6862      	ldr	r2, [r4, #4]
 800590a:	2100      	movs	r1, #0
 800590c:	4630      	mov	r0, r6
 800590e:	f7fa fc5f 	bl	80001d0 <memchr>
 8005912:	b108      	cbz	r0, 8005918 <_printf_i+0x1e4>
 8005914:	1b80      	subs	r0, r0, r6
 8005916:	6060      	str	r0, [r4, #4]
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	2300      	movs	r3, #0
 800591e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005922:	e7aa      	b.n	800587a <_printf_i+0x146>
 8005924:	6923      	ldr	r3, [r4, #16]
 8005926:	4632      	mov	r2, r6
 8005928:	4649      	mov	r1, r9
 800592a:	4640      	mov	r0, r8
 800592c:	47d0      	blx	sl
 800592e:	3001      	adds	r0, #1
 8005930:	d0ad      	beq.n	800588e <_printf_i+0x15a>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	079b      	lsls	r3, r3, #30
 8005936:	d413      	bmi.n	8005960 <_printf_i+0x22c>
 8005938:	68e0      	ldr	r0, [r4, #12]
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	4298      	cmp	r0, r3
 800593e:	bfb8      	it	lt
 8005940:	4618      	movlt	r0, r3
 8005942:	e7a6      	b.n	8005892 <_printf_i+0x15e>
 8005944:	2301      	movs	r3, #1
 8005946:	4632      	mov	r2, r6
 8005948:	4649      	mov	r1, r9
 800594a:	4640      	mov	r0, r8
 800594c:	47d0      	blx	sl
 800594e:	3001      	adds	r0, #1
 8005950:	d09d      	beq.n	800588e <_printf_i+0x15a>
 8005952:	3501      	adds	r5, #1
 8005954:	68e3      	ldr	r3, [r4, #12]
 8005956:	9903      	ldr	r1, [sp, #12]
 8005958:	1a5b      	subs	r3, r3, r1
 800595a:	42ab      	cmp	r3, r5
 800595c:	dcf2      	bgt.n	8005944 <_printf_i+0x210>
 800595e:	e7eb      	b.n	8005938 <_printf_i+0x204>
 8005960:	2500      	movs	r5, #0
 8005962:	f104 0619 	add.w	r6, r4, #25
 8005966:	e7f5      	b.n	8005954 <_printf_i+0x220>
 8005968:	08005d09 	.word	0x08005d09
 800596c:	08005d1a 	.word	0x08005d1a

08005970 <__sflush_r>:
 8005970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	0716      	lsls	r6, r2, #28
 800597a:	4605      	mov	r5, r0
 800597c:	460c      	mov	r4, r1
 800597e:	d454      	bmi.n	8005a2a <__sflush_r+0xba>
 8005980:	684b      	ldr	r3, [r1, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dc02      	bgt.n	800598c <__sflush_r+0x1c>
 8005986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	dd48      	ble.n	8005a1e <__sflush_r+0xae>
 800598c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800598e:	2e00      	cmp	r6, #0
 8005990:	d045      	beq.n	8005a1e <__sflush_r+0xae>
 8005992:	2300      	movs	r3, #0
 8005994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005998:	682f      	ldr	r7, [r5, #0]
 800599a:	6a21      	ldr	r1, [r4, #32]
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	d030      	beq.n	8005a02 <__sflush_r+0x92>
 80059a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	0759      	lsls	r1, r3, #29
 80059a6:	d505      	bpl.n	80059b4 <__sflush_r+0x44>
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059ae:	b10b      	cbz	r3, 80059b4 <__sflush_r+0x44>
 80059b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059b8:	6a21      	ldr	r1, [r4, #32]
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b0      	blx	r6
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	d106      	bne.n	80059d2 <__sflush_r+0x62>
 80059c4:	6829      	ldr	r1, [r5, #0]
 80059c6:	291d      	cmp	r1, #29
 80059c8:	d82b      	bhi.n	8005a22 <__sflush_r+0xb2>
 80059ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005a74 <__sflush_r+0x104>)
 80059cc:	40ca      	lsrs	r2, r1
 80059ce:	07d6      	lsls	r6, r2, #31
 80059d0:	d527      	bpl.n	8005a22 <__sflush_r+0xb2>
 80059d2:	2200      	movs	r2, #0
 80059d4:	6062      	str	r2, [r4, #4]
 80059d6:	04d9      	lsls	r1, r3, #19
 80059d8:	6922      	ldr	r2, [r4, #16]
 80059da:	6022      	str	r2, [r4, #0]
 80059dc:	d504      	bpl.n	80059e8 <__sflush_r+0x78>
 80059de:	1c42      	adds	r2, r0, #1
 80059e0:	d101      	bne.n	80059e6 <__sflush_r+0x76>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	b903      	cbnz	r3, 80059e8 <__sflush_r+0x78>
 80059e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80059e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ea:	602f      	str	r7, [r5, #0]
 80059ec:	b1b9      	cbz	r1, 8005a1e <__sflush_r+0xae>
 80059ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059f2:	4299      	cmp	r1, r3
 80059f4:	d002      	beq.n	80059fc <__sflush_r+0x8c>
 80059f6:	4628      	mov	r0, r5
 80059f8:	f7ff fbf4 	bl	80051e4 <_free_r>
 80059fc:	2300      	movs	r3, #0
 80059fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a00:	e00d      	b.n	8005a1e <__sflush_r+0xae>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b0      	blx	r6
 8005a08:	4602      	mov	r2, r0
 8005a0a:	1c50      	adds	r0, r2, #1
 8005a0c:	d1c9      	bne.n	80059a2 <__sflush_r+0x32>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0c6      	beq.n	80059a2 <__sflush_r+0x32>
 8005a14:	2b1d      	cmp	r3, #29
 8005a16:	d001      	beq.n	8005a1c <__sflush_r+0xac>
 8005a18:	2b16      	cmp	r3, #22
 8005a1a:	d11e      	bne.n	8005a5a <__sflush_r+0xea>
 8005a1c:	602f      	str	r7, [r5, #0]
 8005a1e:	2000      	movs	r0, #0
 8005a20:	e022      	b.n	8005a68 <__sflush_r+0xf8>
 8005a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a26:	b21b      	sxth	r3, r3
 8005a28:	e01b      	b.n	8005a62 <__sflush_r+0xf2>
 8005a2a:	690f      	ldr	r7, [r1, #16]
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	d0f6      	beq.n	8005a1e <__sflush_r+0xae>
 8005a30:	0793      	lsls	r3, r2, #30
 8005a32:	680e      	ldr	r6, [r1, #0]
 8005a34:	bf08      	it	eq
 8005a36:	694b      	ldreq	r3, [r1, #20]
 8005a38:	600f      	str	r7, [r1, #0]
 8005a3a:	bf18      	it	ne
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	eba6 0807 	sub.w	r8, r6, r7
 8005a42:	608b      	str	r3, [r1, #8]
 8005a44:	f1b8 0f00 	cmp.w	r8, #0
 8005a48:	dde9      	ble.n	8005a1e <__sflush_r+0xae>
 8005a4a:	6a21      	ldr	r1, [r4, #32]
 8005a4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a4e:	4643      	mov	r3, r8
 8005a50:	463a      	mov	r2, r7
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b0      	blx	r6
 8005a56:	2800      	cmp	r0, #0
 8005a58:	dc08      	bgt.n	8005a6c <__sflush_r+0xfc>
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6c:	4407      	add	r7, r0
 8005a6e:	eba8 0800 	sub.w	r8, r8, r0
 8005a72:	e7e7      	b.n	8005a44 <__sflush_r+0xd4>
 8005a74:	20400001 	.word	0x20400001

08005a78 <_fflush_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	690b      	ldr	r3, [r1, #16]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	b913      	cbnz	r3, 8005a88 <_fflush_r+0x10>
 8005a82:	2500      	movs	r5, #0
 8005a84:	4628      	mov	r0, r5
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	b118      	cbz	r0, 8005a92 <_fflush_r+0x1a>
 8005a8a:	6a03      	ldr	r3, [r0, #32]
 8005a8c:	b90b      	cbnz	r3, 8005a92 <_fflush_r+0x1a>
 8005a8e:	f7ff f9a7 	bl	8004de0 <__sinit>
 8005a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f3      	beq.n	8005a82 <_fflush_r+0xa>
 8005a9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d404      	bmi.n	8005aaa <_fflush_r+0x32>
 8005aa0:	0599      	lsls	r1, r3, #22
 8005aa2:	d402      	bmi.n	8005aaa <_fflush_r+0x32>
 8005aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aa6:	f7ff fb9a 	bl	80051de <__retarget_lock_acquire_recursive>
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4621      	mov	r1, r4
 8005aae:	f7ff ff5f 	bl	8005970 <__sflush_r>
 8005ab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ab4:	07da      	lsls	r2, r3, #31
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	d4e4      	bmi.n	8005a84 <_fflush_r+0xc>
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	059b      	lsls	r3, r3, #22
 8005abe:	d4e1      	bmi.n	8005a84 <_fflush_r+0xc>
 8005ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ac2:	f7ff fb8d 	bl	80051e0 <__retarget_lock_release_recursive>
 8005ac6:	e7dd      	b.n	8005a84 <_fflush_r+0xc>

08005ac8 <__swhatbuf_r>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	460c      	mov	r4, r1
 8005acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	b096      	sub	sp, #88	@ 0x58
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	461e      	mov	r6, r3
 8005ad8:	da0d      	bge.n	8005af6 <__swhatbuf_r+0x2e>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	bf14      	ite	ne
 8005ae6:	2340      	movne	r3, #64	@ 0x40
 8005ae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005aec:	2000      	movs	r0, #0
 8005aee:	6031      	str	r1, [r6, #0]
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	b016      	add	sp, #88	@ 0x58
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	466a      	mov	r2, sp
 8005af8:	f000 f87c 	bl	8005bf4 <_fstat_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	dbec      	blt.n	8005ada <__swhatbuf_r+0x12>
 8005b00:	9901      	ldr	r1, [sp, #4]
 8005b02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b0a:	4259      	negs	r1, r3
 8005b0c:	4159      	adcs	r1, r3
 8005b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b12:	e7eb      	b.n	8005aec <__swhatbuf_r+0x24>

08005b14 <__smakebuf_r>:
 8005b14:	898b      	ldrh	r3, [r1, #12]
 8005b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b18:	079d      	lsls	r5, r3, #30
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	d507      	bpl.n	8005b30 <__smakebuf_r+0x1c>
 8005b20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	6163      	str	r3, [r4, #20]
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b30:	ab01      	add	r3, sp, #4
 8005b32:	466a      	mov	r2, sp
 8005b34:	f7ff ffc8 	bl	8005ac8 <__swhatbuf_r>
 8005b38:	9f00      	ldr	r7, [sp, #0]
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff fbbc 	bl	80052bc <_malloc_r>
 8005b44:	b948      	cbnz	r0, 8005b5a <__smakebuf_r+0x46>
 8005b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4a:	059a      	lsls	r2, r3, #22
 8005b4c:	d4ee      	bmi.n	8005b2c <__smakebuf_r+0x18>
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	e7e2      	b.n	8005b20 <__smakebuf_r+0xc>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	6020      	str	r0, [r4, #0]
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b6a:	b15b      	cbz	r3, 8005b84 <__smakebuf_r+0x70>
 8005b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f851 	bl	8005c18 <_isatty_r>
 8005b76:	b128      	cbz	r0, 8005b84 <__smakebuf_r+0x70>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	431d      	orrs	r5, r3
 8005b88:	81a5      	strh	r5, [r4, #12]
 8005b8a:	e7cf      	b.n	8005b2c <__smakebuf_r+0x18>

08005b8c <_putc_r>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	460d      	mov	r5, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	4606      	mov	r6, r0
 8005b94:	b118      	cbz	r0, 8005b9e <_putc_r+0x12>
 8005b96:	6a03      	ldr	r3, [r0, #32]
 8005b98:	b90b      	cbnz	r3, 8005b9e <_putc_r+0x12>
 8005b9a:	f7ff f921 	bl	8004de0 <__sinit>
 8005b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba0:	07d8      	lsls	r0, r3, #31
 8005ba2:	d405      	bmi.n	8005bb0 <_putc_r+0x24>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	0599      	lsls	r1, r3, #22
 8005ba8:	d402      	bmi.n	8005bb0 <_putc_r+0x24>
 8005baa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bac:	f7ff fb17 	bl	80051de <__retarget_lock_acquire_recursive>
 8005bb0:	68a3      	ldr	r3, [r4, #8]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	da05      	bge.n	8005bc6 <_putc_r+0x3a>
 8005bba:	69a2      	ldr	r2, [r4, #24]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	db12      	blt.n	8005be6 <_putc_r+0x5a>
 8005bc0:	b2eb      	uxtb	r3, r5
 8005bc2:	2b0a      	cmp	r3, #10
 8005bc4:	d00f      	beq.n	8005be6 <_putc_r+0x5a>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	6022      	str	r2, [r4, #0]
 8005bcc:	701d      	strb	r5, [r3, #0]
 8005bce:	b2ed      	uxtb	r5, r5
 8005bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_putc_r+0x56>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	059b      	lsls	r3, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_putc_r+0x56>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bde:	f7ff faff 	bl	80051e0 <__retarget_lock_release_recursive>
 8005be2:	4628      	mov	r0, r5
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	4629      	mov	r1, r5
 8005be8:	4622      	mov	r2, r4
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff f9e9 	bl	8004fc2 <__swbuf_r>
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	e7ed      	b.n	8005bd0 <_putc_r+0x44>

08005bf4 <_fstat_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	@ (8005c14 <_fstat_r+0x20>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	f7fb f954 	bl	8000eae <_fstat>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d102      	bne.n	8005c10 <_fstat_r+0x1c>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b103      	cbz	r3, 8005c10 <_fstat_r+0x1c>
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	2000033c 	.word	0x2000033c

08005c18 <_isatty_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d06      	ldr	r5, [pc, #24]	@ (8005c34 <_isatty_r+0x1c>)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	f7fb f953 	bl	8000ece <_isatty>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_isatty_r+0x1a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_isatty_r+0x1a>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000033c 	.word	0x2000033c

08005c38 <_sbrk_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	@ (8005c54 <_sbrk_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fb f95c 	bl	8000f00 <_sbrk>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_sbrk_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_sbrk_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	2000033c 	.word	0x2000033c

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
