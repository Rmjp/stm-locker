
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009630  08009630  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009630  08009630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009638  08009638  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009638  08009638  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800963c  0800963c  0000a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009640  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  20000074  080096b4  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000171c  080096b4  0000b71c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c628  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409e  00000000  00000000  000276cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146d  00000000  00000000  0002d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ff  00000000  00000000  0002e61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb3c  00000000  00000000  0005301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7eff  00000000  00000000  00071b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149a57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f4  00000000  00000000  00149a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00151090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008754 	.word	0x08008754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008754 	.word	0x08008754

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000090 	.word	0x20000090
 80005cc:	200000e4 	.word	0x200000e4

080005d0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f004 fff3 	bl	80055cc <HAL_UART_Transmit>

  return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003cc 	.word	0x200003cc

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b09a      	sub	sp, #104	@ 0x68
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f001 fa7a 	bl	8001af2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f88f 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9ff 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f000 f9df 	bl	80009c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f9ad 	bl	8000968 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800060e:	f000 f8e9 	bl	80007e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000612:	f000 f927 	bl	8000864 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello \n");
 8000616:	4835      	ldr	r0, [pc, #212]	@ (80006ec <main+0xf8>)
 8000618:	f007 fa06 	bl	8007a28 <puts>

  SSD1306_Init (); // initialise the display
 800061c:	f000 fc96 	bl	8000f4c <SSD1306_Init>
    SSD1306_GotoXY (10,10); // goto 10, 10
 8000620:	210a      	movs	r1, #10
 8000622:	200a      	movs	r0, #10
 8000624:	f000 fdfc 	bl	8001220 <SSD1306_GotoXY>
    SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000628:	2201      	movs	r2, #1
 800062a:	4931      	ldr	r1, [pc, #196]	@ (80006f0 <main+0xfc>)
 800062c:	4831      	ldr	r0, [pc, #196]	@ (80006f4 <main+0x100>)
 800062e:	f000 fe8b 	bl	8001348 <SSD1306_Puts>
    SSD1306_GotoXY (10, 30);
 8000632:	211e      	movs	r1, #30
 8000634:	200a      	movs	r0, #10
 8000636:	f000 fdf3 	bl	8001220 <SSD1306_GotoXY>
    SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	492c      	ldr	r1, [pc, #176]	@ (80006f0 <main+0xfc>)
 800063e:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <main+0x104>)
 8000640:	f000 fe82 	bl	8001348 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 8000644:	f000 fd46 	bl	80010d4 <SSD1306_UpdateScreen>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of i2cQ */
  osMessageQDef(i2cQ, 16, uint16_t);
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <main+0x108>)
 800064a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800064e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQHandle = osMessageCreate(osMessageQ(i2cQ), NULL);
 8000654:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fd06 	bl	800606c <osMessageCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <main+0x10c>)
 8000664:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000666:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <main+0x110>)
 8000668:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800067a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fc93 	bl	8005fac <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a1f      	ldr	r2, [pc, #124]	@ (8000708 <main+0x114>)
 800068a:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad */
  osThreadDef(keypad, keypadTask, osPriorityIdle, 0, 128);
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <main+0x118>)
 800068e:	f107 0420 	add.w	r4, r7, #32
 8000692:	461d      	mov	r5, r3
 8000694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadHandle = osThreadCreate(osThread(keypad), NULL);
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fc80 	bl	8005fac <osThreadCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <main+0x11c>)
 80006b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2c */
  osThreadDef(i2c, i2cTask03, osPriorityIdle, 0, 128);
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <main+0x120>)
 80006b4:	1d3c      	adds	r4, r7, #4
 80006b6:	461d      	mov	r5, r3
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cHandle = osThreadCreate(osThread(i2c), NULL);
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fc6f 	bl	8005fac <osThreadCreate>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a11      	ldr	r2, [pc, #68]	@ (8000718 <main+0x124>)
 80006d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006d4:	f005 fc63 	bl	8005f9e <osKernelStart>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    if (esp32_data_ready)
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <main+0x128>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0fb      	beq.n	80006d8 <main+0xe4>
	      {
	          esp32_data_ready = 0;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <main+0x128>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
	          // do the read
	          SlaveDataReady_Callback();
 80006e6:	f000 fbf7 	bl	8000ed8 <SlaveDataReady_Callback>
    if (esp32_data_ready)
 80006ea:	e7f5      	b.n	80006d8 <main+0xe4>
 80006ec:	0800876c 	.word	0x0800876c
 80006f0:	20000000 	.word	0x20000000
 80006f4:	08008774 	.word	0x08008774
 80006f8:	0800877c 	.word	0x0800877c
 80006fc:	08008788 	.word	0x08008788
 8000700:	20000460 	.word	0x20000460
 8000704:	080087a4 	.word	0x080087a4
 8000708:	20000454 	.word	0x20000454
 800070c:	080087c8 	.word	0x080087c8
 8000710:	20000458 	.word	0x20000458
 8000714:	080087e8 	.word	0x080087e8
 8000718:	2000045c 	.word	0x2000045c
 800071c:	20000464 	.word	0x20000464

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	@ 0x58
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2244      	movs	r2, #68	@ 0x44
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 fa5a 	bl	8007be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000742:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000746:	f002 fd15 	bl	8003174 <HAL_PWREx_ControlVoltageScaling>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000750:	f000 fbbc 	bl	8000ecc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000754:	f002 fcf0 	bl	8003138 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemClock_Config+0xc0>)
 800075a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800075e:	4a20      	ldr	r2, [pc, #128]	@ (80007e0 <SystemClock_Config+0xc0>)
 8000760:	f023 0318 	bic.w	r3, r3, #24
 8000764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000768:	2314      	movs	r3, #20
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000778:	2360      	movs	r3, #96	@ 0x60
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000780:	2301      	movs	r3, #1
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000788:	2318      	movs	r3, #24
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fd3f 	bl	8003220 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a8:	f000 fb90 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 f93f 	bl	8003a48 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007d0:	f000 fb7c 	bl	8000ecc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d4:	f003 fd84 	bl	80042e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	@ 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <MX_I2C1_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_I2C1_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000820:	f001 fd9c 	bl	800235c <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 fb4f 	bl	8000ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000832:	f002 fbe9 	bl	8003008 <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 fb46 	bl	8000ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_I2C1_Init+0x74>)
 8000844:	f002 fc2b 	bl	800309e <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fb3d 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002e4 	.word	0x200002e4
 800085c:	40005400 	.word	0x40005400
 8000860:	10805d88 	.word	0x10805d88

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	@ 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000896:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <MX_TIM2_Init+0x100>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 800089e:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008a0:	f240 3283 	movw	r2, #899	@ 0x383
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4828      	ldr	r0, [pc, #160]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008c2:	f003 fe0f 	bl	80044e4 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008cc:	f000 fafe 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008da:	4619      	mov	r1, r3
 80008dc:	4821      	ldr	r0, [pc, #132]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008de:	f004 f929 	bl	8004b34 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008e8:	f000 faf0 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ec:	481d      	ldr	r0, [pc, #116]	@ (8000964 <MX_TIM2_Init+0x100>)
 80008ee:	f003 fea5 	bl	800463c <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 fae8 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4816      	ldr	r0, [pc, #88]	@ (8000964 <MX_TIM2_Init+0x100>)
 800090c:	f004 fd8c 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000916:	f000 fad9 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091a:	2360      	movs	r3, #96	@ 0x60
 800091c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_TIM2_Init+0x100>)
 8000932:	f003 ffeb 	bl	800490c <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800093c:	f000 fac6 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2204      	movs	r2, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <MX_TIM2_Init+0x100>)
 8000948:	f003 ffe0 	bl	800490c <HAL_TIM_PWM_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000952:	f000 fabb 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <MX_TIM2_Init+0x100>)
 8000958:	f000 fe8a 	bl	8001670 <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	@ 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000380 	.word	0x20000380

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_USART2_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART2_UART_Init+0x58>)
 80009ac:	f004 fdc0 	bl	8005530 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 fa89 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003cc 	.word	0x200003cc
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2011      	movs	r0, #17
 80009ec:	f001 f972 	bl	8001cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009f0:	2011      	movs	r0, #17
 80009f2:	f001 f98b 	bl	8001d0c <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b40      	ldr	r3, [pc, #256]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b3d      	ldr	r3, [pc, #244]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b3a      	ldr	r3, [pc, #232]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a39      	ldr	r2, [pc, #228]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a33      	ldr	r2, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <MX_GPIO_Init+0x118>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f001 fc46 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	210a      	movs	r1, #10
 8000a74:	482a      	ldr	r0, [pc, #168]	@ (8000b20 <MX_GPIO_Init+0x11c>)
 8000a76:	f001 fc41 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 8000a7a:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f001 faaf 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <MX_GPIO_Init+0x11c>)
 8000ab0:	f001 faa2 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4815      	ldr	r0, [pc, #84]	@ (8000b20 <MX_GPIO_Init+0x11c>)
 8000acc:	f001 fa94 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000ad0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f001 fa86 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000aec:	2330      	movs	r3, #48	@ 0x30
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_GPIO_Init+0x11c>)
 8000b00:	f001 fa7a 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2006      	movs	r0, #6
 8000b0a:	f001 f8e3 	bl	8001cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f001 f8fc 	bl	8001d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f005 fa89 	bl	8006044 <osDelay>
 8000b32:	e7fb      	b.n	8000b2c <StartDefaultTask+0x8>

08000b34 <read_keypad>:
* @brief Function implementing the keypad thread.
* @param argument: Not used
* @retval None
*/
char read_keypad(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    // --- Scan Row 1 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  // Set Row 1 low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f001 fbdb 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);      // Set Row 2 high
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f001 fbd4 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);      // Set Row 3 high
 8000b54:	2201      	movs	r2, #1
 8000b56:	2102      	movs	r1, #2
 8000b58:	48c3      	ldr	r0, [pc, #780]	@ (8000e68 <read_keypad+0x334>)
 8000b5a:	f001 fbcf 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);      // Set Row 4 high
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f001 fbc9 	bl	80022fc <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f001 fbab 	bl	80022cc <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10b      	bne.n	8000b94 <read_keypad+0x60>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000b7c:	bf00      	nop
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f001 fba1 	bl	80022cc <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f6      	beq.n	8000b7e <read_keypad+0x4a>
        return '1';
 8000b90:	2331      	movs	r3, #49	@ 0x31
 8000b92:	e166      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000b94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f001 fb96 	bl	80022cc <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <read_keypad+0x8a>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000ba6:	bf00      	nop
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f001 fb8c 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f6      	beq.n	8000ba8 <read_keypad+0x74>
        return '2';
 8000bba:	2332      	movs	r3, #50	@ 0x32
 8000bbc:	e151      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	48a9      	ldr	r0, [pc, #676]	@ (8000e68 <read_keypad+0x334>)
 8000bc2:	f001 fb83 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <read_keypad+0xac>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000bcc:	bf00      	nop
 8000bce:	2120      	movs	r1, #32
 8000bd0:	48a5      	ldr	r0, [pc, #660]	@ (8000e68 <read_keypad+0x334>)
 8000bd2:	f001 fb7b 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f8      	beq.n	8000bce <read_keypad+0x9a>
        return '3';
 8000bdc:	2333      	movs	r3, #51	@ 0x33
 8000bde:	e140      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000be0:	2110      	movs	r1, #16
 8000be2:	48a1      	ldr	r0, [pc, #644]	@ (8000e68 <read_keypad+0x334>)
 8000be4:	f001 fb72 	bl	80022cc <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d109      	bne.n	8000c02 <read_keypad+0xce>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000bee:	bf00      	nop
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	489d      	ldr	r0, [pc, #628]	@ (8000e68 <read_keypad+0x334>)
 8000bf4:	f001 fb6a 	bl	80022cc <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f8      	beq.n	8000bf0 <read_keypad+0xbc>
        return 'A';
 8000bfe:	2341      	movs	r3, #65	@ 0x41
 8000c00:	e12f      	b.n	8000e62 <read_keypad+0x32e>
    }

    // --- Scan Row 2 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f001 fb76 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Set Row 2 low
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f001 fb6f 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2102      	movs	r1, #2
 8000c22:	4891      	ldr	r0, [pc, #580]	@ (8000e68 <read_keypad+0x334>)
 8000c24:	f001 fb6a 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f001 fb64 	bl	80022fc <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 fb46 	bl	80022cc <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10b      	bne.n	8000c5e <read_keypad+0x12a>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000c46:	bf00      	nop
 8000c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fb3c 	bl	80022cc <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f6      	beq.n	8000c48 <read_keypad+0x114>
        return '4';
 8000c5a:	2334      	movs	r3, #52	@ 0x34
 8000c5c:	e101      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000c5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c66:	f001 fb31 	bl	80022cc <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10b      	bne.n	8000c88 <read_keypad+0x154>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000c70:	bf00      	nop
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f001 fb27 	bl	80022cc <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f6      	beq.n	8000c72 <read_keypad+0x13e>
        return '5';
 8000c84:	2335      	movs	r3, #53	@ 0x35
 8000c86:	e0ec      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4877      	ldr	r0, [pc, #476]	@ (8000e68 <read_keypad+0x334>)
 8000c8c:	f001 fb1e 	bl	80022cc <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <read_keypad+0x176>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000c96:	bf00      	nop
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4873      	ldr	r0, [pc, #460]	@ (8000e68 <read_keypad+0x334>)
 8000c9c:	f001 fb16 	bl	80022cc <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f8      	beq.n	8000c98 <read_keypad+0x164>
        return '6';
 8000ca6:	2336      	movs	r3, #54	@ 0x36
 8000ca8:	e0db      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000caa:	2110      	movs	r1, #16
 8000cac:	486e      	ldr	r0, [pc, #440]	@ (8000e68 <read_keypad+0x334>)
 8000cae:	f001 fb0d 	bl	80022cc <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <read_keypad+0x198>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000cb8:	bf00      	nop
 8000cba:	2110      	movs	r1, #16
 8000cbc:	486a      	ldr	r0, [pc, #424]	@ (8000e68 <read_keypad+0x334>)
 8000cbe:	f001 fb05 	bl	80022cc <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f8      	beq.n	8000cba <read_keypad+0x186>
        return 'B';
 8000cc8:	2342      	movs	r3, #66	@ 0x42
 8000cca:	e0ca      	b.n	8000e62 <read_keypad+0x32e>
    }

    // --- Scan Row 3 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd6:	f001 fb11 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f001 fb0a 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Set Row 3 low
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2102      	movs	r1, #2
 8000cec:	485e      	ldr	r0, [pc, #376]	@ (8000e68 <read_keypad+0x334>)
 8000cee:	f001 fb05 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f001 faff 	bl	80022fc <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000cfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d06:	f001 fae1 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10b      	bne.n	8000d28 <read_keypad+0x1f4>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000d10:	bf00      	nop
 8000d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 fad7 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f6      	beq.n	8000d12 <read_keypad+0x1de>
        return '7';
 8000d24:	2337      	movs	r3, #55	@ 0x37
 8000d26:	e09c      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000d28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f001 facc 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10b      	bne.n	8000d52 <read_keypad+0x21e>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000d3a:	bf00      	nop
 8000d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f001 fac2 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f6      	beq.n	8000d3c <read_keypad+0x208>
        return '8';
 8000d4e:	2338      	movs	r3, #56	@ 0x38
 8000d50:	e087      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000d52:	2120      	movs	r1, #32
 8000d54:	4844      	ldr	r0, [pc, #272]	@ (8000e68 <read_keypad+0x334>)
 8000d56:	f001 fab9 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <read_keypad+0x240>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000d60:	bf00      	nop
 8000d62:	2120      	movs	r1, #32
 8000d64:	4840      	ldr	r0, [pc, #256]	@ (8000e68 <read_keypad+0x334>)
 8000d66:	f001 fab1 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f8      	beq.n	8000d62 <read_keypad+0x22e>
        return '9';
 8000d70:	2339      	movs	r3, #57	@ 0x39
 8000d72:	e076      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000d74:	2110      	movs	r1, #16
 8000d76:	483c      	ldr	r0, [pc, #240]	@ (8000e68 <read_keypad+0x334>)
 8000d78:	f001 faa8 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <read_keypad+0x262>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000d82:	bf00      	nop
 8000d84:	2110      	movs	r1, #16
 8000d86:	4838      	ldr	r0, [pc, #224]	@ (8000e68 <read_keypad+0x334>)
 8000d88:	f001 faa0 	bl	80022cc <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f8      	beq.n	8000d84 <read_keypad+0x250>
        return 'C';
 8000d92:	2343      	movs	r3, #67	@ 0x43
 8000d94:	e065      	b.n	8000e62 <read_keypad+0x32e>
    }

    // --- Scan Row 4 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da0:	f001 faac 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f001 faa5 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	482c      	ldr	r0, [pc, #176]	@ (8000e68 <read_keypad+0x334>)
 8000db8:	f001 faa0 	bl	80022fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Set Row 4 low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f001 fa9a 	bl	80022fc <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000dc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd0:	f001 fa7c 	bl	80022cc <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10b      	bne.n	8000df2 <read_keypad+0x2be>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000dda:	bf00      	nop
 8000ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f001 fa72 	bl	80022cc <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f6      	beq.n	8000ddc <read_keypad+0x2a8>
        return '*';
 8000dee:	232a      	movs	r3, #42	@ 0x2a
 8000df0:	e037      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000df2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f001 fa67 	bl	80022cc <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10b      	bne.n	8000e1c <read_keypad+0x2e8>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000e04:	bf00      	nop
 8000e06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f001 fa5d 	bl	80022cc <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f6      	beq.n	8000e06 <read_keypad+0x2d2>
        return '0';
 8000e18:	2330      	movs	r3, #48	@ 0x30
 8000e1a:	e022      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <read_keypad+0x334>)
 8000e20:	f001 fa54 	bl	80022cc <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <read_keypad+0x30a>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000e2a:	bf00      	nop
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <read_keypad+0x334>)
 8000e30:	f001 fa4c 	bl	80022cc <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f8      	beq.n	8000e2c <read_keypad+0x2f8>
        return '#';
 8000e3a:	2323      	movs	r3, #35	@ 0x23
 8000e3c:	e011      	b.n	8000e62 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <read_keypad+0x334>)
 8000e42:	f001 fa43 	bl	80022cc <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <read_keypad+0x32c>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000e4c:	bf00      	nop
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <read_keypad+0x334>)
 8000e52:	f001 fa3b 	bl	80022cc <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <read_keypad+0x31a>
        return 'D';
 8000e5c:	2344      	movs	r3, #68	@ 0x44
 8000e5e:	e000      	b.n	8000e62 <read_keypad+0x32e>
    }

    // If no key is pressed, return null character.
    return '\0';
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400

08000e6c <keypadTask>:

/* USER CODE END Header_keypadTask */
void keypadTask(void const * argument)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    // (Optional) Clear the LCD and set initial cursor position

    /* Infinite loop */
    for(;;)
    {
        key = read_keypad();  // Scan the keypad
 8000e74:	f7ff fe5e 	bl	8000b34 <read_keypad>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
        if(key != '\0')
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <keypadTask+0x20>
        {
            // Debug print to UART
            printf("Key pressed: %c\r\n", key);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <keypadTask+0x28>)
 8000e88:	f006 fd5e 	bl	8007948 <iprintf>
        }
        osDelay(50); // Delay to help with debouncing and CPU load
 8000e8c:	2032      	movs	r0, #50	@ 0x32
 8000e8e:	f005 f8d9 	bl	8006044 <osDelay>
        key = read_keypad();  // Scan the keypad
 8000e92:	e7ef      	b.n	8000e74 <keypadTask+0x8>
 8000e94:	08008804 	.word	0x08008804

08000e98 <i2cTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask03 */
void i2cTask03(void const * argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2cTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f005 f8cf 	bl	8006044 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <i2cTask03+0x8>

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000eba:	f000 fe33 	bl	8001b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 4, 100) == HAL_OK)
 8000ee6:	1d3a      	adds	r2, r7, #4
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2304      	movs	r3, #4
 8000eee:	21c0      	movs	r1, #192	@ 0xc0
 8000ef0:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <SlaveDataReady_Callback+0x64>)
 8000ef2:	f001 fbe7 	bl	80026c4 <HAL_I2C_Master_Receive>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d117      	bne.n	8000f2c <SlaveDataReady_Callback+0x54>
    {
        printf("Received from ESP32 1:");
 8000efc:	4810      	ldr	r0, [pc, #64]	@ (8000f40 <SlaveDataReady_Callback+0x68>)
 8000efe:	f006 fd23 	bl	8007948 <iprintf>
        for(int i=0; i<8; i++){
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e00a      	b.n	8000f1e <SlaveDataReady_Callback+0x46>
        	printf("0x%02X ", rxBuffer[i]);
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <SlaveDataReady_Callback+0x6c>)
 8000f14:	f006 fd18 	bl	8007948 <iprintf>
        for(int i=0; i<8; i++){
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	ddf1      	ble.n	8000f08 <SlaveDataReady_Callback+0x30>
        }
        printf("\n");
 8000f24:	200a      	movs	r0, #10
 8000f26:	f006 fd21 	bl	800796c <putchar>
    }
    else
    {
        printf("I2C read error ESP 1\n");
    }
}
 8000f2a:	e002      	b.n	8000f32 <SlaveDataReady_Callback+0x5a>
        printf("I2C read error ESP 1\n");
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <SlaveDataReady_Callback+0x70>)
 8000f2e:	f006 fd7b 	bl	8007a28 <puts>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200002e4 	.word	0x200002e4
 8000f40:	08008818 	.word	0x08008818
 8000f44:	08008830 	.word	0x08008830
 8000f48:	08008838 	.word	0x08008838

08000f4c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f52:	f000 fa1f 	bl	8001394 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2178      	movs	r1, #120	@ 0x78
 8000f5e:	485b      	ldr	r0, [pc, #364]	@ (80010cc <SSD1306_Init+0x180>)
 8000f60:	f001 fca6 	bl	80028b0 <HAL_I2C_IsDeviceReady>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e0a9      	b.n	80010c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f6e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f72:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f74:	e002      	b.n	8000f7c <SSD1306_Init+0x30>
		p--;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f9      	bne.n	8000f76 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f82:	22ae      	movs	r2, #174	@ 0xae
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	@ 0x78
 8000f88:	f000 fa80 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2078      	movs	r0, #120	@ 0x78
 8000f92:	f000 fa7b 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f96:	2210      	movs	r2, #16
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	@ 0x78
 8000f9c:	f000 fa76 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fa0:	22b0      	movs	r2, #176	@ 0xb0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	@ 0x78
 8000fa6:	f000 fa71 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000faa:	22c8      	movs	r2, #200	@ 0xc8
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	@ 0x78
 8000fb0:	f000 fa6c 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	@ 0x78
 8000fba:	f000 fa67 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	@ 0x78
 8000fc4:	f000 fa62 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000fc8:	2240      	movs	r2, #64	@ 0x40
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2078      	movs	r0, #120	@ 0x78
 8000fce:	f000 fa5d 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fd2:	2281      	movs	r2, #129	@ 0x81
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	@ 0x78
 8000fd8:	f000 fa58 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000fdc:	22ff      	movs	r2, #255	@ 0xff
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	@ 0x78
 8000fe2:	f000 fa53 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fe6:	22a1      	movs	r2, #161	@ 0xa1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	@ 0x78
 8000fec:	f000 fa4e 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ff0:	22a6      	movs	r2, #166	@ 0xa6
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	@ 0x78
 8000ff6:	f000 fa49 	bl	800148c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ffa:	22a8      	movs	r2, #168	@ 0xa8
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	@ 0x78
 8001000:	f000 fa44 	bl	800148c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001004:	223f      	movs	r2, #63	@ 0x3f
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	@ 0x78
 800100a:	f000 fa3f 	bl	800148c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800100e:	22a4      	movs	r2, #164	@ 0xa4
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	@ 0x78
 8001014:	f000 fa3a 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001018:	22d3      	movs	r2, #211	@ 0xd3
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	@ 0x78
 800101e:	f000 fa35 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	@ 0x78
 8001028:	f000 fa30 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800102c:	22d5      	movs	r2, #213	@ 0xd5
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	@ 0x78
 8001032:	f000 fa2b 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001036:	22f0      	movs	r2, #240	@ 0xf0
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	@ 0x78
 800103c:	f000 fa26 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001040:	22d9      	movs	r2, #217	@ 0xd9
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	@ 0x78
 8001046:	f000 fa21 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800104a:	2222      	movs	r2, #34	@ 0x22
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	@ 0x78
 8001050:	f000 fa1c 	bl	800148c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001054:	22da      	movs	r2, #218	@ 0xda
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	@ 0x78
 800105a:	f000 fa17 	bl	800148c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800105e:	2212      	movs	r2, #18
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	@ 0x78
 8001064:	f000 fa12 	bl	800148c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001068:	22db      	movs	r2, #219	@ 0xdb
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	@ 0x78
 800106e:	f000 fa0d 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	@ 0x78
 8001078:	f000 fa08 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800107c:	228d      	movs	r2, #141	@ 0x8d
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	@ 0x78
 8001082:	f000 fa03 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f000 f9fe 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001090:	22af      	movs	r2, #175	@ 0xaf
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	@ 0x78
 8001096:	f000 f9f9 	bl	800148c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800109a:	222e      	movs	r2, #46	@ 0x2e
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	@ 0x78
 80010a0:	f000 f9f4 	bl	800148c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f843 	bl	8001130 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010aa:	f000 f813 	bl	80010d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <SSD1306_Init+0x184>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SSD1306_Init+0x184>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SSD1306_Init+0x184>)
 80010bc:	2201      	movs	r2, #1
 80010be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002e4 	.word	0x200002e4
 80010d0:	20000868 	.word	0x20000868

080010d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e01d      	b.n	800111c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3b50      	subs	r3, #80	@ 0x50
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	2078      	movs	r0, #120	@ 0x78
 80010ec:	f000 f9ce 	bl	800148c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	@ 0x78
 80010f6:	f000 f9c9 	bl	800148c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010fa:	2210      	movs	r2, #16
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	@ 0x78
 8001100:	f000 f9c4 	bl	800148c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	01db      	lsls	r3, r3, #7
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <SSD1306_UpdateScreen+0x58>)
 800110a:	441a      	add	r2, r3
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	2140      	movs	r1, #64	@ 0x40
 8001110:	2078      	movs	r0, #120	@ 0x78
 8001112:	f000 f955 	bl	80013c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	3301      	adds	r3, #1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d9de      	bls.n	80010e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000468 	.word	0x20000468

08001130 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <SSD1306_Fill+0x14>
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <SSD1306_Fill+0x16>
 8001144:	23ff      	movs	r3, #255	@ 0xff
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	4619      	mov	r1, r3
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <SSD1306_Fill+0x2c>)
 800114e:	f006 fd4b 	bl	8007be8 <memset>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000468 	.word	0x20000468

08001160 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	70fb      	strb	r3, [r7, #3]
	if (
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2b7f      	cmp	r3, #127	@ 0x7f
 8001176:	d848      	bhi.n	800120a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	2b3f      	cmp	r3, #63	@ 0x3f
 800117c:	d845      	bhi.n	800120a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <SSD1306_DrawPixel+0xb8>)
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf0c      	ite	eq
 800118c:	2301      	moveq	r3, #1
 800118e:	2300      	movne	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d11a      	bne.n	80011d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	b298      	uxth	r0, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	01db      	lsls	r3, r3, #7
 80011a6:	4413      	add	r3, r2
 80011a8:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <SSD1306_DrawPixel+0xbc>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b259      	sxtb	r1, r3
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	4603      	mov	r3, r0
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	4413      	add	r3, r2
 80011c8:	b2c9      	uxtb	r1, r1
 80011ca:	4a14      	ldr	r2, [pc, #80]	@ (800121c <SSD1306_DrawPixel+0xbc>)
 80011cc:	54d1      	strb	r1, [r2, r3]
 80011ce:	e01d      	b.n	800120c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	b298      	uxth	r0, r3
 80011d8:	4603      	mov	r3, r0
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4413      	add	r3, r2
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <SSD1306_DrawPixel+0xbc>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	b259      	sxtb	r1, r3
 80011fa:	88fa      	ldrh	r2, [r7, #6]
 80011fc:	4603      	mov	r3, r0
 80011fe:	01db      	lsls	r3, r3, #7
 8001200:	4413      	add	r3, r2
 8001202:	b2c9      	uxtb	r1, r1
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SSD1306_DrawPixel+0xbc>)
 8001206:	54d1      	strb	r1, [r2, r3]
 8001208:	e000      	b.n	800120c <SSD1306_DrawPixel+0xac>
		return;
 800120a:	bf00      	nop
	}
}
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000868 	.word	0x20000868
 800121c:	20000468 	.word	0x20000468

08001220 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001230:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SSD1306_GotoXY+0x28>)
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001236:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <SSD1306_GotoXY+0x28>)
 8001238:	88bb      	ldrh	r3, [r7, #4]
 800123a:	8053      	strh	r3, [r2, #2]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000868 	.word	0x20000868

0800124c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800125c:	4b39      	ldr	r3, [pc, #228]	@ (8001344 <SSD1306_Putc+0xf8>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
	if (
 8001268:	2b7f      	cmp	r3, #127	@ 0x7f
 800126a:	dc07      	bgt.n	800127c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800126c:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <SSD1306_Putc+0xf8>)
 800126e:	885b      	ldrh	r3, [r3, #2]
 8001270:	461a      	mov	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001278:	2b3f      	cmp	r3, #63	@ 0x3f
 800127a:	dd01      	ble.n	8001280 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800127c:	2300      	movs	r3, #0
 800127e:	e05d      	b.n	800133c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e04b      	b.n	800131e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3b20      	subs	r3, #32
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	7849      	ldrb	r1, [r1, #1]
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4619      	mov	r1, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	440b      	add	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	e030      	b.n	800130c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <SSD1306_Putc+0xf8>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b298      	uxth	r0, r3
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <SSD1306_Putc+0xf8>)
 80012c8:	885a      	ldrh	r2, [r3, #2]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff ff43 	bl	8001160 <SSD1306_DrawPixel>
 80012da:	e014      	b.n	8001306 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <SSD1306_Putc+0xf8>)
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b298      	uxth	r0, r3
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <SSD1306_Putc+0xf8>)
 80012ea:	885a      	ldrh	r2, [r3, #2]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	b299      	uxth	r1, r3
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	f7ff ff2d 	bl	8001160 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4293      	cmp	r3, r2
 8001316:	d3c8      	bcc.n	80012aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	461a      	mov	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4293      	cmp	r3, r2
 8001328:	d3ad      	bcc.n	8001286 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SSD1306_Putc+0xf8>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	4413      	add	r3, r2
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <SSD1306_Putc+0xf8>)
 8001338:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800133a:	79fb      	ldrb	r3, [r7, #7]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000868 	.word	0x20000868

08001348 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	4613      	mov	r3, r2
 8001354:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001356:	e012      	b.n	800137e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff73 	bl	800124c <SSD1306_Putc>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d002      	beq.n	8001378 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	e008      	b.n	800138a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e8      	bne.n	8001358 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <ssd1306_I2C_Init+0x28>)
 800139c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800139e:	e002      	b.n	80013a6 <ssd1306_I2C_Init+0x12>
		p--;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f9      	bne.n	80013a0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	0003d090 	.word	0x0003d090

080013c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b0c7      	sub	sp, #284	@ 0x11c
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80013ce:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80013d2:	600a      	str	r2, [r1, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013de:	4622      	mov	r2, r4
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013e6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013ea:	4602      	mov	r2, r0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f6:	460a      	mov	r2, r1
 80013f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001402:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001406:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800140e:	2300      	movs	r3, #0
 8001410:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001414:	e015      	b.n	8001442 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001416:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800141a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800141e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	441a      	add	r2, r3
 8001426:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800142a:	3301      	adds	r3, #1
 800142c:	7811      	ldrb	r1, [r2, #0]
 800142e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001432:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001436:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001438:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800143c:	3301      	adds	r3, #1
 800143e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001442:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001446:	b29b      	uxth	r3, r3
 8001448:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800144c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d8df      	bhi.n	8001416 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001456:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800145a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b299      	uxth	r1, r3
 8001462:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001466:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b29b      	uxth	r3, r3
 8001470:	f107 020c 	add.w	r2, r7, #12
 8001474:	200a      	movs	r0, #10
 8001476:	9000      	str	r0, [sp, #0]
 8001478:	4803      	ldr	r0, [pc, #12]	@ (8001488 <ssd1306_I2C_WriteMulti+0xc8>)
 800147a:	f001 f80b 	bl	8002494 <HAL_I2C_Master_Transmit>
}
 800147e:	bf00      	nop
 8001480:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	200002e4 	.word	0x200002e4

0800148c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014a2:	797b      	ldrb	r3, [r7, #5]
 80014a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b299      	uxth	r1, r3
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	230a      	movs	r3, #10
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2302      	movs	r3, #2
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <ssd1306_I2C_Write+0x38>)
 80014b6:	f000 ffed 	bl	8002494 <HAL_I2C_Master_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002e4 	.word	0x200002e4

080014c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_MspInit+0x4c>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_MspInit+0x4c>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_MspInit+0x4c>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	210f      	movs	r1, #15
 8001502:	f06f 0001 	mvn.w	r0, #1
 8001506:	f000 fbe5 	bl	8001cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b09e      	sub	sp, #120	@ 0x78
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2254      	movs	r2, #84	@ 0x54
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fb55 	bl	8007be8 <memset>
  if(hi2c->Instance==I2C1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <HAL_I2C_MspInit+0x108>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d166      	bne.n	8001616 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001548:	2340      	movs	r3, #64	@ 0x40
 800154a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fccd 	bl	8003ef4 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001560:	f7ff fcb4 	bl	8000ecc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157c:	23c0      	movs	r3, #192	@ 0xc0
 800157e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158c:	2304      	movs	r3, #4
 800158e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001594:	4619      	mov	r1, r3
 8001596:	4824      	ldr	r0, [pc, #144]	@ (8001628 <HAL_I2C_MspInit+0x110>)
 8001598:	f000 fd2e 	bl	8001ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159c:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a20      	ldr	r2, [pc, #128]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 80015a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_I2C_MspInit+0x10c>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_I2C_MspInit+0x118>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015bc:	2203      	movs	r2, #3
 80015be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015ea:	4810      	ldr	r0, [pc, #64]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015ec:	f000 fb9c 	bl	8001d28 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 80015f6:	f7ff fc69 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_I2C_MspInit+0x114>)
 80015fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_I2C_MspInit+0x114>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	201f      	movs	r0, #31
 800160c:	f000 fb62 	bl	8001cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001610:	201f      	movs	r0, #31
 8001612:	f000 fb7b 	bl	8001d0c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3778      	adds	r7, #120	@ 0x78
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40005400 	.word	0x40005400
 8001624:	40021000 	.word	0x40021000
 8001628:	48000400 	.word	0x48000400
 800162c:	20000338 	.word	0x20000338
 8001630:	40020080 	.word	0x40020080

08001634 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d10b      	bne.n	800165e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6593      	str	r3, [r2, #88]	@ 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_TIM_Base_MspInit+0x38>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001690:	d11c      	bne.n	80016cc <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_TIM_MspPostInit+0x64>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <HAL_TIM_MspPostInit+0x64>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_TIM_MspPostInit+0x64>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 80016aa:	2322      	movs	r3, #34	@ 0x22
 80016ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c8:	f000 fc96 	bl	8001ff8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09e      	sub	sp, #120	@ 0x78
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2254      	movs	r2, #84	@ 0x54
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 fa75 	bl	8007be8 <memset>
  if(huart->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	@ (80017a4 <HAL_UART_MspInit+0xcc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d148      	bne.n	800179a <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fbed 	bl	8003ef4 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001720:	f7ff fbd4 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 800172a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001730:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_UART_MspInit+0xd0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001754:	2304      	movs	r3, #4
 8001756:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f000 fc41 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800177a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001788:	2303      	movs	r3, #3
 800178a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f000 fc2f 	bl	8001ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800179a:	bf00      	nop
 800179c:	3778      	adds	r7, #120	@ 0x78
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <HAL_InitTick+0xc8>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	4a2d      	ldr	r2, [pc, #180]	@ (8001874 <HAL_InitTick+0xc8>)
 80017c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_InitTick+0xc8>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d2:	f107 020c 	add.w	r2, r7, #12
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 faf7 	bl	8003dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017e2:	f002 fadf 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 80017e6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ea:	4a23      	ldr	r2, [pc, #140]	@ (8001878 <HAL_InitTick+0xcc>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	3b01      	subs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_InitTick+0xd0>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_InitTick+0xd4>)
 80017fa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <HAL_InitTick+0xd0>)
 80017fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001802:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_InitTick+0xd0>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_InitTick+0xd0>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_InitTick+0xd0>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_InitTick+0xd0>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800181c:	4817      	ldr	r0, [pc, #92]	@ (800187c <HAL_InitTick+0xd0>)
 800181e:	f002 fe61 	bl	80044e4 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11b      	bne.n	8001868 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001830:	4812      	ldr	r0, [pc, #72]	@ (800187c <HAL_InitTick+0xd0>)
 8001832:	f002 feaf 	bl	8004594 <HAL_TIM_Base_Start_IT>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800183c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001840:	2b00      	cmp	r3, #0
 8001842:	d111      	bne.n	8001868 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001844:	2019      	movs	r0, #25
 8001846:	f000 fa61 	bl	8001d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d808      	bhi.n	8001862 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	2019      	movs	r0, #25
 8001856:	f000 fa3d 	bl	8001cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_InitTick+0xd8>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800186c:	4618      	mov	r0, r3
 800186e:	3730      	adds	r7, #48	@ 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	431bde83 	.word	0x431bde83
 800187c:	20000870 	.word	0x20000870
 8001880:	40012c00 	.word	0x40012c00
 8001884:	2000000c 	.word	0x2000000c

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <DMA1_Channel7_IRQHandler+0x10>)
 80018c6:	f000 fae7 	bl	8001e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000338 	.word	0x20000338

080018d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018da:	f002 ff10 	bl	80046fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000870 	.word	0x20000870

080018e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <I2C1_EV_IRQHandler+0x10>)
 80018ee:	f001 f8cb 	bl	8002a88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002e4 	.word	0x200002e4

080018fc <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001900:	2001      	movs	r0, #1
 8001902:	f000 fd13 	bl	800232c <HAL_GPIO_EXTI_IRQHandler>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x24>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000464 	.word	0x20000464

08001934 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fe21 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
  }
  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f006 f920 	bl	8007c84 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000c000 	.word	0x2000c000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	200008bc 	.word	0x200008bc
 8001a78:	20001720 	.word	0x20001720

08001a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa4:	f7ff ffea 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopForever+0x6>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopForever+0xe>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopForever+0x16>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f006 f8df 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad2:	f7fe fd8f 	bl	80005f4 <main>

08001ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad6:	e7fe      	b.n	8001ad6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ae4:	08009640 	.word	0x08009640
  ldr r2, =_sbss
 8001ae8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001aec:	2000171c 	.word	0x2000171c

08001af0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_IRQHandler>

08001af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f8de 	bl	8001cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	200f      	movs	r0, #15
 8001b04:	f7ff fe52 	bl	80017ac <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	e001      	b.n	8001b18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b14:	f7ff fcd8 	bl	80014c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000010 	.word	0x20000010
 8001b48:	200008c0 	.word	0x200008c0

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200008c0 	.word	0x200008c0

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	@ (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	@ (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff4c 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce6:	f7ff ff61 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7ff ffb1 	bl	8001c58 <NVIC_EncodePriority>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff80 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff54 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e098      	b.n	8001e6c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b4d      	ldr	r3, [pc, #308]	@ (8001e78 <HAL_DMA_Init+0x150>)
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d80f      	bhi.n	8001d66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e7c <HAL_DMA_Init+0x154>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a4b      	ldr	r2, [pc, #300]	@ (8001e80 <HAL_DMA_Init+0x158>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_DMA_Init+0x15c>)
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d64:	e00e      	b.n	8001d84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b46      	ldr	r3, [pc, #280]	@ (8001e88 <HAL_DMA_Init+0x160>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a43      	ldr	r2, [pc, #268]	@ (8001e80 <HAL_DMA_Init+0x158>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a42      	ldr	r2, [pc, #264]	@ (8001e8c <HAL_DMA_Init+0x164>)
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dde:	d039      	beq.n	8001e54 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	4a27      	ldr	r2, [pc, #156]	@ (8001e84 <HAL_DMA_Init+0x15c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11a      	bne.n	8001e20 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dea:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_DMA_Init+0x168>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f003 031c 	and.w	r3, r3, #28
 8001df6:	210f      	movs	r1, #15
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4924      	ldr	r1, [pc, #144]	@ (8001e90 <HAL_DMA_Init+0x168>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_DMA_Init+0x168>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	f003 031c 	and.w	r3, r3, #28
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	491d      	ldr	r1, [pc, #116]	@ (8001e90 <HAL_DMA_Init+0x168>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
 8001e1e:	e019      	b.n	8001e54 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_DMA_Init+0x16c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	f003 031c 	and.w	r3, r3, #28
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4917      	ldr	r1, [pc, #92]	@ (8001e94 <HAL_DMA_Init+0x16c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_DMA_Init+0x16c>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f003 031c 	and.w	r3, r3, #28
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	4911      	ldr	r1, [pc, #68]	@ (8001e94 <HAL_DMA_Init+0x16c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40020407 	.word	0x40020407
 8001e7c:	bffdfff8 	.word	0xbffdfff8
 8001e80:	cccccccd 	.word	0xcccccccd
 8001e84:	40020000 	.word	0x40020000
 8001e88:	bffdfbf8 	.word	0xbffdfbf8
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	400200a8 	.word	0x400200a8
 8001e94:	400204a8 	.word	0x400204a8

08001e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	f003 031c 	and.w	r3, r3, #28
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d026      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x7a>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d021      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f003 021c 	and.w	r2, r3, #28
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2104      	movs	r1, #4
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d071      	beq.n	8001fec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f10:	e06c      	b.n	8001fec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f003 031c 	and.w	r3, r3, #28
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d02e      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xec>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d029      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020a 	bic.w	r2, r2, #10
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f003 021c 	and.w	r2, r3, #28
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	2102      	movs	r1, #2
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d038      	beq.n	8001fec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f82:	e033      	b.n	8001fec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f88:	f003 031c 	and.w	r3, r3, #28
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02a      	beq.n	8001fee <HAL_DMA_IRQHandler+0x156>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d025      	beq.n	8001fee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 020e 	bic.w	r2, r2, #14
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f003 021c 	and.w	r2, r3, #28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
}
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e148      	b.n	800229a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 813a 	beq.w	8002294 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8094 	beq.w	8002294 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_GPIO_Init+0x2c0>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002170:	4a51      	ldr	r2, [pc, #324]	@ (80022b8 <HAL_GPIO_Init+0x2c0>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6613      	str	r3, [r2, #96]	@ 0x60
 8002178:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <HAL_GPIO_Init+0x2c0>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <HAL_GPIO_Init+0x2c4>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ae:	d00d      	beq.n	80021cc <HAL_GPIO_Init+0x1d4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <HAL_GPIO_Init+0x2c8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0x1d0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a42      	ldr	r2, [pc, #264]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_GPIO_Init+0x1cc>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e004      	b.n	80021ce <HAL_GPIO_Init+0x1d6>
 80021c4:	2307      	movs	r3, #7
 80021c6:	e002      	b.n	80021ce <HAL_GPIO_Init+0x1d6>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_GPIO_Init+0x1d6>
 80021cc:	2300      	movs	r3, #0
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4093      	lsls	r3, r2
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021de:	4937      	ldr	r1, [pc, #220]	@ (80022bc <HAL_GPIO_Init+0x2c4>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ec:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002210:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002216:	4b2c      	ldr	r3, [pc, #176]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800223a:	4a23      	ldr	r2, [pc, #140]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002264:	4a18      	ldr	r2, [pc, #96]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228e:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3301      	adds	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f47f aeaf 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	48000400 	.word	0x48000400
 80022c4:	48000800 	.word	0x48000800
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002318:	e002      	b.n	8002320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fade 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08d      	b.n	800248a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff f8c8 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	@ 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e006      	b.n	80023e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d108      	bne.n	80023fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	e007      	b.n	800240e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69d9      	ldr	r1, [r3, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80fd 	bne.w	80026b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x30>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0f6      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024cc:	f7ff fb3e 	bl	8001b4c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fb10 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0e1      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2221      	movs	r2, #33	@ 0x21
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2210      	movs	r2, #16
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2bff      	cmp	r3, #255	@ 0xff
 800251e:	d906      	bls.n	800252e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	22ff      	movs	r2, #255	@ 0xff
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e007      	b.n	800253e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002538:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <HAL_I2C_Master_Transmit+0x228>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fd0b 	bl	8002fa4 <I2C_TransferConfig>
 800258e:	e066      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <HAL_I2C_Master_Transmit+0x228>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fd00 	bl	8002fa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025a4:	e05b      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fb03 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d034      	beq.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d130      	bne.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2200      	movs	r2, #0
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa7c 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e04d      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2bff      	cmp	r3, #255	@ 0xff
 800261e:	d90e      	bls.n	800263e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fcb4 	bl	8002fa4 <I2C_TransferConfig>
 800263c:	e00f      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fca3 	bl	8002fa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d19e      	bne.n	80025a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	6a39      	ldr	r1, [r7, #32]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fae9 	bl	8002c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01a      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2220      	movs	r2, #32
 8002682:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_I2C_Master_Transmit+0x22c>)
 8002690:	400b      	ands	r3, r1
 8002692:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	80002000 	.word	0x80002000
 80026c0:	fe00e800 	.word	0xfe00e800

080026c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	f040 80db 	bne.w	800289c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x30>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0d4      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026fc:	f7ff fa26 	bl	8001b4c <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2319      	movs	r3, #25
 8002708:	2201      	movs	r2, #1
 800270a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f9f8 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0bf      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2222      	movs	r2, #34	@ 0x22
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2210      	movs	r2, #16
 800272a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	893a      	ldrh	r2, [r7, #8]
 800273e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2bff      	cmp	r3, #255	@ 0xff
 800274e:	d90e      	bls.n	800276e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	b2da      	uxtb	r2, r3
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	4b52      	ldr	r3, [pc, #328]	@ (80028a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fc1c 	bl	8002fa4 <I2C_TransferConfig>
 800276c:	e06d      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fc0b 	bl	8002fa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800278e:	e05c      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	6a39      	ldr	r1, [r7, #32]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa99 	bl	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e07c      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d034      	beq.n	800284a <HAL_I2C_Master_Receive+0x186>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d130      	bne.n	800284a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f986 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e04d      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2bff      	cmp	r3, #255	@ 0xff
 800280a:	d90e      	bls.n	800282a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22ff      	movs	r2, #255	@ 0xff
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002816:	b2da      	uxtb	r2, r3
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	2300      	movs	r3, #0
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fbbe 	bl	8002fa4 <I2C_TransferConfig>
 8002828:	e00f      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fbad 	bl	8002fa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d19d      	bne.n	8002790 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f9f3 	bl	8002c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <HAL_I2C_Master_Receive+0x1e8>)
 800287c:	400b      	ands	r3, r1
 800287e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	80002400 	.word	0x80002400
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 80d6 	bne.w	8002a7e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0cc      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2C_IsDeviceReady+0x44>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0c5      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_I2C_IsDeviceReady+0x72>
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002918:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800291c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002920:	e006      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x80>
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800292c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002936:	f7ff f909 	bl	8001b4c <HAL_GetTick>
 800293a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002968:	e034      	b.n	80029d4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d01a      	beq.n	80029a8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7ff f8eb 	bl	8001b4c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <HAL_I2C_IsDeviceReady+0xd8>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e06b      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_I2C_IsDeviceReady+0x130>
 80029da:	7fbb      	ldrb	r3, [r7, #30]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0c4      	beq.n	800296a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d01a      	beq.n	8002a24 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2120      	movs	r1, #32
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f883 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e03b      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e02d      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f868 	bl	8002b04 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e020      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2210      	movs	r2, #16
 8002a44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f63f af56 	bhi.w	800290a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	68f9      	ldr	r1, [r7, #12]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d103      	bne.n	8002ada <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d007      	beq.n	8002af8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	619a      	str	r2, [r3, #24]
  }
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b14:	e03b      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f962 	bl	8002de4 <I2C_IsErrorOccurred>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d02d      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7ff f80b 	bl	8001b4c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d122      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d113      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d0b4      	beq.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc2:	e033      	b.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f90b 	bl	8002de4 <I2C_IsErrorOccurred>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e031      	b.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d025      	beq.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe ffb4 	bl	8001b4c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11a      	bne.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d013      	beq.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e007      	b.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d1c4      	bne.n	8002bc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c50:	e02f      	b.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8c4 	bl	8002de4 <I2C_IsErrorOccurred>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e02d      	b.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c66:	f7fe ff71 	bl	8001b4c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d302      	bcc.n	8002c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11a      	bne.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d013      	beq.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d1c8      	bne.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002cdc:	e071      	b.n	8002dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f87e 	bl	8002de4 <I2C_IsErrorOccurred>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d13b      	bne.n	8002d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d138      	bne.n	8002d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d105      	bne.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d121      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
 8002d70:	e002      	b.n	8002d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002d78:	f7fe fee8 	bl	8001b4c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00f      	beq.n	8002dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d002      	beq.n	8002dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d083      	beq.n	8002cde <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	fe00e800 	.word	0xfe00e800

08002de4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d068      	beq.n	8002ee2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2210      	movs	r2, #16
 8002e16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e18:	e049      	b.n	8002eae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d045      	beq.n	8002eae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fe93 	bl	8001b4c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_IsErrorOccurred+0x54>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d13a      	bne.n	8002eae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e5a:	d121      	bne.n	8002ea0 <I2C_IsErrorOccurred+0xbc>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e62:	d01d      	beq.n	8002ea0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d01a      	beq.n	8002ea0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e7a:	f7fe fe67 	bl	8001b4c <HAL_GetTick>
 8002e7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	e00e      	b.n	8002ea0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e82:	f7fe fe63 	bl	8001b4c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b19      	cmp	r3, #25
 8002e8e:	d907      	bls.n	8002ea0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f043 0320 	orr.w	r3, r3, #32
 8002e96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e9e:	e006      	b.n	8002eae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d1e9      	bne.n	8002e82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d003      	beq.n	8002ec4 <I2C_IsErrorOccurred+0xe0>
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0aa      	beq.n	8002e1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01c      	beq.n	8002f92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fdaf 	bl	8002abc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <I2C_IsErrorOccurred+0x1bc>)
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	817b      	strh	r3, [r7, #10]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fbc:	7a7b      	ldrb	r3, [r7, #9]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	0d5b      	lsrs	r3, r3, #21
 8002fde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <I2C_TransferConfig+0x60>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	ea02 0103 	and.w	r1, r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	03ff63ff 	.word	0x03ff63ff

08003008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	d138      	bne.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003028:	2302      	movs	r3, #2
 800302a:	e032      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800305a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d139      	bne.n	8003128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030be:	2302      	movs	r3, #2
 80030c0:	e033      	b.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2224      	movs	r2, #36	@ 0x24
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40007000 	.word	0x40007000

08003158 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <HAL_PWREx_GetVoltageRange+0x18>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000

08003174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003182:	d130      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003184:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800318c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003190:	d038      	beq.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800319a:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2232      	movs	r2, #50	@ 0x32
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	3301      	adds	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b8:	e002      	b.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3b01      	subs	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031cc:	d102      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f2      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d110      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e00f      	b.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f2:	d007      	beq.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f4:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031fc:	4a05      	ldr	r2, [pc, #20]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003202:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40007000 	.word	0x40007000
 8003218:	20000008 	.word	0x20000008
 800321c:	431bde83 	.word	0x431bde83

08003220 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f000 bc02 	b.w	8003a38 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003234:	4b96      	ldr	r3, [pc, #600]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800323e:	4b94      	ldr	r3, [pc, #592]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80e4 	beq.w	800341e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_RCC_OscConfig+0x4c>
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	f040 808b 	bne.w	800337a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b01      	cmp	r3, #1
 8003268:	f040 8087 	bne.w	800337a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800326c:	4b88      	ldr	r3, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x64>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e3d9      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	4b81      	ldr	r3, [pc, #516]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_RCC_OscConfig+0x7e>
 8003294:	4b7e      	ldr	r3, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800329c:	e005      	b.n	80032aa <HAL_RCC_OscConfig+0x8a>
 800329e:	4b7c      	ldr	r3, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d223      	bcs.n	80032f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdbe 	bl	8003e34 <RCC_SetFlashLatencyFromMSIRange>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e3ba      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c2:	4b73      	ldr	r3, [pc, #460]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a72      	ldr	r2, [pc, #456]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b70      	ldr	r3, [pc, #448]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	496d      	ldr	r1, [pc, #436]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4968      	ldr	r1, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e025      	b.n	8003342 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f6:	4b66      	ldr	r3, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a65      	ldr	r2, [pc, #404]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b63      	ldr	r3, [pc, #396]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4960      	ldr	r1, [pc, #384]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003314:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	495b      	ldr	r1, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fd7e 	bl	8003e34 <RCC_SetFlashLatencyFromMSIRange>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e37a      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003342:	f000 fc81 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b51      	ldr	r3, [pc, #324]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	4950      	ldr	r1, [pc, #320]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a4e      	ldr	r2, [pc, #312]	@ (8003498 <HAL_RCC_OscConfig+0x278>)
 8003360:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003362:	4b4e      	ldr	r3, [pc, #312]	@ (800349c <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fa20 	bl	80017ac <HAL_InitTick>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d052      	beq.n	800341c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	e35e      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d032      	beq.n	80033e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003382:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a42      	ldr	r2, [pc, #264]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800338e:	f7fe fbdd 	bl	8001b4c <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003396:	f7fe fbd9 	bl	8001b4c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e347      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a8:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a35      	ldr	r2, [pc, #212]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b33      	ldr	r3, [pc, #204]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4930      	ldr	r1, [pc, #192]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	492b      	ldr	r1, [pc, #172]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e01a      	b.n	800341e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033e8:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a28      	ldr	r2, [pc, #160]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fbaa 	bl	8001b4c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fc:	f7fe fba6 	bl	8001b4c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e314      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x1dc>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d073      	beq.n	8003512 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d005      	beq.n	800343c <HAL_RCC_OscConfig+0x21c>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d10e      	bne.n	8003454 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d063      	beq.n	8003510 <HAL_RCC_OscConfig+0x2f0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d15f      	bne.n	8003510 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e2f1      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x24c>
 800345e:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e025      	b.n	80034b8 <HAL_RCC_OscConfig+0x298>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003474:	d114      	bne.n	80034a0 <HAL_RCC_OscConfig+0x280>
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a05      	ldr	r2, [pc, #20]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a02      	ldr	r2, [pc, #8]	@ (8003490 <HAL_RCC_OscConfig+0x270>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e013      	b.n	80034b8 <HAL_RCC_OscConfig+0x298>
 8003490:	40021000 	.word	0x40021000
 8003494:	080095b4 	.word	0x080095b4
 8003498:	20000008 	.word	0x20000008
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	4ba0      	ldr	r3, [pc, #640]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fb44 	bl	8001b4c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fb40 	bl	8001b4c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e2ae      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034da:	4b92      	ldr	r3, [pc, #584]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x2a8>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fb30 	bl	8001b4c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fb2c 	bl	8001b4c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e29a      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003502:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2d0>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d060      	beq.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d005      	beq.n	8003530 <HAL_RCC_OscConfig+0x310>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d119      	bne.n	800355e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d116      	bne.n	800355e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003530:	4b7c      	ldr	r3, [pc, #496]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x328>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e277      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	4973      	ldr	r1, [pc, #460]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800355c:	e040      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d023      	beq.n	80035ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003566:	4b6f      	ldr	r3, [pc, #444]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6e      	ldr	r2, [pc, #440]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe faeb 	bl	8001b4c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357a:	f7fe fae7 	bl	8001b4c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e255      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	4b65      	ldr	r3, [pc, #404]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b62      	ldr	r3, [pc, #392]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	495f      	ldr	r1, [pc, #380]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
 80035ac:	e018      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe fac7 	bl	8001b4c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c2:	f7fe fac3 	bl	8001b4c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e231      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d4:	4b53      	ldr	r3, [pc, #332]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d03c      	beq.n	8003666 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01c      	beq.n	800362e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe faa2 	bl	8001b4c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360c:	f7fe fa9e 	bl	8001b4c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e20c      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361e:	4b41      	ldr	r3, [pc, #260]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <HAL_RCC_OscConfig+0x3ec>
 800362c:	e01b      	b.n	8003666 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362e:	4b3d      	ldr	r3, [pc, #244]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003634:	4a3b      	ldr	r2, [pc, #236]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe fa85 	bl	8001b4c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003646:	f7fe fa81 	bl	8001b4c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1ef      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ef      	bne.n	8003646 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003678:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003684:	4b27      	ldr	r3, [pc, #156]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003690:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	4b21      	ldr	r3, [pc, #132]	@ (8003728 <HAL_RCC_OscConfig+0x508>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d118      	bne.n	80036de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <HAL_RCC_OscConfig+0x508>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_RCC_OscConfig+0x508>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b8:	f7fe fa48 	bl	8001b4c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fe fa44 	bl	8001b4c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1b2      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d2:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <HAL_RCC_OscConfig+0x508>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d108      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4d8>
 80036e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036f6:	e029      	b.n	800374c <HAL_RCC_OscConfig+0x52c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	d115      	bne.n	800372c <HAL_RCC_OscConfig+0x50c>
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003706:	4a07      	ldr	r2, [pc, #28]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	4a03      	ldr	r2, [pc, #12]	@ (8003724 <HAL_RCC_OscConfig+0x504>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003720:	e014      	b.n	800374c <HAL_RCC_OscConfig+0x52c>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
 800372c:	4b9a      	ldr	r3, [pc, #616]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003732:	4a99      	ldr	r2, [pc, #612]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800373c:	4b96      	ldr	r3, [pc, #600]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	4a95      	ldr	r2, [pc, #596]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe f9fa 	bl	8001b4c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fe f9f6 	bl	8001b4c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e162      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	4b89      	ldr	r3, [pc, #548]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ed      	beq.n	800375c <HAL_RCC_OscConfig+0x53c>
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe f9e3 	bl	8001b4c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe f9df 	bl	8001b4c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e14b      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ed      	bne.n	800378a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b78      	ldr	r3, [pc, #480]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	4a77      	ldr	r2, [pc, #476]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03c      	beq.n	8003846 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01c      	beq.n	800380e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d4:	4b70      	ldr	r3, [pc, #448]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037da:	4a6f      	ldr	r2, [pc, #444]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe f9b2 	bl	8001b4c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ec:	f7fe f9ae 	bl	8001b4c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e11c      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fe:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <HAL_RCC_OscConfig+0x5cc>
 800380c:	e01b      	b.n	8003846 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800380e:	4b62      	ldr	r3, [pc, #392]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003814:	4a60      	ldr	r2, [pc, #384]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fe f995 	bl	8001b4c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003826:	f7fe f991 	bl	8001b4c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0ff      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ef      	bne.n	8003826 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80f3 	beq.w	8003a36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	2b02      	cmp	r3, #2
 8003856:	f040 80c9 	bne.w	80039ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800385a:	4b4f      	ldr	r3, [pc, #316]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	429a      	cmp	r2, r3
 800386c:	d12c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	3b01      	subs	r3, #1
 800387a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d123      	bne.n	80038c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d11b      	bne.n	80038c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d113      	bne.n	80038c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d109      	bne.n	80038c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d06b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d062      	beq.n	8003994 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ce:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0ac      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038de:	4b2e      	ldr	r3, [pc, #184]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 80038e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ea:	f7fe f92f 	bl	8001b4c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe f92b 	bl	8001b4c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e099      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003910:	4b21      	ldr	r3, [pc, #132]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <HAL_RCC_OscConfig+0x77c>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003920:	3a01      	subs	r2, #1
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800392a:	0212      	lsls	r2, r2, #8
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0552      	lsls	r2, r2, #21
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800394a:	06d2      	lsls	r2, r2, #27
 800394c:	430a      	orrs	r2, r1
 800394e:	4912      	ldr	r1, [pc, #72]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003954:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0f      	ldr	r2, [pc, #60]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003960:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800396a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800396c:	f7fe f8ee 	bl	8001b4c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe f8ea 	bl	8001b4c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e058      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <HAL_RCC_OscConfig+0x778>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003992:	e050      	b.n	8003a36 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04f      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
 8003998:	40021000 	.word	0x40021000
 800399c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d144      	bne.n	8003a36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039ac:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a20      	ldr	r2, [pc, #128]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039c4:	f7fe f8c2 	bl	8001b4c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe f8be 	bl	8001b4c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e02c      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b18      	ldr	r3, [pc, #96]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x7ac>
 80039ea:	e024      	b.n	8003a36 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d01f      	beq.n	8003a32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b13      	ldr	r3, [pc, #76]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 80039f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fe f8a5 	bl	8001b4c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fe f8a1 	bl	8001b4c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e00f      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f0      	bne.n	8003a06 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a24:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	4905      	ldr	r1, [pc, #20]	@ (8003a40 <HAL_RCC_OscConfig+0x820>)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_OscConfig+0x824>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
 8003a30:	e001      	b.n	8003a36 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	feeefffc 	.word	0xfeeefffc

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0e7      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b75      	ldr	r3, [pc, #468]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d910      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b72      	ldr	r3, [pc, #456]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4970      	ldr	r1, [pc, #448]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0cf      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	4b66      	ldr	r3, [pc, #408]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d908      	bls.n	8003aba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b63      	ldr	r3, [pc, #396]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4960      	ldr	r1, [pc, #384]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04c      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b5a      	ldr	r3, [pc, #360]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d121      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0a6      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae6:	4b54      	ldr	r3, [pc, #336]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d115      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e09a      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003afe:	4b4e      	ldr	r3, [pc, #312]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e08e      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e086      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b46      	ldr	r3, [pc, #280]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4943      	ldr	r1, [pc, #268]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fe f80c 	bl	8001b4c <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fe f808 	bl	8001b4c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e06e      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	4b31      	ldr	r3, [pc, #196]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d208      	bcs.n	8003b8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	492b      	ldr	r1, [pc, #172]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8e:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d210      	bcs.n	8003bbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9c:	4b25      	ldr	r3, [pc, #148]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 0207 	bic.w	r2, r3, #7
 8003ba4:	4923      	ldr	r1, [pc, #140]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bac:	4b21      	ldr	r3, [pc, #132]	@ (8003c34 <HAL_RCC_ClockConfig+0x1ec>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e036      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4918      	ldr	r1, [pc, #96]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4910      	ldr	r1, [pc, #64]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bfc:	f000 f824 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	490b      	ldr	r1, [pc, #44]	@ (8003c3c <HAL_RCC_ClockConfig+0x1f4>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	4a09      	ldr	r2, [pc, #36]	@ (8003c40 <HAL_RCC_ClockConfig+0x1f8>)
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <HAL_RCC_ClockConfig+0x1fc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd fdc3 	bl	80017ac <HAL_InitTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	080095b4 	.word	0x080095b4
 8003c40:	20000008 	.word	0x20000008
 8003c44:	2000000c 	.word	0x2000000c

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	@ 0x24
 8003c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c56:	4b3e      	ldr	r3, [pc, #248]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c60:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x34>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d121      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d11e      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c7c:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c88:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e005      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c98:	4b2d      	ldr	r3, [pc, #180]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e004      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ccc:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d134      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0xa6>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8003cec:	e005      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cee:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cf0:	617b      	str	r3, [r7, #20]
      break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cf6:	617b      	str	r3, [r7, #20]
      break;
 8003cf8:	e002      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	617b      	str	r3, [r7, #20]
      break;
 8003cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d00:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	fb03 f202 	mul.w	r2, r3, r2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d26:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	0e5b      	lsrs	r3, r3, #25
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	3301      	adds	r3, #1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d40:	69bb      	ldr	r3, [r7, #24]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3724      	adds	r7, #36	@ 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	080095cc 	.word	0x080095cc
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000008 	.word	0x20000008

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	080095c4 	.word	0x080095c4

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003da8:	f7ff ffda 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4904      	ldr	r1, [pc, #16]	@ (8003dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	080095c4 	.word	0x080095c4

08003dd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	220f      	movs	r2, #15
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003de0:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003dec:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e04:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e12:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <HAL_RCC_GetClockConfig+0x60>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40022000 	.word	0x40022000

08003e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e4c:	f7ff f984 	bl	8003158 <HAL_PWREx_GetVoltageRange>
 8003e50:	6178      	str	r0, [r7, #20]
 8003e52:	e014      	b.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	4a24      	ldr	r2, [pc, #144]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e60:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e6c:	f7ff f974 	bl	8003158 <HAL_PWREx_GetVoltageRange>
 8003e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e84:	d10b      	bne.n	8003e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d919      	bls.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e90:	d902      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e92:	2302      	movs	r3, #2
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e013      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	e010      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b80      	cmp	r3, #128	@ 0x80
 8003ea2:	d902      	bls.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e00a      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d102      	bne.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e004      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b70      	cmp	r3, #112	@ 0x70
 8003eba:	d101      	bne.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 0207 	bic.w	r2, r3, #7
 8003ec8:	4909      	ldr	r1, [pc, #36]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40022000 	.word	0x40022000

08003ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003efc:	2300      	movs	r3, #0
 8003efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f00:	2300      	movs	r3, #0
 8003f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d031      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f18:	d01a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f1e:	d814      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f36:	e00c      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f9de 	bl	8004300 <RCCEx_PLLSAI1_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f48:	e003      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f58:	4b51      	ldr	r3, [pc, #324]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	494e      	ldr	r1, [pc, #312]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f6e:	e001      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 809e 	beq.w	80040be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f86:	4b46      	ldr	r3, [pc, #280]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9c:	4b40      	ldr	r3, [pc, #256]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa0:	4a3f      	ldr	r2, [pc, #252]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a39      	ldr	r2, [pc, #228]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fdc2 	bl	8001b4c <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fca:	e009      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd fdbe 	bl	8001b4c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d902      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe0:	4b30      	ldr	r3, [pc, #192]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d15a      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01e      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	429a      	cmp	r2, r3
 800400c:	d019      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800400e:	4b24      	ldr	r3, [pc, #144]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004018:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800401a:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004020:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800402a:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800403a:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d016      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fd7e 	bl	8001b4c <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004052:	e00b      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fd fd7a 	bl	8001b4c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d902      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	74fb      	strb	r3, [r7, #19]
            break;
 800406a:	e006      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ec      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408e:	4904      	ldr	r1, [pc, #16]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004096:	e009      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	74bb      	strb	r3, [r7, #18]
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ac:	7c7b      	ldrb	r3, [r7, #17]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b8a      	ldr	r3, [pc, #552]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b6:	4a89      	ldr	r2, [pc, #548]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ca:	4b84      	ldr	r3, [pc, #528]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f023 0203 	bic.w	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4980      	ldr	r1, [pc, #512]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ec:	4b7b      	ldr	r3, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f023 020c 	bic.w	r2, r3, #12
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	4978      	ldr	r1, [pc, #480]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410e:	4b73      	ldr	r3, [pc, #460]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	496f      	ldr	r1, [pc, #444]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004130:	4b6a      	ldr	r3, [pc, #424]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413e:	4967      	ldr	r1, [pc, #412]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004152:	4b62      	ldr	r3, [pc, #392]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	495e      	ldr	r1, [pc, #376]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	4956      	ldr	r1, [pc, #344]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004196:	4b51      	ldr	r3, [pc, #324]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	494d      	ldr	r1, [pc, #308]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d028      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b8:	4b48      	ldr	r3, [pc, #288]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	4945      	ldr	r1, [pc, #276]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d6:	d106      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b40      	ldr	r3, [pc, #256]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a3f      	ldr	r2, [pc, #252]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
 80041e4:	e011      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ee:	d10c      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f882 	bl	8004300 <RCCEx_PLLSAI1_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d028      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	492d      	ldr	r1, [pc, #180]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004234:	d106      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004236:	4b29      	ldr	r3, [pc, #164]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4a28      	ldr	r2, [pc, #160]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004240:	60d3      	str	r3, [r2, #12]
 8004242:	e011      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	2101      	movs	r1, #1
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f853 	bl	8004300 <RCCEx_PLLSAI1_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01c      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004292:	d10c      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f830 	bl	8004300 <RCCEx_PLLSAI1_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	4904      	ldr	r1, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042ea:	f043 0304 	orr.w	r3, r3, #4
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000

08004300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800430e:	4b74      	ldr	r3, [pc, #464]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800431a:	4b71      	ldr	r3, [pc, #452]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0203 	and.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d10d      	bne.n	8004346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
       ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004332:	4b6b      	ldr	r3, [pc, #428]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
       ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d047      	beq.n	80043d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
 800434a:	e044      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d018      	beq.n	8004386 <RCCEx_PLLSAI1_Config+0x86>
 8004354:	2b03      	cmp	r3, #3
 8004356:	d825      	bhi.n	80043a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <RCCEx_PLLSAI1_Config+0x62>
 800435c:	2b02      	cmp	r3, #2
 800435e:	d009      	beq.n	8004374 <RCCEx_PLLSAI1_Config+0x74>
 8004360:	e020      	b.n	80043a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004362:	4b5f      	ldr	r3, [pc, #380]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11d      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004372:	e01a      	b.n	80043aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004374:	4b5a      	ldr	r3, [pc, #360]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d116      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004384:	e013      	b.n	80043ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004386:	4b56      	ldr	r3, [pc, #344]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004392:	4b53      	ldr	r3, [pc, #332]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043a2:	e006      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e004      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ba:	4b49      	ldr	r3, [pc, #292]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	430b      	orrs	r3, r1
 80043d0:	4943      	ldr	r1, [pc, #268]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d17c      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043dc:	4b40      	ldr	r3, [pc, #256]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3f      	ldr	r2, [pc, #252]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fd fbb0 	bl	8001b4c <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ee:	e009      	b.n	8004404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f0:	f7fd fbac 	bl	8001b4c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
        break;
 8004402:	e005      	b.n	8004410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ef      	bne.n	80043f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d15f      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d110      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441c:	4b30      	ldr	r3, [pc, #192]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004424:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6892      	ldr	r2, [r2, #8]
 800442c:	0211      	lsls	r1, r2, #8
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68d2      	ldr	r2, [r2, #12]
 8004432:	06d2      	lsls	r2, r2, #27
 8004434:	430a      	orrs	r2, r1
 8004436:	492a      	ldr	r1, [pc, #168]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	610b      	str	r3, [r1, #16]
 800443c:	e027      	b.n	800448e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d112      	bne.n	800446a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004444:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800444c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6912      	ldr	r2, [r2, #16]
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0552      	lsls	r2, r2, #21
 8004460:	430a      	orrs	r2, r1
 8004462:	491f      	ldr	r1, [pc, #124]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]
 8004468:	e011      	b.n	800448e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446a:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004472:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6892      	ldr	r2, [r2, #8]
 800447a:	0211      	lsls	r1, r2, #8
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6952      	ldr	r2, [r2, #20]
 8004480:	0852      	lsrs	r2, r2, #1
 8004482:	3a01      	subs	r2, #1
 8004484:	0652      	lsls	r2, r2, #25
 8004486:	430a      	orrs	r2, r1
 8004488:	4915      	ldr	r1, [pc, #84]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800448e:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004494:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004498:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd fb57 	bl	8001b4c <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044a0:	e009      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a2:	f7fd fb53 	bl	8001b4c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d902      	bls.n	80044b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	73fb      	strb	r3, [r7, #15]
          break;
 80044b4:	e005      	b.n	80044c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ef      	beq.n	80044a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4903      	ldr	r1, [pc, #12]	@ (80044e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e049      	b.n	800458a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd f892 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fbf8 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d001      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e03b      	b.n	8004624 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <HAL_TIM_Base_Start_IT+0x9c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x4e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d6:	d004      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0x4e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <HAL_TIM_Base_Start_IT+0xa0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d115      	bne.n	800460e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <HAL_TIM_Base_Start_IT+0xa4>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d015      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x8c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fa:	d011      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	e008      	b.n	8004620 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e000      	b.n	8004622 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40014000 	.word	0x40014000
 8004638:	00010007 	.word	0x00010007

0800463c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e049      	b.n	80046e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f841 	bl	80046ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 fb4c 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01b      	beq.n	8004762 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0202 	mvn.w	r2, #2
 8004732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fac6 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 800474e:	e005      	b.n	800475c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fab8 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fac9 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01b      	beq.n	80047ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f06f 0204 	mvn.w	r2, #4
 800477e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 faa0 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 800479a:	e005      	b.n	80047a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa92 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 faa3 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01b      	beq.n	80047fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0208 	mvn.w	r2, #8
 80047ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2204      	movs	r2, #4
 80047d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa7a 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 80047e6:	e005      	b.n	80047f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa6c 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa7d 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01b      	beq.n	8004846 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0210 	mvn.w	r2, #16
 8004816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2208      	movs	r2, #8
 800481c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa54 	bl	8004cda <HAL_TIM_IC_CaptureCallback>
 8004832:	e005      	b.n	8004840 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa46 	bl	8004cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa57 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0201 	mvn.w	r2, #1
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fb1f 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fe38 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fe30 	bl	800551c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa11 	bl	8004d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0220 	mvn.w	r2, #32
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fdf8 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004926:	2302      	movs	r3, #2
 8004928:	e0ff      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b14      	cmp	r3, #20
 8004936:	f200 80f0 	bhi.w	8004b1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004995 	.word	0x08004995
 8004944:	08004b1b 	.word	0x08004b1b
 8004948:	08004b1b 	.word	0x08004b1b
 800494c:	08004b1b 	.word	0x08004b1b
 8004950:	080049d5 	.word	0x080049d5
 8004954:	08004b1b 	.word	0x08004b1b
 8004958:	08004b1b 	.word	0x08004b1b
 800495c:	08004b1b 	.word	0x08004b1b
 8004960:	08004a17 	.word	0x08004a17
 8004964:	08004b1b 	.word	0x08004b1b
 8004968:	08004b1b 	.word	0x08004b1b
 800496c:	08004b1b 	.word	0x08004b1b
 8004970:	08004a57 	.word	0x08004a57
 8004974:	08004b1b 	.word	0x08004b1b
 8004978:	08004b1b 	.word	0x08004b1b
 800497c:	08004b1b 	.word	0x08004b1b
 8004980:	08004a99 	.word	0x08004a99
 8004984:	08004b1b 	.word	0x08004b1b
 8004988:	08004b1b 	.word	0x08004b1b
 800498c:	08004b1b 	.word	0x08004b1b
 8004990:	08004ad9 	.word	0x08004ad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fa2c 	bl	8004df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0208 	orr.w	r2, r2, #8
 80049ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0204 	bic.w	r2, r2, #4
 80049be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6999      	ldr	r1, [r3, #24]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	619a      	str	r2, [r3, #24]
      break;
 80049d2:	e0a5      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa88 	bl	8004ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	021a      	lsls	r2, r3, #8
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	619a      	str	r2, [r3, #24]
      break;
 8004a14:	e084      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fae1 	bl	8004fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0208 	orr.w	r2, r2, #8
 8004a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0204 	bic.w	r2, r2, #4
 8004a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69d9      	ldr	r1, [r3, #28]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	61da      	str	r2, [r3, #28]
      break;
 8004a54:	e064      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb39 	bl	80050d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	021a      	lsls	r2, r3, #8
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	61da      	str	r2, [r3, #28]
      break;
 8004a96:	e043      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fb76 	bl	8005190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ad6:	e023      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fbae 	bl	8005240 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b18:	e002      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop

08004b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x1c>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e0b6      	b.n	8004cbe <HAL_TIM_ConfigClockSource+0x18a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8c:	d03e      	beq.n	8004c0c <HAL_TIM_ConfigClockSource+0xd8>
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b92:	f200 8087 	bhi.w	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9a:	f000 8086 	beq.w	8004caa <HAL_TIM_ConfigClockSource+0x176>
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba2:	d87f      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004ba4:	2b70      	cmp	r3, #112	@ 0x70
 8004ba6:	d01a      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xaa>
 8004ba8:	2b70      	cmp	r3, #112	@ 0x70
 8004baa:	d87b      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bac:	2b60      	cmp	r3, #96	@ 0x60
 8004bae:	d050      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x11e>
 8004bb0:	2b60      	cmp	r3, #96	@ 0x60
 8004bb2:	d877      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bb4:	2b50      	cmp	r3, #80	@ 0x50
 8004bb6:	d03c      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0xfe>
 8004bb8:	2b50      	cmp	r3, #80	@ 0x50
 8004bba:	d873      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bbc:	2b40      	cmp	r3, #64	@ 0x40
 8004bbe:	d058      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x13e>
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d86f      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bc4:	2b30      	cmp	r3, #48	@ 0x30
 8004bc6:	d064      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x15e>
 8004bc8:	2b30      	cmp	r3, #48	@ 0x30
 8004bca:	d86b      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d060      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x15e>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d867      	bhi.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05c      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x15e>
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d05a      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x15e>
 8004bdc:	e062      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bee:	f000 fbfb 	bl	80053e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	609a      	str	r2, [r3, #8]
      break;
 8004c0a:	e04f      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c1c:	f000 fbe4 	bl	80053e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c2e:	609a      	str	r2, [r3, #8]
      break;
 8004c30:	e03c      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f000 fb58 	bl	80052f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2150      	movs	r1, #80	@ 0x50
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fbb1 	bl	80053b2 <TIM_ITRx_SetConfig>
      break;
 8004c50:	e02c      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 fb77 	bl	8005352 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2160      	movs	r1, #96	@ 0x60
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fba1 	bl	80053b2 <TIM_ITRx_SetConfig>
      break;
 8004c70:	e01c      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fb38 	bl	80052f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2140      	movs	r1, #64	@ 0x40
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb91 	bl	80053b2 <TIM_ITRx_SetConfig>
      break;
 8004c90:	e00c      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f000 fb88 	bl	80053b2 <TIM_ITRx_SetConfig>
      break;
 8004ca2:	e003      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e000      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <TIM_Base_SetConfig+0xd4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x20>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <TIM_Base_SetConfig+0xd4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a24      	ldr	r2, [pc, #144]	@ (8004df0 <TIM_Base_SetConfig+0xd8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <TIM_Base_SetConfig+0xdc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d108      	bne.n	8004d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <TIM_Base_SetConfig+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0xa0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <TIM_Base_SetConfig+0xd8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0xa0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a10      	ldr	r2, [pc, #64]	@ (8004df4 <TIM_Base_SetConfig+0xdc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]
  }
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400

08004df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 0201 	bic.w	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 0302 	bic.w	r3, r3, #2
 8004e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a24      	ldr	r2, [pc, #144]	@ (8004ee4 <TIM_OC1_SetConfig+0xec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_OC1_SetConfig+0x70>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ee8 <TIM_OC1_SetConfig+0xf0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC1_SetConfig+0x70>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a22      	ldr	r2, [pc, #136]	@ (8004eec <TIM_OC1_SetConfig+0xf4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10c      	bne.n	8004e82 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0308 	bic.w	r3, r3, #8
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <TIM_OC1_SetConfig+0xec>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_OC1_SetConfig+0xa2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <TIM_OC1_SetConfig+0xf0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_OC1_SetConfig+0xa2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <TIM_OC1_SetConfig+0xf4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400

08004ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f023 0210 	bic.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_OC2_SetConfig+0x98>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <TIM_OC2_SetConfig+0xec>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC2_SetConfig+0x98>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <TIM_OC2_SetConfig+0xf0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d113      	bne.n	8004fb0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400

08004fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a21      	ldr	r2, [pc, #132]	@ (80050c8 <TIM_OC3_SetConfig+0xe4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10d      	bne.n	8005062 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800504c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <TIM_OC3_SetConfig+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_OC3_SetConfig+0x96>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <TIM_OC3_SetConfig+0xe8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_OC3_SetConfig+0x96>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <TIM_OC3_SetConfig+0xec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400

080050d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <TIM_OC4_SetConfig+0xb0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC4_SetConfig+0x74>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a13      	ldr	r2, [pc, #76]	@ (8005188 <TIM_OC4_SetConfig+0xb4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC4_SetConfig+0x74>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	@ (800518c <TIM_OC4_SetConfig+0xb8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400

08005190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <TIM_OC5_SetConfig+0xa4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_OC5_SetConfig+0x6a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <TIM_OC5_SetConfig+0xa8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC5_SetConfig+0x6a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a11      	ldr	r2, [pc, #68]	@ (800523c <TIM_OC5_SetConfig+0xac>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d109      	bne.n	800520e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005200:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400

08005240 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a14      	ldr	r2, [pc, #80]	@ (80052e8 <TIM_OC6_SetConfig+0xa8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_OC6_SetConfig+0x6c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a13      	ldr	r2, [pc, #76]	@ (80052ec <TIM_OC6_SetConfig+0xac>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC6_SetConfig+0x6c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <TIM_OC6_SetConfig+0xb0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400

080052f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0201 	bic.w	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800531e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 030a 	bic.w	r3, r3, #10
 8005330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005352:	b480      	push	{r7}
 8005354:	b087      	sub	sp, #28
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f023 0210 	bic.w	r2, r3, #16
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800538e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f043 0307 	orr.w	r3, r3, #7
 80053d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e04f      	b.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a14      	ldr	r2, [pc, #80]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a10      	ldr	r2, [pc, #64]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40014000 	.word	0x40014000

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e040      	b.n	80055c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc f8c0 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	@ 0x24
 800555c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fade 	bl	8005b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f8af 	bl	80056e0 <UART_SetConfig>
 8005582:	4603      	mov	r3, r0
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e01b      	b.n	80055c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800559a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fb5d 	bl	8005c7c <UART_CheckIdleState>
 80055c2:	4603      	mov	r3, r0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d177      	bne.n	80056d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Transmit+0x24>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e070      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2221      	movs	r2, #33	@ 0x21
 8005600:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fc faa3 	bl	8001b4c <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x68>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800563c:	e02f      	b.n	800569e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fbbf 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e03b      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005670:	b292      	uxth	r2, r2
 8005672:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3302      	adds	r3, #2
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e007      	b.n	800568c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3301      	adds	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1c9      	bne.n	800563e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	@ 0x40
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fb89 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e005      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b08a      	sub	sp, #40	@ 0x28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	4313      	orrs	r3, r2
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4bb4      	ldr	r3, [pc, #720]	@ (80059e0 <UART_SetConfig+0x300>)
 8005710:	4013      	ands	r3, r2
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005718:	430b      	orrs	r3, r1
 800571a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4aa9      	ldr	r2, [pc, #676]	@ (80059e4 <UART_SetConfig+0x304>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005748:	4313      	orrs	r3, r2
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575c:	430a      	orrs	r2, r1
 800575e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4aa0      	ldr	r2, [pc, #640]	@ (80059e8 <UART_SetConfig+0x308>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d126      	bne.n	80057b8 <UART_SetConfig+0xd8>
 800576a:	4ba0      	ldr	r3, [pc, #640]	@ (80059ec <UART_SetConfig+0x30c>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b03      	cmp	r3, #3
 8005776:	d81b      	bhi.n	80057b0 <UART_SetConfig+0xd0>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <UART_SetConfig+0xa0>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005791 	.word	0x08005791
 8005784:	080057a1 	.word	0x080057a1
 8005788:	08005799 	.word	0x08005799
 800578c:	080057a9 	.word	0x080057a9
 8005790:	2301      	movs	r3, #1
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005796:	e080      	b.n	800589a <UART_SetConfig+0x1ba>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579e:	e07c      	b.n	800589a <UART_SetConfig+0x1ba>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a6:	e078      	b.n	800589a <UART_SetConfig+0x1ba>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ae:	e074      	b.n	800589a <UART_SetConfig+0x1ba>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b6:	e070      	b.n	800589a <UART_SetConfig+0x1ba>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a8c      	ldr	r2, [pc, #560]	@ (80059f0 <UART_SetConfig+0x310>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d138      	bne.n	8005834 <UART_SetConfig+0x154>
 80057c2:	4b8a      	ldr	r3, [pc, #552]	@ (80059ec <UART_SetConfig+0x30c>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d82d      	bhi.n	800582c <UART_SetConfig+0x14c>
 80057d0:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <UART_SetConfig+0xf8>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	0800582d 	.word	0x0800582d
 80057f4:	0800582d 	.word	0x0800582d
 80057f8:	08005815 	.word	0x08005815
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	0800582d 	.word	0x0800582d
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005825 	.word	0x08005825
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e042      	b.n	800589a <UART_SetConfig+0x1ba>
 8005814:	2302      	movs	r3, #2
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e03e      	b.n	800589a <UART_SetConfig+0x1ba>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e03a      	b.n	800589a <UART_SetConfig+0x1ba>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582a:	e036      	b.n	800589a <UART_SetConfig+0x1ba>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005832:	e032      	b.n	800589a <UART_SetConfig+0x1ba>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6a      	ldr	r2, [pc, #424]	@ (80059e4 <UART_SetConfig+0x304>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d12a      	bne.n	8005894 <UART_SetConfig+0x1b4>
 800583e:	4b6b      	ldr	r3, [pc, #428]	@ (80059ec <UART_SetConfig+0x30c>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005844:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005848:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800584c:	d01a      	beq.n	8005884 <UART_SetConfig+0x1a4>
 800584e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005852:	d81b      	bhi.n	800588c <UART_SetConfig+0x1ac>
 8005854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005858:	d00c      	beq.n	8005874 <UART_SetConfig+0x194>
 800585a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585e:	d815      	bhi.n	800588c <UART_SetConfig+0x1ac>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <UART_SetConfig+0x18c>
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005868:	d008      	beq.n	800587c <UART_SetConfig+0x19c>
 800586a:	e00f      	b.n	800588c <UART_SetConfig+0x1ac>
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e012      	b.n	800589a <UART_SetConfig+0x1ba>
 8005874:	2302      	movs	r3, #2
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e00e      	b.n	800589a <UART_SetConfig+0x1ba>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e00a      	b.n	800589a <UART_SetConfig+0x1ba>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588a:	e006      	b.n	800589a <UART_SetConfig+0x1ba>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005892:	e002      	b.n	800589a <UART_SetConfig+0x1ba>
 8005894:	2310      	movs	r3, #16
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a51      	ldr	r2, [pc, #324]	@ (80059e4 <UART_SetConfig+0x304>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d17a      	bne.n	800599a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d824      	bhi.n	80058f6 <UART_SetConfig+0x216>
 80058ac:	a201      	add	r2, pc, #4	@ (adr r2, 80058b4 <UART_SetConfig+0x1d4>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058f7 	.word	0x080058f7
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058f7 	.word	0x080058f7
 80058c4:	080058e7 	.word	0x080058e7
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	080058f7 	.word	0x080058f7
 80058d4:	080058ef 	.word	0x080058ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fa4e 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61f8      	str	r0, [r7, #28]
        break;
 80058de:	e010      	b.n	8005902 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b44      	ldr	r3, [pc, #272]	@ (80059f4 <UART_SetConfig+0x314>)
 80058e2:	61fb      	str	r3, [r7, #28]
        break;
 80058e4:	e00d      	b.n	8005902 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fe f9af 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 80058ea:	61f8      	str	r0, [r7, #28]
        break;
 80058ec:	e009      	b.n	8005902 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058f2:	61fb      	str	r3, [r7, #28]
        break;
 80058f4:	e005      	b.n	8005902 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8107 	beq.w	8005b18 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	429a      	cmp	r2, r3
 8005918:	d305      	bcc.n	8005926 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800592c:	e0f4      	b.n	8005b18 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2200      	movs	r2, #0
 8005932:	461c      	mov	r4, r3
 8005934:	4615      	mov	r5, r2
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	022b      	lsls	r3, r5, #8
 8005940:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005944:	0222      	lsls	r2, r4, #8
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6849      	ldr	r1, [r1, #4]
 800594a:	0849      	lsrs	r1, r1, #1
 800594c:	2000      	movs	r0, #0
 800594e:	4688      	mov	r8, r1
 8005950:	4681      	mov	r9, r0
 8005952:	eb12 0a08 	adds.w	sl, r2, r8
 8005956:	eb43 0b09 	adc.w	fp, r3, r9
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005968:	4650      	mov	r0, sl
 800596a:	4659      	mov	r1, fp
 800596c:	f7fa fc80 	bl	8000270 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4613      	mov	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800597e:	d308      	bcc.n	8005992 <UART_SetConfig+0x2b2>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005986:	d204      	bcs.n	8005992 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e0c2      	b.n	8005b18 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005998:	e0be      	b.n	8005b18 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a2:	d16a      	bne.n	8005a7a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80059a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d834      	bhi.n	8005a16 <UART_SetConfig+0x336>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UART_SetConfig+0x2d4>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a17 	.word	0x08005a17
 80059c4:	08005a07 	.word	0x08005a07
 80059c8:	08005a17 	.word	0x08005a17
 80059cc:	08005a17 	.word	0x08005a17
 80059d0:	08005a17 	.word	0x08005a17
 80059d4:	08005a0f 	.word	0x08005a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fe f9ce 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 80059dc:	61f8      	str	r0, [r7, #28]
        break;
 80059de:	e020      	b.n	8005a22 <UART_SetConfig+0x342>
 80059e0:	efff69f3 	.word	0xefff69f3
 80059e4:	40008000 	.word	0x40008000
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40004400 	.word	0x40004400
 80059f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f8:	f7fe f9d4 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 80059fc:	61f8      	str	r0, [r7, #28]
        break;
 80059fe:	e010      	b.n	8005a22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a00:	4b4c      	ldr	r3, [pc, #304]	@ (8005b34 <UART_SetConfig+0x454>)
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	e00d      	b.n	8005a22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a06:	f7fe f91f 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005a0a:	61f8      	str	r0, [r7, #28]
        break;
 8005a0c:	e009      	b.n	8005a22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a12:	61fb      	str	r3, [r7, #28]
        break;
 8005a14:	e005      	b.n	8005a22 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d077      	beq.n	8005b18 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005a      	lsls	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d916      	bls.n	8005a72 <UART_SetConfig+0x392>
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a4a:	d212      	bcs.n	8005a72 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f023 030f 	bic.w	r3, r3, #15
 8005a54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	8afb      	ldrh	r3, [r7, #22]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	8afa      	ldrh	r2, [r7, #22]
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	e052      	b.n	8005b18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a78:	e04e      	b.n	8005b18 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d827      	bhi.n	8005ad2 <UART_SetConfig+0x3f2>
 8005a82:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0x3a8>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005ab5 	.word	0x08005ab5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fe f964 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	61f8      	str	r0, [r7, #28]
        break;
 8005ab2:	e014      	b.n	8005ade <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe f976 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b34 <UART_SetConfig+0x454>)
 8005abe:	61fb      	str	r3, [r7, #28]
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fe f8c1 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005ac6:	61f8      	str	r0, [r7, #28]
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ace:	61fb      	str	r3, [r7, #28]
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005adc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	085a      	lsrs	r2, r3, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	441a      	add	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d909      	bls.n	8005b12 <UART_SetConfig+0x432>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b04:	d205      	bcs.n	8005b12 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e002      	b.n	8005b18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3728      	adds	r7, #40	@ 0x28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	00f42400 	.word	0x00f42400

08005b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c36:	d10a      	bne.n	8005c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b098      	sub	sp, #96	@ 0x60
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c8c:	f7fb ff5e 	bl	8001b4c <HAL_GetTick>
 8005c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d12e      	bne.n	8005cfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f88c 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d021      	beq.n	8005cfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e6      	bne.n	8005cba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e062      	b.n	8005dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d149      	bne.n	8005da0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d14:	2200      	movs	r2, #0
 8005d16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f856 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d03c      	beq.n	8005da0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	623b      	str	r3, [r7, #32]
   return(result);
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e6      	bne.n	8005d26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d78:	61fa      	str	r2, [r7, #28]
 8005d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	617b      	str	r3, [r7, #20]
   return(result);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e011      	b.n	8005dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3758      	adds	r7, #88	@ 0x58
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e04f      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d04b      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fb feb1 	bl	8001b4c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e04e      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d037      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b80      	cmp	r3, #128	@ 0x80
 8005e12:	d034      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d031      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d110      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f838 	bl	8005ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e029      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e58:	d111      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f81e 	bl	8005ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00f      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0a0      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b095      	sub	sp, #84	@ 0x54
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ece:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d118      	bne.n	8005f4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	613b      	str	r3, [r7, #16]
   return(result);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e6      	bne.n	8005f1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f62:	bf00      	nop
 8005f64:	3754      	adds	r7, #84	@ 0x54
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f80:	2b84      	cmp	r3, #132	@ 0x84
 8005f82:	d005      	beq.n	8005f90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fa2:	f000 fc4d 	bl	8006840 <vTaskStartScheduler>
  
  return osOK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}

08005fac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b089      	sub	sp, #36	@ 0x24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <osThreadCreate+0x54>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01c      	beq.n	8006000 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685c      	ldr	r4, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691e      	ldr	r6, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ffc8 	bl	8005f6e <makeFreeRtosPriority>
 8005fde:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9100      	str	r1, [sp, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fa56 	bl	80064a6 <xTaskCreateStatic>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e01c      	b.n	800603a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685c      	ldr	r4, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ffaa 	bl	8005f6e <makeFreeRtosPriority>
 800601a:	4602      	mov	r2, r0
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4632      	mov	r2, r6
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fa9b 	bl	8006566 <xTaskCreate>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006044 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <osDelay+0x16>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e000      	b.n	800605c <osDelay+0x18>
 800605a:	2301      	movs	r3, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fbb9 	bl	80067d4 <vTaskDelay>
  
  return osOK;
 8006062:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b085      	sub	sp, #20
 8006070:	af02      	add	r7, sp, #8
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <osMessageCreate+0x36>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2400      	movs	r4, #0
 8006098:	9400      	str	r4, [sp, #0]
 800609a:	f000 f92d 	bl	80062f8 <xQueueGenericCreateStatic>
 800609e:	4603      	mov	r3, r0
 80060a0:	e008      	b.n	80060b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	4619      	mov	r1, r3
 80060ae:	f000 f9a0 	bl	80063f2 <xQueueGenericCreate>
 80060b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd90      	pop	{r4, r7, pc}

080060bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f103 0208 	add.w	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295
 80060d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f103 0208 	add.w	r2, r3, #8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d103      	bne.n	800617e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e00c      	b.n	8006198 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3308      	adds	r3, #8
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e002      	b.n	800618c <vListInsert+0x2e>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d2f6      	bcs.n	8006186 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6892      	ldr	r2, [r2, #8]
 80061e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6852      	ldr	r2, [r2, #4]
 80061f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d103      	bne.n	8006204 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1e5a      	subs	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	e7fd      	b.n	800624c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006250:	f000 ffea 	bl	8007228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006280:	3b01      	subs	r3, #1
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	441a      	add	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	22ff      	movs	r2, #255	@ 0xff
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d114      	bne.n	80062d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01a      	beq.n	80062e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3310      	adds	r3, #16
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fce8 	bl	8006c88 <xTaskRemoveFromEventList>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062be:	4b0d      	ldr	r3, [pc, #52]	@ (80062f4 <xQueueGenericReset+0xd0>)
 80062c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	e009      	b.n	80062e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3310      	adds	r3, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fef1 	bl	80060bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3324      	adds	r3, #36	@ 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff feec 	bl	80060bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062e4:	f000 ffd2 	bl	800728c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062e8:	2301      	movs	r3, #1
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08e      	sub	sp, #56	@ 0x38
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <xQueueGenericCreateStatic+0x56>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <xQueueGenericCreateStatic+0x5a>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <xQueueGenericCreateStatic+0x5c>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	623b      	str	r3, [r7, #32]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <xQueueGenericCreateStatic+0x84>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <xQueueGenericCreateStatic+0x88>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <xQueueGenericCreateStatic+0x8a>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61fb      	str	r3, [r7, #28]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800639e:	2348      	movs	r3, #72	@ 0x48
 80063a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b48      	cmp	r3, #72	@ 0x48
 80063a6:	d00b      	beq.n	80063c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61bb      	str	r3, [r7, #24]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80063c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f840 	bl	8006468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3730      	adds	r7, #48	@ 0x30
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b08a      	sub	sp, #40	@ 0x28
 80063f6:	af02      	add	r7, sp, #8
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	4613      	mov	r3, r2
 80063fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	613b      	str	r3, [r7, #16]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3348      	adds	r3, #72	@ 0x48
 800642c:	4618      	mov	r0, r3
 800642e:	f000 ffdb 	bl	80073e8 <pvPortMalloc>
 8006432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d011      	beq.n	800645e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3348      	adds	r3, #72	@ 0x48
 8006442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f805 	bl	8006468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800645e:	69bb      	ldr	r3, [r7, #24]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e002      	b.n	800648a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006496:	2101      	movs	r1, #1
 8006498:	69b8      	ldr	r0, [r7, #24]
 800649a:	f7ff fec3 	bl	8006224 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b08e      	sub	sp, #56	@ 0x38
 80064aa:	af04      	add	r7, sp, #16
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <xTaskCreateStatic+0x2c>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	623b      	str	r3, [r7, #32]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61fb      	str	r3, [r7, #28]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064f0:	2354      	movs	r3, #84	@ 0x54
 80064f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b54      	cmp	r3, #84	@ 0x54
 80064f8:	d00b      	beq.n	8006512 <xTaskCreateStatic+0x6c>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	61bb      	str	r3, [r7, #24]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006512:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01e      	beq.n	8006558 <xTaskCreateStatic+0xb2>
 800651a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006528:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	2202      	movs	r2, #2
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006532:	2300      	movs	r3, #0
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	9302      	str	r3, [sp, #8]
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f850 	bl	80065f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006552:	f000 f8d5 	bl	8006700 <prvAddNewTaskToReadyList>
 8006556:	e001      	b.n	800655c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800655c:	697b      	ldr	r3, [r7, #20]
	}
 800655e:	4618      	mov	r0, r3
 8006560:	3728      	adds	r7, #40	@ 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08c      	sub	sp, #48	@ 0x30
 800656a:	af04      	add	r7, sp, #16
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f000 ff34 	bl	80073e8 <pvPortMalloc>
 8006580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006588:	2054      	movs	r0, #84	@ 0x54
 800658a:	f000 ff2d 	bl	80073e8 <pvPortMalloc>
 800658e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30
 800659c:	e005      	b.n	80065aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f000 fff0 	bl	8007584 <vPortFree>
 80065a4:	e001      	b.n	80065aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f80e 	bl	80065f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065d4:	69f8      	ldr	r0, [r7, #28]
 80065d6:	f000 f893 	bl	8006700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065da:	2301      	movs	r3, #1
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e002      	b.n	80065e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065e6:	69bb      	ldr	r3, [r7, #24]
	}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006608:	3b01      	subs	r3, #1
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	617b      	str	r3, [r7, #20]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01f      	beq.n	8006680 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e012      	b.n	800666c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	3334      	adds	r3, #52	@ 0x34
 8006656:	460a      	mov	r2, r1
 8006658:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3301      	adds	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b0f      	cmp	r3, #15
 8006670:	d9e9      	bls.n	8006646 <prvInitialiseNewTask+0x56>
 8006672:	e000      	b.n	8006676 <prvInitialiseNewTask+0x86>
			{
				break;
 8006674:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800667e:	e003      	b.n	8006688 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	2b06      	cmp	r3, #6
 800668c:	d901      	bls.n	8006692 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800668e:	2306      	movs	r3, #6
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006696:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	2200      	movs	r2, #0
 80066a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fd27 	bl	80060fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	3318      	adds	r3, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fd22 	bl	80060fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	f1c3 0207 	rsb	r2, r3, #7
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	2200      	movs	r2, #0
 80066d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	69b8      	ldr	r0, [r7, #24]
 80066e2:	f000 fc71 	bl	8006fc8 <pxPortInitialiseStack>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f8:	bf00      	nop
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006708:	f000 fd8e 	bl	8007228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800670c:	4b2a      	ldr	r3, [pc, #168]	@ (80067b8 <prvAddNewTaskToReadyList+0xb8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	4a29      	ldr	r2, [pc, #164]	@ (80067b8 <prvAddNewTaskToReadyList+0xb8>)
 8006714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006716:	4b29      	ldr	r3, [pc, #164]	@ (80067bc <prvAddNewTaskToReadyList+0xbc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800671e:	4a27      	ldr	r2, [pc, #156]	@ (80067bc <prvAddNewTaskToReadyList+0xbc>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006724:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <prvAddNewTaskToReadyList+0xb8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d110      	bne.n	800674e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800672c:	f000 fb28 	bl	8006d80 <prvInitialiseTaskLists>
 8006730:	e00d      	b.n	800674e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006732:	4b23      	ldr	r3, [pc, #140]	@ (80067c0 <prvAddNewTaskToReadyList+0xc0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800673a:	4b20      	ldr	r3, [pc, #128]	@ (80067bc <prvAddNewTaskToReadyList+0xbc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d802      	bhi.n	800674e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006748:	4a1c      	ldr	r2, [pc, #112]	@ (80067bc <prvAddNewTaskToReadyList+0xbc>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800674e:	4b1d      	ldr	r3, [pc, #116]	@ (80067c4 <prvAddNewTaskToReadyList+0xc4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <prvAddNewTaskToReadyList+0xc4>)
 8006756:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	2201      	movs	r2, #1
 800675e:	409a      	lsls	r2, r3
 8006760:	4b19      	ldr	r3, [pc, #100]	@ (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4313      	orrs	r3, r2
 8006766:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a15      	ldr	r2, [pc, #84]	@ (80067cc <prvAddNewTaskToReadyList+0xcc>)
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7ff fcc8 	bl	8006116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006786:	f000 fd81 	bl	800728c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <prvAddNewTaskToReadyList+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006792:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <prvAddNewTaskToReadyList+0xbc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	429a      	cmp	r2, r3
 800679e:	d207      	bcs.n	80067b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067a0:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <prvAddNewTaskToReadyList+0xd0>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200009c4 	.word	0x200009c4
 80067bc:	200008c4 	.word	0x200008c4
 80067c0:	200009d0 	.word	0x200009d0
 80067c4:	200009e0 	.word	0x200009e0
 80067c8:	200009cc 	.word	0x200009cc
 80067cc:	200008c8 	.word	0x200008c8
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d018      	beq.n	8006818 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <vTaskDelay+0x64>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <vTaskDelay+0x32>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60bb      	str	r3, [r7, #8]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006806:	f000 f87d 	bl	8006904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb75 	bl	8006efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006812:	f000 f885 	bl	8006920 <xTaskResumeAll>
 8006816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800681e:	4b07      	ldr	r3, [pc, #28]	@ (800683c <vTaskDelay+0x68>)
 8006820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200009ec 	.word	0x200009ec
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	@ 0x28
 8006844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800684e:	463a      	mov	r2, r7
 8006850:	1d39      	adds	r1, r7, #4
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4618      	mov	r0, r3
 8006858:	f7f9 fea0 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	9202      	str	r2, [sp, #8]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	460a      	mov	r2, r1
 800686e:	491f      	ldr	r1, [pc, #124]	@ (80068ec <vTaskStartScheduler+0xac>)
 8006870:	481f      	ldr	r0, [pc, #124]	@ (80068f0 <vTaskStartScheduler+0xb0>)
 8006872:	f7ff fe18 	bl	80064a6 <xTaskCreateStatic>
 8006876:	4603      	mov	r3, r0
 8006878:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <vTaskStartScheduler+0xb4>)
 800687a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800687c:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <vTaskStartScheduler+0xb4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e001      	b.n	800688e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d116      	bne.n	80068c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	613b      	str	r3, [r7, #16]
}
 80068a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068a8:	4b13      	ldr	r3, [pc, #76]	@ (80068f8 <vTaskStartScheduler+0xb8>)
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068b0:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <vTaskStartScheduler+0xbc>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068b6:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <vTaskStartScheduler+0xc0>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068bc:	f000 fc10 	bl	80070e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068c0:	e00f      	b.n	80068e2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d10b      	bne.n	80068e2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60fb      	str	r3, [r7, #12]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vTaskStartScheduler+0x9e>
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08008850 	.word	0x08008850
 80068f0:	08006d51 	.word	0x08006d51
 80068f4:	200009e8 	.word	0x200009e8
 80068f8:	200009e4 	.word	0x200009e4
 80068fc:	200009d0 	.word	0x200009d0
 8006900:	200009c8 	.word	0x200009c8

08006904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <vTaskSuspendAll+0x18>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a03      	ldr	r2, [pc, #12]	@ (800691c <vTaskSuspendAll+0x18>)
 8006910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	200009ec 	.word	0x200009ec

08006920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800692e:	4b42      	ldr	r3, [pc, #264]	@ (8006a38 <xTaskResumeAll+0x118>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10b      	bne.n	800694e <xTaskResumeAll+0x2e>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	603b      	str	r3, [r7, #0]
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	e7fd      	b.n	800694a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800694e:	f000 fc6b 	bl	8007228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006952:	4b39      	ldr	r3, [pc, #228]	@ (8006a38 <xTaskResumeAll+0x118>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3b01      	subs	r3, #1
 8006958:	4a37      	ldr	r2, [pc, #220]	@ (8006a38 <xTaskResumeAll+0x118>)
 800695a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800695c:	4b36      	ldr	r3, [pc, #216]	@ (8006a38 <xTaskResumeAll+0x118>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d161      	bne.n	8006a28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006964:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <xTaskResumeAll+0x11c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05d      	beq.n	8006a28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800696c:	e02e      	b.n	80069cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696e:	4b34      	ldr	r3, [pc, #208]	@ (8006a40 <xTaskResumeAll+0x120>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3318      	adds	r3, #24
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fc28 	bl	80061d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fc23 	bl	80061d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	4b2c      	ldr	r3, [pc, #176]	@ (8006a44 <xTaskResumeAll+0x124>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	4a2a      	ldr	r2, [pc, #168]	@ (8006a44 <xTaskResumeAll+0x124>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4a27      	ldr	r2, [pc, #156]	@ (8006a48 <xTaskResumeAll+0x128>)
 80069aa:	441a      	add	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7ff fbaf 	bl	8006116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4b23      	ldr	r3, [pc, #140]	@ (8006a4c <xTaskResumeAll+0x12c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069c6:	4b22      	ldr	r3, [pc, #136]	@ (8006a50 <xTaskResumeAll+0x130>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a40 <xTaskResumeAll+0x120>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1cc      	bne.n	800696e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069da:	f000 fa6f 	bl	8006ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069de:	4b1d      	ldr	r3, [pc, #116]	@ (8006a54 <xTaskResumeAll+0x134>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069ea:	f000 f837 	bl	8006a5c <xTaskIncrementTick>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069f4:	4b16      	ldr	r3, [pc, #88]	@ (8006a50 <xTaskResumeAll+0x130>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f1      	bne.n	80069ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a06:	4b13      	ldr	r3, [pc, #76]	@ (8006a54 <xTaskResumeAll+0x134>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a0c:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <xTaskResumeAll+0x130>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a18:	4b0f      	ldr	r3, [pc, #60]	@ (8006a58 <xTaskResumeAll+0x138>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a28:	f000 fc30 	bl	800728c <vPortExitCritical>

	return xAlreadyYielded;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200009ec 	.word	0x200009ec
 8006a3c:	200009c4 	.word	0x200009c4
 8006a40:	20000984 	.word	0x20000984
 8006a44:	200009cc 	.word	0x200009cc
 8006a48:	200008c8 	.word	0x200008c8
 8006a4c:	200008c4 	.word	0x200008c4
 8006a50:	200009d8 	.word	0x200009d8
 8006a54:	200009d4 	.word	0x200009d4
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a66:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba4 <xTaskIncrementTick+0x148>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 808f 	bne.w	8006b8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a70:	4b4d      	ldr	r3, [pc, #308]	@ (8006ba8 <xTaskIncrementTick+0x14c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a78:	4a4b      	ldr	r2, [pc, #300]	@ (8006ba8 <xTaskIncrementTick+0x14c>)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d121      	bne.n	8006ac8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a84:	4b49      	ldr	r3, [pc, #292]	@ (8006bac <xTaskIncrementTick+0x150>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	603b      	str	r3, [r7, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <xTaskIncrementTick+0x46>
 8006aa6:	4b41      	ldr	r3, [pc, #260]	@ (8006bac <xTaskIncrementTick+0x150>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	4b40      	ldr	r3, [pc, #256]	@ (8006bb0 <xTaskIncrementTick+0x154>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8006bac <xTaskIncrementTick+0x150>)
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8006bb0 <xTaskIncrementTick+0x154>)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb4 <xTaskIncrementTick+0x158>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb4 <xTaskIncrementTick+0x158>)
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	f000 f9fa 	bl	8006ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8006bb8 <xTaskIncrementTick+0x15c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d348      	bcc.n	8006b64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad2:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <xTaskIncrementTick+0x150>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006adc:	4b36      	ldr	r3, [pc, #216]	@ (8006bb8 <xTaskIncrementTick+0x15c>)
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	601a      	str	r2, [r3, #0]
					break;
 8006ae4:	e03e      	b.n	8006b64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae6:	4b31      	ldr	r3, [pc, #196]	@ (8006bac <xTaskIncrementTick+0x150>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d203      	bcs.n	8006b06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006afe:	4a2e      	ldr	r2, [pc, #184]	@ (8006bb8 <xTaskIncrementTick+0x15c>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b04:	e02e      	b.n	8006b64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff fb60 	bl	80061d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3318      	adds	r3, #24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fb57 	bl	80061d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	2201      	movs	r2, #1
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	4b24      	ldr	r3, [pc, #144]	@ (8006bbc <xTaskIncrementTick+0x160>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	4a22      	ldr	r2, [pc, #136]	@ (8006bbc <xTaskIncrementTick+0x160>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc0 <xTaskIncrementTick+0x164>)
 8006b42:	441a      	add	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7ff fae3 	bl	8006116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc4 <xTaskIncrementTick+0x168>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d3b9      	bcc.n	8006ad2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b62:	e7b6      	b.n	8006ad2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b64:	4b17      	ldr	r3, [pc, #92]	@ (8006bc4 <xTaskIncrementTick+0x168>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6a:	4915      	ldr	r1, [pc, #84]	@ (8006bc0 <xTaskIncrementTick+0x164>)
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d901      	bls.n	8006b80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b80:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <xTaskIncrementTick+0x16c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e004      	b.n	8006b98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bcc <xTaskIncrementTick+0x170>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a0d      	ldr	r2, [pc, #52]	@ (8006bcc <xTaskIncrementTick+0x170>)
 8006b96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b98:	697b      	ldr	r3, [r7, #20]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200009ec 	.word	0x200009ec
 8006ba8:	200009c8 	.word	0x200009c8
 8006bac:	2000097c 	.word	0x2000097c
 8006bb0:	20000980 	.word	0x20000980
 8006bb4:	200009dc 	.word	0x200009dc
 8006bb8:	200009e4 	.word	0x200009e4
 8006bbc:	200009cc 	.word	0x200009cc
 8006bc0:	200008c8 	.word	0x200008c8
 8006bc4:	200008c4 	.word	0x200008c4
 8006bc8:	200009d8 	.word	0x200009d8
 8006bcc:	200009d4 	.word	0x200009d4

08006bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bd6:	4b27      	ldr	r3, [pc, #156]	@ (8006c74 <vTaskSwitchContext+0xa4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bde:	4b26      	ldr	r3, [pc, #152]	@ (8006c78 <vTaskSwitchContext+0xa8>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be4:	e040      	b.n	8006c68 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006be6:	4b24      	ldr	r3, [pc, #144]	@ (8006c78 <vTaskSwitchContext+0xa8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bec:	4b23      	ldr	r3, [pc, #140]	@ (8006c7c <vTaskSwitchContext+0xac>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	fab3 f383 	clz	r3, r3
 8006bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
 8006bfc:	f1c3 031f 	rsb	r3, r3, #31
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	491f      	ldr	r1, [pc, #124]	@ (8006c80 <vTaskSwitchContext+0xb0>)
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	607b      	str	r3, [r7, #4]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vTaskSwitchContext+0x5a>
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <vTaskSwitchContext+0xb0>)
 8006c3a:	4413      	add	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d104      	bne.n	8006c5e <vTaskSwitchContext+0x8e>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	605a      	str	r2, [r3, #4]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4a07      	ldr	r2, [pc, #28]	@ (8006c84 <vTaskSwitchContext+0xb4>)
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	200009ec 	.word	0x200009ec
 8006c78:	200009d8 	.word	0x200009d8
 8006c7c:	200009cc 	.word	0x200009cc
 8006c80:	200008c8 	.word	0x200008c8
 8006c84:	200008c4 	.word	0x200008c4

08006c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60fb      	str	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3318      	adds	r3, #24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fa88 	bl	80061d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <xTaskRemoveFromEventList+0xb0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d11c      	bne.n	8006d02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fa7f 	bl	80061d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	4b18      	ldr	r3, [pc, #96]	@ (8006d3c <xTaskRemoveFromEventList+0xb4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <xTaskRemoveFromEventList+0xb4>)
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4a13      	ldr	r2, [pc, #76]	@ (8006d40 <xTaskRemoveFromEventList+0xb8>)
 8006cf2:	441a      	add	r2, r3
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f7ff fa0b 	bl	8006116 <vListInsertEnd>
 8006d00:	e005      	b.n	8006d0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3318      	adds	r3, #24
 8006d06:	4619      	mov	r1, r3
 8006d08:	480e      	ldr	r0, [pc, #56]	@ (8006d44 <xTaskRemoveFromEventList+0xbc>)
 8006d0a:	f7ff fa04 	bl	8006116 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <xTaskRemoveFromEventList+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d905      	bls.n	8006d28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d20:	4b0a      	ldr	r3, [pc, #40]	@ (8006d4c <xTaskRemoveFromEventList+0xc4>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e001      	b.n	8006d2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d2c:	697b      	ldr	r3, [r7, #20]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	200009ec 	.word	0x200009ec
 8006d3c:	200009cc 	.word	0x200009cc
 8006d40:	200008c8 	.word	0x200008c8
 8006d44:	20000984 	.word	0x20000984
 8006d48:	200008c4 	.word	0x200008c4
 8006d4c:	200009d8 	.word	0x200009d8

08006d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d58:	f000 f852 	bl	8006e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <prvIdleTask+0x28>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d9f9      	bls.n	8006d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <prvIdleTask+0x2c>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d74:	e7f0      	b.n	8006d58 <prvIdleTask+0x8>
 8006d76:	bf00      	nop
 8006d78:	200008c8 	.word	0x200008c8
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e00c      	b.n	8006da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a12      	ldr	r2, [pc, #72]	@ (8006de0 <prvInitialiseTaskLists+0x60>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff f98e 	bl	80060bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	d9ef      	bls.n	8006d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dac:	480d      	ldr	r0, [pc, #52]	@ (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dae:	f7ff f985 	bl	80060bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006db2:	480d      	ldr	r0, [pc, #52]	@ (8006de8 <prvInitialiseTaskLists+0x68>)
 8006db4:	f7ff f982 	bl	80060bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006db8:	480c      	ldr	r0, [pc, #48]	@ (8006dec <prvInitialiseTaskLists+0x6c>)
 8006dba:	f7ff f97f 	bl	80060bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dbe:	480c      	ldr	r0, [pc, #48]	@ (8006df0 <prvInitialiseTaskLists+0x70>)
 8006dc0:	f7ff f97c 	bl	80060bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dc4:	480b      	ldr	r0, [pc, #44]	@ (8006df4 <prvInitialiseTaskLists+0x74>)
 8006dc6:	f7ff f979 	bl	80060bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <prvInitialiseTaskLists+0x78>)
 8006dcc:	4a05      	ldr	r2, [pc, #20]	@ (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <prvInitialiseTaskLists+0x7c>)
 8006dd2:	4a05      	ldr	r2, [pc, #20]	@ (8006de8 <prvInitialiseTaskLists+0x68>)
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200008c8 	.word	0x200008c8
 8006de4:	20000954 	.word	0x20000954
 8006de8:	20000968 	.word	0x20000968
 8006dec:	20000984 	.word	0x20000984
 8006df0:	20000998 	.word	0x20000998
 8006df4:	200009b0 	.word	0x200009b0
 8006df8:	2000097c 	.word	0x2000097c
 8006dfc:	20000980 	.word	0x20000980

08006e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e06:	e019      	b.n	8006e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e08:	f000 fa0e 	bl	8007228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <prvCheckTasksWaitingTermination+0x50>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff f9d9 	bl	80061d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	4a0b      	ldr	r2, [pc, #44]	@ (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e28:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e32:	f000 fa2b 	bl	800728c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f810 	bl	8006e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3c:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e1      	bne.n	8006e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000998 	.word	0x20000998
 8006e54:	200009c4 	.word	0x200009c4
 8006e58:	200009ac 	.word	0x200009ac

08006e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d108      	bne.n	8006e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fb86 	bl	8007584 <vPortFree>
				vPortFree( pxTCB );
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fb83 	bl	8007584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e7e:	e019      	b.n	8006eb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d103      	bne.n	8006e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb7a 	bl	8007584 <vPortFree>
	}
 8006e90:	e010      	b.n	8006eb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d00b      	beq.n	8006eb4 <prvDeleteTCB+0x58>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <prvDeleteTCB+0x54>
	}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <prvResetNextTaskUnblockTime+0x38>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ed4:	e008      	b.n	8006ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <prvResetNextTaskUnblockTime+0x38>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4a04      	ldr	r2, [pc, #16]	@ (8006ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ee6:	6013      	str	r3, [r2, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	2000097c 	.word	0x2000097c
 8006ef8:	200009e4 	.word	0x200009e4

08006efc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f06:	4b29      	ldr	r3, [pc, #164]	@ (8006fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0c:	4b28      	ldr	r3, [pc, #160]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f95c 	bl	80061d0 <uxListRemove>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f1e:	4b24      	ldr	r3, [pc, #144]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	43da      	mvns	r2, r3
 8006f2c:	4b21      	ldr	r3, [pc, #132]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4013      	ands	r3, r2
 8006f32:	4a20      	ldr	r2, [pc, #128]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d10a      	bne.n	8006f54 <prvAddCurrentTaskToDelayedList+0x58>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f44:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	481a      	ldr	r0, [pc, #104]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f4e:	f7ff f8e2 	bl	8006116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f52:	e026      	b.n	8006fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f5c:	4b14      	ldr	r3, [pc, #80]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d209      	bcs.n	8006f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6c:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7ff f8f0 	bl	800615e <vListInsert>
}
 8006f7e:	e010      	b.n	8006fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f80:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7ff f8e6 	bl	800615e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f92:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d202      	bcs.n	8006fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f9c:	4a09      	ldr	r2, [pc, #36]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6013      	str	r3, [r2, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	200009c8 	.word	0x200009c8
 8006fb0:	200008c4 	.word	0x200008c4
 8006fb4:	200009cc 	.word	0x200009cc
 8006fb8:	200009b0 	.word	0x200009b0
 8006fbc:	20000980 	.word	0x20000980
 8006fc0:	2000097c 	.word	0x2000097c
 8006fc4:	200009e4 	.word	0x200009e4

08006fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b04      	subs	r3, #4
 8006fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800702c <pxPortInitialiseStack+0x64>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b14      	subs	r3, #20
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b04      	subs	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f06f 0202 	mvn.w	r2, #2
 8007016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3b20      	subs	r3, #32
 800701c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	08007031 	.word	0x08007031

08007030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800703a:	4b13      	ldr	r3, [pc, #76]	@ (8007088 <prvTaskExitError+0x58>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d00b      	beq.n	800705c <prvTaskExitError+0x2c>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <prvTaskExitError+0x28>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	60bb      	str	r3, [r7, #8]
}
 800706e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007070:	bf00      	nop
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0fc      	beq.n	8007072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000014 	.word	0x20000014
 800708c:	00000000 	.word	0x00000000

08007090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <pxCurrentTCBConst2>)
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	6808      	ldr	r0, [r1, #0]
 8007096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	f380 8809 	msr	PSP, r0
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8811 	msr	BASEPRI, r0
 80070aa:	4770      	bx	lr
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst2>:
 80070b0:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070b8:	4808      	ldr	r0, [pc, #32]	@ (80070dc <prvPortStartFirstTask+0x24>)
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f380 8808 	msr	MSP, r0
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8814 	msr	CONTROL, r0
 80070ca:	b662      	cpsie	i
 80070cc:	b661      	cpsie	f
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	df00      	svc	0
 80070d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070da:	bf00      	nop
 80070dc:	e000ed08 	.word	0xe000ed08

080070e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070e6:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <xPortStartScheduler+0x124>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a47      	ldr	r2, [pc, #284]	@ (8007208 <xPortStartScheduler+0x128>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10b      	bne.n	8007108 <xPortStartScheduler+0x28>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007108:	4b3e      	ldr	r3, [pc, #248]	@ (8007204 <xPortStartScheduler+0x124>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a3f      	ldr	r2, [pc, #252]	@ (800720c <xPortStartScheduler+0x12c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d10b      	bne.n	800712a <xPortStartScheduler+0x4a>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	613b      	str	r3, [r7, #16]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800712a:	4b39      	ldr	r3, [pc, #228]	@ (8007210 <xPortStartScheduler+0x130>)
 800712c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	22ff      	movs	r2, #255	@ 0xff
 800713a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b31      	ldr	r3, [pc, #196]	@ (8007214 <xPortStartScheduler+0x134>)
 8007150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007152:	4b31      	ldr	r3, [pc, #196]	@ (8007218 <xPortStartScheduler+0x138>)
 8007154:	2207      	movs	r2, #7
 8007156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007158:	e009      	b.n	800716e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800715a:	4b2f      	ldr	r3, [pc, #188]	@ (8007218 <xPortStartScheduler+0x138>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3b01      	subs	r3, #1
 8007160:	4a2d      	ldr	r2, [pc, #180]	@ (8007218 <xPortStartScheduler+0x138>)
 8007162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d0ef      	beq.n	800715a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800717a:	4b27      	ldr	r3, [pc, #156]	@ (8007218 <xPortStartScheduler+0x138>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1c3 0307 	rsb	r3, r3, #7
 8007182:	2b04      	cmp	r3, #4
 8007184:	d00b      	beq.n	800719e <xPortStartScheduler+0xbe>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60bb      	str	r3, [r7, #8]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800719e:	4b1e      	ldr	r3, [pc, #120]	@ (8007218 <xPortStartScheduler+0x138>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <xPortStartScheduler+0x138>)
 80071a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007218 <xPortStartScheduler+0x138>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071b0:	4a19      	ldr	r2, [pc, #100]	@ (8007218 <xPortStartScheduler+0x138>)
 80071b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071bc:	4b17      	ldr	r3, [pc, #92]	@ (800721c <xPortStartScheduler+0x13c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a16      	ldr	r2, [pc, #88]	@ (800721c <xPortStartScheduler+0x13c>)
 80071c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071c8:	4b14      	ldr	r3, [pc, #80]	@ (800721c <xPortStartScheduler+0x13c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a13      	ldr	r2, [pc, #76]	@ (800721c <xPortStartScheduler+0x13c>)
 80071ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071d4:	f000 f8da 	bl	800738c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071d8:	4b11      	ldr	r3, [pc, #68]	@ (8007220 <xPortStartScheduler+0x140>)
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071de:	f000 f8f9 	bl	80073d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <xPortStartScheduler+0x144>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007224 <xPortStartScheduler+0x144>)
 80071e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80071ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071ee:	f7ff ff63 	bl	80070b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071f2:	f7ff fced 	bl	8006bd0 <vTaskSwitchContext>
	prvTaskExitError();
 80071f6:	f7ff ff1b 	bl	8007030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	e000ed00 	.word	0xe000ed00
 8007208:	410fc271 	.word	0x410fc271
 800720c:	410fc270 	.word	0x410fc270
 8007210:	e000e400 	.word	0xe000e400
 8007214:	200009f0 	.word	0x200009f0
 8007218:	200009f4 	.word	0x200009f4
 800721c:	e000ed20 	.word	0xe000ed20
 8007220:	20000014 	.word	0x20000014
 8007224:	e000ef34 	.word	0xe000ef34

08007228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <vPortEnterCritical+0x5c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3301      	adds	r3, #1
 8007248:	4a0e      	ldr	r2, [pc, #56]	@ (8007284 <vPortEnterCritical+0x5c>)
 800724a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800724c:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <vPortEnterCritical+0x5c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d110      	bne.n	8007276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007254:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <vPortEnterCritical+0x60>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <vPortEnterCritical+0x4e>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	603b      	str	r3, [r7, #0]
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	e7fd      	b.n	8007272 <vPortEnterCritical+0x4a>
	}
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000014 	.word	0x20000014
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007292:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <vPortExitCritical+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <vPortExitCritical+0x26>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	607b      	str	r3, [r7, #4]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b2:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <vPortExitCritical+0x50>)
 80072ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <vPortExitCritical+0x50>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <vPortExitCritical+0x44>
 80072c4:	2300      	movs	r3, #0
 80072c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20000014 	.word	0x20000014

080072e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072e0:	f3ef 8009 	mrs	r0, PSP
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <pxCurrentTCBConst>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	f01e 0f10 	tst.w	lr, #16
 80072f0:	bf08      	it	eq
 80072f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007304:	f380 8811 	msr	BASEPRI, r0
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f7ff fc5e 	bl	8006bd0 <vTaskSwitchContext>
 8007314:	f04f 0000 	mov.w	r0, #0
 8007318:	f380 8811 	msr	BASEPRI, r0
 800731c:	bc09      	pop	{r0, r3}
 800731e:	6819      	ldr	r1, [r3, #0]
 8007320:	6808      	ldr	r0, [r1, #0]
 8007322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007326:	f01e 0f10 	tst.w	lr, #16
 800732a:	bf08      	it	eq
 800732c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007330:	f380 8809 	msr	PSP, r0
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst>:
 8007340:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007362:	f7ff fb7b 	bl	8006a5c <xTaskIncrementTick>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800736c:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <SysTick_Handler+0x40>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007390:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <vPortSetupTimerInterrupt+0x34>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <vPortSetupTimerInterrupt+0x38>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <vPortSetupTimerInterrupt+0x3c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	@ (80073cc <vPortSetupTimerInterrupt+0x40>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	4a09      	ldr	r2, [pc, #36]	@ (80073d0 <vPortSetupTimerInterrupt+0x44>)
 80073aa:	3b01      	subs	r3, #1
 80073ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ae:	4b04      	ldr	r3, [pc, #16]	@ (80073c0 <vPortSetupTimerInterrupt+0x34>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	e000e010 	.word	0xe000e010
 80073c4:	e000e018 	.word	0xe000e018
 80073c8:	20000008 	.word	0x20000008
 80073cc:	10624dd3 	.word	0x10624dd3
 80073d0:	e000e014 	.word	0xe000e014

080073d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073e4 <vPortEnableVFP+0x10>
 80073d8:	6801      	ldr	r1, [r0, #0]
 80073da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073de:	6001      	str	r1, [r0, #0]
 80073e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073e2:	bf00      	nop
 80073e4:	e000ed88 	.word	0xe000ed88

080073e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	@ 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073f4:	f7ff fa86 	bl	8006904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073f8:	4b5c      	ldr	r3, [pc, #368]	@ (800756c <pvPortMalloc+0x184>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007400:	f000 f924 	bl	800764c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007404:	4b5a      	ldr	r3, [pc, #360]	@ (8007570 <pvPortMalloc+0x188>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8095 	bne.w	800753c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01e      	beq.n	8007456 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007418:	2208      	movs	r2, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d015      	beq.n	8007456 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f023 0307 	bic.w	r3, r3, #7
 8007430:	3308      	adds	r3, #8
 8007432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <pvPortMalloc+0x6e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	617b      	str	r3, [r7, #20]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d06f      	beq.n	800753c <pvPortMalloc+0x154>
 800745c:	4b45      	ldr	r3, [pc, #276]	@ (8007574 <pvPortMalloc+0x18c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d86a      	bhi.n	800753c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007466:	4b44      	ldr	r3, [pc, #272]	@ (8007578 <pvPortMalloc+0x190>)
 8007468:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800746a:	4b43      	ldr	r3, [pc, #268]	@ (8007578 <pvPortMalloc+0x190>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007470:	e004      	b.n	800747c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	429a      	cmp	r2, r3
 8007484:	d903      	bls.n	800748e <pvPortMalloc+0xa6>
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f1      	bne.n	8007472 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800748e:	4b37      	ldr	r3, [pc, #220]	@ (800756c <pvPortMalloc+0x184>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007494:	429a      	cmp	r2, r3
 8007496:	d051      	beq.n	800753c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2208      	movs	r2, #8
 800749e:	4413      	add	r3, r2
 80074a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	2308      	movs	r3, #8
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d920      	bls.n	80074fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <pvPortMalloc+0xfc>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	613b      	str	r3, [r7, #16]
}
 80074de:	bf00      	nop
 80074e0:	bf00      	nop
 80074e2:	e7fd      	b.n	80074e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074f6:	69b8      	ldr	r0, [r7, #24]
 80074f8:	f000 f90a 	bl	8007710 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007574 <pvPortMalloc+0x18c>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	4a1b      	ldr	r2, [pc, #108]	@ (8007574 <pvPortMalloc+0x18c>)
 8007508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800750a:	4b1a      	ldr	r3, [pc, #104]	@ (8007574 <pvPortMalloc+0x18c>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b1b      	ldr	r3, [pc, #108]	@ (800757c <pvPortMalloc+0x194>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d203      	bcs.n	800751e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007516:	4b17      	ldr	r3, [pc, #92]	@ (8007574 <pvPortMalloc+0x18c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a18      	ldr	r2, [pc, #96]	@ (800757c <pvPortMalloc+0x194>)
 800751c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <pvPortMalloc+0x188>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	431a      	orrs	r2, r3
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007532:	4b13      	ldr	r3, [pc, #76]	@ (8007580 <pvPortMalloc+0x198>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	4a11      	ldr	r2, [pc, #68]	@ (8007580 <pvPortMalloc+0x198>)
 800753a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800753c:	f7ff f9f0 	bl	8006920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00b      	beq.n	8007562 <pvPortMalloc+0x17a>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <pvPortMalloc+0x176>
	return pvReturn;
 8007562:	69fb      	ldr	r3, [r7, #28]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3728      	adds	r7, #40	@ 0x28
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200015b8 	.word	0x200015b8
 8007570:	200015cc 	.word	0x200015cc
 8007574:	200015bc 	.word	0x200015bc
 8007578:	200015b0 	.word	0x200015b0
 800757c:	200015c0 	.word	0x200015c0
 8007580:	200015c4 	.word	0x200015c4

08007584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d04f      	beq.n	8007636 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007596:	2308      	movs	r3, #8
 8007598:	425b      	negs	r3, r3
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	4b25      	ldr	r3, [pc, #148]	@ (8007640 <vPortFree+0xbc>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4013      	ands	r3, r2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <vPortFree+0x46>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60fb      	str	r3, [r7, #12]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <vPortFree+0x66>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60bb      	str	r3, [r7, #8]
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	e7fd      	b.n	80075e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <vPortFree+0xbc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01e      	beq.n	8007636 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11a      	bne.n	8007636 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	4b0e      	ldr	r3, [pc, #56]	@ (8007640 <vPortFree+0xbc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	43db      	mvns	r3, r3
 800760a:	401a      	ands	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007610:	f7ff f978 	bl	8006904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <vPortFree+0xc0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4413      	add	r3, r2
 800761e:	4a09      	ldr	r2, [pc, #36]	@ (8007644 <vPortFree+0xc0>)
 8007620:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f000 f874 	bl	8007710 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007628:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <vPortFree+0xc4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	4a06      	ldr	r2, [pc, #24]	@ (8007648 <vPortFree+0xc4>)
 8007630:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007632:	f7ff f975 	bl	8006920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007636:	bf00      	nop
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	200015cc 	.word	0x200015cc
 8007644:	200015bc 	.word	0x200015bc
 8007648:	200015c8 	.word	0x200015c8

0800764c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007652:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007656:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007658:	4b27      	ldr	r3, [pc, #156]	@ (80076f8 <prvHeapInit+0xac>)
 800765a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3307      	adds	r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	4a1f      	ldr	r2, [pc, #124]	@ (80076f8 <prvHeapInit+0xac>)
 800767c:	4413      	add	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007684:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <prvHeapInit+0xb0>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800768a:	4b1c      	ldr	r3, [pc, #112]	@ (80076fc <prvHeapInit+0xb0>)
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	4413      	add	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007698:	2208      	movs	r2, #8
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1a9b      	subs	r3, r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <prvHeapInit+0xb4>)
 80076ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076ae:	4b14      	ldr	r3, [pc, #80]	@ (8007700 <prvHeapInit+0xb4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076b6:	4b12      	ldr	r3, [pc, #72]	@ (8007700 <prvHeapInit+0xb4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <prvHeapInit+0xb4>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007704 <prvHeapInit+0xb8>)
 80076da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a09      	ldr	r2, [pc, #36]	@ (8007708 <prvHeapInit+0xbc>)
 80076e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076e4:	4b09      	ldr	r3, [pc, #36]	@ (800770c <prvHeapInit+0xc0>)
 80076e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076ea:	601a      	str	r2, [r3, #0]
}
 80076ec:	bf00      	nop
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	200009f8 	.word	0x200009f8
 80076fc:	200015b0 	.word	0x200015b0
 8007700:	200015b8 	.word	0x200015b8
 8007704:	200015c0 	.word	0x200015c0
 8007708:	200015bc 	.word	0x200015bc
 800770c:	200015cc 	.word	0x200015cc

08007710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007718:	4b28      	ldr	r3, [pc, #160]	@ (80077bc <prvInsertBlockIntoFreeList+0xac>)
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e002      	b.n	8007724 <prvInsertBlockIntoFreeList+0x14>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d8f7      	bhi.n	800771e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d108      	bne.n	8007752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	441a      	add	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d118      	bne.n	8007798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b15      	ldr	r3, [pc, #84]	@ (80077c0 <prvInsertBlockIntoFreeList+0xb0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d00d      	beq.n	800778e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	441a      	add	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	e008      	b.n	80077a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800778e:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <prvInsertBlockIntoFreeList+0xb0>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e003      	b.n	80077a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d002      	beq.n	80077ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ae:	bf00      	nop
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	200015b0 	.word	0x200015b0
 80077c0:	200015b8 	.word	0x200015b8

080077c4 <std>:
 80077c4:	2300      	movs	r3, #0
 80077c6:	b510      	push	{r4, lr}
 80077c8:	4604      	mov	r4, r0
 80077ca:	e9c0 3300 	strd	r3, r3, [r0]
 80077ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077d2:	6083      	str	r3, [r0, #8]
 80077d4:	8181      	strh	r1, [r0, #12]
 80077d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80077d8:	81c2      	strh	r2, [r0, #14]
 80077da:	6183      	str	r3, [r0, #24]
 80077dc:	4619      	mov	r1, r3
 80077de:	2208      	movs	r2, #8
 80077e0:	305c      	adds	r0, #92	@ 0x5c
 80077e2:	f000 fa01 	bl	8007be8 <memset>
 80077e6:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <std+0x58>)
 80077e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80077ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007820 <std+0x5c>)
 80077ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <std+0x60>)
 80077f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <std+0x64>)
 80077f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <std+0x68>)
 80077f8:	6224      	str	r4, [r4, #32]
 80077fa:	429c      	cmp	r4, r3
 80077fc:	d006      	beq.n	800780c <std+0x48>
 80077fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007802:	4294      	cmp	r4, r2
 8007804:	d002      	beq.n	800780c <std+0x48>
 8007806:	33d0      	adds	r3, #208	@ 0xd0
 8007808:	429c      	cmp	r4, r3
 800780a:	d105      	bne.n	8007818 <std+0x54>
 800780c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007814:	f000 ba60 	b.w	8007cd8 <__retarget_lock_init_recursive>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	bf00      	nop
 800781c:	08007a39 	.word	0x08007a39
 8007820:	08007a5b 	.word	0x08007a5b
 8007824:	08007a93 	.word	0x08007a93
 8007828:	08007ab7 	.word	0x08007ab7
 800782c:	200015d0 	.word	0x200015d0

08007830 <stdio_exit_handler>:
 8007830:	4a02      	ldr	r2, [pc, #8]	@ (800783c <stdio_exit_handler+0xc>)
 8007832:	4903      	ldr	r1, [pc, #12]	@ (8007840 <stdio_exit_handler+0x10>)
 8007834:	4803      	ldr	r0, [pc, #12]	@ (8007844 <stdio_exit_handler+0x14>)
 8007836:	f000 b869 	b.w	800790c <_fwalk_sglue>
 800783a:	bf00      	nop
 800783c:	20000018 	.word	0x20000018
 8007840:	08008575 	.word	0x08008575
 8007844:	20000028 	.word	0x20000028

08007848 <cleanup_stdio>:
 8007848:	6841      	ldr	r1, [r0, #4]
 800784a:	4b0c      	ldr	r3, [pc, #48]	@ (800787c <cleanup_stdio+0x34>)
 800784c:	4299      	cmp	r1, r3
 800784e:	b510      	push	{r4, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	d001      	beq.n	8007858 <cleanup_stdio+0x10>
 8007854:	f000 fe8e 	bl	8008574 <_fflush_r>
 8007858:	68a1      	ldr	r1, [r4, #8]
 800785a:	4b09      	ldr	r3, [pc, #36]	@ (8007880 <cleanup_stdio+0x38>)
 800785c:	4299      	cmp	r1, r3
 800785e:	d002      	beq.n	8007866 <cleanup_stdio+0x1e>
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fe87 	bl	8008574 <_fflush_r>
 8007866:	68e1      	ldr	r1, [r4, #12]
 8007868:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <cleanup_stdio+0x3c>)
 800786a:	4299      	cmp	r1, r3
 800786c:	d004      	beq.n	8007878 <cleanup_stdio+0x30>
 800786e:	4620      	mov	r0, r4
 8007870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007874:	f000 be7e 	b.w	8008574 <_fflush_r>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	bf00      	nop
 800787c:	200015d0 	.word	0x200015d0
 8007880:	20001638 	.word	0x20001638
 8007884:	200016a0 	.word	0x200016a0

08007888 <global_stdio_init.part.0>:
 8007888:	b510      	push	{r4, lr}
 800788a:	4b0b      	ldr	r3, [pc, #44]	@ (80078b8 <global_stdio_init.part.0+0x30>)
 800788c:	4c0b      	ldr	r4, [pc, #44]	@ (80078bc <global_stdio_init.part.0+0x34>)
 800788e:	4a0c      	ldr	r2, [pc, #48]	@ (80078c0 <global_stdio_init.part.0+0x38>)
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	4620      	mov	r0, r4
 8007894:	2200      	movs	r2, #0
 8007896:	2104      	movs	r1, #4
 8007898:	f7ff ff94 	bl	80077c4 <std>
 800789c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078a0:	2201      	movs	r2, #1
 80078a2:	2109      	movs	r1, #9
 80078a4:	f7ff ff8e 	bl	80077c4 <std>
 80078a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078ac:	2202      	movs	r2, #2
 80078ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b2:	2112      	movs	r1, #18
 80078b4:	f7ff bf86 	b.w	80077c4 <std>
 80078b8:	20001708 	.word	0x20001708
 80078bc:	200015d0 	.word	0x200015d0
 80078c0:	08007831 	.word	0x08007831

080078c4 <__sfp_lock_acquire>:
 80078c4:	4801      	ldr	r0, [pc, #4]	@ (80078cc <__sfp_lock_acquire+0x8>)
 80078c6:	f000 ba08 	b.w	8007cda <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	20001711 	.word	0x20001711

080078d0 <__sfp_lock_release>:
 80078d0:	4801      	ldr	r0, [pc, #4]	@ (80078d8 <__sfp_lock_release+0x8>)
 80078d2:	f000 ba03 	b.w	8007cdc <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	20001711 	.word	0x20001711

080078dc <__sinit>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4604      	mov	r4, r0
 80078e0:	f7ff fff0 	bl	80078c4 <__sfp_lock_acquire>
 80078e4:	6a23      	ldr	r3, [r4, #32]
 80078e6:	b11b      	cbz	r3, 80078f0 <__sinit+0x14>
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	f7ff bff0 	b.w	80078d0 <__sfp_lock_release>
 80078f0:	4b04      	ldr	r3, [pc, #16]	@ (8007904 <__sinit+0x28>)
 80078f2:	6223      	str	r3, [r4, #32]
 80078f4:	4b04      	ldr	r3, [pc, #16]	@ (8007908 <__sinit+0x2c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f5      	bne.n	80078e8 <__sinit+0xc>
 80078fc:	f7ff ffc4 	bl	8007888 <global_stdio_init.part.0>
 8007900:	e7f2      	b.n	80078e8 <__sinit+0xc>
 8007902:	bf00      	nop
 8007904:	08007849 	.word	0x08007849
 8007908:	20001708 	.word	0x20001708

0800790c <_fwalk_sglue>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	4607      	mov	r7, r0
 8007912:	4688      	mov	r8, r1
 8007914:	4614      	mov	r4, r2
 8007916:	2600      	movs	r6, #0
 8007918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800791c:	f1b9 0901 	subs.w	r9, r9, #1
 8007920:	d505      	bpl.n	800792e <_fwalk_sglue+0x22>
 8007922:	6824      	ldr	r4, [r4, #0]
 8007924:	2c00      	cmp	r4, #0
 8007926:	d1f7      	bne.n	8007918 <_fwalk_sglue+0xc>
 8007928:	4630      	mov	r0, r6
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d907      	bls.n	8007944 <_fwalk_sglue+0x38>
 8007934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007938:	3301      	adds	r3, #1
 800793a:	d003      	beq.n	8007944 <_fwalk_sglue+0x38>
 800793c:	4629      	mov	r1, r5
 800793e:	4638      	mov	r0, r7
 8007940:	47c0      	blx	r8
 8007942:	4306      	orrs	r6, r0
 8007944:	3568      	adds	r5, #104	@ 0x68
 8007946:	e7e9      	b.n	800791c <_fwalk_sglue+0x10>

08007948 <iprintf>:
 8007948:	b40f      	push	{r0, r1, r2, r3}
 800794a:	b507      	push	{r0, r1, r2, lr}
 800794c:	4906      	ldr	r1, [pc, #24]	@ (8007968 <iprintf+0x20>)
 800794e:	ab04      	add	r3, sp, #16
 8007950:	6808      	ldr	r0, [r1, #0]
 8007952:	f853 2b04 	ldr.w	r2, [r3], #4
 8007956:	6881      	ldr	r1, [r0, #8]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f000 fae3 	bl	8007f24 <_vfiprintf_r>
 800795e:	b003      	add	sp, #12
 8007960:	f85d eb04 	ldr.w	lr, [sp], #4
 8007964:	b004      	add	sp, #16
 8007966:	4770      	bx	lr
 8007968:	20000024 	.word	0x20000024

0800796c <putchar>:
 800796c:	4b02      	ldr	r3, [pc, #8]	@ (8007978 <putchar+0xc>)
 800796e:	4601      	mov	r1, r0
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	6882      	ldr	r2, [r0, #8]
 8007974:	f000 be88 	b.w	8008688 <_putc_r>
 8007978:	20000024 	.word	0x20000024

0800797c <_puts_r>:
 800797c:	6a03      	ldr	r3, [r0, #32]
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	6884      	ldr	r4, [r0, #8]
 8007982:	4605      	mov	r5, r0
 8007984:	460e      	mov	r6, r1
 8007986:	b90b      	cbnz	r3, 800798c <_puts_r+0x10>
 8007988:	f7ff ffa8 	bl	80078dc <__sinit>
 800798c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800798e:	07db      	lsls	r3, r3, #31
 8007990:	d405      	bmi.n	800799e <_puts_r+0x22>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	0598      	lsls	r0, r3, #22
 8007996:	d402      	bmi.n	800799e <_puts_r+0x22>
 8007998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800799a:	f000 f99e 	bl	8007cda <__retarget_lock_acquire_recursive>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	0719      	lsls	r1, r3, #28
 80079a2:	d502      	bpl.n	80079aa <_puts_r+0x2e>
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d135      	bne.n	8007a16 <_puts_r+0x9a>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f8c5 	bl	8007b3c <__swsetup_r>
 80079b2:	b380      	cbz	r0, 8007a16 <_puts_r+0x9a>
 80079b4:	f04f 35ff 	mov.w	r5, #4294967295
 80079b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ba:	07da      	lsls	r2, r3, #31
 80079bc:	d405      	bmi.n	80079ca <_puts_r+0x4e>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	059b      	lsls	r3, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_puts_r+0x4e>
 80079c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079c6:	f000 f989 	bl	8007cdc <__retarget_lock_release_recursive>
 80079ca:	4628      	mov	r0, r5
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da04      	bge.n	80079dc <_puts_r+0x60>
 80079d2:	69a2      	ldr	r2, [r4, #24]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	dc17      	bgt.n	8007a08 <_puts_r+0x8c>
 80079d8:	290a      	cmp	r1, #10
 80079da:	d015      	beq.n	8007a08 <_puts_r+0x8c>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	6022      	str	r2, [r4, #0]
 80079e2:	7019      	strb	r1, [r3, #0]
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079ea:	3b01      	subs	r3, #1
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d1ed      	bne.n	80079ce <_puts_r+0x52>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da11      	bge.n	8007a1a <_puts_r+0x9e>
 80079f6:	4622      	mov	r2, r4
 80079f8:	210a      	movs	r1, #10
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f85f 	bl	8007abe <__swbuf_r>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d0d7      	beq.n	80079b4 <_puts_r+0x38>
 8007a04:	250a      	movs	r5, #10
 8007a06:	e7d7      	b.n	80079b8 <_puts_r+0x3c>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 f857 	bl	8007abe <__swbuf_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1e7      	bne.n	80079e4 <_puts_r+0x68>
 8007a14:	e7ce      	b.n	80079b4 <_puts_r+0x38>
 8007a16:	3e01      	subs	r6, #1
 8007a18:	e7e4      	b.n	80079e4 <_puts_r+0x68>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	220a      	movs	r2, #10
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e7ee      	b.n	8007a04 <_puts_r+0x88>
	...

08007a28 <puts>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	@ (8007a34 <puts+0xc>)
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	f7ff bfa5 	b.w	800797c <_puts_r>
 8007a32:	bf00      	nop
 8007a34:	20000024 	.word	0x20000024

08007a38 <__sread>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	f000 f8fc 	bl	8007c3c <_read_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	bfab      	itete	ge
 8007a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a4c:	181b      	addge	r3, r3, r0
 8007a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a52:	bfac      	ite	ge
 8007a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a56:	81a3      	strhlt	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__swrite>:
 8007a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	461f      	mov	r7, r3
 8007a60:	898b      	ldrh	r3, [r1, #12]
 8007a62:	05db      	lsls	r3, r3, #23
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4616      	mov	r6, r2
 8007a6a:	d505      	bpl.n	8007a78 <__swrite+0x1e>
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	2302      	movs	r3, #2
 8007a72:	2200      	movs	r2, #0
 8007a74:	f000 f8d0 	bl	8007c18 <_lseek_r>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	4628      	mov	r0, r5
 8007a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	f000 b8e7 	b.w	8007c60 <_write_r>

08007a92 <__sseek>:
 8007a92:	b510      	push	{r4, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9a:	f000 f8bd 	bl	8007c18 <_lseek_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	bf15      	itete	ne
 8007aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007aae:	81a3      	strheq	r3, [r4, #12]
 8007ab0:	bf18      	it	ne
 8007ab2:	81a3      	strhne	r3, [r4, #12]
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <__sclose>:
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 b89d 	b.w	8007bf8 <_close_r>

08007abe <__swbuf_r>:
 8007abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac0:	460e      	mov	r6, r1
 8007ac2:	4614      	mov	r4, r2
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	b118      	cbz	r0, 8007ad0 <__swbuf_r+0x12>
 8007ac8:	6a03      	ldr	r3, [r0, #32]
 8007aca:	b90b      	cbnz	r3, 8007ad0 <__swbuf_r+0x12>
 8007acc:	f7ff ff06 	bl	80078dc <__sinit>
 8007ad0:	69a3      	ldr	r3, [r4, #24]
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	071a      	lsls	r2, r3, #28
 8007ad8:	d501      	bpl.n	8007ade <__swbuf_r+0x20>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	b943      	cbnz	r3, 8007af0 <__swbuf_r+0x32>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f82b 	bl	8007b3c <__swsetup_r>
 8007ae6:	b118      	cbz	r0, 8007af0 <__swbuf_r+0x32>
 8007ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8007aec:	4638      	mov	r0, r7
 8007aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	6922      	ldr	r2, [r4, #16]
 8007af4:	1a98      	subs	r0, r3, r2
 8007af6:	6963      	ldr	r3, [r4, #20]
 8007af8:	b2f6      	uxtb	r6, r6
 8007afa:	4283      	cmp	r3, r0
 8007afc:	4637      	mov	r7, r6
 8007afe:	dc05      	bgt.n	8007b0c <__swbuf_r+0x4e>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 fd36 	bl	8008574 <_fflush_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1ed      	bne.n	8007ae8 <__swbuf_r+0x2a>
 8007b0c:	68a3      	ldr	r3, [r4, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	701e      	strb	r6, [r3, #0]
 8007b1a:	6962      	ldr	r2, [r4, #20]
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d004      	beq.n	8007b2c <__swbuf_r+0x6e>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	07db      	lsls	r3, r3, #31
 8007b26:	d5e1      	bpl.n	8007aec <__swbuf_r+0x2e>
 8007b28:	2e0a      	cmp	r6, #10
 8007b2a:	d1df      	bne.n	8007aec <__swbuf_r+0x2e>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fd20 	bl	8008574 <_fflush_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0d9      	beq.n	8007aec <__swbuf_r+0x2e>
 8007b38:	e7d6      	b.n	8007ae8 <__swbuf_r+0x2a>
	...

08007b3c <__swsetup_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4b29      	ldr	r3, [pc, #164]	@ (8007be4 <__swsetup_r+0xa8>)
 8007b40:	4605      	mov	r5, r0
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	460c      	mov	r4, r1
 8007b46:	b118      	cbz	r0, 8007b50 <__swsetup_r+0x14>
 8007b48:	6a03      	ldr	r3, [r0, #32]
 8007b4a:	b90b      	cbnz	r3, 8007b50 <__swsetup_r+0x14>
 8007b4c:	f7ff fec6 	bl	80078dc <__sinit>
 8007b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b54:	0719      	lsls	r1, r3, #28
 8007b56:	d422      	bmi.n	8007b9e <__swsetup_r+0x62>
 8007b58:	06da      	lsls	r2, r3, #27
 8007b5a:	d407      	bmi.n	8007b6c <__swsetup_r+0x30>
 8007b5c:	2209      	movs	r2, #9
 8007b5e:	602a      	str	r2, [r5, #0]
 8007b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6a:	e033      	b.n	8007bd4 <__swsetup_r+0x98>
 8007b6c:	0758      	lsls	r0, r3, #29
 8007b6e:	d512      	bpl.n	8007b96 <__swsetup_r+0x5a>
 8007b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b72:	b141      	cbz	r1, 8007b86 <__swsetup_r+0x4a>
 8007b74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d002      	beq.n	8007b82 <__swsetup_r+0x46>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f8af 	bl	8007ce0 <_free_r>
 8007b82:	2300      	movs	r3, #0
 8007b84:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6063      	str	r3, [r4, #4]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f043 0308 	orr.w	r3, r3, #8
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	b94b      	cbnz	r3, 8007bb6 <__swsetup_r+0x7a>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bac:	d003      	beq.n	8007bb6 <__swsetup_r+0x7a>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 fd2d 	bl	8008610 <__smakebuf_r>
 8007bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bba:	f013 0201 	ands.w	r2, r3, #1
 8007bbe:	d00a      	beq.n	8007bd6 <__swsetup_r+0x9a>
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	60a2      	str	r2, [r4, #8]
 8007bc4:	6962      	ldr	r2, [r4, #20]
 8007bc6:	4252      	negs	r2, r2
 8007bc8:	61a2      	str	r2, [r4, #24]
 8007bca:	6922      	ldr	r2, [r4, #16]
 8007bcc:	b942      	cbnz	r2, 8007be0 <__swsetup_r+0xa4>
 8007bce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bd2:	d1c5      	bne.n	8007b60 <__swsetup_r+0x24>
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	0799      	lsls	r1, r3, #30
 8007bd8:	bf58      	it	pl
 8007bda:	6962      	ldrpl	r2, [r4, #20]
 8007bdc:	60a2      	str	r2, [r4, #8]
 8007bde:	e7f4      	b.n	8007bca <__swsetup_r+0x8e>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e7f7      	b.n	8007bd4 <__swsetup_r+0x98>
 8007be4:	20000024 	.word	0x20000024

08007be8 <memset>:
 8007be8:	4402      	add	r2, r0
 8007bea:	4603      	mov	r3, r0
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <memset+0xa>
 8007bf0:	4770      	bx	lr
 8007bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf6:	e7f9      	b.n	8007bec <memset+0x4>

08007bf8 <_close_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	@ (8007c14 <_close_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 fecf 	bl	80019a6 <_close>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_close_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_close_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	2000170c 	.word	0x2000170c

08007c18 <_lseek_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	@ (8007c38 <_lseek_r+0x20>)
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7f9 fee4 	bl	80019f4 <_lseek>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_lseek_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_lseek_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	2000170c 	.word	0x2000170c

08007c3c <_read_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	@ (8007c5c <_read_r+0x20>)
 8007c40:	4604      	mov	r4, r0
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	2200      	movs	r2, #0
 8007c48:	602a      	str	r2, [r5, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f7f9 fe72 	bl	8001934 <_read>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_read_r+0x1e>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_read_r+0x1e>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	2000170c 	.word	0x2000170c

08007c60 <_write_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	@ (8007c80 <_write_r+0x20>)
 8007c64:	4604      	mov	r4, r0
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f7f9 fe7d 	bl	800196e <_write>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_write_r+0x1e>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_write_r+0x1e>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	2000170c 	.word	0x2000170c

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	@ (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000024 	.word	0x20000024

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	@ (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	@ (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f000 fd56 	bl	8008754 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08009638 	.word	0x08009638
 8007ccc:	08009638 	.word	0x08009638
 8007cd0:	08009638 	.word	0x08009638
 8007cd4:	0800963c 	.word	0x0800963c

08007cd8 <__retarget_lock_init_recursive>:
 8007cd8:	4770      	bx	lr

08007cda <__retarget_lock_acquire_recursive>:
 8007cda:	4770      	bx	lr

08007cdc <__retarget_lock_release_recursive>:
 8007cdc:	4770      	bx	lr
	...

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d041      	beq.n	8007d6c <_free_r+0x8c>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f000 f8e0 	bl	8007eb8 <__malloc_lock>
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d70 <_free_r+0x90>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x2c>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	4628      	mov	r0, r5
 8007d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d08:	f000 b8dc 	b.w	8007ec4 <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x42>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1809      	addeq	r1, r1, r0
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x1e>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x4c>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x42>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x6c>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	4401      	add	r1, r0
 8007d38:	1850      	adds	r0, r2, r1
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x22>
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	4408      	add	r0, r1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x22>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x74>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x22>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x22>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001718 	.word	0x20001718

08007d74 <sbrk_aligned>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4e0f      	ldr	r6, [pc, #60]	@ (8007db4 <sbrk_aligned+0x40>)
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6831      	ldr	r1, [r6, #0]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	b911      	cbnz	r1, 8007d86 <sbrk_aligned+0x12>
 8007d80:	f000 fcd8 	bl	8008734 <_sbrk_r>
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 fcd3 	bl	8008734 <_sbrk_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d103      	bne.n	8007d9a <sbrk_aligned+0x26>
 8007d92:	f04f 34ff 	mov.w	r4, #4294967295
 8007d96:	4620      	mov	r0, r4
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d0f8      	beq.n	8007d96 <sbrk_aligned+0x22>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 fcc4 	bl	8008734 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d1f2      	bne.n	8007d96 <sbrk_aligned+0x22>
 8007db0:	e7ef      	b.n	8007d92 <sbrk_aligned+0x1e>
 8007db2:	bf00      	nop
 8007db4:	20001714 	.word	0x20001714

08007db8 <_malloc_r>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	1ccd      	adds	r5, r1, #3
 8007dbe:	f025 0503 	bic.w	r5, r5, #3
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	2d0c      	cmp	r5, #12
 8007dc6:	bf38      	it	cc
 8007dc8:	250c      	movcc	r5, #12
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	4606      	mov	r6, r0
 8007dce:	db01      	blt.n	8007dd4 <_malloc_r+0x1c>
 8007dd0:	42a9      	cmp	r1, r5
 8007dd2:	d904      	bls.n	8007dde <_malloc_r+0x26>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	6033      	str	r3, [r6, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb4 <_malloc_r+0xfc>
 8007de2:	f000 f869 	bl	8007eb8 <__malloc_lock>
 8007de6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dea:	461c      	mov	r4, r3
 8007dec:	bb44      	cbnz	r4, 8007e40 <_malloc_r+0x88>
 8007dee:	4629      	mov	r1, r5
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffbf 	bl	8007d74 <sbrk_aligned>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	4604      	mov	r4, r0
 8007dfa:	d158      	bne.n	8007eae <_malloc_r+0xf6>
 8007dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007e00:	4627      	mov	r7, r4
 8007e02:	2f00      	cmp	r7, #0
 8007e04:	d143      	bne.n	8007e8e <_malloc_r+0xd6>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d04b      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	eb04 0903 	add.w	r9, r4, r3
 8007e14:	f000 fc8e 	bl	8008734 <_sbrk_r>
 8007e18:	4581      	cmp	r9, r0
 8007e1a:	d142      	bne.n	8007ea2 <_malloc_r+0xea>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	1a6d      	subs	r5, r5, r1
 8007e20:	4629      	mov	r1, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffa6 	bl	8007d74 <sbrk_aligned>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d03a      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	442b      	add	r3, r5
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	bb62      	cbnz	r2, 8007e94 <_malloc_r+0xdc>
 8007e3a:	f8c8 7000 	str.w	r7, [r8]
 8007e3e:	e00f      	b.n	8007e60 <_malloc_r+0xa8>
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	1b52      	subs	r2, r2, r5
 8007e44:	d420      	bmi.n	8007e88 <_malloc_r+0xd0>
 8007e46:	2a0b      	cmp	r2, #11
 8007e48:	d917      	bls.n	8007e7a <_malloc_r+0xc2>
 8007e4a:	1961      	adds	r1, r4, r5
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	6059      	strne	r1, [r3, #4]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	bf08      	it	eq
 8007e58:	f8c8 1000 	streq.w	r1, [r8]
 8007e5c:	5162      	str	r2, [r4, r5]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f82f 	bl	8007ec4 <__malloc_unlock>
 8007e66:	f104 000b 	add.w	r0, r4, #11
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	f020 0007 	bic.w	r0, r0, #7
 8007e70:	1ac2      	subs	r2, r0, r3
 8007e72:	bf1c      	itt	ne
 8007e74:	1a1b      	subne	r3, r3, r0
 8007e76:	50a3      	strne	r3, [r4, r2]
 8007e78:	e7af      	b.n	8007dda <_malloc_r+0x22>
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf0c      	ite	eq
 8007e80:	f8c8 2000 	streq.w	r2, [r8]
 8007e84:	605a      	strne	r2, [r3, #4]
 8007e86:	e7eb      	b.n	8007e60 <_malloc_r+0xa8>
 8007e88:	4623      	mov	r3, r4
 8007e8a:	6864      	ldr	r4, [r4, #4]
 8007e8c:	e7ae      	b.n	8007dec <_malloc_r+0x34>
 8007e8e:	463c      	mov	r4, r7
 8007e90:	687f      	ldr	r7, [r7, #4]
 8007e92:	e7b6      	b.n	8007e02 <_malloc_r+0x4a>
 8007e94:	461a      	mov	r2, r3
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d1fb      	bne.n	8007e94 <_malloc_r+0xdc>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	e7de      	b.n	8007e60 <_malloc_r+0xa8>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f80c 	bl	8007ec4 <__malloc_unlock>
 8007eac:	e794      	b.n	8007dd8 <_malloc_r+0x20>
 8007eae:	6005      	str	r5, [r0, #0]
 8007eb0:	e7d6      	b.n	8007e60 <_malloc_r+0xa8>
 8007eb2:	bf00      	nop
 8007eb4:	20001718 	.word	0x20001718

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f7ff bf0e 	b.w	8007cda <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20001710 	.word	0x20001710

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f7ff bf09 	b.w	8007cdc <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20001710 	.word	0x20001710

08007ed0 <__sfputc_r>:
 8007ed0:	6893      	ldr	r3, [r2, #8]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	b410      	push	{r4}
 8007ed8:	6093      	str	r3, [r2, #8]
 8007eda:	da08      	bge.n	8007eee <__sfputc_r+0x1e>
 8007edc:	6994      	ldr	r4, [r2, #24]
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	db01      	blt.n	8007ee6 <__sfputc_r+0x16>
 8007ee2:	290a      	cmp	r1, #10
 8007ee4:	d103      	bne.n	8007eee <__sfputc_r+0x1e>
 8007ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eea:	f7ff bde8 	b.w	8007abe <__swbuf_r>
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	1c58      	adds	r0, r3, #1
 8007ef2:	6010      	str	r0, [r2, #0]
 8007ef4:	7019      	strb	r1, [r3, #0]
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <__sfputs_r>:
 8007efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f00:	4606      	mov	r6, r0
 8007f02:	460f      	mov	r7, r1
 8007f04:	4614      	mov	r4, r2
 8007f06:	18d5      	adds	r5, r2, r3
 8007f08:	42ac      	cmp	r4, r5
 8007f0a:	d101      	bne.n	8007f10 <__sfputs_r+0x12>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e007      	b.n	8007f20 <__sfputs_r+0x22>
 8007f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f14:	463a      	mov	r2, r7
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ffda 	bl	8007ed0 <__sfputc_r>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d1f3      	bne.n	8007f08 <__sfputs_r+0xa>
 8007f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f24 <_vfiprintf_r>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	460d      	mov	r5, r1
 8007f2a:	b09d      	sub	sp, #116	@ 0x74
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	4698      	mov	r8, r3
 8007f30:	4606      	mov	r6, r0
 8007f32:	b118      	cbz	r0, 8007f3c <_vfiprintf_r+0x18>
 8007f34:	6a03      	ldr	r3, [r0, #32]
 8007f36:	b90b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x18>
 8007f38:	f7ff fcd0 	bl	80078dc <__sinit>
 8007f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f3e:	07d9      	lsls	r1, r3, #31
 8007f40:	d405      	bmi.n	8007f4e <_vfiprintf_r+0x2a>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	059a      	lsls	r2, r3, #22
 8007f46:	d402      	bmi.n	8007f4e <_vfiprintf_r+0x2a>
 8007f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f4a:	f7ff fec6 	bl	8007cda <__retarget_lock_acquire_recursive>
 8007f4e:	89ab      	ldrh	r3, [r5, #12]
 8007f50:	071b      	lsls	r3, r3, #28
 8007f52:	d501      	bpl.n	8007f58 <_vfiprintf_r+0x34>
 8007f54:	692b      	ldr	r3, [r5, #16]
 8007f56:	b99b      	cbnz	r3, 8007f80 <_vfiprintf_r+0x5c>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff fdee 	bl	8007b3c <__swsetup_r>
 8007f60:	b170      	cbz	r0, 8007f80 <_vfiprintf_r+0x5c>
 8007f62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f64:	07dc      	lsls	r4, r3, #31
 8007f66:	d504      	bpl.n	8007f72 <_vfiprintf_r+0x4e>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	b01d      	add	sp, #116	@ 0x74
 8007f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	0598      	lsls	r0, r3, #22
 8007f76:	d4f7      	bmi.n	8007f68 <_vfiprintf_r+0x44>
 8007f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f7a:	f7ff feaf 	bl	8007cdc <__retarget_lock_release_recursive>
 8007f7e:	e7f3      	b.n	8007f68 <_vfiprintf_r+0x44>
 8007f80:	2300      	movs	r3, #0
 8007f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f84:	2320      	movs	r3, #32
 8007f86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8e:	2330      	movs	r3, #48	@ 0x30
 8007f90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008140 <_vfiprintf_r+0x21c>
 8007f94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f98:	f04f 0901 	mov.w	r9, #1
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	469a      	mov	sl, r3
 8007fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa4:	b10a      	cbz	r2, 8007faa <_vfiprintf_r+0x86>
 8007fa6:	2a25      	cmp	r2, #37	@ 0x25
 8007fa8:	d1f9      	bne.n	8007f9e <_vfiprintf_r+0x7a>
 8007faa:	ebba 0b04 	subs.w	fp, sl, r4
 8007fae:	d00b      	beq.n	8007fc8 <_vfiprintf_r+0xa4>
 8007fb0:	465b      	mov	r3, fp
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7ff ffa1 	bl	8007efe <__sfputs_r>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f000 80a7 	beq.w	8008110 <_vfiprintf_r+0x1ec>
 8007fc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc4:	445a      	add	r2, fp
 8007fc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 809f 	beq.w	8008110 <_vfiprintf_r+0x1ec>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fdc:	f10a 0a01 	add.w	sl, sl, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fe8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fea:	4654      	mov	r4, sl
 8007fec:	2205      	movs	r2, #5
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	4853      	ldr	r0, [pc, #332]	@ (8008140 <_vfiprintf_r+0x21c>)
 8007ff4:	f7f8 f8ec 	bl	80001d0 <memchr>
 8007ff8:	9a04      	ldr	r2, [sp, #16]
 8007ffa:	b9d8      	cbnz	r0, 8008034 <_vfiprintf_r+0x110>
 8007ffc:	06d1      	lsls	r1, r2, #27
 8007ffe:	bf44      	itt	mi
 8008000:	2320      	movmi	r3, #32
 8008002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008006:	0713      	lsls	r3, r2, #28
 8008008:	bf44      	itt	mi
 800800a:	232b      	movmi	r3, #43	@ 0x2b
 800800c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008010:	f89a 3000 	ldrb.w	r3, [sl]
 8008014:	2b2a      	cmp	r3, #42	@ 0x2a
 8008016:	d015      	beq.n	8008044 <_vfiprintf_r+0x120>
 8008018:	9a07      	ldr	r2, [sp, #28]
 800801a:	4654      	mov	r4, sl
 800801c:	2000      	movs	r0, #0
 800801e:	f04f 0c0a 	mov.w	ip, #10
 8008022:	4621      	mov	r1, r4
 8008024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008028:	3b30      	subs	r3, #48	@ 0x30
 800802a:	2b09      	cmp	r3, #9
 800802c:	d94b      	bls.n	80080c6 <_vfiprintf_r+0x1a2>
 800802e:	b1b0      	cbz	r0, 800805e <_vfiprintf_r+0x13a>
 8008030:	9207      	str	r2, [sp, #28]
 8008032:	e014      	b.n	800805e <_vfiprintf_r+0x13a>
 8008034:	eba0 0308 	sub.w	r3, r0, r8
 8008038:	fa09 f303 	lsl.w	r3, r9, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	9304      	str	r3, [sp, #16]
 8008040:	46a2      	mov	sl, r4
 8008042:	e7d2      	b.n	8007fea <_vfiprintf_r+0xc6>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	1d19      	adds	r1, r3, #4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	9103      	str	r1, [sp, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfbb      	ittet	lt
 8008050:	425b      	neglt	r3, r3
 8008052:	f042 0202 	orrlt.w	r2, r2, #2
 8008056:	9307      	strge	r3, [sp, #28]
 8008058:	9307      	strlt	r3, [sp, #28]
 800805a:	bfb8      	it	lt
 800805c:	9204      	strlt	r2, [sp, #16]
 800805e:	7823      	ldrb	r3, [r4, #0]
 8008060:	2b2e      	cmp	r3, #46	@ 0x2e
 8008062:	d10a      	bne.n	800807a <_vfiprintf_r+0x156>
 8008064:	7863      	ldrb	r3, [r4, #1]
 8008066:	2b2a      	cmp	r3, #42	@ 0x2a
 8008068:	d132      	bne.n	80080d0 <_vfiprintf_r+0x1ac>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	9203      	str	r2, [sp, #12]
 8008072:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008076:	3402      	adds	r4, #2
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008150 <_vfiprintf_r+0x22c>
 800807e:	7821      	ldrb	r1, [r4, #0]
 8008080:	2203      	movs	r2, #3
 8008082:	4650      	mov	r0, sl
 8008084:	f7f8 f8a4 	bl	80001d0 <memchr>
 8008088:	b138      	cbz	r0, 800809a <_vfiprintf_r+0x176>
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	eba0 000a 	sub.w	r0, r0, sl
 8008090:	2240      	movs	r2, #64	@ 0x40
 8008092:	4082      	lsls	r2, r0
 8008094:	4313      	orrs	r3, r2
 8008096:	3401      	adds	r4, #1
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809e:	4829      	ldr	r0, [pc, #164]	@ (8008144 <_vfiprintf_r+0x220>)
 80080a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080a4:	2206      	movs	r2, #6
 80080a6:	f7f8 f893 	bl	80001d0 <memchr>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d03f      	beq.n	800812e <_vfiprintf_r+0x20a>
 80080ae:	4b26      	ldr	r3, [pc, #152]	@ (8008148 <_vfiprintf_r+0x224>)
 80080b0:	bb1b      	cbnz	r3, 80080fa <_vfiprintf_r+0x1d6>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	3307      	adds	r3, #7
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	3308      	adds	r3, #8
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	443b      	add	r3, r7
 80080c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c4:	e76a      	b.n	8007f9c <_vfiprintf_r+0x78>
 80080c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ca:	460c      	mov	r4, r1
 80080cc:	2001      	movs	r0, #1
 80080ce:	e7a8      	b.n	8008022 <_vfiprintf_r+0xfe>
 80080d0:	2300      	movs	r3, #0
 80080d2:	3401      	adds	r4, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	4619      	mov	r1, r3
 80080d8:	f04f 0c0a 	mov.w	ip, #10
 80080dc:	4620      	mov	r0, r4
 80080de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e2:	3a30      	subs	r2, #48	@ 0x30
 80080e4:	2a09      	cmp	r2, #9
 80080e6:	d903      	bls.n	80080f0 <_vfiprintf_r+0x1cc>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0c6      	beq.n	800807a <_vfiprintf_r+0x156>
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	e7c4      	b.n	800807a <_vfiprintf_r+0x156>
 80080f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f4:	4604      	mov	r4, r0
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7f0      	b.n	80080dc <_vfiprintf_r+0x1b8>
 80080fa:	ab03      	add	r3, sp, #12
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	462a      	mov	r2, r5
 8008100:	4b12      	ldr	r3, [pc, #72]	@ (800814c <_vfiprintf_r+0x228>)
 8008102:	a904      	add	r1, sp, #16
 8008104:	4630      	mov	r0, r6
 8008106:	f3af 8000 	nop.w
 800810a:	4607      	mov	r7, r0
 800810c:	1c78      	adds	r0, r7, #1
 800810e:	d1d6      	bne.n	80080be <_vfiprintf_r+0x19a>
 8008110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008112:	07d9      	lsls	r1, r3, #31
 8008114:	d405      	bmi.n	8008122 <_vfiprintf_r+0x1fe>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	059a      	lsls	r2, r3, #22
 800811a:	d402      	bmi.n	8008122 <_vfiprintf_r+0x1fe>
 800811c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800811e:	f7ff fddd 	bl	8007cdc <__retarget_lock_release_recursive>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	065b      	lsls	r3, r3, #25
 8008126:	f53f af1f 	bmi.w	8007f68 <_vfiprintf_r+0x44>
 800812a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800812c:	e71e      	b.n	8007f6c <_vfiprintf_r+0x48>
 800812e:	ab03      	add	r3, sp, #12
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	462a      	mov	r2, r5
 8008134:	4b05      	ldr	r3, [pc, #20]	@ (800814c <_vfiprintf_r+0x228>)
 8008136:	a904      	add	r1, sp, #16
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f879 	bl	8008230 <_printf_i>
 800813e:	e7e4      	b.n	800810a <_vfiprintf_r+0x1e6>
 8008140:	080095fc 	.word	0x080095fc
 8008144:	08009606 	.word	0x08009606
 8008148:	00000000 	.word	0x00000000
 800814c:	08007eff 	.word	0x08007eff
 8008150:	08009602 	.word	0x08009602

08008154 <_printf_common>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	4616      	mov	r6, r2
 800815a:	4698      	mov	r8, r3
 800815c:	688a      	ldr	r2, [r1, #8]
 800815e:	690b      	ldr	r3, [r1, #16]
 8008160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008164:	4293      	cmp	r3, r2
 8008166:	bfb8      	it	lt
 8008168:	4613      	movlt	r3, r2
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008170:	4607      	mov	r7, r0
 8008172:	460c      	mov	r4, r1
 8008174:	b10a      	cbz	r2, 800817a <_printf_common+0x26>
 8008176:	3301      	adds	r3, #1
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	0699      	lsls	r1, r3, #26
 800817e:	bf42      	ittt	mi
 8008180:	6833      	ldrmi	r3, [r6, #0]
 8008182:	3302      	addmi	r3, #2
 8008184:	6033      	strmi	r3, [r6, #0]
 8008186:	6825      	ldr	r5, [r4, #0]
 8008188:	f015 0506 	ands.w	r5, r5, #6
 800818c:	d106      	bne.n	800819c <_printf_common+0x48>
 800818e:	f104 0a19 	add.w	sl, r4, #25
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	6832      	ldr	r2, [r6, #0]
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc26      	bgt.n	80081ea <_printf_common+0x96>
 800819c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081a0:	6822      	ldr	r2, [r4, #0]
 80081a2:	3b00      	subs	r3, #0
 80081a4:	bf18      	it	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	0692      	lsls	r2, r2, #26
 80081aa:	d42b      	bmi.n	8008204 <_printf_common+0xb0>
 80081ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081b0:	4641      	mov	r1, r8
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c8      	blx	r9
 80081b6:	3001      	adds	r0, #1
 80081b8:	d01e      	beq.n	80081f8 <_printf_common+0xa4>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	6922      	ldr	r2, [r4, #16]
 80081be:	f003 0306 	and.w	r3, r3, #6
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	bf02      	ittt	eq
 80081c6:	68e5      	ldreq	r5, [r4, #12]
 80081c8:	6833      	ldreq	r3, [r6, #0]
 80081ca:	1aed      	subeq	r5, r5, r3
 80081cc:	68a3      	ldr	r3, [r4, #8]
 80081ce:	bf0c      	ite	eq
 80081d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d4:	2500      	movne	r5, #0
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bfc4      	itt	gt
 80081da:	1a9b      	subgt	r3, r3, r2
 80081dc:	18ed      	addgt	r5, r5, r3
 80081de:	2600      	movs	r6, #0
 80081e0:	341a      	adds	r4, #26
 80081e2:	42b5      	cmp	r5, r6
 80081e4:	d11a      	bne.n	800821c <_printf_common+0xc8>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e008      	b.n	80081fc <_printf_common+0xa8>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4652      	mov	r2, sl
 80081ee:	4641      	mov	r1, r8
 80081f0:	4638      	mov	r0, r7
 80081f2:	47c8      	blx	r9
 80081f4:	3001      	adds	r0, #1
 80081f6:	d103      	bne.n	8008200 <_printf_common+0xac>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008200:	3501      	adds	r5, #1
 8008202:	e7c6      	b.n	8008192 <_printf_common+0x3e>
 8008204:	18e1      	adds	r1, r4, r3
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	2030      	movs	r0, #48	@ 0x30
 800820a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800820e:	4422      	add	r2, r4
 8008210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008218:	3302      	adds	r3, #2
 800821a:	e7c7      	b.n	80081ac <_printf_common+0x58>
 800821c:	2301      	movs	r3, #1
 800821e:	4622      	mov	r2, r4
 8008220:	4641      	mov	r1, r8
 8008222:	4638      	mov	r0, r7
 8008224:	47c8      	blx	r9
 8008226:	3001      	adds	r0, #1
 8008228:	d0e6      	beq.n	80081f8 <_printf_common+0xa4>
 800822a:	3601      	adds	r6, #1
 800822c:	e7d9      	b.n	80081e2 <_printf_common+0x8e>
	...

08008230 <_printf_i>:
 8008230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	7e0f      	ldrb	r7, [r1, #24]
 8008236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008238:	2f78      	cmp	r7, #120	@ 0x78
 800823a:	4691      	mov	r9, r2
 800823c:	4680      	mov	r8, r0
 800823e:	460c      	mov	r4, r1
 8008240:	469a      	mov	sl, r3
 8008242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008246:	d807      	bhi.n	8008258 <_printf_i+0x28>
 8008248:	2f62      	cmp	r7, #98	@ 0x62
 800824a:	d80a      	bhi.n	8008262 <_printf_i+0x32>
 800824c:	2f00      	cmp	r7, #0
 800824e:	f000 80d1 	beq.w	80083f4 <_printf_i+0x1c4>
 8008252:	2f58      	cmp	r7, #88	@ 0x58
 8008254:	f000 80b8 	beq.w	80083c8 <_printf_i+0x198>
 8008258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800825c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008260:	e03a      	b.n	80082d8 <_printf_i+0xa8>
 8008262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008266:	2b15      	cmp	r3, #21
 8008268:	d8f6      	bhi.n	8008258 <_printf_i+0x28>
 800826a:	a101      	add	r1, pc, #4	@ (adr r1, 8008270 <_printf_i+0x40>)
 800826c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008270:	080082c9 	.word	0x080082c9
 8008274:	080082dd 	.word	0x080082dd
 8008278:	08008259 	.word	0x08008259
 800827c:	08008259 	.word	0x08008259
 8008280:	08008259 	.word	0x08008259
 8008284:	08008259 	.word	0x08008259
 8008288:	080082dd 	.word	0x080082dd
 800828c:	08008259 	.word	0x08008259
 8008290:	08008259 	.word	0x08008259
 8008294:	08008259 	.word	0x08008259
 8008298:	08008259 	.word	0x08008259
 800829c:	080083db 	.word	0x080083db
 80082a0:	08008307 	.word	0x08008307
 80082a4:	08008395 	.word	0x08008395
 80082a8:	08008259 	.word	0x08008259
 80082ac:	08008259 	.word	0x08008259
 80082b0:	080083fd 	.word	0x080083fd
 80082b4:	08008259 	.word	0x08008259
 80082b8:	08008307 	.word	0x08008307
 80082bc:	08008259 	.word	0x08008259
 80082c0:	08008259 	.word	0x08008259
 80082c4:	0800839d 	.word	0x0800839d
 80082c8:	6833      	ldr	r3, [r6, #0]
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6032      	str	r2, [r6, #0]
 80082d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082d8:	2301      	movs	r3, #1
 80082da:	e09c      	b.n	8008416 <_printf_i+0x1e6>
 80082dc:	6833      	ldr	r3, [r6, #0]
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	1d19      	adds	r1, r3, #4
 80082e2:	6031      	str	r1, [r6, #0]
 80082e4:	0606      	lsls	r6, r0, #24
 80082e6:	d501      	bpl.n	80082ec <_printf_i+0xbc>
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	e003      	b.n	80082f4 <_printf_i+0xc4>
 80082ec:	0645      	lsls	r5, r0, #25
 80082ee:	d5fb      	bpl.n	80082e8 <_printf_i+0xb8>
 80082f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	da03      	bge.n	8008300 <_printf_i+0xd0>
 80082f8:	232d      	movs	r3, #45	@ 0x2d
 80082fa:	426d      	negs	r5, r5
 80082fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008300:	4858      	ldr	r0, [pc, #352]	@ (8008464 <_printf_i+0x234>)
 8008302:	230a      	movs	r3, #10
 8008304:	e011      	b.n	800832a <_printf_i+0xfa>
 8008306:	6821      	ldr	r1, [r4, #0]
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	0608      	lsls	r0, r1, #24
 800830c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008310:	d402      	bmi.n	8008318 <_printf_i+0xe8>
 8008312:	0649      	lsls	r1, r1, #25
 8008314:	bf48      	it	mi
 8008316:	b2ad      	uxthmi	r5, r5
 8008318:	2f6f      	cmp	r7, #111	@ 0x6f
 800831a:	4852      	ldr	r0, [pc, #328]	@ (8008464 <_printf_i+0x234>)
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	bf14      	ite	ne
 8008320:	230a      	movne	r3, #10
 8008322:	2308      	moveq	r3, #8
 8008324:	2100      	movs	r1, #0
 8008326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800832a:	6866      	ldr	r6, [r4, #4]
 800832c:	60a6      	str	r6, [r4, #8]
 800832e:	2e00      	cmp	r6, #0
 8008330:	db05      	blt.n	800833e <_printf_i+0x10e>
 8008332:	6821      	ldr	r1, [r4, #0]
 8008334:	432e      	orrs	r6, r5
 8008336:	f021 0104 	bic.w	r1, r1, #4
 800833a:	6021      	str	r1, [r4, #0]
 800833c:	d04b      	beq.n	80083d6 <_printf_i+0x1a6>
 800833e:	4616      	mov	r6, r2
 8008340:	fbb5 f1f3 	udiv	r1, r5, r3
 8008344:	fb03 5711 	mls	r7, r3, r1, r5
 8008348:	5dc7      	ldrb	r7, [r0, r7]
 800834a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800834e:	462f      	mov	r7, r5
 8008350:	42bb      	cmp	r3, r7
 8008352:	460d      	mov	r5, r1
 8008354:	d9f4      	bls.n	8008340 <_printf_i+0x110>
 8008356:	2b08      	cmp	r3, #8
 8008358:	d10b      	bne.n	8008372 <_printf_i+0x142>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	07df      	lsls	r7, r3, #31
 800835e:	d508      	bpl.n	8008372 <_printf_i+0x142>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	6861      	ldr	r1, [r4, #4]
 8008364:	4299      	cmp	r1, r3
 8008366:	bfde      	ittt	le
 8008368:	2330      	movle	r3, #48	@ 0x30
 800836a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800836e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008372:	1b92      	subs	r2, r2, r6
 8008374:	6122      	str	r2, [r4, #16]
 8008376:	f8cd a000 	str.w	sl, [sp]
 800837a:	464b      	mov	r3, r9
 800837c:	aa03      	add	r2, sp, #12
 800837e:	4621      	mov	r1, r4
 8008380:	4640      	mov	r0, r8
 8008382:	f7ff fee7 	bl	8008154 <_printf_common>
 8008386:	3001      	adds	r0, #1
 8008388:	d14a      	bne.n	8008420 <_printf_i+0x1f0>
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	b004      	add	sp, #16
 8008390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	f043 0320 	orr.w	r3, r3, #32
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	4832      	ldr	r0, [pc, #200]	@ (8008468 <_printf_i+0x238>)
 800839e:	2778      	movs	r7, #120	@ 0x78
 80083a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	6831      	ldr	r1, [r6, #0]
 80083a8:	061f      	lsls	r7, r3, #24
 80083aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80083ae:	d402      	bmi.n	80083b6 <_printf_i+0x186>
 80083b0:	065f      	lsls	r7, r3, #25
 80083b2:	bf48      	it	mi
 80083b4:	b2ad      	uxthmi	r5, r5
 80083b6:	6031      	str	r1, [r6, #0]
 80083b8:	07d9      	lsls	r1, r3, #31
 80083ba:	bf44      	itt	mi
 80083bc:	f043 0320 	orrmi.w	r3, r3, #32
 80083c0:	6023      	strmi	r3, [r4, #0]
 80083c2:	b11d      	cbz	r5, 80083cc <_printf_i+0x19c>
 80083c4:	2310      	movs	r3, #16
 80083c6:	e7ad      	b.n	8008324 <_printf_i+0xf4>
 80083c8:	4826      	ldr	r0, [pc, #152]	@ (8008464 <_printf_i+0x234>)
 80083ca:	e7e9      	b.n	80083a0 <_printf_i+0x170>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	f023 0320 	bic.w	r3, r3, #32
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	e7f6      	b.n	80083c4 <_printf_i+0x194>
 80083d6:	4616      	mov	r6, r2
 80083d8:	e7bd      	b.n	8008356 <_printf_i+0x126>
 80083da:	6833      	ldr	r3, [r6, #0]
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	6961      	ldr	r1, [r4, #20]
 80083e0:	1d18      	adds	r0, r3, #4
 80083e2:	6030      	str	r0, [r6, #0]
 80083e4:	062e      	lsls	r6, r5, #24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	d501      	bpl.n	80083ee <_printf_i+0x1be>
 80083ea:	6019      	str	r1, [r3, #0]
 80083ec:	e002      	b.n	80083f4 <_printf_i+0x1c4>
 80083ee:	0668      	lsls	r0, r5, #25
 80083f0:	d5fb      	bpl.n	80083ea <_printf_i+0x1ba>
 80083f2:	8019      	strh	r1, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	4616      	mov	r6, r2
 80083fa:	e7bc      	b.n	8008376 <_printf_i+0x146>
 80083fc:	6833      	ldr	r3, [r6, #0]
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	6032      	str	r2, [r6, #0]
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	6862      	ldr	r2, [r4, #4]
 8008406:	2100      	movs	r1, #0
 8008408:	4630      	mov	r0, r6
 800840a:	f7f7 fee1 	bl	80001d0 <memchr>
 800840e:	b108      	cbz	r0, 8008414 <_printf_i+0x1e4>
 8008410:	1b80      	subs	r0, r0, r6
 8008412:	6060      	str	r0, [r4, #4]
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	2300      	movs	r3, #0
 800841a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800841e:	e7aa      	b.n	8008376 <_printf_i+0x146>
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	4632      	mov	r2, r6
 8008424:	4649      	mov	r1, r9
 8008426:	4640      	mov	r0, r8
 8008428:	47d0      	blx	sl
 800842a:	3001      	adds	r0, #1
 800842c:	d0ad      	beq.n	800838a <_printf_i+0x15a>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	079b      	lsls	r3, r3, #30
 8008432:	d413      	bmi.n	800845c <_printf_i+0x22c>
 8008434:	68e0      	ldr	r0, [r4, #12]
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	4298      	cmp	r0, r3
 800843a:	bfb8      	it	lt
 800843c:	4618      	movlt	r0, r3
 800843e:	e7a6      	b.n	800838e <_printf_i+0x15e>
 8008440:	2301      	movs	r3, #1
 8008442:	4632      	mov	r2, r6
 8008444:	4649      	mov	r1, r9
 8008446:	4640      	mov	r0, r8
 8008448:	47d0      	blx	sl
 800844a:	3001      	adds	r0, #1
 800844c:	d09d      	beq.n	800838a <_printf_i+0x15a>
 800844e:	3501      	adds	r5, #1
 8008450:	68e3      	ldr	r3, [r4, #12]
 8008452:	9903      	ldr	r1, [sp, #12]
 8008454:	1a5b      	subs	r3, r3, r1
 8008456:	42ab      	cmp	r3, r5
 8008458:	dcf2      	bgt.n	8008440 <_printf_i+0x210>
 800845a:	e7eb      	b.n	8008434 <_printf_i+0x204>
 800845c:	2500      	movs	r5, #0
 800845e:	f104 0619 	add.w	r6, r4, #25
 8008462:	e7f5      	b.n	8008450 <_printf_i+0x220>
 8008464:	0800960d 	.word	0x0800960d
 8008468:	0800961e 	.word	0x0800961e

0800846c <__sflush_r>:
 800846c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008474:	0716      	lsls	r6, r2, #28
 8008476:	4605      	mov	r5, r0
 8008478:	460c      	mov	r4, r1
 800847a:	d454      	bmi.n	8008526 <__sflush_r+0xba>
 800847c:	684b      	ldr	r3, [r1, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	dc02      	bgt.n	8008488 <__sflush_r+0x1c>
 8008482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	dd48      	ble.n	800851a <__sflush_r+0xae>
 8008488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800848a:	2e00      	cmp	r6, #0
 800848c:	d045      	beq.n	800851a <__sflush_r+0xae>
 800848e:	2300      	movs	r3, #0
 8008490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008494:	682f      	ldr	r7, [r5, #0]
 8008496:	6a21      	ldr	r1, [r4, #32]
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	d030      	beq.n	80084fe <__sflush_r+0x92>
 800849c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	0759      	lsls	r1, r3, #29
 80084a2:	d505      	bpl.n	80084b0 <__sflush_r+0x44>
 80084a4:	6863      	ldr	r3, [r4, #4]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084aa:	b10b      	cbz	r3, 80084b0 <__sflush_r+0x44>
 80084ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084b4:	6a21      	ldr	r1, [r4, #32]
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b0      	blx	r6
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	d106      	bne.n	80084ce <__sflush_r+0x62>
 80084c0:	6829      	ldr	r1, [r5, #0]
 80084c2:	291d      	cmp	r1, #29
 80084c4:	d82b      	bhi.n	800851e <__sflush_r+0xb2>
 80084c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008570 <__sflush_r+0x104>)
 80084c8:	40ca      	lsrs	r2, r1
 80084ca:	07d6      	lsls	r6, r2, #31
 80084cc:	d527      	bpl.n	800851e <__sflush_r+0xb2>
 80084ce:	2200      	movs	r2, #0
 80084d0:	6062      	str	r2, [r4, #4]
 80084d2:	04d9      	lsls	r1, r3, #19
 80084d4:	6922      	ldr	r2, [r4, #16]
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	d504      	bpl.n	80084e4 <__sflush_r+0x78>
 80084da:	1c42      	adds	r2, r0, #1
 80084dc:	d101      	bne.n	80084e2 <__sflush_r+0x76>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	b903      	cbnz	r3, 80084e4 <__sflush_r+0x78>
 80084e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80084e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084e6:	602f      	str	r7, [r5, #0]
 80084e8:	b1b9      	cbz	r1, 800851a <__sflush_r+0xae>
 80084ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084ee:	4299      	cmp	r1, r3
 80084f0:	d002      	beq.n	80084f8 <__sflush_r+0x8c>
 80084f2:	4628      	mov	r0, r5
 80084f4:	f7ff fbf4 	bl	8007ce0 <_free_r>
 80084f8:	2300      	movs	r3, #0
 80084fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80084fc:	e00d      	b.n	800851a <__sflush_r+0xae>
 80084fe:	2301      	movs	r3, #1
 8008500:	4628      	mov	r0, r5
 8008502:	47b0      	blx	r6
 8008504:	4602      	mov	r2, r0
 8008506:	1c50      	adds	r0, r2, #1
 8008508:	d1c9      	bne.n	800849e <__sflush_r+0x32>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0c6      	beq.n	800849e <__sflush_r+0x32>
 8008510:	2b1d      	cmp	r3, #29
 8008512:	d001      	beq.n	8008518 <__sflush_r+0xac>
 8008514:	2b16      	cmp	r3, #22
 8008516:	d11e      	bne.n	8008556 <__sflush_r+0xea>
 8008518:	602f      	str	r7, [r5, #0]
 800851a:	2000      	movs	r0, #0
 800851c:	e022      	b.n	8008564 <__sflush_r+0xf8>
 800851e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008522:	b21b      	sxth	r3, r3
 8008524:	e01b      	b.n	800855e <__sflush_r+0xf2>
 8008526:	690f      	ldr	r7, [r1, #16]
 8008528:	2f00      	cmp	r7, #0
 800852a:	d0f6      	beq.n	800851a <__sflush_r+0xae>
 800852c:	0793      	lsls	r3, r2, #30
 800852e:	680e      	ldr	r6, [r1, #0]
 8008530:	bf08      	it	eq
 8008532:	694b      	ldreq	r3, [r1, #20]
 8008534:	600f      	str	r7, [r1, #0]
 8008536:	bf18      	it	ne
 8008538:	2300      	movne	r3, #0
 800853a:	eba6 0807 	sub.w	r8, r6, r7
 800853e:	608b      	str	r3, [r1, #8]
 8008540:	f1b8 0f00 	cmp.w	r8, #0
 8008544:	dde9      	ble.n	800851a <__sflush_r+0xae>
 8008546:	6a21      	ldr	r1, [r4, #32]
 8008548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800854a:	4643      	mov	r3, r8
 800854c:	463a      	mov	r2, r7
 800854e:	4628      	mov	r0, r5
 8008550:	47b0      	blx	r6
 8008552:	2800      	cmp	r0, #0
 8008554:	dc08      	bgt.n	8008568 <__sflush_r+0xfc>
 8008556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008568:	4407      	add	r7, r0
 800856a:	eba8 0800 	sub.w	r8, r8, r0
 800856e:	e7e7      	b.n	8008540 <__sflush_r+0xd4>
 8008570:	20400001 	.word	0x20400001

08008574 <_fflush_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	690b      	ldr	r3, [r1, #16]
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	b913      	cbnz	r3, 8008584 <_fflush_r+0x10>
 800857e:	2500      	movs	r5, #0
 8008580:	4628      	mov	r0, r5
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	b118      	cbz	r0, 800858e <_fflush_r+0x1a>
 8008586:	6a03      	ldr	r3, [r0, #32]
 8008588:	b90b      	cbnz	r3, 800858e <_fflush_r+0x1a>
 800858a:	f7ff f9a7 	bl	80078dc <__sinit>
 800858e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f3      	beq.n	800857e <_fflush_r+0xa>
 8008596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008598:	07d0      	lsls	r0, r2, #31
 800859a:	d404      	bmi.n	80085a6 <_fflush_r+0x32>
 800859c:	0599      	lsls	r1, r3, #22
 800859e:	d402      	bmi.n	80085a6 <_fflush_r+0x32>
 80085a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085a2:	f7ff fb9a 	bl	8007cda <__retarget_lock_acquire_recursive>
 80085a6:	4628      	mov	r0, r5
 80085a8:	4621      	mov	r1, r4
 80085aa:	f7ff ff5f 	bl	800846c <__sflush_r>
 80085ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085b0:	07da      	lsls	r2, r3, #31
 80085b2:	4605      	mov	r5, r0
 80085b4:	d4e4      	bmi.n	8008580 <_fflush_r+0xc>
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	059b      	lsls	r3, r3, #22
 80085ba:	d4e1      	bmi.n	8008580 <_fflush_r+0xc>
 80085bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085be:	f7ff fb8d 	bl	8007cdc <__retarget_lock_release_recursive>
 80085c2:	e7dd      	b.n	8008580 <_fflush_r+0xc>

080085c4 <__swhatbuf_r>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	460c      	mov	r4, r1
 80085c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085cc:	2900      	cmp	r1, #0
 80085ce:	b096      	sub	sp, #88	@ 0x58
 80085d0:	4615      	mov	r5, r2
 80085d2:	461e      	mov	r6, r3
 80085d4:	da0d      	bge.n	80085f2 <__swhatbuf_r+0x2e>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085dc:	f04f 0100 	mov.w	r1, #0
 80085e0:	bf14      	ite	ne
 80085e2:	2340      	movne	r3, #64	@ 0x40
 80085e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085e8:	2000      	movs	r0, #0
 80085ea:	6031      	str	r1, [r6, #0]
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	b016      	add	sp, #88	@ 0x58
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
 80085f2:	466a      	mov	r2, sp
 80085f4:	f000 f87c 	bl	80086f0 <_fstat_r>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	dbec      	blt.n	80085d6 <__swhatbuf_r+0x12>
 80085fc:	9901      	ldr	r1, [sp, #4]
 80085fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008602:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008606:	4259      	negs	r1, r3
 8008608:	4159      	adcs	r1, r3
 800860a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800860e:	e7eb      	b.n	80085e8 <__swhatbuf_r+0x24>

08008610 <__smakebuf_r>:
 8008610:	898b      	ldrh	r3, [r1, #12]
 8008612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008614:	079d      	lsls	r5, r3, #30
 8008616:	4606      	mov	r6, r0
 8008618:	460c      	mov	r4, r1
 800861a:	d507      	bpl.n	800862c <__smakebuf_r+0x1c>
 800861c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	6123      	str	r3, [r4, #16]
 8008624:	2301      	movs	r3, #1
 8008626:	6163      	str	r3, [r4, #20]
 8008628:	b003      	add	sp, #12
 800862a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862c:	ab01      	add	r3, sp, #4
 800862e:	466a      	mov	r2, sp
 8008630:	f7ff ffc8 	bl	80085c4 <__swhatbuf_r>
 8008634:	9f00      	ldr	r7, [sp, #0]
 8008636:	4605      	mov	r5, r0
 8008638:	4639      	mov	r1, r7
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff fbbc 	bl	8007db8 <_malloc_r>
 8008640:	b948      	cbnz	r0, 8008656 <__smakebuf_r+0x46>
 8008642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008646:	059a      	lsls	r2, r3, #22
 8008648:	d4ee      	bmi.n	8008628 <__smakebuf_r+0x18>
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	f043 0302 	orr.w	r3, r3, #2
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	e7e2      	b.n	800861c <__smakebuf_r+0xc>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	6020      	str	r0, [r4, #0]
 800865a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	9b01      	ldr	r3, [sp, #4]
 8008662:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008666:	b15b      	cbz	r3, 8008680 <__smakebuf_r+0x70>
 8008668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f851 	bl	8008714 <_isatty_r>
 8008672:	b128      	cbz	r0, 8008680 <__smakebuf_r+0x70>
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	431d      	orrs	r5, r3
 8008684:	81a5      	strh	r5, [r4, #12]
 8008686:	e7cf      	b.n	8008628 <__smakebuf_r+0x18>

08008688 <_putc_r>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	460d      	mov	r5, r1
 800868c:	4614      	mov	r4, r2
 800868e:	4606      	mov	r6, r0
 8008690:	b118      	cbz	r0, 800869a <_putc_r+0x12>
 8008692:	6a03      	ldr	r3, [r0, #32]
 8008694:	b90b      	cbnz	r3, 800869a <_putc_r+0x12>
 8008696:	f7ff f921 	bl	80078dc <__sinit>
 800869a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800869c:	07d8      	lsls	r0, r3, #31
 800869e:	d405      	bmi.n	80086ac <_putc_r+0x24>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	0599      	lsls	r1, r3, #22
 80086a4:	d402      	bmi.n	80086ac <_putc_r+0x24>
 80086a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086a8:	f7ff fb17 	bl	8007cda <__retarget_lock_acquire_recursive>
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	60a3      	str	r3, [r4, #8]
 80086b4:	da05      	bge.n	80086c2 <_putc_r+0x3a>
 80086b6:	69a2      	ldr	r2, [r4, #24]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	db12      	blt.n	80086e2 <_putc_r+0x5a>
 80086bc:	b2eb      	uxtb	r3, r5
 80086be:	2b0a      	cmp	r3, #10
 80086c0:	d00f      	beq.n	80086e2 <_putc_r+0x5a>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	701d      	strb	r5, [r3, #0]
 80086ca:	b2ed      	uxtb	r5, r5
 80086cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ce:	07da      	lsls	r2, r3, #31
 80086d0:	d405      	bmi.n	80086de <_putc_r+0x56>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	059b      	lsls	r3, r3, #22
 80086d6:	d402      	bmi.n	80086de <_putc_r+0x56>
 80086d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086da:	f7ff faff 	bl	8007cdc <__retarget_lock_release_recursive>
 80086de:	4628      	mov	r0, r5
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	4629      	mov	r1, r5
 80086e4:	4622      	mov	r2, r4
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff f9e9 	bl	8007abe <__swbuf_r>
 80086ec:	4605      	mov	r5, r0
 80086ee:	e7ed      	b.n	80086cc <_putc_r+0x44>

080086f0 <_fstat_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d07      	ldr	r5, [pc, #28]	@ (8008710 <_fstat_r+0x20>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	f7f9 f95e 	bl	80019be <_fstat>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d102      	bne.n	800870c <_fstat_r+0x1c>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	b103      	cbz	r3, 800870c <_fstat_r+0x1c>
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	bf00      	nop
 8008710:	2000170c 	.word	0x2000170c

08008714 <_isatty_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d06      	ldr	r5, [pc, #24]	@ (8008730 <_isatty_r+0x1c>)
 8008718:	2300      	movs	r3, #0
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	f7f9 f95d 	bl	80019de <_isatty>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_isatty_r+0x1a>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_isatty_r+0x1a>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	2000170c 	.word	0x2000170c

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	@ (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7f9 f966 	bl	8001a10 <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	2000170c 	.word	0x2000170c

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
