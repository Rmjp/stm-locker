
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08009da4  08009da4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb8  0800acb8  0000c090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800acb8  0800acb8  0000bcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc0  0800acc0  0000c090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc0  0800acc0  0000bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acc4  0800acc4  0000bcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800acc8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b8  20000090  0800ad58  0000c090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001748  0800ad58  0000c748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c91b  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d5  00000000  00000000  000289db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001493  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ff  00000000  00000000  0002f9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ece6  00000000  00000000  000543b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f7d  00000000  00000000  00073098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007788  00000000  00000000  0014b058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001527e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d8c 	.word	0x08009d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009d8c 	.word	0x08009d8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	20000100 	.word	0x20000100

080005f0 <servo1>:
void keypadTask(void const * argument);
void i2cTask03(void const * argument);

/* USER CODE BEGIN PFP */

void servo1(int d){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR2 = d;
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <servo1+0x1c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	2000039c 	.word	0x2000039c

08000610 <servo2>:

void servo2(int d){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR4 = d;
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <servo2+0x1c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	2000039c 	.word	0x2000039c

08000630 <lock>:
int close_d = 125;

int delay_open = 1000;
int delay_close = 1000;

void lock(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	servo2(lock_d);
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <lock+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffe9 	bl	8000610 <servo2>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000008 	.word	0x20000008

08000648 <unlock>:

void unlock(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	servo2(unlock_d);
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <unlock+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ffdd 	bl	8000610 <servo2>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000000c 	.word	0x2000000c

08000660 <open>:

void open(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	unlock();
 8000664:	f7ff fff0 	bl	8000648 <unlock>
	osDelay(delay_open);
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <open+0x20>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f005 ffb7 	bl	80065e0 <osDelay>
	servo1(open_d);
 8000672:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <open+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffba 	bl	80005f0 <servo1>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000018 	.word	0x20000018
 8000684:	20000010 	.word	0x20000010

08000688 <close>:

void close(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	servo1(close_d);
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <close+0x20>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffad 	bl	80005f0 <servo1>
	osDelay(delay_close);
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <close+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f005 ffa0 	bl	80065e0 <osDelay>
	lock();
 80006a0:	f7ff ffc6 	bl	8000630 <lock>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000014 	.word	0x20000014
 80006ac:	2000001c 	.word	0x2000001c

080006b0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006b8:	1d39      	adds	r1, r7, #4
 80006ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006be:	2201      	movs	r2, #1
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <__io_putchar+0x20>)
 80006c2:	f005 fa3f 	bl	8005b44 <HAL_UART_Transmit>

  return ch;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200003e8 	.word	0x200003e8

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b09c      	sub	sp, #112	@ 0x70
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f001 fbc0 	bl	8001e5e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f8a1 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fa11 	bl	8000b08 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e6:	f000 f9f1 	bl	8000acc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f9bf 	bl	8000a6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006ee:	f000 f8fb 	bl	80008e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006f2:	f000 f939 	bl	8000968 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello \n");
 80006f6:	483d      	ldr	r0, [pc, #244]	@ (80007ec <main+0x118>)
 80006f8:	f008 fca4 	bl	8009044 <puts>

  SSD1306_Init (); // initialise the display
 80006fc:	f000 fdd4 	bl	80012a8 <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8000700:	210a      	movs	r1, #10
 8000702:	200a      	movs	r0, #10
 8000704:	f000 ff3a 	bl	800157c <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000708:	2201      	movs	r2, #1
 800070a:	4939      	ldr	r1, [pc, #228]	@ (80007f0 <main+0x11c>)
 800070c:	4839      	ldr	r0, [pc, #228]	@ (80007f4 <main+0x120>)
 800070e:	f000 ffc9 	bl	80016a4 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000712:	211e      	movs	r1, #30
 8000714:	200a      	movs	r0, #10
 8000716:	f000 ff31 	bl	800157c <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	4934      	ldr	r1, [pc, #208]	@ (80007f0 <main+0x11c>)
 800071e:	4836      	ldr	r0, [pc, #216]	@ (80007f8 <main+0x124>)
 8000720:	f000 ffc0 	bl	80016a4 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000724:	f000 fe84 	bl	8001430 <SSD1306_UpdateScreen>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000728:	2104      	movs	r1, #4
 800072a:	4834      	ldr	r0, [pc, #208]	@ (80007fc <main+0x128>)
 800072c:	f004 f99e 	bl	8004a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000730:	210c      	movs	r1, #12
 8000732:	4832      	ldr	r0, [pc, #200]	@ (80007fc <main+0x128>)
 8000734:	f004 f99a 	bl	8004a6c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  osMutexDef(i2cMutex);
 8000738:	2300      	movs	r3, #0
 800073a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800073c:	2300      	movs	r3, #0
 800073e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 8000740:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000744:	4618      	mov	r0, r3
 8000746:	f005 ff5f 	bl	8006608 <osMutexCreate>
 800074a:	4603      	mov	r3, r0
 800074c:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <main+0x12c>)
 800074e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of i2cQ */
  osMessageQDef(i2cQ, 16, uint16_t);
 8000750:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <main+0x130>)
 8000752:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQHandle = osMessageCreate(osMessageQ(i2cQ), NULL);
 800075c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 ffec 	bl	8006740 <osMessageCreate>
 8000768:	4603      	mov	r3, r0
 800076a:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <main+0x134>)
 800076c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <main+0x138>)
 8000770:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000782:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f005 fedd 	bl	8006548 <osThreadCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a1f      	ldr	r2, [pc, #124]	@ (8000810 <main+0x13c>)
 8000792:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad */
  osThreadDef(keypad, keypadTask, osPriorityIdle, 0, 128);
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <main+0x140>)
 8000796:	f107 0420 	add.w	r4, r7, #32
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadHandle = osThreadCreate(osThread(keypad), NULL);
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 feca 	bl	8006548 <osThreadCreate>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <main+0x144>)
 80007b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2c */
  osThreadDef(i2c, i2cTask03, osPriorityIdle, 0, 128);
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <main+0x148>)
 80007bc:	1d3c      	adds	r4, r7, #4
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cHandle = osThreadCreate(osThread(i2c), NULL);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 feb9 	bl	8006548 <osThreadCreate>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <main+0x14c>)
 80007da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f005 fead 	bl	800653a <osKernelStart>
 80007e0:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3770      	adds	r7, #112	@ 0x70
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08009da4 	.word	0x08009da4
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08009dac 	.word	0x08009dac
 80007f8:	08009db4 	.word	0x08009db4
 80007fc:	2000039c 	.word	0x2000039c
 8000800:	20000484 	.word	0x20000484
 8000804:	08009dc0 	.word	0x08009dc0
 8000808:	2000047c 	.word	0x2000047c
 800080c:	08009ddc 	.word	0x08009ddc
 8000810:	20000470 	.word	0x20000470
 8000814:	08009e00 	.word	0x08009e00
 8000818:	20000474 	.word	0x20000474
 800081c:	08009e20 	.word	0x08009e20
 8000820:	20000478 	.word	0x20000478

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	@ 0x58
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2244      	movs	r2, #68	@ 0x44
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f008 fce6 	bl	8009204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000846:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800084a:	f002 fe49 	bl	80034e0 <HAL_PWREx_ControlVoltageScaling>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000854:	f000 fc70 	bl	8001138 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000858:	f002 fe24 	bl	80034a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <SystemClock_Config+0xc0>)
 800085e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000862:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <SystemClock_Config+0xc0>)
 8000864:	f023 0318 	bic.w	r3, r3, #24
 8000868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800086c:	2314      	movs	r3, #20
 800086e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800087c:	2360      	movs	r3, #96	@ 0x60
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000884:	2301      	movs	r3, #1
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800088c:	2318      	movs	r3, #24
 800088e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000890:	2307      	movs	r3, #7
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fe73 	bl	800358c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008ac:	f000 fc44 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fa73 	bl	8003db4 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d4:	f000 fc30 	bl	8001138 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008d8:	f003 feb8 	bl	800464c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008dc:	bf00      	nop
 80008de:	3758      	adds	r7, #88	@ 0x58
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_I2C1_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_I2C1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_I2C1_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_I2C1_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	@ (800095c <MX_I2C1_Init+0x74>)
 8000924:	f001 fed0 	bl	80026c8 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fc03 	bl	8001138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <MX_I2C1_Init+0x74>)
 8000936:	f002 fd1d 	bl	8003374 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fbfa 	bl	8001138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_I2C1_Init+0x74>)
 8000948:	f002 fd5f 	bl	800340a <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fbf1 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000300 	.word	0x20000300
 8000960:	40005400 	.word	0x40005400
 8000964:	0090194b 	.word	0x0090194b

08000968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800099a:	4b33      	ldr	r3, [pc, #204]	@ (8000a68 <MX_TIM2_Init+0x100>)
 800099c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80009a2:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009a4:	f240 3283 	movw	r2, #899	@ 0x383
 80009a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b2a      	ldr	r3, [pc, #168]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c4:	4828      	ldr	r0, [pc, #160]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009c6:	f003 ff43 	bl	8004850 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80009d0:	f000 fbb2 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009de:	4619      	mov	r1, r3
 80009e0:	4821      	ldr	r0, [pc, #132]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009e2:	f004 fb3d 	bl	8005060 <HAL_TIM_ConfigClockSource>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80009ec:	f000 fba4 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f0:	481d      	ldr	r0, [pc, #116]	@ (8000a68 <MX_TIM2_Init+0x100>)
 80009f2:	f003 ffd9 	bl	80049a8 <HAL_TIM_PWM_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009fc:	f000 fb9c 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4816      	ldr	r0, [pc, #88]	@ (8000a68 <MX_TIM2_Init+0x100>)
 8000a10:	f004 ffc6 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a1a:	f000 fb8d 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1e:	2360      	movs	r3, #96	@ 0x60
 8000a20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	220c      	movs	r2, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <MX_TIM2_Init+0x100>)
 8000a36:	f004 f9ff 	bl	8004e38 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a40:	f000 fb7a 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2204      	movs	r2, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <MX_TIM2_Init+0x100>)
 8000a4c:	f004 f9f4 	bl	8004e38 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a56:	f000 fb6f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a5a:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <MX_TIM2_Init+0x100>)
 8000a5c:	f000 ffbe 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	@ 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000039c 	.word	0x2000039c

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f004 fffa 	bl	8005aa8 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 fb3d 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200003e8 	.word	0x200003e8
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_DMA_Init+0x38>)
 8000ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <MX_DMA_Init+0x38>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_DMA_Init+0x38>)
 8000ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	2011      	movs	r0, #17
 8000af0:	f001 faa6 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000af4:	2011      	movs	r0, #17
 8000af6:	f001 fabf 	bl	8002078 <HAL_NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b40      	ldr	r3, [pc, #256]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a3f      	ldr	r2, [pc, #252]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a39      	ldr	r2, [pc, #228]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b37      	ldr	r3, [pc, #220]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b34      	ldr	r3, [pc, #208]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a33      	ldr	r2, [pc, #204]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b31      	ldr	r3, [pc, #196]	@ (8000c20 <MX_GPIO_Init+0x118>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f001 fd7a 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	210a      	movs	r1, #10
 8000b78:	482a      	ldr	r0, [pc, #168]	@ (8000c24 <MX_GPIO_Init+0x11c>)
 8000b7a:	f001 fd75 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 8000b7e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f001 fbe3 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_GPIO_Init+0x11c>)
 8000bb4:	f001 fbd6 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000bb8:	230a      	movs	r3, #10
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4815      	ldr	r0, [pc, #84]	@ (8000c24 <MX_GPIO_Init+0x11c>)
 8000bd0:	f001 fbc8 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000bd4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f001 fbba 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000bf0:	2330      	movs	r3, #48	@ 0x30
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <MX_GPIO_Init+0x11c>)
 8000c04:	f001 fbae 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f001 fa17 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f001 fa30 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400

08000c28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f005 fcd5 	bl	80065e0 <osDelay>
 8000c36:	e7fb      	b.n	8000c30 <StartDefaultTask+0x8>

08000c38 <read_keypad>:
* @brief Function implementing the keypad thread.
* @param argument: Not used
* @retval None
*/
char read_keypad(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    // --- Scan Row 1 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  // Set Row 1 low
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c46:	f001 fd0f 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);      // Set Row 2 high
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f001 fd08 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);      // Set Row 3 high
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	48c3      	ldr	r0, [pc, #780]	@ (8000f6c <read_keypad+0x334>)
 8000c5e:	f001 fd03 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);      // Set Row 4 high
 8000c62:	2201      	movs	r2, #1
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f001 fcfd 	bl	8002668 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f001 fcdf 	bl	8002638 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10b      	bne.n	8000c98 <read_keypad+0x60>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000c80:	bf00      	nop
 8000c82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f001 fcd5 	bl	8002638 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f6      	beq.n	8000c82 <read_keypad+0x4a>
        return '1';
 8000c94:	2331      	movs	r3, #49	@ 0x31
 8000c96:	e166      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000c98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f001 fcca 	bl	8002638 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <read_keypad+0x8a>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000caa:	bf00      	nop
 8000cac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f001 fcc0 	bl	8002638 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f6      	beq.n	8000cac <read_keypad+0x74>
        return '2';
 8000cbe:	2332      	movs	r3, #50	@ 0x32
 8000cc0:	e151      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	48a9      	ldr	r0, [pc, #676]	@ (8000f6c <read_keypad+0x334>)
 8000cc6:	f001 fcb7 	bl	8002638 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <read_keypad+0xac>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000cd0:	bf00      	nop
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	48a5      	ldr	r0, [pc, #660]	@ (8000f6c <read_keypad+0x334>)
 8000cd6:	f001 fcaf 	bl	8002638 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f8      	beq.n	8000cd2 <read_keypad+0x9a>
        return '3';
 8000ce0:	2333      	movs	r3, #51	@ 0x33
 8000ce2:	e140      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	48a1      	ldr	r0, [pc, #644]	@ (8000f6c <read_keypad+0x334>)
 8000ce8:	f001 fca6 	bl	8002638 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <read_keypad+0xce>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000cf2:	bf00      	nop
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	489d      	ldr	r0, [pc, #628]	@ (8000f6c <read_keypad+0x334>)
 8000cf8:	f001 fc9e 	bl	8002638 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f8      	beq.n	8000cf4 <read_keypad+0xbc>
        return 'A';
 8000d02:	2341      	movs	r3, #65	@ 0x41
 8000d04:	e12f      	b.n	8000f66 <read_keypad+0x32e>
    }

    // --- Scan Row 2 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d10:	f001 fcaa 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Set Row 2 low
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f001 fca3 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2102      	movs	r1, #2
 8000d26:	4891      	ldr	r0, [pc, #580]	@ (8000f6c <read_keypad+0x334>)
 8000d28:	f001 fc9e 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2180      	movs	r1, #128	@ 0x80
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f001 fc98 	bl	8002668 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d40:	f001 fc7a 	bl	8002638 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10b      	bne.n	8000d62 <read_keypad+0x12a>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000d4a:	bf00      	nop
 8000d4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f001 fc70 	bl	8002638 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f6      	beq.n	8000d4c <read_keypad+0x114>
        return '4';
 8000d5e:	2334      	movs	r3, #52	@ 0x34
 8000d60:	e101      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000d62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fc65 	bl	8002638 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <read_keypad+0x154>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000d74:	bf00      	nop
 8000d76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f001 fc5b 	bl	8002638 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f6      	beq.n	8000d76 <read_keypad+0x13e>
        return '5';
 8000d88:	2335      	movs	r3, #53	@ 0x35
 8000d8a:	e0ec      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4877      	ldr	r0, [pc, #476]	@ (8000f6c <read_keypad+0x334>)
 8000d90:	f001 fc52 	bl	8002638 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d109      	bne.n	8000dae <read_keypad+0x176>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000d9a:	bf00      	nop
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4873      	ldr	r0, [pc, #460]	@ (8000f6c <read_keypad+0x334>)
 8000da0:	f001 fc4a 	bl	8002638 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f8      	beq.n	8000d9c <read_keypad+0x164>
        return '6';
 8000daa:	2336      	movs	r3, #54	@ 0x36
 8000dac:	e0db      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000dae:	2110      	movs	r1, #16
 8000db0:	486e      	ldr	r0, [pc, #440]	@ (8000f6c <read_keypad+0x334>)
 8000db2:	f001 fc41 	bl	8002638 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d109      	bne.n	8000dd0 <read_keypad+0x198>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000dbc:	bf00      	nop
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	486a      	ldr	r0, [pc, #424]	@ (8000f6c <read_keypad+0x334>)
 8000dc2:	f001 fc39 	bl	8002638 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f8      	beq.n	8000dbe <read_keypad+0x186>
        return 'B';
 8000dcc:	2342      	movs	r3, #66	@ 0x42
 8000dce:	e0ca      	b.n	8000f66 <read_keypad+0x32e>
    }

    // --- Scan Row 3 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dda:	f001 fc45 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f001 fc3e 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Set Row 3 low
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	485e      	ldr	r0, [pc, #376]	@ (8000f6c <read_keypad+0x334>)
 8000df2:	f001 fc39 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f001 fc33 	bl	8002668 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f001 fc15 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <read_keypad+0x1f4>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000e14:	bf00      	nop
 8000e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f001 fc0b 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f6      	beq.n	8000e16 <read_keypad+0x1de>
        return '7';
 8000e28:	2337      	movs	r3, #55	@ 0x37
 8000e2a:	e09c      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000e2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e34:	f001 fc00 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10b      	bne.n	8000e56 <read_keypad+0x21e>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000e3e:	bf00      	nop
 8000e40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f001 fbf6 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f6      	beq.n	8000e40 <read_keypad+0x208>
        return '8';
 8000e52:	2338      	movs	r3, #56	@ 0x38
 8000e54:	e087      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000e56:	2120      	movs	r1, #32
 8000e58:	4844      	ldr	r0, [pc, #272]	@ (8000f6c <read_keypad+0x334>)
 8000e5a:	f001 fbed 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d109      	bne.n	8000e78 <read_keypad+0x240>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000e64:	bf00      	nop
 8000e66:	2120      	movs	r1, #32
 8000e68:	4840      	ldr	r0, [pc, #256]	@ (8000f6c <read_keypad+0x334>)
 8000e6a:	f001 fbe5 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f8      	beq.n	8000e66 <read_keypad+0x22e>
        return '9';
 8000e74:	2339      	movs	r3, #57	@ 0x39
 8000e76:	e076      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000e78:	2110      	movs	r1, #16
 8000e7a:	483c      	ldr	r0, [pc, #240]	@ (8000f6c <read_keypad+0x334>)
 8000e7c:	f001 fbdc 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <read_keypad+0x262>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000e86:	bf00      	nop
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4838      	ldr	r0, [pc, #224]	@ (8000f6c <read_keypad+0x334>)
 8000e8c:	f001 fbd4 	bl	8002638 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f8      	beq.n	8000e88 <read_keypad+0x250>
        return 'C';
 8000e96:	2343      	movs	r3, #67	@ 0x43
 8000e98:	e065      	b.n	8000f66 <read_keypad+0x32e>
    }

    // --- Scan Row 4 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f001 fbe0 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f001 fbd9 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2102      	movs	r1, #2
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <read_keypad+0x334>)
 8000ebc:	f001 fbd4 	bl	8002668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Set Row 4 low
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f001 fbce 	bl	8002668 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000ecc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 fbb0 	bl	8002638 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10b      	bne.n	8000ef6 <read_keypad+0x2be>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000ede:	bf00      	nop
 8000ee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee8:	f001 fba6 	bl	8002638 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f6      	beq.n	8000ee0 <read_keypad+0x2a8>
        return '*';
 8000ef2:	232a      	movs	r3, #42	@ 0x2a
 8000ef4:	e037      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000ef6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efe:	f001 fb9b 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10b      	bne.n	8000f20 <read_keypad+0x2e8>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000f08:	bf00      	nop
 8000f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f001 fb91 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f6      	beq.n	8000f0a <read_keypad+0x2d2>
        return '0';
 8000f1c:	2330      	movs	r3, #48	@ 0x30
 8000f1e:	e022      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000f20:	2120      	movs	r1, #32
 8000f22:	4812      	ldr	r0, [pc, #72]	@ (8000f6c <read_keypad+0x334>)
 8000f24:	f001 fb88 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <read_keypad+0x30a>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000f2e:	bf00      	nop
 8000f30:	2120      	movs	r1, #32
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <read_keypad+0x334>)
 8000f34:	f001 fb80 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f8      	beq.n	8000f30 <read_keypad+0x2f8>
        return '#';
 8000f3e:	2323      	movs	r3, #35	@ 0x23
 8000f40:	e011      	b.n	8000f66 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000f42:	2110      	movs	r1, #16
 8000f44:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <read_keypad+0x334>)
 8000f46:	f001 fb77 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <read_keypad+0x32c>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000f50:	bf00      	nop
 8000f52:	2110      	movs	r1, #16
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <read_keypad+0x334>)
 8000f56:	f001 fb6f 	bl	8002638 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f8      	beq.n	8000f52 <read_keypad+0x31a>
        return 'D';
 8000f60:	2344      	movs	r3, #68	@ 0x44
 8000f62:	e000      	b.n	8000f66 <read_keypad+0x32e>
    }

    // If no key is pressed, return null character.
    return '\0';
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	48000400 	.word	0x48000400

08000f70 <keypadTask>:

/* USER CODE END Header_keypadTask */
void keypadTask(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	  // Index for current position in the PIN buffer.
	  static uint8_t pin_index = 0;

	  for(;;)
	  {
	    key = read_keypad();  // Scan the keypad
 8000f78:	f7ff fe5e 	bl	8000c38 <read_keypad>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73bb      	strb	r3, [r7, #14]
	    if(key != '\0')
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8099 	beq.w	80010ba <keypadTask+0x14a>
	    {
	      // If a numeric key (0-9) is pressed, append it if there is space.
	      if(key >= '0' && key <= '9')
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f8c:	d917      	bls.n	8000fbe <keypadTask+0x4e>
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	2b39      	cmp	r3, #57	@ 0x39
 8000f92:	d814      	bhi.n	8000fbe <keypadTask+0x4e>
	      {
	        if(pin_index < 4)
 8000f94:	4b4b      	ldr	r3, [pc, #300]	@ (80010c4 <keypadTask+0x154>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d85c      	bhi.n	8001056 <keypadTask+0xe6>
	        {
	          pin[pin_index++] = key;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	@ (80010c4 <keypadTask+0x154>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	b2d1      	uxtb	r1, r2
 8000fa4:	4a47      	ldr	r2, [pc, #284]	@ (80010c4 <keypadTask+0x154>)
 8000fa6:	7011      	strb	r1, [r2, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4a47      	ldr	r2, [pc, #284]	@ (80010c8 <keypadTask+0x158>)
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	5453      	strb	r3, [r2, r1]
	          pin[pin_index] = '\0';
 8000fb0:	4b44      	ldr	r3, [pc, #272]	@ (80010c4 <keypadTask+0x154>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <keypadTask+0x158>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]
	        if(pin_index < 4)
 8000fbc:	e04b      	b.n	8001056 <keypadTask+0xe6>
	        }
	      }
	      // If '*' is pressed, clear the current PIN entry.
	      else if(key == '*')
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fc2:	d106      	bne.n	8000fd2 <keypadTask+0x62>
	      {
	        pin_index = 0;
 8000fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <keypadTask+0x154>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000fca:	4b3f      	ldr	r3, [pc, #252]	@ (80010c8 <keypadTask+0x158>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e041      	b.n	8001056 <keypadTask+0xe6>
	      }
	      // If '#' is pressed, assume it's a submit.
	      // (For example, check if the PIN is correct, then clear the buffer.)
	      else if(key == '#')
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b23      	cmp	r3, #35	@ 0x23
 8000fd6:	d133      	bne.n	8001040 <keypadTask+0xd0>
	      {
	        // Example PIN check (replace "1234" with your desired PIN)
          if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80010cc <keypadTask+0x15c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fb29 	bl	8006638 <osMutexWait>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11e      	bne.n	800102a <keypadTask+0xba>
          {
            SSD1306_Clear();
 8000fec:	f000 fb7f 	bl	80016ee <SSD1306_Clear>
            SSD1306_GotoXY(0, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fac2 	bl	800157c <SSD1306_GotoXY>
            if(strcmp(pin, password) == 0)
 8000ff8:	4935      	ldr	r1, [pc, #212]	@ (80010d0 <keypadTask+0x160>)
 8000ffa:	4833      	ldr	r0, [pc, #204]	@ (80010c8 <keypadTask+0x158>)
 8000ffc:	f7ff f8e8 	bl	80001d0 <strcmp>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d105      	bne.n	8001012 <keypadTask+0xa2>
            {
              SSD1306_Puts("PIN OK", &Font_11x18, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	4932      	ldr	r1, [pc, #200]	@ (80010d4 <keypadTask+0x164>)
 800100a:	4833      	ldr	r0, [pc, #204]	@ (80010d8 <keypadTask+0x168>)
 800100c:	f000 fb4a 	bl	80016a4 <SSD1306_Puts>
 8001010:	e004      	b.n	800101c <keypadTask+0xac>
            }
            else
            {
              SSD1306_Puts("PIN ERR", &Font_11x18, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	492f      	ldr	r1, [pc, #188]	@ (80010d4 <keypadTask+0x164>)
 8001016:	4831      	ldr	r0, [pc, #196]	@ (80010dc <keypadTask+0x16c>)
 8001018:	f000 fb44 	bl	80016a4 <SSD1306_Puts>
            }
            SSD1306_UpdateScreen();
 800101c:	f000 fa08 	bl	8001430 <SSD1306_UpdateScreen>
            osMutexRelease(i2cMutexHandle);
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <keypadTask+0x15c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fb55 	bl	80066d4 <osMutexRelease>
          }
	        osDelay(1000);  // Show the result for a second
 800102a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102e:	f005 fad7 	bl	80065e0 <osDelay>

	        // Clear the PIN buffer after submission.
	        pin_index = 0;
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <keypadTask+0x154>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <keypadTask+0x158>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e00a      	b.n	8001056 <keypadTask+0xe6>
	      }
	      else if(key == 'A'){
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	2b41      	cmp	r3, #65	@ 0x41
 8001044:	d102      	bne.n	800104c <keypadTask+0xdc>
	    	  open();
 8001046:	f7ff fb0b 	bl	8000660 <open>
 800104a:	e004      	b.n	8001056 <keypadTask+0xe6>
	      }
	      else if(key == 'B'){
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	2b42      	cmp	r3, #66	@ 0x42
 8001050:	d101      	bne.n	8001056 <keypadTask+0xe6>
	      	  close();
 8001052:	f7ff fb19 	bl	8000688 <close>
	      }

	      // After any key action update the display with the masked PIN.
        if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <keypadTask+0x15c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f04f 31ff 	mov.w	r1, #4294967295
 800105e:	4618      	mov	r0, r3
 8001060:	f005 faea 	bl	8006638 <osMutexWait>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d121      	bne.n	80010ae <keypadTask+0x13e>
        {
          SSD1306_Clear();
 800106a:	f000 fb40 	bl	80016ee <SSD1306_Clear>
          SSD1306_GotoXY(0, 0);
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f000 fa83 	bl	800157c <SSD1306_GotoXY>
          SSD1306_Puts("PIN: ", &Font_11x18, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	4916      	ldr	r1, [pc, #88]	@ (80010d4 <keypadTask+0x164>)
 800107a:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <keypadTask+0x170>)
 800107c:	f000 fb12 	bl	80016a4 <SSD1306_Puts>
          // Print an asterisk for each digit entered.
          for(uint8_t i = 0; i < pin_index; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e007      	b.n	8001096 <keypadTask+0x126>
          {
            SSD1306_Puts("x", &Font_11x18, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	4912      	ldr	r1, [pc, #72]	@ (80010d4 <keypadTask+0x164>)
 800108a:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <keypadTask+0x174>)
 800108c:	f000 fb0a 	bl	80016a4 <SSD1306_Puts>
          for(uint8_t i = 0; i < pin_index; i++)
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3301      	adds	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <keypadTask+0x154>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3f2      	bcc.n	8001086 <keypadTask+0x116>
          }
          SSD1306_UpdateScreen();
 80010a0:	f000 f9c6 	bl	8001430 <SSD1306_UpdateScreen>
          osMutexRelease(i2cMutexHandle);
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <keypadTask+0x15c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 fb13 	bl	80066d4 <osMutexRelease>
        }

	      // (Optional) Debug print to UART.
	      printf("Key pressed: %c, current PIN: %s\r\n", key, pin);
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <keypadTask+0x158>)
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <keypadTask+0x178>)
 80010b6:	f007 ff55 	bl	8008f64 <iprintf>
	    }
	    osDelay(50); // Delay to help with debouncing and reduce CPU load.
 80010ba:	2032      	movs	r0, #50	@ 0x32
 80010bc:	f005 fa90 	bl	80065e0 <osDelay>
	    key = read_keypad();  // Scan the keypad
 80010c0:	e75a      	b.n	8000f78 <keypadTask+0x8>
 80010c2:	bf00      	nop
 80010c4:	20000488 	.word	0x20000488
 80010c8:	2000048c 	.word	0x2000048c
 80010cc:	20000484 	.word	0x20000484
 80010d0:	20000020 	.word	0x20000020
 80010d4:	20000000 	.word	0x20000000
 80010d8:	08009e3c 	.word	0x08009e3c
 80010dc:	08009e44 	.word	0x08009e44
 80010e0:	08009e4c 	.word	0x08009e4c
 80010e4:	08009e54 	.word	0x08009e54
 80010e8:	08009e58 	.word	0x08009e58

080010ec <i2cTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask03 */
void i2cTask03(void const * argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	      /* USER CODE END WHILE */

	      /* USER CODE BEGIN 3 */
	      if (esp32_data_ready)
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <i2cTask03+0x24>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <i2cTask03+0x1a>
	  	      {
	  	          esp32_data_ready = 0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <i2cTask03+0x24>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
	  	          // do the read
	  	          SlaveDataReady_Callback();
 8001102:	f000 f81f 	bl	8001144 <SlaveDataReady_Callback>
	  	      }
	    /* USER CODE END 3 */
    osDelay(50);
 8001106:	2032      	movs	r0, #50	@ 0x32
 8001108:	f005 fa6a 	bl	80065e0 <osDelay>
	      if (esp32_data_ready)
 800110c:	e7f2      	b.n	80010f4 <i2cTask03+0x8>
 800110e:	bf00      	nop
 8001110:	20000480 	.word	0x20000480

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001126:	f000 feb3 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012c00 	.word	0x40012c00

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
    if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 8001154:	4b48      	ldr	r3, [pc, #288]	@ (8001278 <SlaveDataReady_Callback+0x134>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	4618      	mov	r0, r3
 800115e:	f005 fa6b 	bl	8006638 <osMutexWait>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 8083 	bne.w	8001270 <SlaveDataReady_Callback+0x12c>
    {
      if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 8, 100) == HAL_OK)
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	2364      	movs	r3, #100	@ 0x64
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2308      	movs	r3, #8
 8001174:	21c0      	movs	r1, #192	@ 0xc0
 8001176:	4841      	ldr	r0, [pc, #260]	@ (800127c <SlaveDataReady_Callback+0x138>)
 8001178:	f001 fc5a 	bl	8002a30 <HAL_I2C_Master_Receive>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d16e      	bne.n	8001260 <SlaveDataReady_Callback+0x11c>
      {
          printf("Received from ESP32 1:");
 8001182:	483f      	ldr	r0, [pc, #252]	@ (8001280 <SlaveDataReady_Callback+0x13c>)
 8001184:	f007 feee 	bl	8008f64 <iprintf>
          for(int i=0; i<8; i++){
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	e00b      	b.n	80011a6 <SlaveDataReady_Callback+0x62>
            printf("0x%02X ", rxBuffer[i]);
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	483a      	ldr	r0, [pc, #232]	@ (8001284 <SlaveDataReady_Callback+0x140>)
 800119c:	f007 fee2 	bl	8008f64 <iprintf>
          for(int i=0; i<8; i++){
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	ddf0      	ble.n	800118e <SlaveDataReady_Callback+0x4a>
          }
          printf("\n");
 80011ac:	200a      	movs	r0, #10
 80011ae:	f007 feeb 	bl	8008f88 <putchar>

          char topic = rxBuffer[0];
 80011b2:	7a3b      	ldrb	r3, [r7, #8]
 80011b4:	75fb      	strb	r3, [r7, #23]
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 80011b6:	7b3b      	ldrb	r3, [r7, #12]
 80011b8:	061a      	lsls	r2, r3, #24
                           ((uint32_t)rxBuffer[3] << 16) |
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	041b      	lsls	r3, r3, #16
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 80011be:	431a      	orrs	r2, r3
                           ((uint32_t)rxBuffer[2] <<  8) |
 80011c0:	7abb      	ldrb	r3, [r7, #10]
 80011c2:	021b      	lsls	r3, r3, #8
                           ((uint32_t)rxBuffer[3] << 16) |
 80011c4:	4313      	orrs	r3, r2
                           ((uint32_t)rxBuffer[1]      );
 80011c6:	7a7a      	ldrb	r2, [r7, #9]
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
          if(topic == 'o'){
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b6f      	cmp	r3, #111	@ 0x6f
 80011d0:	d101      	bne.n	80011d6 <SlaveDataReady_Callback+0x92>
        	  open();
 80011d2:	f7ff fa45 	bl	8000660 <open>
          }
          if(topic == 'c'){
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	2b63      	cmp	r3, #99	@ 0x63
 80011da:	d101      	bne.n	80011e0 <SlaveDataReady_Callback+0x9c>
        	  close();
 80011dc:	f7ff fa54 	bl	8000688 <close>
          }
          if(topic == 'p'){
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b70      	cmp	r3, #112	@ 0x70
 80011e4:	d117      	bne.n	8001216 <SlaveDataReady_Callback+0xd2>
        	  char snum[4];
        	  itoa(value, snum, 10);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	220a      	movs	r2, #10
 80011ec:	4618      	mov	r0, r3
 80011ee:	f007 fdb3 	bl	8008d58 <itoa>
        	  for(int i=0; i<4; i++){
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	e00b      	b.n	8001210 <SlaveDataReady_Callback+0xcc>
        		  password[i] = snum[i];
 80011f8:	1d3a      	adds	r2, r7, #4
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4413      	add	r3, r2
 80011fe:	7819      	ldrb	r1, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <SlaveDataReady_Callback+0x144>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4413      	add	r3, r2
 8001206:	460a      	mov	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
        	  for(int i=0; i<4; i++){
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	3301      	adds	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b03      	cmp	r3, #3
 8001214:	ddf0      	ble.n	80011f8 <SlaveDataReady_Callback+0xb4>
        	  }
          }
          if(topic == '1'){
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b31      	cmp	r3, #49	@ 0x31
 800121a:	d102      	bne.n	8001222 <SlaveDataReady_Callback+0xde>
            lock_d = value;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <SlaveDataReady_Callback+0x148>)
 8001220:	6013      	str	r3, [r2, #0]
          }
          if(topic == '2'){
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b32      	cmp	r3, #50	@ 0x32
 8001226:	d102      	bne.n	800122e <SlaveDataReady_Callback+0xea>
        	unlock_d = value;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <SlaveDataReady_Callback+0x14c>)
 800122c:	6013      	str	r3, [r2, #0]
          }
          if(topic == '3'){
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	2b33      	cmp	r3, #51	@ 0x33
 8001232:	d102      	bne.n	800123a <SlaveDataReady_Callback+0xf6>
        	  open_d = value;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <SlaveDataReady_Callback+0x150>)
 8001238:	6013      	str	r3, [r2, #0]
          }
          if(topic == '4'){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b34      	cmp	r3, #52	@ 0x34
 800123e:	d102      	bne.n	8001246 <SlaveDataReady_Callback+0x102>
        	  close_d = value;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <SlaveDataReady_Callback+0x154>)
 8001244:	6013      	str	r3, [r2, #0]
          }
          if(topic == '5'){
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b35      	cmp	r3, #53	@ 0x35
 800124a:	d102      	bne.n	8001252 <SlaveDataReady_Callback+0x10e>
        	  delay_open = value;
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4a13      	ldr	r2, [pc, #76]	@ (800129c <SlaveDataReady_Callback+0x158>)
 8001250:	6013      	str	r3, [r2, #0]
          }
          if(topic == '6'){
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	2b36      	cmp	r3, #54	@ 0x36
 8001256:	d106      	bne.n	8001266 <SlaveDataReady_Callback+0x122>
        	  delay_close = value;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4a11      	ldr	r2, [pc, #68]	@ (80012a0 <SlaveDataReady_Callback+0x15c>)
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e002      	b.n	8001266 <SlaveDataReady_Callback+0x122>
//          int delay_close = 1000;

      }
      else
      {
          printf("I2C read error ESP 1\n");
 8001260:	4810      	ldr	r0, [pc, #64]	@ (80012a4 <SlaveDataReady_Callback+0x160>)
 8001262:	f007 feef 	bl	8009044 <puts>
      }
      osMutexRelease(i2cMutexHandle);
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SlaveDataReady_Callback+0x134>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fa32 	bl	80066d4 <osMutexRelease>
    }
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000484 	.word	0x20000484
 800127c:	20000300 	.word	0x20000300
 8001280:	08009e7c 	.word	0x08009e7c
 8001284:	08009e94 	.word	0x08009e94
 8001288:	20000020 	.word	0x20000020
 800128c:	20000008 	.word	0x20000008
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000010 	.word	0x20000010
 8001298:	20000014 	.word	0x20000014
 800129c:	20000018 	.word	0x20000018
 80012a0:	2000001c 	.word	0x2000001c
 80012a4:	08009e9c 	.word	0x08009e9c

080012a8 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80012ae:	f000 fa27 	bl	8001700 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80012b2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80012b6:	2201      	movs	r2, #1
 80012b8:	2178      	movs	r1, #120	@ 0x78
 80012ba:	485b      	ldr	r0, [pc, #364]	@ (8001428 <SSD1306_Init+0x180>)
 80012bc:	f001 fcae 	bl	8002c1c <HAL_I2C_IsDeviceReady>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e0a9      	b.n	800141e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80012ca:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80012ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012d0:	e002      	b.n	80012d8 <SSD1306_Init+0x30>
		p--;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80012de:	22ae      	movs	r2, #174	@ 0xae
 80012e0:	2100      	movs	r1, #0
 80012e2:	2078      	movs	r0, #120	@ 0x78
 80012e4:	f000 fa88 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	2078      	movs	r0, #120	@ 0x78
 80012ee:	f000 fa83 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012f2:	2210      	movs	r2, #16
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	@ 0x78
 80012f8:	f000 fa7e 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012fc:	22b0      	movs	r2, #176	@ 0xb0
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	@ 0x78
 8001302:	f000 fa79 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001306:	22c8      	movs	r2, #200	@ 0xc8
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	@ 0x78
 800130c:	f000 fa74 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2078      	movs	r0, #120	@ 0x78
 8001316:	f000 fa6f 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800131a:	2210      	movs	r2, #16
 800131c:	2100      	movs	r1, #0
 800131e:	2078      	movs	r0, #120	@ 0x78
 8001320:	f000 fa6a 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001324:	2240      	movs	r2, #64	@ 0x40
 8001326:	2100      	movs	r1, #0
 8001328:	2078      	movs	r0, #120	@ 0x78
 800132a:	f000 fa65 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800132e:	2281      	movs	r2, #129	@ 0x81
 8001330:	2100      	movs	r1, #0
 8001332:	2078      	movs	r0, #120	@ 0x78
 8001334:	f000 fa60 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001338:	22ff      	movs	r2, #255	@ 0xff
 800133a:	2100      	movs	r1, #0
 800133c:	2078      	movs	r0, #120	@ 0x78
 800133e:	f000 fa5b 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001342:	22a1      	movs	r2, #161	@ 0xa1
 8001344:	2100      	movs	r1, #0
 8001346:	2078      	movs	r0, #120	@ 0x78
 8001348:	f000 fa56 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800134c:	22a6      	movs	r2, #166	@ 0xa6
 800134e:	2100      	movs	r1, #0
 8001350:	2078      	movs	r0, #120	@ 0x78
 8001352:	f000 fa51 	bl	80017f8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001356:	22a8      	movs	r2, #168	@ 0xa8
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	@ 0x78
 800135c:	f000 fa4c 	bl	80017f8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001360:	223f      	movs	r2, #63	@ 0x3f
 8001362:	2100      	movs	r1, #0
 8001364:	2078      	movs	r0, #120	@ 0x78
 8001366:	f000 fa47 	bl	80017f8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800136a:	22a4      	movs	r2, #164	@ 0xa4
 800136c:	2100      	movs	r1, #0
 800136e:	2078      	movs	r0, #120	@ 0x78
 8001370:	f000 fa42 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001374:	22d3      	movs	r2, #211	@ 0xd3
 8001376:	2100      	movs	r1, #0
 8001378:	2078      	movs	r0, #120	@ 0x78
 800137a:	f000 fa3d 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2078      	movs	r0, #120	@ 0x78
 8001384:	f000 fa38 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001388:	22d5      	movs	r2, #213	@ 0xd5
 800138a:	2100      	movs	r1, #0
 800138c:	2078      	movs	r0, #120	@ 0x78
 800138e:	f000 fa33 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001392:	22f0      	movs	r2, #240	@ 0xf0
 8001394:	2100      	movs	r1, #0
 8001396:	2078      	movs	r0, #120	@ 0x78
 8001398:	f000 fa2e 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800139c:	22d9      	movs	r2, #217	@ 0xd9
 800139e:	2100      	movs	r1, #0
 80013a0:	2078      	movs	r0, #120	@ 0x78
 80013a2:	f000 fa29 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80013a6:	2222      	movs	r2, #34	@ 0x22
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	@ 0x78
 80013ac:	f000 fa24 	bl	80017f8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80013b0:	22da      	movs	r2, #218	@ 0xda
 80013b2:	2100      	movs	r1, #0
 80013b4:	2078      	movs	r0, #120	@ 0x78
 80013b6:	f000 fa1f 	bl	80017f8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80013ba:	2212      	movs	r2, #18
 80013bc:	2100      	movs	r1, #0
 80013be:	2078      	movs	r0, #120	@ 0x78
 80013c0:	f000 fa1a 	bl	80017f8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80013c4:	22db      	movs	r2, #219	@ 0xdb
 80013c6:	2100      	movs	r1, #0
 80013c8:	2078      	movs	r0, #120	@ 0x78
 80013ca:	f000 fa15 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	2078      	movs	r0, #120	@ 0x78
 80013d4:	f000 fa10 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013d8:	228d      	movs	r2, #141	@ 0x8d
 80013da:	2100      	movs	r1, #0
 80013dc:	2078      	movs	r0, #120	@ 0x78
 80013de:	f000 fa0b 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013e2:	2214      	movs	r2, #20
 80013e4:	2100      	movs	r1, #0
 80013e6:	2078      	movs	r0, #120	@ 0x78
 80013e8:	f000 fa06 	bl	80017f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013ec:	22af      	movs	r2, #175	@ 0xaf
 80013ee:	2100      	movs	r1, #0
 80013f0:	2078      	movs	r0, #120	@ 0x78
 80013f2:	f000 fa01 	bl	80017f8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013f6:	222e      	movs	r2, #46	@ 0x2e
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	@ 0x78
 80013fc:	f000 f9fc 	bl	80017f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001400:	2000      	movs	r0, #0
 8001402:	f000 f843 	bl	800148c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001406:	f000 f813 	bl	8001430 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <SSD1306_Init+0x184>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SSD1306_Init+0x184>)
 8001412:	2200      	movs	r2, #0
 8001414:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <SSD1306_Init+0x184>)
 8001418:	2201      	movs	r2, #1
 800141a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000300 	.word	0x20000300
 800142c:	20000894 	.word	0x20000894

08001430 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e01d      	b.n	8001478 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	3b50      	subs	r3, #80	@ 0x50
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	@ 0x78
 8001448:	f000 f9d6 	bl	80017f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	@ 0x78
 8001452:	f000 f9d1 	bl	80017f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001456:	2210      	movs	r2, #16
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	@ 0x78
 800145c:	f000 f9cc 	bl	80017f8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <SSD1306_UpdateScreen+0x58>)
 8001466:	441a      	add	r2, r3
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	2140      	movs	r1, #64	@ 0x40
 800146c:	2078      	movs	r0, #120	@ 0x78
 800146e:	f000 f95d 	bl	800172c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	3301      	adds	r3, #1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d9de      	bls.n	800143c <SSD1306_UpdateScreen+0xc>
	}
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000494 	.word	0x20000494

0800148c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <SSD1306_Fill+0x14>
 800149c:	2300      	movs	r3, #0
 800149e:	e000      	b.n	80014a2 <SSD1306_Fill+0x16>
 80014a0:	23ff      	movs	r3, #255	@ 0xff
 80014a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a6:	4619      	mov	r1, r3
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <SSD1306_Fill+0x2c>)
 80014aa:	f007 feab 	bl	8009204 <memset>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000494 	.word	0x20000494

080014bc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	460b      	mov	r3, r1
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	70fb      	strb	r3, [r7, #3]
	if (
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80014d2:	d848      	bhi.n	8001566 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80014d4:	88bb      	ldrh	r3, [r7, #4]
 80014d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80014d8:	d845      	bhi.n	8001566 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <SSD1306_DrawPixel+0xb8>)
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11a      	bne.n	800152c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	b298      	uxth	r0, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	01db      	lsls	r3, r3, #7
 8001502:	4413      	add	r3, r2
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <SSD1306_DrawPixel+0xbc>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b259      	sxtb	r1, r3
 800151c:	88fa      	ldrh	r2, [r7, #6]
 800151e:	4603      	mov	r3, r0
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <SSD1306_DrawPixel+0xbc>)
 8001528:	54d1      	strb	r1, [r2, r3]
 800152a:	e01d      	b.n	8001568 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	b298      	uxth	r0, r3
 8001534:	4603      	mov	r3, r0
 8001536:	01db      	lsls	r3, r3, #7
 8001538:	4413      	add	r3, r2
 800153a:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <SSD1306_DrawPixel+0xbc>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	b25a      	sxtb	r2, r3
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	b259      	sxtb	r1, r3
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	4603      	mov	r3, r0
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	4413      	add	r3, r2
 800155e:	b2c9      	uxtb	r1, r1
 8001560:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SSD1306_DrawPixel+0xbc>)
 8001562:	54d1      	strb	r1, [r2, r3]
 8001564:	e000      	b.n	8001568 <SSD1306_DrawPixel+0xac>
		return;
 8001566:	bf00      	nop
	}
}
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000894 	.word	0x20000894
 8001578:	20000494 	.word	0x20000494

0800157c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	4613      	mov	r3, r2
 800158a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800158c:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <SSD1306_GotoXY+0x28>)
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <SSD1306_GotoXY+0x28>)
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	8053      	strh	r3, [r2, #2]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000894 	.word	0x20000894

080015a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015b8:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <SSD1306_Putc+0xf8>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
	if (
 80015c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80015c6:	dc07      	bgt.n	80015d8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <SSD1306_Putc+0xf8>)
 80015ca:	885b      	ldrh	r3, [r3, #2]
 80015cc:	461a      	mov	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d6:	dd01      	ble.n	80015dc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	e05d      	b.n	8001698 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e04b      	b.n	800167a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3b20      	subs	r3, #32
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	7849      	ldrb	r1, [r1, #1]
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	4619      	mov	r1, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	440b      	add	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	e030      	b.n	8001668 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d010      	beq.n	8001638 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <SSD1306_Putc+0xf8>)
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4413      	add	r3, r2
 8001620:	b298      	uxth	r0, r3
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <SSD1306_Putc+0xf8>)
 8001624:	885a      	ldrh	r2, [r3, #2]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff ff43 	bl	80014bc <SSD1306_DrawPixel>
 8001636:	e014      	b.n	8001662 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <SSD1306_Putc+0xf8>)
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4413      	add	r3, r2
 8001642:	b298      	uxth	r0, r3
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <SSD1306_Putc+0xf8>)
 8001646:	885a      	ldrh	r2, [r3, #2]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b299      	uxth	r1, r3
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	f7ff ff2d 	bl	80014bc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4293      	cmp	r3, r2
 8001672:	d3c8      	bcc.n	8001606 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	461a      	mov	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4293      	cmp	r3, r2
 8001684:	d3ad      	bcc.n	80015e2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <SSD1306_Putc+0xf8>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4413      	add	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <SSD1306_Putc+0xf8>)
 8001694:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001696:	79fb      	ldrb	r3, [r7, #7]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000894 	.word	0x20000894

080016a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80016b2:	e012      	b.n	80016da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	79fa      	ldrb	r2, [r7, #7]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff73 	bl	80015a8 <SSD1306_Putc>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d002      	beq.n	80016d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	e008      	b.n	80016e6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1e8      	bne.n	80016b4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff feca 	bl	800148c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80016f8:	f7ff fe9a 	bl	8001430 <SSD1306_UpdateScreen>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <ssd1306_I2C_Init+0x28>)
 8001708:	607b      	str	r3, [r7, #4]
	while(p>0)
 800170a:	e002      	b.n	8001712 <ssd1306_I2C_Init+0x12>
		p--;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f9      	bne.n	800170c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	0003d090 	.word	0x0003d090

0800172c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b0c7      	sub	sp, #284	@ 0x11c
 8001730:	af02      	add	r7, sp, #8
 8001732:	4604      	mov	r4, r0
 8001734:	4608      	mov	r0, r1
 8001736:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800173a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800173e:	600a      	str	r2, [r1, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001746:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800174a:	4622      	mov	r2, r4
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001752:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001756:	4602      	mov	r2, r0
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800175e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001762:	460a      	mov	r2, r1
 8001764:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800176a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800176e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001772:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001780:	e015      	b.n	80017ae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001782:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001786:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800178a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	441a      	add	r2, r3
 8001792:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001796:	3301      	adds	r3, #1
 8001798:	7811      	ldrb	r1, [r2, #0]
 800179a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800179e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80017a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017a4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017a8:	3301      	adds	r3, #1
 80017aa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017b8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d8df      	bhi.n	8001782 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80017c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b299      	uxth	r1, r3
 80017ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	200a      	movs	r0, #10
 80017e2:	9000      	str	r0, [sp, #0]
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <ssd1306_I2C_WriteMulti+0xc8>)
 80017e6:	f001 f80b 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 80017ea:	bf00      	nop
 80017ec:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	20000300 	.word	0x20000300

080017f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	460b      	mov	r3, r1
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	4613      	mov	r3, r2
 8001808:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	b299      	uxth	r1, r3
 8001816:	f107 020c 	add.w	r2, r7, #12
 800181a:	230a      	movs	r3, #10
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	4803      	ldr	r0, [pc, #12]	@ (8001830 <ssd1306_I2C_Write+0x38>)
 8001822:	f000 ffed 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000300 	.word	0x20000300

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_MspInit+0x4c>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183e:	4a10      	ldr	r2, [pc, #64]	@ (8001880 <HAL_MspInit+0x4c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6613      	str	r3, [r2, #96]	@ 0x60
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_MspInit+0x4c>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_MspInit+0x4c>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_MspInit+0x4c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	210f      	movs	r1, #15
 800186e:	f06f 0001 	mvn.w	r0, #1
 8001872:	f000 fbe5 	bl	8002040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09e      	sub	sp, #120	@ 0x78
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2254      	movs	r2, #84	@ 0x54
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 fcad 	bl	8009204 <memset>
  if(hi2c->Instance==I2C1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a37      	ldr	r2, [pc, #220]	@ (800198c <HAL_I2C_MspInit+0x108>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d166      	bne.n	8001982 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fccd 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018cc:	f7ff fc34 	bl	8001138 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e8:	23c0      	movs	r3, #192	@ 0xc0
 80018ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f8:	2304      	movs	r3, #4
 80018fa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001900:	4619      	mov	r1, r3
 8001902:	4824      	ldr	r0, [pc, #144]	@ (8001994 <HAL_I2C_MspInit+0x110>)
 8001904:	f000 fd2e 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 800190e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001912:	6593      	str	r3, [r2, #88]	@ 0x58
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_I2C_MspInit+0x10c>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001920:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001922:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_I2C_MspInit+0x118>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001928:	2203      	movs	r2, #3
 800192a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001956:	4810      	ldr	r0, [pc, #64]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 8001958:	f000 fb9c 	bl	8002094 <HAL_DMA_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 8001962:	f7ff fbe9 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 800196a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800196c:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <HAL_I2C_MspInit+0x114>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	201f      	movs	r0, #31
 8001978:	f000 fb62 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800197c:	201f      	movs	r0, #31
 800197e:	f000 fb7b 	bl	8002078 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001982:	bf00      	nop
 8001984:	3778      	adds	r7, #120	@ 0x78
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40005400 	.word	0x40005400
 8001990:	40021000 	.word	0x40021000
 8001994:	48000400 	.word	0x48000400
 8001998:	20000354 	.word	0x20000354
 800199c:	40020080 	.word	0x40020080

080019a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b0:	d10b      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_TIM_Base_MspInit+0x38>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_TIM_Base_MspInit+0x38>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_TIM_Base_MspInit+0x38>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fc:	d11c      	bne.n	8001a38 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|GPIO_PIN_3;
 8001a16:	230a      	movs	r3, #10
 8001a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f000 fc96 	bl	8002364 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b09e      	sub	sp, #120	@ 0x78
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	2254      	movs	r2, #84	@ 0x54
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 fbcd 	bl	8009204 <memset>
  if(huart->Instance==USART2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a28      	ldr	r2, [pc, #160]	@ (8001b10 <HAL_UART_MspInit+0xcc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d148      	bne.n	8001b06 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fbed 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a8c:	f7ff fb54 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a94:	4a1f      	ldr	r2, [pc, #124]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aac:	4a19      	ldr	r2, [pc, #100]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_UART_MspInit+0xd0>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ade:	f000 fc41 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ae6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001af4:	2303      	movs	r3, #3
 8001af6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b02:	f000 fc2f 	bl	8002364 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3778      	adds	r7, #120	@ 0x78
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b32:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 faf7 	bl	800413c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b4e:	f002 fadf 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8001b52:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b64:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <HAL_InitTick+0xd4>)
 8001b66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b70:	4a1d      	ldr	r2, [pc, #116]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b88:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b8a:	f002 fe61 	bl	8004850 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b9c:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b9e:	f002 feaf 	bl	8004900 <HAL_TIM_Base_Start_IT>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bb0:	2019      	movs	r0, #25
 8001bb2:	f000 fa61 	bl	8002078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d808      	bhi.n	8001bce <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	2019      	movs	r0, #25
 8001bc2:	f000 fa3d 	bl	8002040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0xd8>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e002      	b.n	8001bd4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3730      	adds	r7, #48	@ 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	2000089c 	.word	0x2000089c
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	20000028 	.word	0x20000028

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Channel7_IRQHandler+0x10>)
 8001c32:	f000 fae7 	bl	8002204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000354 	.word	0x20000354

08001c40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c46:	f002 ffef 	bl	8004c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000089c 	.word	0x2000089c

08001c54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <I2C1_EV_IRQHandler+0x10>)
 8001c5a:	f001 f8cb 	bl	8002df4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000300 	.word	0x20000300

08001c68 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 fd13 	bl	8002698 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_GPIO_EXTI_Callback+0x24>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000480 	.word	0x20000480

08001ca0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e00a      	b.n	8001cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb2:	f3af 8000 	nop.w
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	b2ca      	uxtb	r2, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf0      	blt.n	8001cb2 <_read+0x12>
  }

  return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e009      	b.n	8001d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fcdb 	bl	80006b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf1      	blt.n	8001cec <_write+0x12>
  }
  return len;
 8001d08:	687b      	ldr	r3, [r7, #4]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_close>:

int _close(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_isatty>:

int _isatty(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f007 fa78 	bl	80092a0 <__errno>
 8001db0:	4603      	mov	r3, r0
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000c000 	.word	0x2000c000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	200008e8 	.word	0x200008e8
 8001de4:	20001748 	.word	0x20001748

08001de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e10:	f7ff ffea 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	@ (8001e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <LoopForever+0xe>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e58 <LoopForever+0x16>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f007 fa37 	bl	80092ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e3e:	f7fe fc49 	bl	80006d4 <main>

08001e42 <LoopForever>:

LoopForever:
    b LoopForever
 8001e42:	e7fe      	b.n	8001e42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e44:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001e50:	0800acc8 	.word	0x0800acc8
  ldr r2, =_sbss
 8001e54:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001e58:	20001748 	.word	0x20001748

08001e5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_IRQHandler>

08001e5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f8de 	bl	800202a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f7ff fe52 	bl	8001b18 <HAL_InitTick>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	e001      	b.n	8001e84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e80:	f7ff fcd8 	bl	8001834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000002c 	.word	0x2000002c
 8001eb4:	200008ec 	.word	0x200008ec

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200008ec 	.word	0x200008ec

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	@ (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	@ (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	@ (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff4c 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002052:	f7ff ff61 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002056:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7ff ffb1 	bl	8001fc4 <NVIC_EncodePriority>
 8002062:	4602      	mov	r2, r0
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff80 	bl	8001f70 <__NVIC_SetPriority>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff54 	bl	8001f34 <__NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e098      	b.n	80021d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <HAL_DMA_Init+0x150>)
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d80f      	bhi.n	80020d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_DMA_Init+0x154>)
 80020ba:	4413      	add	r3, r2
 80020bc:	4a4b      	ldr	r2, [pc, #300]	@ (80021ec <HAL_DMA_Init+0x158>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a48      	ldr	r2, [pc, #288]	@ (80021f0 <HAL_DMA_Init+0x15c>)
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80020d0:	e00e      	b.n	80020f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b46      	ldr	r3, [pc, #280]	@ (80021f4 <HAL_DMA_Init+0x160>)
 80020da:	4413      	add	r3, r2
 80020dc:	4a43      	ldr	r2, [pc, #268]	@ (80021ec <HAL_DMA_Init+0x158>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a42      	ldr	r2, [pc, #264]	@ (80021f8 <HAL_DMA_Init+0x164>)
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800214a:	d039      	beq.n	80021c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	4a27      	ldr	r2, [pc, #156]	@ (80021f0 <HAL_DMA_Init+0x15c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11a      	bne.n	800218c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002156:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_DMA_Init+0x168>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f003 031c 	and.w	r3, r3, #28
 8002162:	210f      	movs	r1, #15
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	4924      	ldr	r1, [pc, #144]	@ (80021fc <HAL_DMA_Init+0x168>)
 800216c:	4013      	ands	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_DMA_Init+0x168>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217c:	f003 031c 	and.w	r3, r3, #28
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	491d      	ldr	r1, [pc, #116]	@ (80021fc <HAL_DMA_Init+0x168>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
 800218a:	e019      	b.n	80021c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800218c:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <HAL_DMA_Init+0x16c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f003 031c 	and.w	r3, r3, #28
 8002198:	210f      	movs	r1, #15
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	4917      	ldr	r1, [pc, #92]	@ (8002200 <HAL_DMA_Init+0x16c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021a6:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_DMA_Init+0x16c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f003 031c 	and.w	r3, r3, #28
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	4911      	ldr	r1, [pc, #68]	@ (8002200 <HAL_DMA_Init+0x16c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40020407 	.word	0x40020407
 80021e8:	bffdfff8 	.word	0xbffdfff8
 80021ec:	cccccccd 	.word	0xcccccccd
 80021f0:	40020000 	.word	0x40020000
 80021f4:	bffdfbf8 	.word	0xbffdfbf8
 80021f8:	40020400 	.word	0x40020400
 80021fc:	400200a8 	.word	0x400200a8
 8002200:	400204a8 	.word	0x400204a8

08002204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002220:	f003 031c 	and.w	r3, r3, #28
 8002224:	2204      	movs	r2, #4
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d026      	beq.n	800227e <HAL_DMA_IRQHandler+0x7a>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d021      	beq.n	800227e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	f003 021c 	and.w	r2, r3, #28
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	2104      	movs	r1, #4
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	2b00      	cmp	r3, #0
 8002272:	d071      	beq.n	8002358 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800227c:	e06c      	b.n	8002358 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f003 031c 	and.w	r3, r3, #28
 8002286:	2202      	movs	r2, #2
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d02e      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xec>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d029      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020a 	bic.w	r2, r2, #10
 80022b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f003 021c 	and.w	r2, r3, #28
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	2102      	movs	r1, #2
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d038      	beq.n	8002358 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022ee:	e033      	b.n	8002358 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f003 031c 	and.w	r3, r3, #28
 80022f8:	2208      	movs	r2, #8
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02a      	beq.n	800235a <HAL_DMA_IRQHandler+0x156>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d025      	beq.n	800235a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 020e 	bic.w	r2, r2, #14
 800231c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f003 021c 	and.w	r2, r3, #28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002358:	bf00      	nop
 800235a:	bf00      	nop
}
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e148      	b.n	8002606 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 813a 	beq.w	8002600 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8094 	beq.w	8002600 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d8:	4b52      	ldr	r3, [pc, #328]	@ (8002624 <HAL_GPIO_Init+0x2c0>)
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	4a51      	ldr	r2, [pc, #324]	@ (8002624 <HAL_GPIO_Init+0x2c0>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002624 <HAL_GPIO_Init+0x2c0>)
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002628 <HAL_GPIO_Init+0x2c4>)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800251a:	d00d      	beq.n	8002538 <HAL_GPIO_Init+0x1d4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a43      	ldr	r2, [pc, #268]	@ (800262c <HAL_GPIO_Init+0x2c8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d007      	beq.n	8002534 <HAL_GPIO_Init+0x1d0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_GPIO_Init+0x2cc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_GPIO_Init+0x1cc>
 800252c:	2302      	movs	r3, #2
 800252e:	e004      	b.n	800253a <HAL_GPIO_Init+0x1d6>
 8002530:	2307      	movs	r3, #7
 8002532:	e002      	b.n	800253a <HAL_GPIO_Init+0x1d6>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_GPIO_Init+0x1d6>
 8002538:	2300      	movs	r3, #0
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	f002 0203 	and.w	r2, r2, #3
 8002540:	0092      	lsls	r2, r2, #2
 8002542:	4093      	lsls	r3, r2
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800254a:	4937      	ldr	r1, [pc, #220]	@ (8002628 <HAL_GPIO_Init+0x2c4>)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002558:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800257c:	4a2d      	ldr	r2, [pc, #180]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002582:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025a6:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025d0:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43db      	mvns	r3, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002634 <HAL_GPIO_Init+0x2d0>)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f aeaf 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	48000400 	.word	0x48000400
 8002630:	48000800 	.word	0x48000800
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e001      	b.n	800265a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002684:	e002      	b.n	800268c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fade 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08d      	b.n	80027f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff f8c8 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	@ 0x24
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	e006      	b.n	8002750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800274e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d108      	bne.n	800276a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	e007      	b.n	800277a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800278c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b20      	cmp	r3, #32
 800281e:	f040 80fd 	bne.w	8002a1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_I2C_Master_Transmit+0x30>
 800282c:	2302      	movs	r3, #2
 800282e:	e0f6      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002838:	f7ff fb3e 	bl	8001eb8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fb10 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0e1      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	@ 0x21
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2210      	movs	r2, #16
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	893a      	ldrh	r2, [r7, #8]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2bff      	cmp	r3, #255	@ 0xff
 800288a:	d906      	bls.n	800289a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	22ff      	movs	r2, #255	@ 0xff
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e007      	b.n	80028aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <HAL_I2C_Master_Transmit+0x228>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fd0b 	bl	8003310 <I2C_TransferConfig>
 80028fa:	e066      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_I2C_Master_Transmit+0x228>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fd00 	bl	8003310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002910:	e05b      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb03 	bl	8002f22 <I2C_WaitOnTXISFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07b      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d034      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d130      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa7c 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e04d      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2bff      	cmp	r3, #255	@ 0xff
 800298a:	d90e      	bls.n	80029aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fcb4 	bl	8003310 <I2C_TransferConfig>
 80029a8:	e00f      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fca3 	bl	8003310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d19e      	bne.n	8002912 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	6a39      	ldr	r1, [r7, #32]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fae9 	bl	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01a      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_I2C_Master_Transmit+0x22c>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	80002000 	.word	0x80002000
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80db 	bne.w	8002c08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Receive+0x30>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0d4      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a68:	f7ff fa26 	bl	8001eb8 <HAL_GetTick>
 8002a6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f9f8 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0bf      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2222      	movs	r2, #34	@ 0x22
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2210      	movs	r2, #16
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2bff      	cmp	r3, #255	@ 0xff
 8002aba:	d90e      	bls.n	8002ada <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fc1c 	bl	8003310 <I2C_TransferConfig>
 8002ad8:	e06d      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fc0b 	bl	8003310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002afa:	e05c      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa99 	bl	8003038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e07c      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d034      	beq.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d130      	bne.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f986 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e04d      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2bff      	cmp	r3, #255	@ 0xff
 8002b76:	d90e      	bls.n	8002b96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	22ff      	movs	r2, #255	@ 0xff
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fbbe 	bl	8003310 <I2C_TransferConfig>
 8002b94:	e00f      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fbad 	bl	8003310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d19d      	bne.n	8002afc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f9f3 	bl	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e01a      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_I2C_Master_Receive+0x1e8>)
 8002be8:	400b      	ands	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	80002400 	.word	0x80002400
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	f040 80d6 	bne.w	8002dea <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0cc      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_IsDeviceReady+0x44>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0c5      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_I2C_IsDeviceReady+0x72>
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c8c:	e006      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x80>
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f909 	bl	8001eb8 <HAL_GetTick>
 8002ca6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cd4:	e034      	b.n	8002d40 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d01a      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7ff f8eb 	bl	8001eb8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <HAL_I2C_IsDeviceReady+0xd8>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e06b      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_I2C_IsDeviceReady+0x130>
 8002d46:	7fbb      	ldrb	r3, [r7, #30]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0c4      	beq.n	8002cd6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d01a      	beq.n	8002d90 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2120      	movs	r1, #32
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f883 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e03b      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e02d      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2120      	movs	r1, #32
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f868 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e020      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f63f af56 	bhi.w	8002c76 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
  }
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d007      	beq.n	8002e64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	619a      	str	r2, [r3, #24]
  }
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	e03b      	b.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f962 	bl	8003150 <I2C_IsErrorOccurred>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e041      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d02d      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7ff f80b 	bl	8001eb8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d122      	bne.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d113      	bne.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d0b4      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f2e:	e033      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f90b 	bl	8003150 <I2C_IsErrorOccurred>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e031      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d025      	beq.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe ffb4 	bl	8001eb8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d013      	beq.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d1c4      	bne.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fbc:	e02f      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8c4 	bl	8003150 <I2C_IsErrorOccurred>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02d      	b.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe ff71 	bl	8001eb8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11a      	bne.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d013      	beq.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e007      	b.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d1c8      	bne.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003048:	e071      	b.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f87e 	bl	8003150 <I2C_IsErrorOccurred>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d13b      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d138      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d105      	bne.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b10      	cmp	r3, #16
 8003098:	d121      	bne.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2210      	movs	r2, #16
 80030a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2204      	movs	r2, #4
 80030a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80030bc:	400b      	ands	r3, r1
 80030be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
 80030dc:	e002      	b.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80030e4:	f7fe fee8 	bl	8001eb8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d119      	bne.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d00f      	beq.n	800312e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d002      	beq.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d083      	beq.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d068      	beq.n	800324e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2210      	movs	r2, #16
 8003182:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003184:	e049      	b.n	800321a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d045      	beq.n	800321a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fe93 	bl	8001eb8 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_IsErrorOccurred+0x54>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d13a      	bne.n	800321a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c6:	d121      	bne.n	800320c <I2C_IsErrorOccurred+0xbc>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ce:	d01d      	beq.n	800320c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d01a      	beq.n	800320c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031e6:	f7fe fe67 	bl	8001eb8 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	e00e      	b.n	800320c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031ee:	f7fe fe63 	bl	8001eb8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b19      	cmp	r3, #25
 80031fa:	d907      	bls.n	800320c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f043 0320 	orr.w	r3, r3, #32
 8003202:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800320a:	e006      	b.n	800321a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b20      	cmp	r3, #32
 8003218:	d1e9      	bne.n	80031ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b20      	cmp	r3, #32
 8003226:	d003      	beq.n	8003230 <I2C_IsErrorOccurred+0xe0>
 8003228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0aa      	beq.n	8003186 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2220      	movs	r2, #32
 800323e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003292:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fdaf 	bl	8002e28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <I2C_IsErrorOccurred+0x1bc>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003302:	4618      	mov	r0, r3
 8003304:	3728      	adds	r7, #40	@ 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	fe00e800 	.word	0xfe00e800

08003310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	4613      	mov	r3, r2
 8003320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003328:	7a7b      	ldrb	r3, [r7, #9]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003330:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	4313      	orrs	r3, r2
 800333a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800333e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	0d5b      	lsrs	r3, r3, #21
 800334a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800334e:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <I2C_TransferConfig+0x60>)
 8003350:	430b      	orrs	r3, r1
 8003352:	43db      	mvns	r3, r3
 8003354:	ea02 0103 	and.w	r1, r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	03ff63ff 	.word	0x03ff63ff

08003374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	d138      	bne.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003394:	2302      	movs	r3, #2
 8003396:	e032      	b.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b20      	cmp	r3, #32
 800341e:	d139      	bne.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800342a:	2302      	movs	r3, #2
 800342c:	e033      	b.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2224      	movs	r2, #36	@ 0x24
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800345c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034c8:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <HAL_PWREx_GetVoltageRange+0x18>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40007000 	.word	0x40007000

080034e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ee:	d130      	bne.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f0:	4b23      	ldr	r3, [pc, #140]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fc:	d038      	beq.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003506:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003508:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800350e:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2232      	movs	r2, #50	@ 0x32
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003524:	e002      	b.n	800352c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b01      	subs	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352c:	4b14      	ldr	r3, [pc, #80]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003538:	d102      	bne.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x60>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f2      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354c:	d110      	bne.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355e:	d007      	beq.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003560:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003568:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800356e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40007000 	.word	0x40007000
 8003584:	20000024 	.word	0x20000024
 8003588:	431bde83 	.word	0x431bde83

0800358c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f000 bc02 	b.w	8003da4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a0:	4b96      	ldr	r3, [pc, #600]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035aa:	4b94      	ldr	r3, [pc, #592]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80e4 	beq.w	800378a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4c>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	f040 808b 	bne.w	80036e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f040 8087 	bne.w	80036e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d8:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x64>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e3d9      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1a      	ldr	r2, [r3, #32]
 80035f4:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_RCC_OscConfig+0x7e>
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003608:	e005      	b.n	8003616 <HAL_RCC_OscConfig+0x8a>
 800360a:	4b7c      	ldr	r3, [pc, #496]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800360c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003616:	4293      	cmp	r3, r2
 8003618:	d223      	bcs.n	8003662 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fdbe 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e3ba      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800362e:	4b73      	ldr	r3, [pc, #460]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a72      	ldr	r2, [pc, #456]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	496d      	ldr	r1, [pc, #436]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364c:	4b6b      	ldr	r3, [pc, #428]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	4968      	ldr	r1, [pc, #416]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	e025      	b.n	80036ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003662:	4b66      	ldr	r3, [pc, #408]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4960      	ldr	r1, [pc, #384]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003680:	4b5e      	ldr	r3, [pc, #376]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	495b      	ldr	r1, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fd7e 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e37a      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ae:	f000 fc81 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b51      	ldr	r3, [pc, #324]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	4950      	ldr	r1, [pc, #320]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003804 <HAL_RCC_OscConfig+0x278>)
 80036cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fa20 	bl	8001b18 <HAL_InitTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d052      	beq.n	8003788 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	e35e      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d032      	beq.n	8003754 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ee:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a42      	ldr	r2, [pc, #264]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fbdd 	bl	8001eb8 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003702:	f7fe fbd9 	bl	8001eb8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e347      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a35      	ldr	r2, [pc, #212]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4930      	ldr	r1, [pc, #192]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373e:	4b2f      	ldr	r3, [pc, #188]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	492b      	ldr	r1, [pc, #172]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
 8003752:	e01a      	b.n	800378a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003754:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a28      	ldr	r2, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003760:	f7fe fbaa 	bl	8001eb8 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003768:	f7fe fba6 	bl	8001eb8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e314      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1dc>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d073      	beq.n	800387e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_OscConfig+0x21c>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d10e      	bne.n	80037c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d063      	beq.n	800387c <HAL_RCC_OscConfig+0x2f0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d15f      	bne.n	800387c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e2f1      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x24c>
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0b      	ldr	r2, [pc, #44]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e025      	b.n	8003824 <HAL_RCC_OscConfig+0x298>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e0:	d114      	bne.n	800380c <HAL_RCC_OscConfig+0x280>
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a02      	ldr	r2, [pc, #8]	@ (80037fc <HAL_RCC_OscConfig+0x270>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e013      	b.n	8003824 <HAL_RCC_OscConfig+0x298>
 80037fc:	40021000 	.word	0x40021000
 8003800:	0800ac18 	.word	0x0800ac18
 8003804:	20000024 	.word	0x20000024
 8003808:	20000028 	.word	0x20000028
 800380c:	4ba0      	ldr	r3, [pc, #640]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a9f      	ldr	r2, [pc, #636]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b9d      	ldr	r3, [pc, #628]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a9c      	ldr	r2, [pc, #624]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fb44 	bl	8001eb8 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe fb40 	bl	8001eb8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e2ae      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003846:	4b92      	ldr	r3, [pc, #584]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x2a8>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fb30 	bl	8001eb8 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fb2c 	bl	8001eb8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e29a      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800386e:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x2d0>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d060      	beq.n	800394c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d005      	beq.n	800389c <HAL_RCC_OscConfig+0x310>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d119      	bne.n	80038ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d116      	bne.n	80038ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x328>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e277      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b76      	ldr	r3, [pc, #472]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	4973      	ldr	r1, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c8:	e040      	b.n	800394c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d023      	beq.n	800391a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe faeb 	bl	8001eb8 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fe fae7 	bl	8001eb8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e255      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f8:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	495f      	ldr	r1, [pc, #380]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
 8003918:	e018      	b.n	800394c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fe fac7 	bl	8001eb8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7fe fac3 	bl	8001eb8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e231      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003940:	4b53      	ldr	r3, [pc, #332]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d03c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01c      	beq.n	800399a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003960:	4b4b      	ldr	r3, [pc, #300]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003966:	4a4a      	ldr	r2, [pc, #296]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe faa2 	bl	8001eb8 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003978:	f7fe fa9e 	bl	8001eb8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e20c      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398a:	4b41      	ldr	r3, [pc, #260]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ef      	beq.n	8003978 <HAL_RCC_OscConfig+0x3ec>
 8003998:	e01b      	b.n	80039d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 800399c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe fa85 	bl	8001eb8 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fe fa81 	bl	8001eb8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1ef      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c4:	4b32      	ldr	r3, [pc, #200]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ef      	bne.n	80039b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a6 	beq.w	8003b2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4a26      	ldr	r2, [pc, #152]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fc:	4b24      	ldr	r3, [pc, #144]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0c:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <HAL_RCC_OscConfig+0x508>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d118      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <HAL_RCC_OscConfig+0x508>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_RCC_OscConfig+0x508>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a24:	f7fe fa48 	bl	8001eb8 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fe fa44 	bl	8001eb8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1b2      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_RCC_OscConfig+0x508>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4d8>
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	4a0d      	ldr	r2, [pc, #52]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a62:	e029      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d115      	bne.n	8003a98 <HAL_RCC_OscConfig+0x50c>
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	4a07      	ldr	r2, [pc, #28]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a7c:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a03      	ldr	r2, [pc, #12]	@ (8003a90 <HAL_RCC_OscConfig+0x504>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40007000 	.word	0x40007000
 8003a98:	4b9a      	ldr	r3, [pc, #616]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	4a99      	ldr	r2, [pc, #612]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aa8:	4b96      	ldr	r3, [pc, #600]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a95      	ldr	r2, [pc, #596]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d016      	beq.n	8003aee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f9fa 	bl	8001eb8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f9f6 	bl	8001eb8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e162      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ade:	4b89      	ldr	r3, [pc, #548]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ed      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x53c>
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fe f9e3 	bl	8001eb8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fe f9df 	bl	8001eb8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e14b      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0c:	4b7d      	ldr	r3, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ed      	bne.n	8003af6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b20:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d03c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b40:	4b70      	ldr	r3, [pc, #448]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b46:	4a6f      	ldr	r2, [pc, #444]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe f9b2 	bl	8001eb8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b58:	f7fe f9ae 	bl	8001eb8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e11c      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6a:	4b66      	ldr	r3, [pc, #408]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ef      	beq.n	8003b58 <HAL_RCC_OscConfig+0x5cc>
 8003b78:	e01b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b7a:	4b62      	ldr	r3, [pc, #392]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fe f995 	bl	8001eb8 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b92:	f7fe f991 	bl	8001eb8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0ff      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba4:	4b57      	ldr	r3, [pc, #348]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ef      	bne.n	8003b92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80f3 	beq.w	8003da2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	f040 80c9 	bne.w	8003d58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0203 	and.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d12c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	3b01      	subs	r3, #1
 8003be6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d123      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d11b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d113      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d06b      	beq.n	8003d0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d062      	beq.n	8003d00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c3a:	4b32      	ldr	r3, [pc, #200]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0ac      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c56:	f7fe f92f 	bl	8001eb8 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe f92b 	bl	8001eb8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e099      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b21      	ldr	r3, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <HAL_RCC_OscConfig+0x77c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0112      	lsls	r2, r2, #4
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c96:	0212      	lsls	r2, r2, #8
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c9e:	0852      	lsrs	r2, r2, #1
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	0552      	lsls	r2, r2, #21
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0652      	lsls	r2, r2, #25
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cb6:	06d2      	lsls	r2, r2, #27
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	4912      	ldr	r1, [pc, #72]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cd8:	f7fe f8ee 	bl	8001eb8 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe f8ea 	bl	8001eb8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e058      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <HAL_RCC_OscConfig+0x778>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfe:	e050      	b.n	8003da2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e04f      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d144      	bne.n	8003da2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a23      	ldr	r2, [pc, #140]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a20      	ldr	r2, [pc, #128]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d30:	f7fe f8c2 	bl	8001eb8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe f8be 	bl	8001eb8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e02c      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4a:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x7ac>
 8003d56:	e024      	b.n	8003da2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d01f      	beq.n	8003d9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a12      	ldr	r2, [pc, #72]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe f8a5 	bl	8001eb8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fe f8a1 	bl	8001eb8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e00f      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	4905      	ldr	r1, [pc, #20]	@ (8003dac <HAL_RCC_OscConfig+0x820>)
 8003d96:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <HAL_RCC_OscConfig+0x824>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60cb      	str	r3, [r1, #12]
 8003d9c:	e001      	b.n	8003da2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	feeefffc 	.word	0xfeeefffc

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0e7      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b75      	ldr	r3, [pc, #468]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4970      	ldr	r1, [pc, #448]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b6e      	ldr	r3, [pc, #440]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cf      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	4b66      	ldr	r3, [pc, #408]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d908      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b63      	ldr	r3, [pc, #396]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4960      	ldr	r1, [pc, #384]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04c      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d121      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0a6      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	4b54      	ldr	r3, [pc, #336]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e09a      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08e      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e086      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b46      	ldr	r3, [pc, #280]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4943      	ldr	r1, [pc, #268]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fe f80c 	bl	8001eb8 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe f808 	bl	8001eb8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e06e      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b31      	ldr	r3, [pc, #196]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d208      	bcs.n	8003efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	492b      	ldr	r1, [pc, #172]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efa:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d210      	bcs.n	8003f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 0207 	bic.w	r2, r3, #7
 8003f10:	4923      	ldr	r1, [pc, #140]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f18:	4b21      	ldr	r3, [pc, #132]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e036      	b.n	8003f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f36:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4918      	ldr	r1, [pc, #96]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f54:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4910      	ldr	r1, [pc, #64]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f68:	f000 f824 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	490b      	ldr	r1, [pc, #44]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	4a09      	ldr	r2, [pc, #36]	@ (8003fac <HAL_RCC_ClockConfig+0x1f8>)
 8003f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd fdc3 	bl	8001b18 <HAL_InitTick>
 8003f92:	4603      	mov	r3, r0
 8003f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f96:	7afb      	ldrb	r3, [r7, #11]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40022000 	.word	0x40022000
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	0800ac18 	.word	0x0800ac18
 8003fac:	20000024 	.word	0x20000024
 8003fb0:	20000028 	.word	0x20000028

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d121      	bne.n	8004026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d11e      	bne.n	8004026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe8:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff4:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e005      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004004:	4b2d      	ldr	r3, [pc, #180]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004010:	4a2b      	ldr	r2, [pc, #172]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004024:	e00a      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d102      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402c:	4b25      	ldr	r3, [pc, #148]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e004      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d101      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004038:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800403a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d134      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004042:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0xa6>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d003      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0xac>
 8004058:	e005      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800405c:	617b      	str	r3, [r7, #20]
      break;
 800405e:	e005      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004060:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004062:	617b      	str	r3, [r7, #20]
      break;
 8004064:	e002      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	617b      	str	r3, [r7, #20]
      break;
 800406a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800406c:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	3301      	adds	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	fb03 f202 	mul.w	r2, r3, r2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004092:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	0e5b      	lsrs	r3, r3, #25
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	3301      	adds	r3, #1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040ac:	69bb      	ldr	r3, [r7, #24]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3724      	adds	r7, #36	@ 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	0800ac30 	.word	0x0800ac30
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000024 	.word	0x20000024

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e8:	f7ff fff0 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4904      	ldr	r1, [pc, #16]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	0800ac28 	.word	0x0800ac28

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004114:	f7ff ffda 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0adb      	lsrs	r3, r3, #11
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4904      	ldr	r1, [pc, #16]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	0800ac28 	.word	0x0800ac28

0800413c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	220f      	movs	r2, #15
 800414a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800414c:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0203 	and.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004158:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004164:	4b0c      	ldr	r3, [pc, #48]	@ (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <HAL_RCC_GetClockConfig+0x60>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0207 	and.w	r2, r3, #7
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40022000 	.word	0x40022000

080041a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041b8:	f7ff f984 	bl	80034c4 <HAL_PWREx_GetVoltageRange>
 80041bc:	6178      	str	r0, [r7, #20]
 80041be:	e014      	b.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80041cc:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041d8:	f7ff f974 	bl	80034c4 <HAL_PWREx_GetVoltageRange>
 80041dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d10b      	bne.n	800420a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d919      	bls.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80041fc:	d902      	bls.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041fe:	2302      	movs	r3, #2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e013      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004204:	2301      	movs	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e010      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b80      	cmp	r3, #128	@ 0x80
 800420e:	d902      	bls.n	8004216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004210:	2303      	movs	r3, #3
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e00a      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	@ 0x80
 800421a:	d102      	bne.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800421c:	2302      	movs	r3, #2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e004      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b70      	cmp	r3, #112	@ 0x70
 8004226:	d101      	bne.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 0207 	bic.w	r2, r3, #7
 8004234:	4909      	ldr	r1, [pc, #36]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40022000 	.word	0x40022000

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004268:	2300      	movs	r3, #0
 800426a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800426c:	2300      	movs	r3, #0
 800426e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004278:	2b00      	cmp	r3, #0
 800427a:	d031      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004284:	d01a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004286:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800428a:	d814      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004290:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004294:	d10f      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004296:	4b5d      	ldr	r3, [pc, #372]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4a5c      	ldr	r2, [pc, #368]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a2:	e00c      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f9de 	bl	800466c <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b4:	e003      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c4:	4b51      	ldr	r3, [pc, #324]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	494e      	ldr	r1, [pc, #312]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042da:	e001      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 809e 	beq.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042f2:	4b46      	ldr	r3, [pc, #280]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	@ 0x58
 8004314:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004320:	2301      	movs	r3, #1
 8004322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004324:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a39      	ldr	r2, [pc, #228]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004330:	f7fd fdc2 	bl	8001eb8 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004336:	e009      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fd fdbe 	bl	8001eb8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	74fb      	strb	r3, [r7, #19]
        break;
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800434c:	4b30      	ldr	r3, [pc, #192]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d15a      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800435e:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01e      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	429a      	cmp	r2, r3
 8004378:	d019      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800437a:	4b24      	ldr	r3, [pc, #144]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b21      	ldr	r3, [pc, #132]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004396:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439c:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043a6:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d016      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fd7e 	bl	8001eb8 <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043be:	e00b      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fd fd7a 	bl	8001eb8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d902      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	74fb      	strb	r3, [r7, #19]
            break;
 80043d6:	e006      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ec      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fa:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004402:	e009      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
 8004408:	e006      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004418:	7c7b      	ldrb	r3, [r7, #17]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b8a      	ldr	r3, [pc, #552]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	4a89      	ldr	r2, [pc, #548]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004436:	4b84      	ldr	r3, [pc, #528]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f023 0203 	bic.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4980      	ldr	r1, [pc, #512]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004458:	4b7b      	ldr	r3, [pc, #492]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f023 020c 	bic.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	4978      	ldr	r1, [pc, #480]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800447a:	4b73      	ldr	r3, [pc, #460]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	496f      	ldr	r1, [pc, #444]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449c:	4b6a      	ldr	r3, [pc, #424]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	4967      	ldr	r1, [pc, #412]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044be:	4b62      	ldr	r3, [pc, #392]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	495e      	ldr	r1, [pc, #376]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e0:	4b59      	ldr	r3, [pc, #356]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	4956      	ldr	r1, [pc, #344]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004502:	4b51      	ldr	r3, [pc, #324]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	494d      	ldr	r1, [pc, #308]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d028      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004524:	4b48      	ldr	r3, [pc, #288]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	4945      	ldr	r1, [pc, #276]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004542:	d106      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b40      	ldr	r3, [pc, #256]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a3f      	ldr	r2, [pc, #252]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
 8004550:	e011      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f882 	bl	800466c <RCCEx_PLLSAI1_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004582:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004590:	492d      	ldr	r1, [pc, #180]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a28      	ldr	r2, [pc, #160]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ac:	60d3      	str	r3, [r2, #12]
 80045ae:	e011      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f853 	bl	800466c <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01c      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ee:	4916      	ldr	r1, [pc, #88]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045fe:	d10c      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f830 	bl	800466c <RCCEx_PLLSAI1_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004626:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800463c:	7cbb      	ldrb	r3, [r7, #18]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000

0800466c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467a:	4b74      	ldr	r3, [pc, #464]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004686:	4b71      	ldr	r3, [pc, #452]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d10d      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
       ||
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800469e:	4b6b      	ldr	r3, [pc, #428]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
       ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d047      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e044      	b.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d018      	beq.n	80046f2 <RCCEx_PLLSAI1_Config+0x86>
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d825      	bhi.n	8004710 <RCCEx_PLLSAI1_Config+0xa4>
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d002      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0x62>
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d009      	beq.n	80046e0 <RCCEx_PLLSAI1_Config+0x74>
 80046cc:	e020      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ce:	4b5f      	ldr	r3, [pc, #380]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11d      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046de:	e01a      	b.n	8004716 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e0:	4b5a      	ldr	r3, [pc, #360]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d116      	bne.n	800471a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f0:	e013      	b.n	800471a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f2:	4b56      	ldr	r3, [pc, #344]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046fe:	4b53      	ldr	r3, [pc, #332]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800470e:	e006      	b.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      break;
 8004714:	e004      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800471e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004726:	4b49      	ldr	r3, [pc, #292]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	430b      	orrs	r3, r1
 800473c:	4943      	ldr	r1, [pc, #268]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d17c      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004748:	4b40      	ldr	r3, [pc, #256]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd fbb0 	bl	8001eb8 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800475a:	e009      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800475c:	f7fd fbac 	bl	8001eb8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	73fb      	strb	r3, [r7, #15]
        break;
 800476e:	e005      	b.n	800477c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004770:	4b36      	ldr	r3, [pc, #216]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ef      	bne.n	800475c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d15f      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d110      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004788:	4b30      	ldr	r3, [pc, #192]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004790:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	06d2      	lsls	r2, r2, #27
 80047a0:	430a      	orrs	r2, r1
 80047a2:	492a      	ldr	r1, [pc, #168]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	610b      	str	r3, [r1, #16]
 80047a8:	e027      	b.n	80047fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d112      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b0:	4b26      	ldr	r3, [pc, #152]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6912      	ldr	r2, [r2, #16]
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0552      	lsls	r2, r2, #21
 80047cc:	430a      	orrs	r2, r1
 80047ce:	491f      	ldr	r1, [pc, #124]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]
 80047d4:	e011      	b.n	80047fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047d6:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6892      	ldr	r2, [r2, #8]
 80047e6:	0211      	lsls	r1, r2, #8
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6952      	ldr	r2, [r2, #20]
 80047ec:	0852      	lsrs	r2, r2, #1
 80047ee:	3a01      	subs	r2, #1
 80047f0:	0652      	lsls	r2, r2, #25
 80047f2:	430a      	orrs	r2, r1
 80047f4:	4915      	ldr	r1, [pc, #84]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047fa:	4b14      	ldr	r3, [pc, #80]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a13      	ldr	r2, [pc, #76]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004800:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004804:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fd fb57 	bl	8001eb8 <HAL_GetTick>
 800480a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800480c:	e009      	b.n	8004822 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800480e:	f7fd fb53 	bl	8001eb8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d902      	bls.n	8004822 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	73fb      	strb	r3, [r7, #15]
          break;
 8004820:	e005      	b.n	800482e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004822:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ef      	beq.n	800480e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004834:	4b05      	ldr	r3, [pc, #20]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4903      	ldr	r1, [pc, #12]	@ (800484c <RCCEx_PLLSAI1_Config+0x1e0>)
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e049      	b.n	80048f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd f892 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fcd8 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e03b      	b.n	8004990 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a19      	ldr	r2, [pc, #100]	@ (800499c <HAL_TIM_Base_Start_IT+0x9c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_TIM_Base_Start_IT+0x4e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d004      	beq.n	800494e <HAL_TIM_Base_Start_IT+0x4e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d115      	bne.n	800497a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d015      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x8c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004966:	d011      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	e008      	b.n	800498c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e000      	b.n	800498e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40014000 	.word	0x40014000
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e049      	b.n	8004a4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f841 	bl	8004a56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fc2c 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_TIM_PWM_Start+0x24>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e03c      	b.n	8004b0a <HAL_TIM_PWM_Start+0x9e>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d109      	bne.n	8004aaa <HAL_TIM_PWM_Start+0x3e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e02f      	b.n	8004b0a <HAL_TIM_PWM_Start+0x9e>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d109      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x58>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e022      	b.n	8004b0a <HAL_TIM_PWM_Start+0x9e>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d109      	bne.n	8004ade <HAL_TIM_PWM_Start+0x72>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	bf14      	ite	ne
 8004ad6:	2301      	movne	r3, #1
 8004ad8:	2300      	moveq	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	e015      	b.n	8004b0a <HAL_TIM_PWM_Start+0x9e>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d109      	bne.n	8004af8 <HAL_TIM_PWM_Start+0x8c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e008      	b.n	8004b0a <HAL_TIM_PWM_Start+0x9e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07e      	b.n	8004c10 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_PWM_Start+0xb6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b20:	e023      	b.n	8004b6a <HAL_TIM_PWM_Start+0xfe>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xc6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b30:	e01b      	b.n	8004b6a <HAL_TIM_PWM_Start+0xfe>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xd6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b40:	e013      	b.n	8004b6a <HAL_TIM_PWM_Start+0xfe>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0xe6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_PWM_Start+0xfe>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0xf6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b60:	e003      	b.n	8004b6a <HAL_TIM_PWM_Start+0xfe>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	6839      	ldr	r1, [r7, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 feee 	bl	8005954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a26      	ldr	r2, [pc, #152]	@ (8004c18 <HAL_TIM_PWM_Start+0x1ac>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x12a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a25      	ldr	r2, [pc, #148]	@ (8004c1c <HAL_TIM_PWM_Start+0x1b0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x12a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	@ (8004c20 <HAL_TIM_PWM_Start+0x1b4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_Start+0x12e>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_TIM_PWM_Start+0x130>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	@ (8004c18 <HAL_TIM_PWM_Start+0x1ac>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIM_PWM_Start+0x162>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc2:	d004      	beq.n	8004bce <HAL_TIM_PWM_Start+0x162>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	@ (8004c1c <HAL_TIM_PWM_Start+0x1b0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d115      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b13      	ldr	r3, [pc, #76]	@ (8004c24 <HAL_TIM_PWM_Start+0x1b8>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d015      	beq.n	8004c0c <HAL_TIM_PWM_Start+0x1a0>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be6:	d011      	beq.n	8004c0c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e008      	b.n	8004c0c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e000      	b.n	8004c0e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	00010007 	.word	0x00010007

08004c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d020      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0202 	mvn.w	r2, #2
 8004c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fac7 	bl	8005206 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fab9 	bl	80051f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 faca 	bl	800521a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0204 	mvn.w	r2, #4
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 faa1 	bl	8005206 <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa93 	bl	80051f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 faa4 	bl	800521a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d020      	beq.n	8004d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0208 	mvn.w	r2, #8
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa7b 	bl	8005206 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa6d 	bl	80051f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa7e 	bl	800521a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d020      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0210 	mvn.w	r2, #16
 8004d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2208      	movs	r2, #8
 8004d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa55 	bl	8005206 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa47 	bl	80051f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fa58 	bl	800521a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0201 	mvn.w	r2, #1
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc f9c0 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fe5f 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00c      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fe57 	bl	8005a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fa12 	bl	800522e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0220 	mvn.w	r2, #32
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fe1f 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0ff      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b14      	cmp	r3, #20
 8004e62:	f200 80f0 	bhi.w	8005046 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ec1 	.word	0x08004ec1
 8004e70:	08005047 	.word	0x08005047
 8004e74:	08005047 	.word	0x08005047
 8004e78:	08005047 	.word	0x08005047
 8004e7c:	08004f01 	.word	0x08004f01
 8004e80:	08005047 	.word	0x08005047
 8004e84:	08005047 	.word	0x08005047
 8004e88:	08005047 	.word	0x08005047
 8004e8c:	08004f43 	.word	0x08004f43
 8004e90:	08005047 	.word	0x08005047
 8004e94:	08005047 	.word	0x08005047
 8004e98:	08005047 	.word	0x08005047
 8004e9c:	08004f83 	.word	0x08004f83
 8004ea0:	08005047 	.word	0x08005047
 8004ea4:	08005047 	.word	0x08005047
 8004ea8:	08005047 	.word	0x08005047
 8004eac:	08004fc5 	.word	0x08004fc5
 8004eb0:	08005047 	.word	0x08005047
 8004eb4:	08005047 	.word	0x08005047
 8004eb8:	08005047 	.word	0x08005047
 8004ebc:	08005005 	.word	0x08005005
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fa2c 	bl	8005324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0208 	orr.w	r2, r2, #8
 8004eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0204 	bic.w	r2, r2, #4
 8004eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6999      	ldr	r1, [r3, #24]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	619a      	str	r2, [r3, #24]
      break;
 8004efe:	e0a5      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa88 	bl	800541c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	021a      	lsls	r2, r3, #8
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	619a      	str	r2, [r3, #24]
      break;
 8004f40:	e084      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fae1 	bl	8005510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0208 	orr.w	r2, r2, #8
 8004f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0204 	bic.w	r2, r2, #4
 8004f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69d9      	ldr	r1, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	61da      	str	r2, [r3, #28]
      break;
 8004f80:	e064      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fb39 	bl	8005600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	021a      	lsls	r2, r3, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	61da      	str	r2, [r3, #28]
      break;
 8004fc2:	e043      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fb76 	bl	80056bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0204 	bic.w	r2, r2, #4
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005002:	e023      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fbae 	bl	800576c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005044:	e002      	b.n	800504c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
      break;
 800504a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop

08005060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIM_ConfigClockSource+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e0b6      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x18a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800509e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b8:	d03e      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0xd8>
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050be:	f200 8087 	bhi.w	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c6:	f000 8086 	beq.w	80051d6 <HAL_TIM_ConfigClockSource+0x176>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d87f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050d0:	2b70      	cmp	r3, #112	@ 0x70
 80050d2:	d01a      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xaa>
 80050d4:	2b70      	cmp	r3, #112	@ 0x70
 80050d6:	d87b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050d8:	2b60      	cmp	r3, #96	@ 0x60
 80050da:	d050      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x11e>
 80050dc:	2b60      	cmp	r3, #96	@ 0x60
 80050de:	d877      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050e0:	2b50      	cmp	r3, #80	@ 0x50
 80050e2:	d03c      	beq.n	800515e <HAL_TIM_ConfigClockSource+0xfe>
 80050e4:	2b50      	cmp	r3, #80	@ 0x50
 80050e6:	d873      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050e8:	2b40      	cmp	r3, #64	@ 0x40
 80050ea:	d058      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x13e>
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d86f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050f0:	2b30      	cmp	r3, #48	@ 0x30
 80050f2:	d064      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
 80050f4:	2b30      	cmp	r3, #48	@ 0x30
 80050f6:	d86b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d060      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d867      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05c      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
 8005104:	2b10      	cmp	r3, #16
 8005106:	d05a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15e>
 8005108:	e062      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800511a:	f000 fbfb 	bl	8005914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800512c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	609a      	str	r2, [r3, #8]
      break;
 8005136:	e04f      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005148:	f000 fbe4 	bl	8005914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800515a:	609a      	str	r2, [r3, #8]
      break;
 800515c:	e03c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	461a      	mov	r2, r3
 800516c:	f000 fb58 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2150      	movs	r1, #80	@ 0x50
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fbb1 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 800517c:	e02c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518a:	461a      	mov	r2, r3
 800518c:	f000 fb77 	bl	800587e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2160      	movs	r1, #96	@ 0x60
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fba1 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 800519c:	e01c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	461a      	mov	r2, r3
 80051ac:	f000 fb38 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2140      	movs	r1, #64	@ 0x40
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb91 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 80051bc:	e00c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f000 fb88 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 80051ce:	e003      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <TIM_Base_SetConfig+0xd4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0x20>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005262:	d108      	bne.n	8005276 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a27      	ldr	r2, [pc, #156]	@ (8005318 <TIM_Base_SetConfig+0xd4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0x52>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0x52>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a24      	ldr	r2, [pc, #144]	@ (800531c <TIM_Base_SetConfig+0xd8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0x52>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a23      	ldr	r2, [pc, #140]	@ (8005320 <TIM_Base_SetConfig+0xdc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a12      	ldr	r2, [pc, #72]	@ (8005318 <TIM_Base_SetConfig+0xd4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0xa0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a11      	ldr	r2, [pc, #68]	@ (800531c <TIM_Base_SetConfig+0xd8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0xa0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <TIM_Base_SetConfig+0xdc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d103      	bne.n	80052ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d105      	bne.n	800530a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]
  }
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400

08005324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f023 0201 	bic.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0302 	bic.w	r3, r3, #2
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a24      	ldr	r2, [pc, #144]	@ (8005410 <TIM_OC1_SetConfig+0xec>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_OC1_SetConfig+0x70>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <TIM_OC1_SetConfig+0xf0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC1_SetConfig+0x70>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a22      	ldr	r2, [pc, #136]	@ (8005418 <TIM_OC1_SetConfig+0xf4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10c      	bne.n	80053ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0308 	bic.w	r3, r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a17      	ldr	r2, [pc, #92]	@ (8005410 <TIM_OC1_SetConfig+0xec>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_OC1_SetConfig+0xa2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a16      	ldr	r2, [pc, #88]	@ (8005414 <TIM_OC1_SetConfig+0xf0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC1_SetConfig+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a15      	ldr	r2, [pc, #84]	@ (8005418 <TIM_OC1_SetConfig+0xf4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400

0800541c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f023 0210 	bic.w	r2, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0320 	bic.w	r3, r3, #32
 800546a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a22      	ldr	r2, [pc, #136]	@ (8005504 <TIM_OC2_SetConfig+0xe8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10d      	bne.n	800549c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <TIM_OC2_SetConfig+0xe8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC2_SetConfig+0x98>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC2_SetConfig+0xec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC2_SetConfig+0x98>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC2_SetConfig+0xf0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d113      	bne.n	80054dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400

08005510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800555c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a21      	ldr	r2, [pc, #132]	@ (80055f4 <TIM_OC3_SetConfig+0xe4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10d      	bne.n	800558e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800558c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <TIM_OC3_SetConfig+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC3_SetConfig+0x96>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <TIM_OC3_SetConfig+0xe8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC3_SetConfig+0x96>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <TIM_OC3_SetConfig+0xec>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d113      	bne.n	80055ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800564e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	031b      	lsls	r3, r3, #12
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a14      	ldr	r2, [pc, #80]	@ (80056b0 <TIM_OC4_SetConfig+0xb0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC4_SetConfig+0x74>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <TIM_OC4_SetConfig+0xb4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC4_SetConfig+0x74>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a12      	ldr	r2, [pc, #72]	@ (80056b8 <TIM_OC4_SetConfig+0xb8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d109      	bne.n	8005688 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400

080056bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <TIM_OC5_SetConfig+0xa4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_OC5_SetConfig+0x6a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a12      	ldr	r2, [pc, #72]	@ (8005764 <TIM_OC5_SetConfig+0xa8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_OC5_SetConfig+0x6a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a11      	ldr	r2, [pc, #68]	@ (8005768 <TIM_OC5_SetConfig+0xac>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d109      	bne.n	800573a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400

0800576c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	051b      	lsls	r3, r3, #20
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a14      	ldr	r2, [pc, #80]	@ (8005814 <TIM_OC6_SetConfig+0xa8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_OC6_SetConfig+0x6c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a13      	ldr	r2, [pc, #76]	@ (8005818 <TIM_OC6_SetConfig+0xac>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC6_SetConfig+0x6c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <TIM_OC6_SetConfig+0xb0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400

08005820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 030a 	bic.w	r3, r3, #10
 800585c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f023 0210 	bic.w	r2, r3, #16
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f043 0307 	orr.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800592e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	431a      	orrs	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2201      	movs	r2, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e04f      	b.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a21      	ldr	r2, [pc, #132]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a14      	ldr	r2, [pc, #80]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a20:	d004      	beq.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10c      	bne.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e040      	b.n	8005b3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb ffba 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	@ 0x24
 8005ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fade 	bl	80060b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8af 	bl	8005c58 <UART_SetConfig>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e01b      	b.n	8005b3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb5d 	bl	80061f4 <UART_CheckIdleState>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	@ 0x28
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d177      	bne.n	8005c4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Transmit+0x24>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e070      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2221      	movs	r2, #33	@ 0x21
 8005b78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7a:	f7fc f99d 	bl	8001eb8 <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d108      	bne.n	8005bac <HAL_UART_Transmit+0x68>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e003      	b.n	8005bb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb4:	e02f      	b.n	8005c16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2180      	movs	r1, #128	@ 0x80
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fbbf 	bl	8006344 <UART_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e03b      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	881a      	ldrh	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be8:	b292      	uxth	r2, r2
 8005bea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	3302      	adds	r3, #2
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e007      	b.n	8005c04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	781a      	ldrb	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1c9      	bne.n	8005bb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2140      	movs	r1, #64	@ 0x40
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fb89 	bl	8006344 <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e005      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b08a      	sub	sp, #40	@ 0x28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4bb4      	ldr	r3, [pc, #720]	@ (8005f58 <UART_SetConfig+0x300>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4aa9      	ldr	r2, [pc, #676]	@ (8005f5c <UART_SetConfig+0x304>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4aa0      	ldr	r2, [pc, #640]	@ (8005f60 <UART_SetConfig+0x308>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d126      	bne.n	8005d30 <UART_SetConfig+0xd8>
 8005ce2:	4ba0      	ldr	r3, [pc, #640]	@ (8005f64 <UART_SetConfig+0x30c>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d81b      	bhi.n	8005d28 <UART_SetConfig+0xd0>
 8005cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <UART_SetConfig+0xa0>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e080      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e07c      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e078      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d26:	e074      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2e:	e070      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a8c      	ldr	r2, [pc, #560]	@ (8005f68 <UART_SetConfig+0x310>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d138      	bne.n	8005dac <UART_SetConfig+0x154>
 8005d3a:	4b8a      	ldr	r3, [pc, #552]	@ (8005f64 <UART_SetConfig+0x30c>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d82d      	bhi.n	8005da4 <UART_SetConfig+0x14c>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <UART_SetConfig+0xf8>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e042      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e03e      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e03a      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e036      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e032      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6a      	ldr	r2, [pc, #424]	@ (8005f5c <UART_SetConfig+0x304>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d12a      	bne.n	8005e0c <UART_SetConfig+0x1b4>
 8005db6:	4b6b      	ldr	r3, [pc, #428]	@ (8005f64 <UART_SetConfig+0x30c>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dc4:	d01a      	beq.n	8005dfc <UART_SetConfig+0x1a4>
 8005dc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dca:	d81b      	bhi.n	8005e04 <UART_SetConfig+0x1ac>
 8005dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd0:	d00c      	beq.n	8005dec <UART_SetConfig+0x194>
 8005dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd6:	d815      	bhi.n	8005e04 <UART_SetConfig+0x1ac>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0x18c>
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de0:	d008      	beq.n	8005df4 <UART_SetConfig+0x19c>
 8005de2:	e00f      	b.n	8005e04 <UART_SetConfig+0x1ac>
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e012      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e00e      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e00a      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e006      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e002      	b.n	8005e12 <UART_SetConfig+0x1ba>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a51      	ldr	r2, [pc, #324]	@ (8005f5c <UART_SetConfig+0x304>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d17a      	bne.n	8005f12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d824      	bhi.n	8005e6e <UART_SetConfig+0x216>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <UART_SetConfig+0x1d4>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e6f 	.word	0x08005e6f
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e6f 	.word	0x08005e6f
 8005e3c:	08005e5f 	.word	0x08005e5f
 8005e40:	08005e6f 	.word	0x08005e6f
 8005e44:	08005e6f 	.word	0x08005e6f
 8005e48:	08005e6f 	.word	0x08005e6f
 8005e4c:	08005e67 	.word	0x08005e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7fe f948 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005e54:	61f8      	str	r0, [r7, #28]
        break;
 8005e56:	e010      	b.n	8005e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e58:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <UART_SetConfig+0x314>)
 8005e5a:	61fb      	str	r3, [r7, #28]
        break;
 8005e5c:	e00d      	b.n	8005e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5e:	f7fe f8a9 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8005e62:	61f8      	str	r0, [r7, #28]
        break;
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e6a:	61fb      	str	r3, [r7, #28]
        break;
 8005e6c:	e005      	b.n	8005e7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8107 	beq.w	8006090 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d305      	bcc.n	8005e9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d903      	bls.n	8005ea6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ea4:	e0f4      	b.n	8006090 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	461c      	mov	r4, r3
 8005eac:	4615      	mov	r5, r2
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	022b      	lsls	r3, r5, #8
 8005eb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ebc:	0222      	lsls	r2, r4, #8
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	6849      	ldr	r1, [r1, #4]
 8005ec2:	0849      	lsrs	r1, r1, #1
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	4688      	mov	r8, r1
 8005ec8:	4681      	mov	r9, r0
 8005eca:	eb12 0a08 	adds.w	sl, r2, r8
 8005ece:	eb43 0b09 	adc.w	fp, r3, r9
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	f7fa f9d4 	bl	8000290 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef6:	d308      	bcc.n	8005f0a <UART_SetConfig+0x2b2>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efe:	d204      	bcs.n	8005f0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	60da      	str	r2, [r3, #12]
 8005f08:	e0c2      	b.n	8006090 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f10:	e0be      	b.n	8006090 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f1a:	d16a      	bne.n	8005ff2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d834      	bhi.n	8005f8e <UART_SetConfig+0x336>
 8005f24:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <UART_SetConfig+0x2d4>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f79 	.word	0x08005f79
 8005f38:	08005f8f 	.word	0x08005f8f
 8005f3c:	08005f7f 	.word	0x08005f7f
 8005f40:	08005f8f 	.word	0x08005f8f
 8005f44:	08005f8f 	.word	0x08005f8f
 8005f48:	08005f8f 	.word	0x08005f8f
 8005f4c:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe f8c8 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e020      	b.n	8005f9a <UART_SetConfig+0x342>
 8005f58:	efff69f3 	.word	0xefff69f3
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40004400 	.word	0x40004400
 8005f6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe f8ce 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8005f74:	61f8      	str	r0, [r7, #28]
        break;
 8005f76:	e010      	b.n	8005f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <UART_SetConfig+0x454>)
 8005f7a:	61fb      	str	r3, [r7, #28]
        break;
 8005f7c:	e00d      	b.n	8005f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fe f819 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8005f82:	61f8      	str	r0, [r7, #28]
        break;
 8005f84:	e009      	b.n	8005f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8a:	61fb      	str	r3, [r7, #28]
        break;
 8005f8c:	e005      	b.n	8005f9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d077      	beq.n	8006090 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005a      	lsls	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d916      	bls.n	8005fea <UART_SetConfig+0x392>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc2:	d212      	bcs.n	8005fea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f023 030f 	bic.w	r3, r3, #15
 8005fcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	8afa      	ldrh	r2, [r7, #22]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e052      	b.n	8006090 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ff0:	e04e      	b.n	8006090 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d827      	bhi.n	800604a <UART_SetConfig+0x3f2>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <UART_SetConfig+0x3a8>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	0800604b 	.word	0x0800604b
 8006010:	0800603b 	.word	0x0800603b
 8006014:	0800604b 	.word	0x0800604b
 8006018:	0800604b 	.word	0x0800604b
 800601c:	0800604b 	.word	0x0800604b
 8006020:	08006043 	.word	0x08006043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fe f85e 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006028:	61f8      	str	r0, [r7, #28]
        break;
 800602a:	e014      	b.n	8006056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fe f870 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8006030:	61f8      	str	r0, [r7, #28]
        break;
 8006032:	e010      	b.n	8006056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <UART_SetConfig+0x454>)
 8006036:	61fb      	str	r3, [r7, #28]
        break;
 8006038:	e00d      	b.n	8006056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fd ffbb 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 800603e:	61f8      	str	r0, [r7, #28]
        break;
 8006040:	e009      	b.n	8006056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006046:	61fb      	str	r3, [r7, #28]
        break;
 8006048:	e005      	b.n	8006056 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006054:	bf00      	nop
    }

    if (pclk != 0U)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	085a      	lsrs	r2, r3, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	441a      	add	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b0f      	cmp	r3, #15
 8006074:	d909      	bls.n	800608a <UART_SetConfig+0x432>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607c:	d205      	bcs.n	800608a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
 8006088:	e002      	b.n	8006090 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800609c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	@ 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060aa:	bf00      	nop
 80060ac:	00f42400 	.word	0x00f42400

080060b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ae:	d10a      	bne.n	80061c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b098      	sub	sp, #96	@ 0x60
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006204:	f7fb fe58 	bl	8001eb8 <HAL_GetTick>
 8006208:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d12e      	bne.n	8006276 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f88c 	bl	8006344 <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d021      	beq.n	8006276 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006246:	653b      	str	r3, [r7, #80]	@ 0x50
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006250:	647b      	str	r3, [r7, #68]	@ 0x44
 8006252:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800625e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e6      	bne.n	8006232 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e062      	b.n	800633c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b04      	cmp	r3, #4
 8006282:	d149      	bne.n	8006318 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f856 	bl	8006344 <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d03c      	beq.n	8006318 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	623b      	str	r3, [r7, #32]
   return(result);
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f0:	61fa      	str	r2, [r7, #28]
 80062f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	69b9      	ldr	r1, [r7, #24]
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	617b      	str	r3, [r7, #20]
   return(result);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e011      	b.n	800633c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3758      	adds	r7, #88	@ 0x58
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006354:	e04f      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d04b      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635e:	f7fb fdab 	bl	8001eb8 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	429a      	cmp	r2, r3
 800636c:	d302      	bcc.n	8006374 <UART_WaitOnFlagUntilTimeout+0x30>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e04e      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d037      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b80      	cmp	r3, #128	@ 0x80
 800638a:	d034      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b40      	cmp	r3, #64	@ 0x40
 8006390:	d031      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d110      	bne.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2208      	movs	r2, #8
 80063a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f838 	bl	800641e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2208      	movs	r2, #8
 80063b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e029      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d0:	d111      	bne.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f81e 	bl	800641e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e00f      	b.n	8006416 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	429a      	cmp	r2, r3
 8006412:	d0a0      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b095      	sub	sp, #84	@ 0x54
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006444:	643b      	str	r3, [r7, #64]	@ 0x40
 8006446:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800644a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	61fb      	str	r3, [r7, #28]
   return(result);
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800647e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e5      	bne.n	8006458 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006490:	2b01      	cmp	r3, #1
 8006492:	d118      	bne.n	80064c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6979      	ldr	r1, [r7, #20]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	613b      	str	r3, [r7, #16]
   return(result);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e6      	bne.n	8006494 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064da:	bf00      	nop
 80064dc:	3754      	adds	r7, #84	@ 0x54
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	4603      	mov	r3, r0
 80064ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064f8:	2b84      	cmp	r3, #132	@ 0x84
 80064fa:	d005      	beq.n	8006508 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	3303      	adds	r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651c:	f3ef 8305 	mrs	r3, IPSR
 8006520:	607b      	str	r3, [r7, #4]
  return(result);
 8006522:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800653e:	f001 f983 	bl	8007848 <vTaskStartScheduler>
  
  return osOK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}

08006548 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	b089      	sub	sp, #36	@ 0x24
 800654c:	af04      	add	r7, sp, #16
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <osThreadCreate+0x54>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01c      	beq.n	800659c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685c      	ldr	r4, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691e      	ldr	r6, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ffb6 	bl	80064e6 <makeFreeRtosPriority>
 800657a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006584:	9202      	str	r2, [sp, #8]
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	9100      	str	r1, [sp, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	4632      	mov	r2, r6
 800658e:	4629      	mov	r1, r5
 8006590:	4620      	mov	r0, r4
 8006592:	f000 ff8b 	bl	80074ac <xTaskCreateStatic>
 8006596:	4603      	mov	r3, r0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e01c      	b.n	80065d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685c      	ldr	r4, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff98 	bl	80064e6 <makeFreeRtosPriority>
 80065b6:	4602      	mov	r2, r0
 80065b8:	f107 030c 	add.w	r3, r7, #12
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	9200      	str	r2, [sp, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	4632      	mov	r2, r6
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 ffd0 	bl	800756c <xTaskCreate>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d001      	beq.n	80065d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065d6:	68fb      	ldr	r3, [r7, #12]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <osDelay+0x16>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	e000      	b.n	80065f8 <osDelay+0x18>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f8ef 	bl	80077dc <vTaskDelay>
  
  return osOK;
 80065fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4619      	mov	r1, r3
 800661e:	2001      	movs	r0, #1
 8006620:	f000 fadd 	bl	8006bde <xQueueCreateMutexStatic>
 8006624:	4603      	mov	r3, r0
 8006626:	e003      	b.n	8006630 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006628:	2001      	movs	r0, #1
 800662a:	f000 fac0 	bl	8006bae <xQueueCreateMutex>
 800662e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <osMutexWait+0x18>
    return osErrorParameter;
 800664c:	2380      	movs	r3, #128	@ 0x80
 800664e:	e03a      	b.n	80066c6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d103      	bne.n	8006664 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e009      	b.n	8006678 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d006      	beq.n	8006678 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <osMutexWait+0x40>
      ticks = 1;
 8006674:	2301      	movs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006678:	f7ff ff4d 	bl	8006516 <inHandlerMode>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	461a      	mov	r2, r3
 8006688:	2100      	movs	r1, #0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fd64 	bl	8007158 <xQueueReceiveFromISR>
 8006690:	4603      	mov	r3, r0
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <osMutexWait+0x62>
      return osErrorOS;
 8006696:	23ff      	movs	r3, #255	@ 0xff
 8006698:	e015      	b.n	80066c6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d011      	beq.n	80066c4 <osMutexWait+0x8c>
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <osMutexWait+0x98>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	e008      	b.n	80066c4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc3f 	bl	8006f38 <xQueueSemaphoreTake>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d001      	beq.n	80066c4 <osMutexWait+0x8c>
    return osErrorOS;
 80066c0:	23ff      	movs	r3, #255	@ 0xff
 80066c2:	e000      	b.n	80066c6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80066e4:	f7ff ff17 	bl	8006516 <inHandlerMode>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb8f 	bl	8006e18 <xQueueGiveFromISR>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d001      	beq.n	8006704 <osMutexRelease+0x30>
      return osErrorOS;
 8006700:	23ff      	movs	r3, #255	@ 0xff
 8006702:	e017      	b.n	8006734 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d013      	beq.n	8006732 <osMutexRelease+0x5e>
 800670a:	4b0c      	ldr	r3, [pc, #48]	@ (800673c <osMutexRelease+0x68>)
 800670c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	e00a      	b.n	8006732 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800671c:	2300      	movs	r3, #0
 800671e:	2200      	movs	r2, #0
 8006720:	2100      	movs	r1, #0
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa76 	bl	8006c14 <xQueueGenericSend>
 8006728:	4603      	mov	r3, r0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d001      	beq.n	8006732 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800672e:	23ff      	movs	r3, #255	@ 0xff
 8006730:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006732:	68fb      	ldr	r3, [r7, #12]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b085      	sub	sp, #20
 8006744:	af02      	add	r7, sp, #8
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d011      	beq.n	8006776 <osMessageCreate+0x36>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2400      	movs	r4, #0
 800676c:	9400      	str	r4, [sp, #0]
 800676e:	f000 f92d 	bl	80069cc <xQueueGenericCreateStatic>
 8006772:	4603      	mov	r3, r0
 8006774:	e008      	b.n	8006788 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	4619      	mov	r1, r3
 8006782:	f000 f9a0 	bl	8006ac6 <xQueueGenericCreate>
 8006786:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0208 	add.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f04f 32ff 	mov.w	r2, #4294967295
 80067a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f103 0208 	add.w	r2, r3, #8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f103 0208 	add.w	r2, r3, #8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d103      	bne.n	8006852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e00c      	b.n	800686c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3308      	adds	r3, #8
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e002      	b.n	8006860 <vListInsert+0x2e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	d2f6      	bcs.n	800685a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6892      	ldr	r2, [r2, #8]
 80068ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6852      	ldr	r2, [r2, #4]
 80068c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d103      	bne.n	80068d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	1e5a      	subs	r2, r3, #1
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006924:	f001 fef0 	bl	8008708 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006954:	3b01      	subs	r3, #1
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	441a      	add	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22ff      	movs	r2, #255	@ 0xff
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	22ff      	movs	r2, #255	@ 0xff
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d114      	bne.n	80069a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01a      	beq.n	80069b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3310      	adds	r3, #16
 8006986:	4618      	mov	r0, r3
 8006988:	f001 f9a8 	bl	8007cdc <xTaskRemoveFromEventList>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d012      	beq.n	80069b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006992:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <xQueueGenericReset+0xd0>)
 8006994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	e009      	b.n	80069b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3310      	adds	r3, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fef1 	bl	8006790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3324      	adds	r3, #36	@ 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff feec 	bl	8006790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069b8:	f001 fed8 	bl	800876c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069bc:	2301      	movs	r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	@ 0x38
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <xQueueGenericCreateStatic+0x56>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xQueueGenericCreateStatic+0x5a>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <xQueueGenericCreateStatic+0x5c>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	623b      	str	r3, [r7, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <xQueueGenericCreateStatic+0x84>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <xQueueGenericCreateStatic+0x88>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <xQueueGenericCreateStatic+0x8a>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	61fb      	str	r3, [r7, #28]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a72:	2348      	movs	r3, #72	@ 0x48
 8006a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b48      	cmp	r3, #72	@ 0x48
 8006a7a:	d00b      	beq.n	8006a94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61bb      	str	r3, [r7, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00d      	beq.n	8006abc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aa8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f840 	bl	8006b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3730      	adds	r7, #48	@ 0x30
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	@ 0x28
 8006aca:	af02      	add	r7, sp, #8
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	613b      	str	r3, [r7, #16]
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3348      	adds	r3, #72	@ 0x48
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 ff23 	bl	800894c <pvPortMalloc>
 8006b06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d011      	beq.n	8006b32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	3348      	adds	r3, #72	@ 0x48
 8006b16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b20:	79fa      	ldrb	r2, [r7, #7]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f805 	bl	8006b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b32:	69bb      	ldr	r3, [r7, #24]
	}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e002      	b.n	8006b5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	69b8      	ldr	r0, [r7, #24]
 8006b6e:	f7ff fec3 	bl	80068f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f837 	bl	8006c14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6939      	ldr	r1, [r7, #16]
 8006bc6:	6978      	ldr	r0, [r7, #20]
 8006bc8:	f7ff ff7d 	bl	8006ac6 <xQueueGenericCreate>
 8006bcc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff ffd3 	bl	8006b7a <prvInitialiseMutex>

		return xNewQueue;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
	}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b088      	sub	sp, #32
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	4603      	mov	r3, r0
 8006be6:	6039      	str	r1, [r7, #0]
 8006be8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6939      	ldr	r1, [r7, #16]
 8006bfc:	6978      	ldr	r0, [r7, #20]
 8006bfe:	f7ff fee5 	bl	80069cc <xQueueGenericCreateStatic>
 8006c02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ffb8 	bl	8006b7a <prvInitialiseMutex>

		return xNewQueue;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	@ 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c22:	2300      	movs	r3, #0
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <xQueueGenericSend+0x34>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x42>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <xQueueGenericSend+0x46>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGenericSend+0x48>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10b      	bne.n	8006c78 <xQueueGenericSend+0x64>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x72>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <xQueueGenericSend+0x76>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xQueueGenericSend+0x78>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <xQueueGenericSend+0x94>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca8:	f001 f9d8 	bl	800805c <xTaskGetSchedulerState>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <xQueueGenericSend+0xa4>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <xQueueGenericSend+0xa8>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <xQueueGenericSend+0xaa>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <xQueueGenericSend+0xc6>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	61fb      	str	r3, [r7, #28]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cda:	f001 fd15 	bl	8008708 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <xQueueGenericSend+0xdc>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d129      	bne.n	8006d44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cf6:	f000 fac9 	bl	800728c <prvCopyDataToQueue>
 8006cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d010      	beq.n	8006d26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	3324      	adds	r3, #36	@ 0x24
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 ffe7 	bl	8007cdc <xTaskRemoveFromEventList>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d14:	4b3f      	ldr	r3, [pc, #252]	@ (8006e14 <xQueueGenericSend+0x200>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	e00a      	b.n	8006d3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d2c:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <xQueueGenericSend+0x200>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d3c:	f001 fd16 	bl	800876c <vPortExitCritical>
				return pdPASS;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e063      	b.n	8006e0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d4a:	f001 fd0f 	bl	800876c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e05c      	b.n	8006e0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 f821 	bl	8007da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d66:	f001 fd01 	bl	800876c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d6a:	f000 fdcf 	bl	800790c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d6e:	f001 fccb 	bl	8008708 <vPortEnterCritical>
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d103      	bne.n	8006d88 <xQueueGenericSend+0x174>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x18a>
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d9e:	f001 fce5 	bl	800876c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006da2:	1d3a      	adds	r2, r7, #4
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 f810 	bl	8007dd0 <xTaskCheckForTimeOut>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d124      	bne.n	8006e00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006db6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006db8:	f000 fb60 	bl	800747c <prvIsQueueFull>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d018      	beq.n	8006df4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 ff60 	bl	8007c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dd2:	f000 faeb 	bl	80073ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dd6:	f000 fda7 	bl	8007928 <xTaskResumeAll>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f47f af7c 	bne.w	8006cda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006de2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <xQueueGenericSend+0x200>)
 8006de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	e772      	b.n	8006cda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006df6:	f000 fad9 	bl	80073ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dfa:	f000 fd95 	bl	8007928 <xTaskResumeAll>
 8006dfe:	e76c      	b.n	8006cda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e02:	f000 fad3 	bl	80073ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e06:	f000 fd8f 	bl	8007928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3738      	adds	r7, #56	@ 0x38
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	@ 0x38
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	623b      	str	r3, [r7, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	61fb      	str	r3, [r7, #28]
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	e7fd      	b.n	8006e60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <xQueueGiveFromISR+0x5c>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <xQueueGiveFromISR+0x60>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <xQueueGiveFromISR+0x62>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61bb      	str	r3, [r7, #24]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e96:	f001 fd17 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	617a      	str	r2, [r7, #20]
 8006eb0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d22b      	bcs.n	8006f1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d112      	bne.n	8006f08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	3324      	adds	r3, #36	@ 0x24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fef4 	bl	8007cdc <xTaskRemoveFromEventList>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e007      	b.n	8006f18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	b25a      	sxtb	r2, r3
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1c:	e001      	b.n	8006f22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3738      	adds	r7, #56	@ 0x38
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	@ 0x38
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61fb      	str	r3, [r7, #28]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f8c:	f001 f866 	bl	800805c <xTaskGetSchedulerState>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <xQueueSemaphoreTake+0x64>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <xQueueSemaphoreTake+0x68>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <xQueueSemaphoreTake+0x6a>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61bb      	str	r3, [r7, #24]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fbe:	f001 fba3 	bl	8008708 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d024      	beq.n	8007018 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fde:	f001 f9e9 	bl	80083b4 <pvTaskIncrementMutexHeldCount>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00f      	beq.n	8007010 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	3310      	adds	r3, #16
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fe71 	bl	8007cdc <xTaskRemoveFromEventList>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007000:	4b54      	ldr	r3, [pc, #336]	@ (8007154 <xQueueSemaphoreTake+0x21c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007010:	f001 fbac 	bl	800876c <vPortExitCritical>
				return pdPASS;
 8007014:	2301      	movs	r3, #1
 8007016:	e098      	b.n	800714a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d112      	bne.n	8007044 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	617b      	str	r3, [r7, #20]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800703c:	f001 fb96 	bl	800876c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007040:	2300      	movs	r3, #0
 8007042:	e082      	b.n	800714a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fea8 	bl	8007da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007058:	f001 fb88 	bl	800876c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800705c:	f000 fc56 	bl	800790c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007060:	f001 fb52 	bl	8008708 <vPortEnterCritical>
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d103      	bne.n	800707a <xQueueSemaphoreTake+0x142>
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007080:	b25b      	sxtb	r3, r3
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d103      	bne.n	8007090 <xQueueSemaphoreTake+0x158>
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007090:	f001 fb6c 	bl	800876c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007094:	463a      	mov	r2, r7
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fe97 	bl	8007dd0 <xTaskCheckForTimeOut>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d132      	bne.n	800710e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070aa:	f000 f9d1 	bl	8007450 <prvIsQueueEmpty>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d026      	beq.n	8007102 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80070bc:	f001 fb24 	bl	8008708 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 ffe7 	bl	8008098 <xTaskPriorityInherit>
 80070ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80070cc:	f001 fb4e 	bl	800876c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d2:	3324      	adds	r3, #36	@ 0x24
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fdd9 	bl	8007c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070e0:	f000 f964 	bl	80073ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070e4:	f000 fc20 	bl	8007928 <xTaskResumeAll>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f47f af67 	bne.w	8006fbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80070f0:	4b18      	ldr	r3, [pc, #96]	@ (8007154 <xQueueSemaphoreTake+0x21c>)
 80070f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	e75d      	b.n	8006fbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007104:	f000 f952 	bl	80073ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007108:	f000 fc0e 	bl	8007928 <xTaskResumeAll>
 800710c:	e757      	b.n	8006fbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800710e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007110:	f000 f94c 	bl	80073ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007114:	f000 fc08 	bl	8007928 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800711a:	f000 f999 	bl	8007450 <prvIsQueueEmpty>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	f43f af4c 	beq.w	8006fbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800712c:	f001 faec 	bl	8008708 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007132:	f000 f893 	bl	800725c <prvGetDisinheritPriorityAfterTimeout>
 8007136:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800713e:	4618      	mov	r0, r3
 8007140:	f001 f8a8 	bl	8008294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007144:	f001 fb12 	bl	800876c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800714a:	4618      	mov	r0, r3
 800714c:	3738      	adds	r7, #56	@ 0x38
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	@ 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	623b      	str	r3, [r7, #32]
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <xQueueReceiveFromISR+0x3c>
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <xQueueReceiveFromISR+0x40>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <xQueueReceiveFromISR+0x42>
 8007198:	2300      	movs	r3, #0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	61fb      	str	r3, [r7, #28]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071b6:	f001 fb87 	bl	80088c8 <vPortValidateInterruptPriority>
	__asm volatile
 80071ba:	f3ef 8211 	mrs	r2, BASEPRI
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	61ba      	str	r2, [r7, #24]
 80071d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02f      	beq.n	8007242 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071f0:	f000 f8b6 	bl	8007360 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d112      	bne.n	800722c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	3310      	adds	r3, #16
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fd62 	bl	8007cdc <xTaskRemoveFromEventList>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00e      	beq.n	800723c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e007      	b.n	800723c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800722c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007230:	3301      	adds	r3, #1
 8007232:	b2db      	uxtb	r3, r3
 8007234:	b25a      	sxtb	r2, r3
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800723c:	2301      	movs	r3, #1
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007240:	e001      	b.n	8007246 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	613b      	str	r3, [r7, #16]
	__asm volatile
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f383 8811 	msr	BASEPRI, r3
}
 8007250:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007254:	4618      	mov	r0, r3
 8007256:	3738      	adds	r7, #56	@ 0x38
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e001      	b.n	800727e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800727e:	68fb      	ldr	r3, [r7, #12]
	}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d14d      	bne.n	800734e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 ff64 	bl	8008184 <xTaskPriorityDisinherit>
 80072bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	e043      	b.n	800734e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d119      	bne.n	8007300 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6858      	ldr	r0, [r3, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	461a      	mov	r2, r3
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	f002 f80f 	bl	80092fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	441a      	add	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d32b      	bcc.n	800734e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	e026      	b.n	800734e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68d8      	ldr	r0, [r3, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	461a      	mov	r2, r3
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	f001 fff5 	bl	80092fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007318:	425b      	negs	r3, r3
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d207      	bcs.n	800733c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	425b      	negs	r3, r3
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d105      	bne.n	800734e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3b01      	subs	r3, #1
 800734c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737a:	441a      	add	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d303      	bcc.n	8007394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68d9      	ldr	r1, [r3, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	461a      	mov	r2, r3
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f001 ffab 	bl	80092fa <memcpy>
	}
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073b4:	f001 f9a8 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c0:	e011      	b.n	80073e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d012      	beq.n	80073f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3324      	adds	r3, #36	@ 0x24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fc84 	bl	8007cdc <xTaskRemoveFromEventList>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073da:	f000 fd5d 	bl	8007e98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dce9      	bgt.n	80073c2 <prvUnlockQueue+0x16>
 80073ee:	e000      	b.n	80073f2 <prvUnlockQueue+0x46>
					break;
 80073f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	22ff      	movs	r2, #255	@ 0xff
 80073f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80073fa:	f001 f9b7 	bl	800876c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073fe:	f001 f983 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007408:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800740a:	e011      	b.n	8007430 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d012      	beq.n	800743a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3310      	adds	r3, #16
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fc5f 	bl	8007cdc <xTaskRemoveFromEventList>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007424:	f000 fd38 	bl	8007e98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	3b01      	subs	r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dce9      	bgt.n	800740c <prvUnlockQueue+0x60>
 8007438:	e000      	b.n	800743c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800743a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	22ff      	movs	r2, #255	@ 0xff
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007444:	f001 f992 	bl	800876c <vPortExitCritical>
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007458:	f001 f956 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e001      	b.n	800746e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800746e:	f001 f97d 	bl	800876c <vPortExitCritical>

	return xReturn;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007484:	f001 f940 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007490:	429a      	cmp	r2, r3
 8007492:	d102      	bne.n	800749a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e001      	b.n	800749e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800749e:	f001 f965 	bl	800876c <vPortExitCritical>

	return xReturn;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	@ 0x38
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	61fb      	str	r3, [r7, #28]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074f6:	2354      	movs	r3, #84	@ 0x54
 80074f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b54      	cmp	r3, #84	@ 0x54
 80074fe:	d00b      	beq.n	8007518 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	61bb      	str	r3, [r7, #24]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007518:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01e      	beq.n	800755e <xTaskCreateStatic+0xb2>
 8007520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01b      	beq.n	800755e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800752e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	2202      	movs	r2, #2
 8007534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007538:	2300      	movs	r3, #0
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f850 	bl	80075f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007558:	f000 f8d6 	bl	8007708 <prvAddNewTaskToReadyList>
 800755c:	e001      	b.n	8007562 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007562:	697b      	ldr	r3, [r7, #20]
	}
 8007564:	4618      	mov	r0, r3
 8007566:	3728      	adds	r7, #40	@ 0x28
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af04      	add	r7, sp, #16
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f001 f9e3 	bl	800894c <pvPortMalloc>
 8007586:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00e      	beq.n	80075ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800758e:	2054      	movs	r0, #84	@ 0x54
 8007590:	f001 f9dc 	bl	800894c <pvPortMalloc>
 8007594:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80075a2:	e005      	b.n	80075b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a4:	6978      	ldr	r0, [r7, #20]
 80075a6:	f001 fa9f 	bl	8008ae8 <vPortFree>
 80075aa:	e001      	b.n	80075b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d017      	beq.n	80075e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	2300      	movs	r3, #0
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	9302      	str	r3, [sp, #8]
 80075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f80e 	bl	80075f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075da:	69f8      	ldr	r0, [r7, #28]
 80075dc:	f000 f894 	bl	8007708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	e002      	b.n	80075ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075ec:	69bb      	ldr	r3, [r7, #24]
	}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b088      	sub	sp, #32
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	607a      	str	r2, [r7, #4]
 8007602:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800760e:	3b01      	subs	r3, #1
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f023 0307 	bic.w	r3, r3, #7
 800761c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	617b      	str	r3, [r7, #20]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01f      	beq.n	8007686 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e012      	b.n	8007672 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	7819      	ldrb	r1, [r3, #0]
 8007654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	3334      	adds	r3, #52	@ 0x34
 800765c:	460a      	mov	r2, r1
 800765e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d9e9      	bls.n	800764c <prvInitialiseNewTask+0x56>
 8007678:	e000      	b.n	800767c <prvInitialiseNewTask+0x86>
			{
				break;
 800767a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007684:	e003      	b.n	800768e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	2b06      	cmp	r3, #6
 8007692:	d901      	bls.n	8007698 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007694:	2306      	movs	r3, #6
 8007696:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800769c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076a2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	2200      	movs	r2, #0
 80076a8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	3304      	adds	r3, #4
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff f88e 	bl	80067d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	3318      	adds	r3, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff f889 	bl	80067d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	f1c3 0207 	rsb	r2, r3, #7
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	68f9      	ldr	r1, [r7, #12]
 80076e6:	69b8      	ldr	r0, [r7, #24]
 80076e8:	f000 fede 	bl	80084a8 <pxPortInitialiseStack>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076fe:	bf00      	nop
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007710:	f000 fffa 	bl	8008708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007714:	4b2a      	ldr	r3, [pc, #168]	@ (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	4a29      	ldr	r2, [pc, #164]	@ (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 800771c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800771e:	4b29      	ldr	r3, [pc, #164]	@ (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007726:	4a27      	ldr	r2, [pc, #156]	@ (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800772c:	4b24      	ldr	r3, [pc, #144]	@ (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d110      	bne.n	8007756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007734:	f000 fbd4 	bl	8007ee0 <prvInitialiseTaskLists>
 8007738:	e00d      	b.n	8007756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800773a:	4b23      	ldr	r3, [pc, #140]	@ (80077c8 <prvAddNewTaskToReadyList+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d109      	bne.n	8007756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007742:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	429a      	cmp	r2, r3
 800774e:	d802      	bhi.n	8007756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007756:	4b1d      	ldr	r3, [pc, #116]	@ (80077cc <prvAddNewTaskToReadyList+0xc4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	4a1b      	ldr	r2, [pc, #108]	@ (80077cc <prvAddNewTaskToReadyList+0xc4>)
 800775e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007764:	2201      	movs	r2, #1
 8007766:	409a      	lsls	r2, r3
 8007768:	4b19      	ldr	r3, [pc, #100]	@ (80077d0 <prvAddNewTaskToReadyList+0xc8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4313      	orrs	r3, r2
 800776e:	4a18      	ldr	r2, [pc, #96]	@ (80077d0 <prvAddNewTaskToReadyList+0xc8>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a15      	ldr	r2, [pc, #84]	@ (80077d4 <prvAddNewTaskToReadyList+0xcc>)
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f7ff f82e 	bl	80067ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800778e:	f000 ffed 	bl	800876c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <prvAddNewTaskToReadyList+0xc0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00e      	beq.n	80077b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800779a:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d207      	bcs.n	80077b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077a8:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <prvAddNewTaskToReadyList+0xd0>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	200009f0 	.word	0x200009f0
 80077c4:	200008f0 	.word	0x200008f0
 80077c8:	200009fc 	.word	0x200009fc
 80077cc:	20000a0c 	.word	0x20000a0c
 80077d0:	200009f8 	.word	0x200009f8
 80077d4:	200008f4 	.word	0x200008f4
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d018      	beq.n	8007820 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ee:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <vTaskDelay+0x64>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <vTaskDelay+0x32>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60bb      	str	r3, [r7, #8]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800780e:	f000 f87d 	bl	800790c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fde1 	bl	80083dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800781a:	f000 f885 	bl	8007928 <xTaskResumeAll>
 800781e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d107      	bne.n	8007836 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <vTaskDelay+0x68>)
 8007828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000a18 	.word	0x20000a18
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	@ 0x28
 800784c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007856:	463a      	mov	r2, r7
 8007858:	1d39      	adds	r1, r7, #4
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	4618      	mov	r0, r3
 8007860:	f7f8 feac 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	9202      	str	r2, [sp, #8]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2300      	movs	r3, #0
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	460a      	mov	r2, r1
 8007876:	491f      	ldr	r1, [pc, #124]	@ (80078f4 <vTaskStartScheduler+0xac>)
 8007878:	481f      	ldr	r0, [pc, #124]	@ (80078f8 <vTaskStartScheduler+0xb0>)
 800787a:	f7ff fe17 	bl	80074ac <xTaskCreateStatic>
 800787e:	4603      	mov	r3, r0
 8007880:	4a1e      	ldr	r2, [pc, #120]	@ (80078fc <vTaskStartScheduler+0xb4>)
 8007882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007884:	4b1d      	ldr	r3, [pc, #116]	@ (80078fc <vTaskStartScheduler+0xb4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e001      	b.n	8007896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d116      	bne.n	80078ca <vTaskStartScheduler+0x82>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	613b      	str	r3, [r7, #16]
}
 80078ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078b0:	4b13      	ldr	r3, [pc, #76]	@ (8007900 <vTaskStartScheduler+0xb8>)
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295
 80078b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078b8:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <vTaskStartScheduler+0xbc>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078be:	4b12      	ldr	r3, [pc, #72]	@ (8007908 <vTaskStartScheduler+0xc0>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078c4:	f000 fe7c 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078c8:	e00f      	b.n	80078ea <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d10b      	bne.n	80078ea <vTaskStartScheduler+0xa2>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <vTaskStartScheduler+0x9e>
}
 80078ea:	bf00      	nop
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	08009eb4 	.word	0x08009eb4
 80078f8:	08007eb1 	.word	0x08007eb1
 80078fc:	20000a14 	.word	0x20000a14
 8007900:	20000a10 	.word	0x20000a10
 8007904:	200009fc 	.word	0x200009fc
 8007908:	200009f4 	.word	0x200009f4

0800790c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007910:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <vTaskSuspendAll+0x18>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	4a03      	ldr	r2, [pc, #12]	@ (8007924 <vTaskSuspendAll+0x18>)
 8007918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800791a:	bf00      	nop
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	20000a18 	.word	0x20000a18

08007928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007936:	4b42      	ldr	r3, [pc, #264]	@ (8007a40 <xTaskResumeAll+0x118>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <xTaskResumeAll+0x2e>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	603b      	str	r3, [r7, #0]
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	e7fd      	b.n	8007952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007956:	f000 fed7 	bl	8008708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800795a:	4b39      	ldr	r3, [pc, #228]	@ (8007a40 <xTaskResumeAll+0x118>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3b01      	subs	r3, #1
 8007960:	4a37      	ldr	r2, [pc, #220]	@ (8007a40 <xTaskResumeAll+0x118>)
 8007962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007964:	4b36      	ldr	r3, [pc, #216]	@ (8007a40 <xTaskResumeAll+0x118>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d161      	bne.n	8007a30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800796c:	4b35      	ldr	r3, [pc, #212]	@ (8007a44 <xTaskResumeAll+0x11c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d05d      	beq.n	8007a30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007974:	e02e      	b.n	80079d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007976:	4b34      	ldr	r3, [pc, #208]	@ (8007a48 <xTaskResumeAll+0x120>)
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3318      	adds	r3, #24
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe ff8e 	bl	80068a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3304      	adds	r3, #4
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe ff89 	bl	80068a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	2201      	movs	r2, #1
 8007998:	409a      	lsls	r2, r3
 800799a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a4c <xTaskResumeAll+0x124>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4313      	orrs	r3, r2
 80079a0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <xTaskResumeAll+0x124>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a27      	ldr	r2, [pc, #156]	@ (8007a50 <xTaskResumeAll+0x128>)
 80079b2:	441a      	add	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe ff15 	bl	80067ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c4:	4b23      	ldr	r3, [pc, #140]	@ (8007a54 <xTaskResumeAll+0x12c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079ce:	4b22      	ldr	r3, [pc, #136]	@ (8007a58 <xTaskResumeAll+0x130>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a48 <xTaskResumeAll+0x120>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1cc      	bne.n	8007976 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079e2:	f000 fb1b 	bl	800801c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079e6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <xTaskResumeAll+0x134>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d010      	beq.n	8007a14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079f2:	f000 f837 	bl	8007a64 <xTaskIncrementTick>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079fc:	4b16      	ldr	r3, [pc, #88]	@ (8007a58 <xTaskResumeAll+0x130>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f1      	bne.n	80079f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a0e:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <xTaskResumeAll+0x134>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a14:	4b10      	ldr	r3, [pc, #64]	@ (8007a58 <xTaskResumeAll+0x130>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a20:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <xTaskResumeAll+0x138>)
 8007a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a30:	f000 fe9c 	bl	800876c <vPortExitCritical>

	return xAlreadyYielded;
 8007a34:	68bb      	ldr	r3, [r7, #8]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000a18 	.word	0x20000a18
 8007a44:	200009f0 	.word	0x200009f0
 8007a48:	200009b0 	.word	0x200009b0
 8007a4c:	200009f8 	.word	0x200009f8
 8007a50:	200008f4 	.word	0x200008f4
 8007a54:	200008f0 	.word	0x200008f0
 8007a58:	20000a04 	.word	0x20000a04
 8007a5c:	20000a00 	.word	0x20000a00
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007bac <xTaskIncrementTick+0x148>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f040 808f 	bne.w	8007b96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a78:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb0 <xTaskIncrementTick+0x14c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a80:	4a4b      	ldr	r2, [pc, #300]	@ (8007bb0 <xTaskIncrementTick+0x14c>)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d121      	bne.n	8007ad0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a8c:	4b49      	ldr	r3, [pc, #292]	@ (8007bb4 <xTaskIncrementTick+0x150>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	603b      	str	r3, [r7, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xTaskIncrementTick+0x46>
 8007aae:	4b41      	ldr	r3, [pc, #260]	@ (8007bb4 <xTaskIncrementTick+0x150>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	4b40      	ldr	r3, [pc, #256]	@ (8007bb8 <xTaskIncrementTick+0x154>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb4 <xTaskIncrementTick+0x150>)
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb8 <xTaskIncrementTick+0x154>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bbc <xTaskIncrementTick+0x158>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8007bbc <xTaskIncrementTick+0x158>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	f000 faa6 	bl	800801c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8007bc0 <xTaskIncrementTick+0x15c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d348      	bcc.n	8007b6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ada:	4b36      	ldr	r3, [pc, #216]	@ (8007bb4 <xTaskIncrementTick+0x150>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae4:	4b36      	ldr	r3, [pc, #216]	@ (8007bc0 <xTaskIncrementTick+0x15c>)
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	601a      	str	r2, [r3, #0]
					break;
 8007aec:	e03e      	b.n	8007b6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aee:	4b31      	ldr	r3, [pc, #196]	@ (8007bb4 <xTaskIncrementTick+0x150>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d203      	bcs.n	8007b0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b06:	4a2e      	ldr	r2, [pc, #184]	@ (8007bc0 <xTaskIncrementTick+0x15c>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b0c:	e02e      	b.n	8007b6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fec6 	bl	80068a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3318      	adds	r3, #24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe febd 	bl	80068a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	2201      	movs	r2, #1
 8007b30:	409a      	lsls	r2, r3
 8007b32:	4b24      	ldr	r3, [pc, #144]	@ (8007bc4 <xTaskIncrementTick+0x160>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	4a22      	ldr	r2, [pc, #136]	@ (8007bc4 <xTaskIncrementTick+0x160>)
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc8 <xTaskIncrementTick+0x164>)
 8007b4a:	441a      	add	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f7fe fe49 	bl	80067ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <xTaskIncrementTick+0x168>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3b9      	bcc.n	8007ada <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6a:	e7b6      	b.n	8007ada <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b6c:	4b17      	ldr	r3, [pc, #92]	@ (8007bcc <xTaskIncrementTick+0x168>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b72:	4915      	ldr	r1, [pc, #84]	@ (8007bc8 <xTaskIncrementTick+0x164>)
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d901      	bls.n	8007b88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b88:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <xTaskIncrementTick+0x16c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e004      	b.n	8007ba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b96:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <xTaskIncrementTick+0x170>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd4 <xTaskIncrementTick+0x170>)
 8007b9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ba0:	697b      	ldr	r3, [r7, #20]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000a18 	.word	0x20000a18
 8007bb0:	200009f4 	.word	0x200009f4
 8007bb4:	200009a8 	.word	0x200009a8
 8007bb8:	200009ac 	.word	0x200009ac
 8007bbc:	20000a08 	.word	0x20000a08
 8007bc0:	20000a10 	.word	0x20000a10
 8007bc4:	200009f8 	.word	0x200009f8
 8007bc8:	200008f4 	.word	0x200008f4
 8007bcc:	200008f0 	.word	0x200008f0
 8007bd0:	20000a04 	.word	0x20000a04
 8007bd4:	20000a00 	.word	0x20000a00

08007bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bde:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <vTaskSwitchContext+0xa4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007be6:	4b26      	ldr	r3, [pc, #152]	@ (8007c80 <vTaskSwitchContext+0xa8>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bec:	e040      	b.n	8007c70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007bee:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <vTaskSwitchContext+0xa8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf4:	4b23      	ldr	r3, [pc, #140]	@ (8007c84 <vTaskSwitchContext+0xac>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	fab3 f383 	clz	r3, r3
 8007c00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	f1c3 031f 	rsb	r3, r3, #31
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	491f      	ldr	r1, [pc, #124]	@ (8007c88 <vTaskSwitchContext+0xb0>)
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <vTaskSwitchContext+0x5a>
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a11      	ldr	r2, [pc, #68]	@ (8007c88 <vTaskSwitchContext+0xb0>)
 8007c42:	4413      	add	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	3308      	adds	r3, #8
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d104      	bne.n	8007c66 <vTaskSwitchContext+0x8e>
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4a07      	ldr	r2, [pc, #28]	@ (8007c8c <vTaskSwitchContext+0xb4>)
 8007c6e:	6013      	str	r3, [r2, #0]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20000a18 	.word	0x20000a18
 8007c80:	20000a04 	.word	0x20000a04
 8007c84:	200009f8 	.word	0x200009f8
 8007c88:	200008f4 	.word	0x200008f4
 8007c8c:	200008f0 	.word	0x200008f0

08007c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb8:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <vTaskPlaceOnEventList+0x48>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fe fdb6 	bl	8006832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	6838      	ldr	r0, [r7, #0]
 8007cca:	f000 fb87 	bl	80083dc <prvAddCurrentTaskToDelayedList>
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200008f0 	.word	0x200008f0

08007cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60fb      	str	r3, [r7, #12]
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fdc8 	bl	80068a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d14:	4b1d      	ldr	r3, [pc, #116]	@ (8007d8c <xTaskRemoveFromEventList+0xb0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d11c      	bne.n	8007d56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fdbf 	bl	80068a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <xTaskRemoveFromEventList+0xb4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	4a16      	ldr	r2, [pc, #88]	@ (8007d90 <xTaskRemoveFromEventList+0xb4>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a13      	ldr	r2, [pc, #76]	@ (8007d94 <xTaskRemoveFromEventList+0xb8>)
 8007d46:	441a      	add	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fd4b 	bl	80067ea <vListInsertEnd>
 8007d54:	e005      	b.n	8007d62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3318      	adds	r3, #24
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	480e      	ldr	r0, [pc, #56]	@ (8007d98 <xTaskRemoveFromEventList+0xbc>)
 8007d5e:	f7fe fd44 	bl	80067ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d66:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <xTaskRemoveFromEventList+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d905      	bls.n	8007d7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <xTaskRemoveFromEventList+0xc4>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e001      	b.n	8007d80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d80:	697b      	ldr	r3, [r7, #20]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000a18 	.word	0x20000a18
 8007d90:	200009f8 	.word	0x200009f8
 8007d94:	200008f4 	.word	0x200008f4
 8007d98:	200009b0 	.word	0x200009b0
 8007d9c:	200008f0 	.word	0x200008f0
 8007da0:	20000a04 	.word	0x20000a04

08007da4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <vTaskInternalSetTimeOutState+0x24>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007db4:	4b05      	ldr	r3, [pc, #20]	@ (8007dcc <vTaskInternalSetTimeOutState+0x28>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20000a08 	.word	0x20000a08
 8007dcc:	200009f4 	.word	0x200009f4

08007dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	613b      	str	r3, [r7, #16]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e16:	f000 fc77 	bl	8008708 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e90 <xTaskCheckForTimeOut+0xc0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d102      	bne.n	8007e3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e023      	b.n	8007e82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <xTaskCheckForTimeOut+0xc4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d007      	beq.n	8007e56 <xTaskCheckForTimeOut+0x86>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d302      	bcc.n	8007e56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e50:	2301      	movs	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	e015      	b.n	8007e82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d20b      	bcs.n	8007e78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff ff99 	bl	8007da4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e004      	b.n	8007e82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e82:	f000 fc73 	bl	800876c <vPortExitCritical>

	return xReturn;
 8007e86:	69fb      	ldr	r3, [r7, #28]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200009f4 	.word	0x200009f4
 8007e94:	20000a08 	.word	0x20000a08

08007e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e9c:	4b03      	ldr	r3, [pc, #12]	@ (8007eac <vTaskMissedYield+0x14>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	20000a04 	.word	0x20000a04

08007eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007eb8:	f000 f852 	bl	8007f60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <prvIdleTask+0x28>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d9f9      	bls.n	8007eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <prvIdleTask+0x2c>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ed4:	e7f0      	b.n	8007eb8 <prvIdleTask+0x8>
 8007ed6:	bf00      	nop
 8007ed8:	200008f4 	.word	0x200008f4
 8007edc:	e000ed04 	.word	0xe000ed04

08007ee0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	e00c      	b.n	8007f06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4a12      	ldr	r2, [pc, #72]	@ (8007f40 <prvInitialiseTaskLists+0x60>)
 8007ef8:	4413      	add	r3, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fc48 	bl	8006790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3301      	adds	r3, #1
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b06      	cmp	r3, #6
 8007f0a:	d9ef      	bls.n	8007eec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f0c:	480d      	ldr	r0, [pc, #52]	@ (8007f44 <prvInitialiseTaskLists+0x64>)
 8007f0e:	f7fe fc3f 	bl	8006790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f12:	480d      	ldr	r0, [pc, #52]	@ (8007f48 <prvInitialiseTaskLists+0x68>)
 8007f14:	f7fe fc3c 	bl	8006790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f18:	480c      	ldr	r0, [pc, #48]	@ (8007f4c <prvInitialiseTaskLists+0x6c>)
 8007f1a:	f7fe fc39 	bl	8006790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f1e:	480c      	ldr	r0, [pc, #48]	@ (8007f50 <prvInitialiseTaskLists+0x70>)
 8007f20:	f7fe fc36 	bl	8006790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f24:	480b      	ldr	r0, [pc, #44]	@ (8007f54 <prvInitialiseTaskLists+0x74>)
 8007f26:	f7fe fc33 	bl	8006790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <prvInitialiseTaskLists+0x78>)
 8007f2c:	4a05      	ldr	r2, [pc, #20]	@ (8007f44 <prvInitialiseTaskLists+0x64>)
 8007f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <prvInitialiseTaskLists+0x7c>)
 8007f32:	4a05      	ldr	r2, [pc, #20]	@ (8007f48 <prvInitialiseTaskLists+0x68>)
 8007f34:	601a      	str	r2, [r3, #0]
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200008f4 	.word	0x200008f4
 8007f44:	20000980 	.word	0x20000980
 8007f48:	20000994 	.word	0x20000994
 8007f4c:	200009b0 	.word	0x200009b0
 8007f50:	200009c4 	.word	0x200009c4
 8007f54:	200009dc 	.word	0x200009dc
 8007f58:	200009a8 	.word	0x200009a8
 8007f5c:	200009ac 	.word	0x200009ac

08007f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f66:	e019      	b.n	8007f9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f68:	f000 fbce 	bl	8008708 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6c:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <prvCheckTasksWaitingTermination+0x50>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fc93 	bl	80068a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <prvCheckTasksWaitingTermination+0x54>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	4a0b      	ldr	r2, [pc, #44]	@ (8007fb4 <prvCheckTasksWaitingTermination+0x54>)
 8007f86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f88:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb8 <prvCheckTasksWaitingTermination+0x58>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb8 <prvCheckTasksWaitingTermination+0x58>)
 8007f90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f92:	f000 fbeb 	bl	800876c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f810 	bl	8007fbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <prvCheckTasksWaitingTermination+0x58>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e1      	bne.n	8007f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200009c4 	.word	0x200009c4
 8007fb4:	200009f0 	.word	0x200009f0
 8007fb8:	200009d8 	.word	0x200009d8

08007fbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d108      	bne.n	8007fe0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fd88 	bl	8008ae8 <vPortFree>
				vPortFree( pxTCB );
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fd85 	bl	8008ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fde:	e019      	b.n	8008014 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d103      	bne.n	8007ff2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fd7c 	bl	8008ae8 <vPortFree>
	}
 8007ff0:	e010      	b.n	8008014 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d00b      	beq.n	8008014 <prvDeleteTCB+0x58>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	60fb      	str	r3, [r7, #12]
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <prvDeleteTCB+0x54>
	}
 8008014:	bf00      	nop
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008022:	4b0c      	ldr	r3, [pc, #48]	@ (8008054 <prvResetNextTaskUnblockTime+0x38>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <prvResetNextTaskUnblockTime+0x3c>)
 800802e:	f04f 32ff 	mov.w	r2, #4294967295
 8008032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008034:	e008      	b.n	8008048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008036:	4b07      	ldr	r3, [pc, #28]	@ (8008054 <prvResetNextTaskUnblockTime+0x38>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	4a04      	ldr	r2, [pc, #16]	@ (8008058 <prvResetNextTaskUnblockTime+0x3c>)
 8008046:	6013      	str	r3, [r2, #0]
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	200009a8 	.word	0x200009a8
 8008058:	20000a10 	.word	0x20000a10

0800805c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008062:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <xTaskGetSchedulerState+0x34>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800806a:	2301      	movs	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
 800806e:	e008      	b.n	8008082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008070:	4b08      	ldr	r3, [pc, #32]	@ (8008094 <xTaskGetSchedulerState+0x38>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008078:	2302      	movs	r3, #2
 800807a:	607b      	str	r3, [r7, #4]
 800807c:	e001      	b.n	8008082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800807e:	2300      	movs	r3, #0
 8008080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008082:	687b      	ldr	r3, [r7, #4]
	}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	200009fc 	.word	0x200009fc
 8008094:	20000a18 	.word	0x20000a18

08008098 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d05e      	beq.n	800816c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b2:	4b31      	ldr	r3, [pc, #196]	@ (8008178 <xTaskPriorityInherit+0xe0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d24e      	bcs.n	800815a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	db06      	blt.n	80080d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	4b2c      	ldr	r3, [pc, #176]	@ (8008178 <xTaskPriorityInherit+0xe0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ca:	f1c3 0207 	rsb	r2, r3, #7
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6959      	ldr	r1, [r3, #20]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4a26      	ldr	r2, [pc, #152]	@ (800817c <xTaskPriorityInherit+0xe4>)
 80080e4:	4413      	add	r3, r2
 80080e6:	4299      	cmp	r1, r3
 80080e8:	d12f      	bne.n	800814a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fbd8 	bl	80068a4 <uxListRemove>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	2201      	movs	r2, #1
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	43da      	mvns	r2, r3
 8008106:	4b1e      	ldr	r3, [pc, #120]	@ (8008180 <xTaskPriorityInherit+0xe8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4013      	ands	r3, r2
 800810c:	4a1c      	ldr	r2, [pc, #112]	@ (8008180 <xTaskPriorityInherit+0xe8>)
 800810e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008110:	4b19      	ldr	r3, [pc, #100]	@ (8008178 <xTaskPriorityInherit+0xe0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	4b17      	ldr	r3, [pc, #92]	@ (8008180 <xTaskPriorityInherit+0xe8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4313      	orrs	r3, r2
 8008128:	4a15      	ldr	r2, [pc, #84]	@ (8008180 <xTaskPriorityInherit+0xe8>)
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a10      	ldr	r2, [pc, #64]	@ (800817c <xTaskPriorityInherit+0xe4>)
 800813a:	441a      	add	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fb51 	bl	80067ea <vListInsertEnd>
 8008148:	e004      	b.n	8008154 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800814a:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <xTaskPriorityInherit+0xe0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e008      	b.n	800816c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800815e:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <xTaskPriorityInherit+0xe0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	429a      	cmp	r2, r3
 8008166:	d201      	bcs.n	800816c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008168:	2301      	movs	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800816c:	68fb      	ldr	r3, [r7, #12]
	}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	200008f0 	.word	0x200008f0
 800817c:	200008f4 	.word	0x200008f4
 8008180:	200009f8 	.word	0x200009f8

08008184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d070      	beq.n	800827c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800819a:	4b3b      	ldr	r3, [pc, #236]	@ (8008288 <xTaskPriorityDisinherit+0x104>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d00b      	beq.n	80081bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	60fb      	str	r3, [r7, #12]
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	60bb      	str	r3, [r7, #8]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e0:	1e5a      	subs	r2, r3, #1
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d044      	beq.n	800827c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d140      	bne.n	800827c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fb50 	bl	80068a4 <uxListRemove>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d115      	bne.n	8008236 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820e:	491f      	ldr	r1, [pc, #124]	@ (800828c <xTaskPriorityDisinherit+0x108>)
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <xTaskPriorityDisinherit+0xb2>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008224:	2201      	movs	r2, #1
 8008226:	fa02 f303 	lsl.w	r3, r2, r3
 800822a:	43da      	mvns	r2, r3
 800822c:	4b18      	ldr	r3, [pc, #96]	@ (8008290 <xTaskPriorityDisinherit+0x10c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4013      	ands	r3, r2
 8008232:	4a17      	ldr	r2, [pc, #92]	@ (8008290 <xTaskPriorityDisinherit+0x10c>)
 8008234:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	f1c3 0207 	rsb	r2, r3, #7
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	2201      	movs	r2, #1
 8008250:	409a      	lsls	r2, r3
 8008252:	4b0f      	ldr	r3, [pc, #60]	@ (8008290 <xTaskPriorityDisinherit+0x10c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4313      	orrs	r3, r2
 8008258:	4a0d      	ldr	r2, [pc, #52]	@ (8008290 <xTaskPriorityDisinherit+0x10c>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4a08      	ldr	r2, [pc, #32]	@ (800828c <xTaskPriorityDisinherit+0x108>)
 800826a:	441a      	add	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7fe fab9 	bl	80067ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800827c:	697b      	ldr	r3, [r7, #20]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200008f0 	.word	0x200008f0
 800828c:	200008f4 	.word	0x200008f4
 8008290:	200009f8 	.word	0x200009f8

08008294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d079      	beq.n	80083a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d902      	bls.n	80082dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	61fb      	str	r3, [r7, #28]
 80082da:	e002      	b.n	80082e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d059      	beq.n	80083a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d154      	bne.n	80083a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082f6:	4b2c      	ldr	r3, [pc, #176]	@ (80083a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d10b      	bne.n	8008318 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60bb      	str	r3, [r7, #8]
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db04      	blt.n	8008336 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f1c3 0207 	rsb	r2, r3, #7
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	6959      	ldr	r1, [r3, #20]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a19      	ldr	r2, [pc, #100]	@ (80083ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008346:	4413      	add	r3, r2
 8008348:	4299      	cmp	r1, r3
 800834a:	d129      	bne.n	80083a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe faa7 	bl	80068a4 <uxListRemove>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008360:	2201      	movs	r2, #1
 8008362:	fa02 f303 	lsl.w	r3, r2, r3
 8008366:	43da      	mvns	r2, r3
 8008368:	4b11      	ldr	r3, [pc, #68]	@ (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4013      	ands	r3, r2
 800836e:	4a10      	ldr	r2, [pc, #64]	@ (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008370:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008376:	2201      	movs	r2, #1
 8008378:	409a      	lsls	r2, r3
 800837a:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4313      	orrs	r3, r2
 8008380:	4a0b      	ldr	r2, [pc, #44]	@ (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4a06      	ldr	r2, [pc, #24]	@ (80083ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008392:	441a      	add	r2, r3
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	3304      	adds	r3, #4
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f7fe fa25 	bl	80067ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083a0:	bf00      	nop
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200008f0 	.word	0x200008f0
 80083ac:	200008f4 	.word	0x200008f4
 80083b0:	200009f8 	.word	0x200009f8

080083b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083b8:	4b07      	ldr	r3, [pc, #28]	@ (80083d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d004      	beq.n	80083ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083c0:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083c6:	3201      	adds	r2, #1
 80083c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80083ca:	4b03      	ldr	r3, [pc, #12]	@ (80083d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083cc:	681b      	ldr	r3, [r3, #0]
	}
 80083ce:	4618      	mov	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	200008f0 	.word	0x200008f0

080083dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083e6:	4b29      	ldr	r3, [pc, #164]	@ (800848c <prvAddCurrentTaskToDelayedList+0xb0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ec:	4b28      	ldr	r3, [pc, #160]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fa56 	bl	80068a4 <uxListRemove>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083fe:	4b24      	ldr	r3, [pc, #144]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008404:	2201      	movs	r2, #1
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	43da      	mvns	r2, r3
 800840c:	4b21      	ldr	r3, [pc, #132]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xb8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4013      	ands	r3, r2
 8008412:	4a20      	ldr	r2, [pc, #128]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008414:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d10a      	bne.n	8008434 <prvAddCurrentTaskToDelayedList+0x58>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008424:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	481a      	ldr	r0, [pc, #104]	@ (8008498 <prvAddCurrentTaskToDelayedList+0xbc>)
 800842e:	f7fe f9dc 	bl	80067ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008432:	e026      	b.n	8008482 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800843c:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	429a      	cmp	r2, r3
 800844a:	d209      	bcs.n	8008460 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844c:	4b13      	ldr	r3, [pc, #76]	@ (800849c <prvAddCurrentTaskToDelayedList+0xc0>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fe f9ea 	bl	8006832 <vListInsert>
}
 800845e:	e010      	b.n	8008482 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008460:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7fe f9e0 	bl	8006832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008472:	4b0c      	ldr	r3, [pc, #48]	@ (80084a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	429a      	cmp	r2, r3
 800847a:	d202      	bcs.n	8008482 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800847c:	4a09      	ldr	r2, [pc, #36]	@ (80084a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6013      	str	r3, [r2, #0]
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200009f4 	.word	0x200009f4
 8008490:	200008f0 	.word	0x200008f0
 8008494:	200009f8 	.word	0x200009f8
 8008498:	200009dc 	.word	0x200009dc
 800849c:	200009ac 	.word	0x200009ac
 80084a0:	200009a8 	.word	0x200009a8
 80084a4:	20000a10 	.word	0x20000a10

080084a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3b04      	subs	r3, #4
 80084b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d8:	4a0c      	ldr	r2, [pc, #48]	@ (800850c <pxPortInitialiseStack+0x64>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3b14      	subs	r3, #20
 80084e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f06f 0202 	mvn.w	r2, #2
 80084f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3b20      	subs	r3, #32
 80084fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084fe:	68fb      	ldr	r3, [r7, #12]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	08008511 	.word	0x08008511

08008510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <prvTaskExitError+0x58>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d00b      	beq.n	800853c <prvTaskExitError+0x2c>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60fb      	str	r3, [r7, #12]
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <prvTaskExitError+0x28>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60bb      	str	r3, [r7, #8]
}
 800854e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008550:	bf00      	nop
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0fc      	beq.n	8008552 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000030 	.word	0x20000030
 800856c:	00000000 	.word	0x00000000

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	@ (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	@ (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085c6:	4b47      	ldr	r3, [pc, #284]	@ (80086e4 <xPortStartScheduler+0x124>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a47      	ldr	r2, [pc, #284]	@ (80086e8 <xPortStartScheduler+0x128>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10b      	bne.n	80085e8 <xPortStartScheduler+0x28>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085e8:	4b3e      	ldr	r3, [pc, #248]	@ (80086e4 <xPortStartScheduler+0x124>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a3f      	ldr	r2, [pc, #252]	@ (80086ec <xPortStartScheduler+0x12c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d10b      	bne.n	800860a <xPortStartScheduler+0x4a>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	613b      	str	r3, [r7, #16]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800860a:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <xPortStartScheduler+0x130>)
 800860c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	22ff      	movs	r2, #255	@ 0xff
 800861a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800862c:	b2da      	uxtb	r2, r3
 800862e:	4b31      	ldr	r3, [pc, #196]	@ (80086f4 <xPortStartScheduler+0x134>)
 8008630:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008632:	4b31      	ldr	r3, [pc, #196]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008634:	2207      	movs	r2, #7
 8008636:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008638:	e009      	b.n	800864e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800863a:	4b2f      	ldr	r3, [pc, #188]	@ (80086f8 <xPortStartScheduler+0x138>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3b01      	subs	r3, #1
 8008640:	4a2d      	ldr	r2, [pc, #180]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008642:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008656:	2b80      	cmp	r3, #128	@ 0x80
 8008658:	d0ef      	beq.n	800863a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800865a:	4b27      	ldr	r3, [pc, #156]	@ (80086f8 <xPortStartScheduler+0x138>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1c3 0307 	rsb	r3, r3, #7
 8008662:	2b04      	cmp	r3, #4
 8008664:	d00b      	beq.n	800867e <xPortStartScheduler+0xbe>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800867e:	4b1e      	ldr	r3, [pc, #120]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	4a1c      	ldr	r2, [pc, #112]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008688:	4b1b      	ldr	r3, [pc, #108]	@ (80086f8 <xPortStartScheduler+0x138>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008690:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <xPortStartScheduler+0x138>)
 8008692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800869c:	4b17      	ldr	r3, [pc, #92]	@ (80086fc <xPortStartScheduler+0x13c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a16      	ldr	r2, [pc, #88]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a8:	4b14      	ldr	r3, [pc, #80]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a13      	ldr	r2, [pc, #76]	@ (80086fc <xPortStartScheduler+0x13c>)
 80086ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086b4:	f000 f8da 	bl	800886c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b8:	4b11      	ldr	r3, [pc, #68]	@ (8008700 <xPortStartScheduler+0x140>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086be:	f000 f8f9 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086c2:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <xPortStartScheduler+0x144>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008704 <xPortStartScheduler+0x144>)
 80086c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ce:	f7ff ff63 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086d2:	f7ff fa81 	bl	8007bd8 <vTaskSwitchContext>
	prvTaskExitError();
 80086d6:	f7ff ff1b 	bl	8008510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	e000ed00 	.word	0xe000ed00
 80086e8:	410fc271 	.word	0x410fc271
 80086ec:	410fc270 	.word	0x410fc270
 80086f0:	e000e400 	.word	0xe000e400
 80086f4:	20000a1c 	.word	0x20000a1c
 80086f8:	20000a20 	.word	0x20000a20
 80086fc:	e000ed20 	.word	0xe000ed20
 8008700:	20000030 	.word	0x20000030
 8008704:	e000ef34 	.word	0xe000ef34

08008708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
}
 8008720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008722:	4b10      	ldr	r3, [pc, #64]	@ (8008764 <vPortEnterCritical+0x5c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	4a0e      	ldr	r2, [pc, #56]	@ (8008764 <vPortEnterCritical+0x5c>)
 800872a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800872c:	4b0d      	ldr	r3, [pc, #52]	@ (8008764 <vPortEnterCritical+0x5c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d110      	bne.n	8008756 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008734:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <vPortEnterCritical+0x60>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <vPortEnterCritical+0x4e>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	603b      	str	r3, [r7, #0]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vPortEnterCritical+0x4a>
	}
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20000030 	.word	0x20000030
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008772:	4b12      	ldr	r3, [pc, #72]	@ (80087bc <vPortExitCritical+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <vPortExitCritical+0x26>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	607b      	str	r3, [r7, #4]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <vPortExitCritical+0x50>)
 800879a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800879c:	4b07      	ldr	r3, [pc, #28]	@ (80087bc <vPortExitCritical+0x50>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <vPortExitCritical+0x44>
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f383 8811 	msr	BASEPRI, r3
}
 80087ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20000030 	.word	0x20000030

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	@ (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f7ff f9f2 	bl	8007bd8 <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008842:	f7ff f90f 	bl	8007a64 <xTaskIncrementTick>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884c:	4b06      	ldr	r3, [pc, #24]	@ (8008868 <SysTick_Handler+0x40>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008870:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008876:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <vPortSetupTimerInterrupt+0x38>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800887c:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <vPortSetupTimerInterrupt+0x40>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	099b      	lsrs	r3, r3, #6
 8008888:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <vPortSetupTimerInterrupt+0x44>)
 800888a:	3b01      	subs	r3, #1
 800888c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888e:	4b04      	ldr	r3, [pc, #16]	@ (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008890:	2207      	movs	r2, #7
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	20000024 	.word	0x20000024
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	e000e014 	.word	0xe000e014

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d915      	bls.n	8008906 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a18      	ldr	r2, [pc, #96]	@ (800893c <vPortValidateInterruptPriority+0x74>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b16      	ldr	r3, [pc, #88]	@ (8008940 <vPortValidateInterruptPriority+0x78>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20b      	bcs.n	8008906 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	e7fd      	b.n	8008902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008906:	4b0f      	ldr	r3, [pc, #60]	@ (8008944 <vPortValidateInterruptPriority+0x7c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800890e:	4b0e      	ldr	r3, [pc, #56]	@ (8008948 <vPortValidateInterruptPriority+0x80>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d90b      	bls.n	800892e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	603b      	str	r3, [r7, #0]
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	e7fd      	b.n	800892a <vPortValidateInterruptPriority+0x62>
	}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e3f0 	.word	0xe000e3f0
 8008940:	20000a1c 	.word	0x20000a1c
 8008944:	e000ed0c 	.word	0xe000ed0c
 8008948:	20000a20 	.word	0x20000a20

0800894c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	@ 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008958:	f7fe ffd8 	bl	800790c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800895c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad0 <pvPortMalloc+0x184>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008964:	f000 f924 	bl	8008bb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008968:	4b5a      	ldr	r3, [pc, #360]	@ (8008ad4 <pvPortMalloc+0x188>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4013      	ands	r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 8095 	bne.w	8008aa0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01e      	beq.n	80089ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800897c:	2208      	movs	r2, #8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d015      	beq.n	80089ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	3308      	adds	r3, #8
 8008996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <pvPortMalloc+0x6e>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617b      	str	r3, [r7, #20]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06f      	beq.n	8008aa0 <pvPortMalloc+0x154>
 80089c0:	4b45      	ldr	r3, [pc, #276]	@ (8008ad8 <pvPortMalloc+0x18c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d86a      	bhi.n	8008aa0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089ca:	4b44      	ldr	r3, [pc, #272]	@ (8008adc <pvPortMalloc+0x190>)
 80089cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089ce:	4b43      	ldr	r3, [pc, #268]	@ (8008adc <pvPortMalloc+0x190>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089d4:	e004      	b.n	80089e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d903      	bls.n	80089f2 <pvPortMalloc+0xa6>
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f1      	bne.n	80089d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089f2:	4b37      	ldr	r3, [pc, #220]	@ (8008ad0 <pvPortMalloc+0x184>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d051      	beq.n	8008aa0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2208      	movs	r2, #8
 8008a02:	4413      	add	r3, r2
 8008a04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	2308      	movs	r3, #8
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d920      	bls.n	8008a60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <pvPortMalloc+0xfc>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a5a:	69b8      	ldr	r0, [r7, #24]
 8008a5c:	f000 f90a 	bl	8008c74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae0 <pvPortMalloc+0x194>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d203      	bcs.n	8008a82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <pvPortMalloc+0x18c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a18      	ldr	r2, [pc, #96]	@ (8008ae0 <pvPortMalloc+0x194>)
 8008a80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <pvPortMalloc+0x188>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a96:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <pvPortMalloc+0x198>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	4a11      	ldr	r2, [pc, #68]	@ (8008ae4 <pvPortMalloc+0x198>)
 8008a9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa0:	f7fe ff42 	bl	8007928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <pvPortMalloc+0x17a>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3728      	adds	r7, #40	@ 0x28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200015e4 	.word	0x200015e4
 8008ad4:	200015f8 	.word	0x200015f8
 8008ad8:	200015e8 	.word	0x200015e8
 8008adc:	200015dc 	.word	0x200015dc
 8008ae0:	200015ec 	.word	0x200015ec
 8008ae4:	200015f0 	.word	0x200015f0

08008ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d04f      	beq.n	8008b9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008afa:	2308      	movs	r3, #8
 8008afc:	425b      	negs	r3, r3
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ba4 <vPortFree+0xbc>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <vPortFree+0x46>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60fb      	str	r3, [r7, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00b      	beq.n	8008b4e <vPortFree+0x66>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	60bb      	str	r3, [r7, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	e7fd      	b.n	8008b4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <vPortFree+0xbc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d11a      	bne.n	8008b9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <vPortFree+0xbc>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	401a      	ands	r2, r3
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b74:	f7fe feca 	bl	800790c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <vPortFree+0xc0>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4413      	add	r3, r2
 8008b82:	4a09      	ldr	r2, [pc, #36]	@ (8008ba8 <vPortFree+0xc0>)
 8008b84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b86:	6938      	ldr	r0, [r7, #16]
 8008b88:	f000 f874 	bl	8008c74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b8c:	4b07      	ldr	r3, [pc, #28]	@ (8008bac <vPortFree+0xc4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a06      	ldr	r2, [pc, #24]	@ (8008bac <vPortFree+0xc4>)
 8008b94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b96:	f7fe fec7 	bl	8007928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b9a:	bf00      	nop
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200015f8 	.word	0x200015f8
 8008ba8:	200015e8 	.word	0x200015e8
 8008bac:	200015f4 	.word	0x200015f4

08008bb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008bba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bbc:	4b27      	ldr	r3, [pc, #156]	@ (8008c5c <prvHeapInit+0xac>)
 8008bbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3307      	adds	r3, #7
 8008bce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	4a1f      	ldr	r2, [pc, #124]	@ (8008c5c <prvHeapInit+0xac>)
 8008be0:	4413      	add	r3, r2
 8008be2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008be8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <prvHeapInit+0xb0>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bee:	4b1c      	ldr	r3, [pc, #112]	@ (8008c60 <prvHeapInit+0xb0>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0307 	bic.w	r3, r3, #7
 8008c0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4a15      	ldr	r2, [pc, #84]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c12:	4b14      	ldr	r3, [pc, #80]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c1a:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c30:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <prvHeapInit+0xb4>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c68 <prvHeapInit+0xb8>)
 8008c3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	4a09      	ldr	r2, [pc, #36]	@ (8008c6c <prvHeapInit+0xbc>)
 8008c46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c48:	4b09      	ldr	r3, [pc, #36]	@ (8008c70 <prvHeapInit+0xc0>)
 8008c4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c4e:	601a      	str	r2, [r3, #0]
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	20000a24 	.word	0x20000a24
 8008c60:	200015dc 	.word	0x200015dc
 8008c64:	200015e4 	.word	0x200015e4
 8008c68:	200015ec 	.word	0x200015ec
 8008c6c:	200015e8 	.word	0x200015e8
 8008c70:	200015f8 	.word	0x200015f8

08008c74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c7c:	4b28      	ldr	r3, [pc, #160]	@ (8008d20 <prvInsertBlockIntoFreeList+0xac>)
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e002      	b.n	8008c88 <prvInsertBlockIntoFreeList+0x14>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d8f7      	bhi.n	8008c82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d108      	bne.n	8008cb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	441a      	add	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	441a      	add	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d118      	bne.n	8008cfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	4b15      	ldr	r3, [pc, #84]	@ (8008d24 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d00d      	beq.n	8008cf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	441a      	add	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e008      	b.n	8008d04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	e003      	b.n	8008d04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d002      	beq.n	8008d12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	200015dc 	.word	0x200015dc
 8008d24:	200015e4 	.word	0x200015e4

08008d28 <__itoa>:
 8008d28:	1e93      	subs	r3, r2, #2
 8008d2a:	2b22      	cmp	r3, #34	@ 0x22
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	460c      	mov	r4, r1
 8008d30:	d904      	bls.n	8008d3c <__itoa+0x14>
 8008d32:	2300      	movs	r3, #0
 8008d34:	700b      	strb	r3, [r1, #0]
 8008d36:	461c      	mov	r4, r3
 8008d38:	4620      	mov	r0, r4
 8008d3a:	bd10      	pop	{r4, pc}
 8008d3c:	2a0a      	cmp	r2, #10
 8008d3e:	d109      	bne.n	8008d54 <__itoa+0x2c>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	da07      	bge.n	8008d54 <__itoa+0x2c>
 8008d44:	232d      	movs	r3, #45	@ 0x2d
 8008d46:	700b      	strb	r3, [r1, #0]
 8008d48:	4240      	negs	r0, r0
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4421      	add	r1, r4
 8008d4e:	f000 f805 	bl	8008d5c <__utoa>
 8008d52:	e7f1      	b.n	8008d38 <__itoa+0x10>
 8008d54:	2100      	movs	r1, #0
 8008d56:	e7f9      	b.n	8008d4c <__itoa+0x24>

08008d58 <itoa>:
 8008d58:	f7ff bfe6 	b.w	8008d28 <__itoa>

08008d5c <__utoa>:
 8008d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5e:	4c1f      	ldr	r4, [pc, #124]	@ (8008ddc <__utoa+0x80>)
 8008d60:	b08b      	sub	sp, #44	@ 0x2c
 8008d62:	4605      	mov	r5, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	466e      	mov	r6, sp
 8008d68:	f104 0c20 	add.w	ip, r4, #32
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	6861      	ldr	r1, [r4, #4]
 8008d70:	4637      	mov	r7, r6
 8008d72:	c703      	stmia	r7!, {r0, r1}
 8008d74:	3408      	adds	r4, #8
 8008d76:	4564      	cmp	r4, ip
 8008d78:	463e      	mov	r6, r7
 8008d7a:	d1f7      	bne.n	8008d6c <__utoa+0x10>
 8008d7c:	7921      	ldrb	r1, [r4, #4]
 8008d7e:	7139      	strb	r1, [r7, #4]
 8008d80:	1e91      	subs	r1, r2, #2
 8008d82:	6820      	ldr	r0, [r4, #0]
 8008d84:	6038      	str	r0, [r7, #0]
 8008d86:	2922      	cmp	r1, #34	@ 0x22
 8008d88:	f04f 0100 	mov.w	r1, #0
 8008d8c:	d904      	bls.n	8008d98 <__utoa+0x3c>
 8008d8e:	7019      	strb	r1, [r3, #0]
 8008d90:	460b      	mov	r3, r1
 8008d92:	4618      	mov	r0, r3
 8008d94:	b00b      	add	sp, #44	@ 0x2c
 8008d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d98:	1e58      	subs	r0, r3, #1
 8008d9a:	4684      	mov	ip, r0
 8008d9c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008da0:	fb02 5617 	mls	r6, r2, r7, r5
 8008da4:	3628      	adds	r6, #40	@ 0x28
 8008da6:	446e      	add	r6, sp
 8008da8:	460c      	mov	r4, r1
 8008daa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008dae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008db2:	462e      	mov	r6, r5
 8008db4:	42b2      	cmp	r2, r6
 8008db6:	f101 0101 	add.w	r1, r1, #1
 8008dba:	463d      	mov	r5, r7
 8008dbc:	d9ee      	bls.n	8008d9c <__utoa+0x40>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	545a      	strb	r2, [r3, r1]
 8008dc2:	1919      	adds	r1, r3, r4
 8008dc4:	1aa5      	subs	r5, r4, r2
 8008dc6:	42aa      	cmp	r2, r5
 8008dc8:	dae3      	bge.n	8008d92 <__utoa+0x36>
 8008dca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008dce:	780e      	ldrb	r6, [r1, #0]
 8008dd0:	7006      	strb	r6, [r0, #0]
 8008dd2:	3201      	adds	r2, #1
 8008dd4:	f801 5901 	strb.w	r5, [r1], #-1
 8008dd8:	e7f4      	b.n	8008dc4 <__utoa+0x68>
 8008dda:	bf00      	nop
 8008ddc:	0800ac60 	.word	0x0800ac60

08008de0 <std>:
 8008de0:	2300      	movs	r3, #0
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dee:	6083      	str	r3, [r0, #8]
 8008df0:	8181      	strh	r1, [r0, #12]
 8008df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008df4:	81c2      	strh	r2, [r0, #14]
 8008df6:	6183      	str	r3, [r0, #24]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	305c      	adds	r0, #92	@ 0x5c
 8008dfe:	f000 fa01 	bl	8009204 <memset>
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <std+0x58>)
 8008e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e06:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <std+0x5c>)
 8008e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x60>)
 8008e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <std+0x64>)
 8008e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <std+0x68>)
 8008e14:	6224      	str	r4, [r4, #32]
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d006      	beq.n	8008e28 <std+0x48>
 8008e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e1e:	4294      	cmp	r4, r2
 8008e20:	d002      	beq.n	8008e28 <std+0x48>
 8008e22:	33d0      	adds	r3, #208	@ 0xd0
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d105      	bne.n	8008e34 <std+0x54>
 8008e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e30:	f000 ba60 	b.w	80092f4 <__retarget_lock_init_recursive>
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	bf00      	nop
 8008e38:	08009055 	.word	0x08009055
 8008e3c:	08009077 	.word	0x08009077
 8008e40:	080090af 	.word	0x080090af
 8008e44:	080090d3 	.word	0x080090d3
 8008e48:	200015fc 	.word	0x200015fc

08008e4c <stdio_exit_handler>:
 8008e4c:	4a02      	ldr	r2, [pc, #8]	@ (8008e58 <stdio_exit_handler+0xc>)
 8008e4e:	4903      	ldr	r1, [pc, #12]	@ (8008e5c <stdio_exit_handler+0x10>)
 8008e50:	4803      	ldr	r0, [pc, #12]	@ (8008e60 <stdio_exit_handler+0x14>)
 8008e52:	f000 b869 	b.w	8008f28 <_fwalk_sglue>
 8008e56:	bf00      	nop
 8008e58:	20000034 	.word	0x20000034
 8008e5c:	08009bad 	.word	0x08009bad
 8008e60:	20000044 	.word	0x20000044

08008e64 <cleanup_stdio>:
 8008e64:	6841      	ldr	r1, [r0, #4]
 8008e66:	4b0c      	ldr	r3, [pc, #48]	@ (8008e98 <cleanup_stdio+0x34>)
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	d001      	beq.n	8008e74 <cleanup_stdio+0x10>
 8008e70:	f000 fe9c 	bl	8009bac <_fflush_r>
 8008e74:	68a1      	ldr	r1, [r4, #8]
 8008e76:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <cleanup_stdio+0x38>)
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d002      	beq.n	8008e82 <cleanup_stdio+0x1e>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fe95 	bl	8009bac <_fflush_r>
 8008e82:	68e1      	ldr	r1, [r4, #12]
 8008e84:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <cleanup_stdio+0x3c>)
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d004      	beq.n	8008e94 <cleanup_stdio+0x30>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e90:	f000 be8c 	b.w	8009bac <_fflush_r>
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	bf00      	nop
 8008e98:	200015fc 	.word	0x200015fc
 8008e9c:	20001664 	.word	0x20001664
 8008ea0:	200016cc 	.word	0x200016cc

08008ea4 <global_stdio_init.part.0>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <global_stdio_init.part.0+0x30>)
 8008ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ed8 <global_stdio_init.part.0+0x34>)
 8008eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008edc <global_stdio_init.part.0+0x38>)
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	f7ff ff94 	bl	8008de0 <std>
 8008eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	2109      	movs	r1, #9
 8008ec0:	f7ff ff8e 	bl	8008de0 <std>
 8008ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ec8:	2202      	movs	r2, #2
 8008eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ece:	2112      	movs	r1, #18
 8008ed0:	f7ff bf86 	b.w	8008de0 <std>
 8008ed4:	20001734 	.word	0x20001734
 8008ed8:	200015fc 	.word	0x200015fc
 8008edc:	08008e4d 	.word	0x08008e4d

08008ee0 <__sfp_lock_acquire>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__sfp_lock_acquire+0x8>)
 8008ee2:	f000 ba08 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	2000173d 	.word	0x2000173d

08008eec <__sfp_lock_release>:
 8008eec:	4801      	ldr	r0, [pc, #4]	@ (8008ef4 <__sfp_lock_release+0x8>)
 8008eee:	f000 ba03 	b.w	80092f8 <__retarget_lock_release_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	2000173d 	.word	0x2000173d

08008ef8 <__sinit>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4604      	mov	r4, r0
 8008efc:	f7ff fff0 	bl	8008ee0 <__sfp_lock_acquire>
 8008f00:	6a23      	ldr	r3, [r4, #32]
 8008f02:	b11b      	cbz	r3, 8008f0c <__sinit+0x14>
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	f7ff bff0 	b.w	8008eec <__sfp_lock_release>
 8008f0c:	4b04      	ldr	r3, [pc, #16]	@ (8008f20 <__sinit+0x28>)
 8008f0e:	6223      	str	r3, [r4, #32]
 8008f10:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <__sinit+0x2c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f5      	bne.n	8008f04 <__sinit+0xc>
 8008f18:	f7ff ffc4 	bl	8008ea4 <global_stdio_init.part.0>
 8008f1c:	e7f2      	b.n	8008f04 <__sinit+0xc>
 8008f1e:	bf00      	nop
 8008f20:	08008e65 	.word	0x08008e65
 8008f24:	20001734 	.word	0x20001734

08008f28 <_fwalk_sglue>:
 8008f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	4688      	mov	r8, r1
 8008f30:	4614      	mov	r4, r2
 8008f32:	2600      	movs	r6, #0
 8008f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f38:	f1b9 0901 	subs.w	r9, r9, #1
 8008f3c:	d505      	bpl.n	8008f4a <_fwalk_sglue+0x22>
 8008f3e:	6824      	ldr	r4, [r4, #0]
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	d1f7      	bne.n	8008f34 <_fwalk_sglue+0xc>
 8008f44:	4630      	mov	r0, r6
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d907      	bls.n	8008f60 <_fwalk_sglue+0x38>
 8008f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f54:	3301      	adds	r3, #1
 8008f56:	d003      	beq.n	8008f60 <_fwalk_sglue+0x38>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	4306      	orrs	r6, r0
 8008f60:	3568      	adds	r5, #104	@ 0x68
 8008f62:	e7e9      	b.n	8008f38 <_fwalk_sglue+0x10>

08008f64 <iprintf>:
 8008f64:	b40f      	push	{r0, r1, r2, r3}
 8008f66:	b507      	push	{r0, r1, r2, lr}
 8008f68:	4906      	ldr	r1, [pc, #24]	@ (8008f84 <iprintf+0x20>)
 8008f6a:	ab04      	add	r3, sp, #16
 8008f6c:	6808      	ldr	r0, [r1, #0]
 8008f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f72:	6881      	ldr	r1, [r0, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	f000 faf1 	bl	800955c <_vfiprintf_r>
 8008f7a:	b003      	add	sp, #12
 8008f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f80:	b004      	add	sp, #16
 8008f82:	4770      	bx	lr
 8008f84:	20000040 	.word	0x20000040

08008f88 <putchar>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	@ (8008f94 <putchar+0xc>)
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	6882      	ldr	r2, [r0, #8]
 8008f90:	f000 be96 	b.w	8009cc0 <_putc_r>
 8008f94:	20000040 	.word	0x20000040

08008f98 <_puts_r>:
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b570      	push	{r4, r5, r6, lr}
 8008f9c:	6884      	ldr	r4, [r0, #8]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	b90b      	cbnz	r3, 8008fa8 <_puts_r+0x10>
 8008fa4:	f7ff ffa8 	bl	8008ef8 <__sinit>
 8008fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008faa:	07db      	lsls	r3, r3, #31
 8008fac:	d405      	bmi.n	8008fba <_puts_r+0x22>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	0598      	lsls	r0, r3, #22
 8008fb2:	d402      	bmi.n	8008fba <_puts_r+0x22>
 8008fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fb6:	f000 f99e 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	0719      	lsls	r1, r3, #28
 8008fbe:	d502      	bpl.n	8008fc6 <_puts_r+0x2e>
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d135      	bne.n	8009032 <_puts_r+0x9a>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 f8c5 	bl	8009158 <__swsetup_r>
 8008fce:	b380      	cbz	r0, 8009032 <_puts_r+0x9a>
 8008fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8008fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fd6:	07da      	lsls	r2, r3, #31
 8008fd8:	d405      	bmi.n	8008fe6 <_puts_r+0x4e>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	059b      	lsls	r3, r3, #22
 8008fde:	d402      	bmi.n	8008fe6 <_puts_r+0x4e>
 8008fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fe2:	f000 f989 	bl	80092f8 <__retarget_lock_release_recursive>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da04      	bge.n	8008ff8 <_puts_r+0x60>
 8008fee:	69a2      	ldr	r2, [r4, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	dc17      	bgt.n	8009024 <_puts_r+0x8c>
 8008ff4:	290a      	cmp	r1, #10
 8008ff6:	d015      	beq.n	8009024 <_puts_r+0x8c>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	6022      	str	r2, [r4, #0]
 8008ffe:	7019      	strb	r1, [r3, #0]
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009006:	3b01      	subs	r3, #1
 8009008:	60a3      	str	r3, [r4, #8]
 800900a:	2900      	cmp	r1, #0
 800900c:	d1ed      	bne.n	8008fea <_puts_r+0x52>
 800900e:	2b00      	cmp	r3, #0
 8009010:	da11      	bge.n	8009036 <_puts_r+0x9e>
 8009012:	4622      	mov	r2, r4
 8009014:	210a      	movs	r1, #10
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f85f 	bl	80090da <__swbuf_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d0d7      	beq.n	8008fd0 <_puts_r+0x38>
 8009020:	250a      	movs	r5, #10
 8009022:	e7d7      	b.n	8008fd4 <_puts_r+0x3c>
 8009024:	4622      	mov	r2, r4
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f857 	bl	80090da <__swbuf_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d1e7      	bne.n	8009000 <_puts_r+0x68>
 8009030:	e7ce      	b.n	8008fd0 <_puts_r+0x38>
 8009032:	3e01      	subs	r6, #1
 8009034:	e7e4      	b.n	8009000 <_puts_r+0x68>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	6022      	str	r2, [r4, #0]
 800903c:	220a      	movs	r2, #10
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	e7ee      	b.n	8009020 <_puts_r+0x88>
	...

08009044 <puts>:
 8009044:	4b02      	ldr	r3, [pc, #8]	@ (8009050 <puts+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f7ff bfa5 	b.w	8008f98 <_puts_r>
 800904e:	bf00      	nop
 8009050:	20000040 	.word	0x20000040

08009054 <__sread>:
 8009054:	b510      	push	{r4, lr}
 8009056:	460c      	mov	r4, r1
 8009058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905c:	f000 f8fc 	bl	8009258 <_read_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	bfab      	itete	ge
 8009064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009066:	89a3      	ldrhlt	r3, [r4, #12]
 8009068:	181b      	addge	r3, r3, r0
 800906a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800906e:	bfac      	ite	ge
 8009070:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009072:	81a3      	strhlt	r3, [r4, #12]
 8009074:	bd10      	pop	{r4, pc}

08009076 <__swrite>:
 8009076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	461f      	mov	r7, r3
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	05db      	lsls	r3, r3, #23
 8009080:	4605      	mov	r5, r0
 8009082:	460c      	mov	r4, r1
 8009084:	4616      	mov	r6, r2
 8009086:	d505      	bpl.n	8009094 <__swrite+0x1e>
 8009088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908c:	2302      	movs	r3, #2
 800908e:	2200      	movs	r2, #0
 8009090:	f000 f8d0 	bl	8009234 <_lseek_r>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800909a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800909e:	81a3      	strh	r3, [r4, #12]
 80090a0:	4632      	mov	r2, r6
 80090a2:	463b      	mov	r3, r7
 80090a4:	4628      	mov	r0, r5
 80090a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090aa:	f000 b8e7 	b.w	800927c <_write_r>

080090ae <__sseek>:
 80090ae:	b510      	push	{r4, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b6:	f000 f8bd 	bl	8009234 <_lseek_r>
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	bf15      	itete	ne
 80090c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090ca:	81a3      	strheq	r3, [r4, #12]
 80090cc:	bf18      	it	ne
 80090ce:	81a3      	strhne	r3, [r4, #12]
 80090d0:	bd10      	pop	{r4, pc}

080090d2 <__sclose>:
 80090d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d6:	f000 b89d 	b.w	8009214 <_close_r>

080090da <__swbuf_r>:
 80090da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090dc:	460e      	mov	r6, r1
 80090de:	4614      	mov	r4, r2
 80090e0:	4605      	mov	r5, r0
 80090e2:	b118      	cbz	r0, 80090ec <__swbuf_r+0x12>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <__swbuf_r+0x12>
 80090e8:	f7ff ff06 	bl	8008ef8 <__sinit>
 80090ec:	69a3      	ldr	r3, [r4, #24]
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	071a      	lsls	r2, r3, #28
 80090f4:	d501      	bpl.n	80090fa <__swbuf_r+0x20>
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	b943      	cbnz	r3, 800910c <__swbuf_r+0x32>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f82b 	bl	8009158 <__swsetup_r>
 8009102:	b118      	cbz	r0, 800910c <__swbuf_r+0x32>
 8009104:	f04f 37ff 	mov.w	r7, #4294967295
 8009108:	4638      	mov	r0, r7
 800910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	1a98      	subs	r0, r3, r2
 8009112:	6963      	ldr	r3, [r4, #20]
 8009114:	b2f6      	uxtb	r6, r6
 8009116:	4283      	cmp	r3, r0
 8009118:	4637      	mov	r7, r6
 800911a:	dc05      	bgt.n	8009128 <__swbuf_r+0x4e>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 fd44 	bl	8009bac <_fflush_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	d1ed      	bne.n	8009104 <__swbuf_r+0x2a>
 8009128:	68a3      	ldr	r3, [r4, #8]
 800912a:	3b01      	subs	r3, #1
 800912c:	60a3      	str	r3, [r4, #8]
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	6022      	str	r2, [r4, #0]
 8009134:	701e      	strb	r6, [r3, #0]
 8009136:	6962      	ldr	r2, [r4, #20]
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	429a      	cmp	r2, r3
 800913c:	d004      	beq.n	8009148 <__swbuf_r+0x6e>
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	07db      	lsls	r3, r3, #31
 8009142:	d5e1      	bpl.n	8009108 <__swbuf_r+0x2e>
 8009144:	2e0a      	cmp	r6, #10
 8009146:	d1df      	bne.n	8009108 <__swbuf_r+0x2e>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f000 fd2e 	bl	8009bac <_fflush_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	d0d9      	beq.n	8009108 <__swbuf_r+0x2e>
 8009154:	e7d6      	b.n	8009104 <__swbuf_r+0x2a>
	...

08009158 <__swsetup_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4b29      	ldr	r3, [pc, #164]	@ (8009200 <__swsetup_r+0xa8>)
 800915c:	4605      	mov	r5, r0
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	460c      	mov	r4, r1
 8009162:	b118      	cbz	r0, 800916c <__swsetup_r+0x14>
 8009164:	6a03      	ldr	r3, [r0, #32]
 8009166:	b90b      	cbnz	r3, 800916c <__swsetup_r+0x14>
 8009168:	f7ff fec6 	bl	8008ef8 <__sinit>
 800916c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009170:	0719      	lsls	r1, r3, #28
 8009172:	d422      	bmi.n	80091ba <__swsetup_r+0x62>
 8009174:	06da      	lsls	r2, r3, #27
 8009176:	d407      	bmi.n	8009188 <__swsetup_r+0x30>
 8009178:	2209      	movs	r2, #9
 800917a:	602a      	str	r2, [r5, #0]
 800917c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	e033      	b.n	80091f0 <__swsetup_r+0x98>
 8009188:	0758      	lsls	r0, r3, #29
 800918a:	d512      	bpl.n	80091b2 <__swsetup_r+0x5a>
 800918c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800918e:	b141      	cbz	r1, 80091a2 <__swsetup_r+0x4a>
 8009190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009194:	4299      	cmp	r1, r3
 8009196:	d002      	beq.n	800919e <__swsetup_r+0x46>
 8009198:	4628      	mov	r0, r5
 800919a:	f000 f8bd 	bl	8009318 <_free_r>
 800919e:	2300      	movs	r3, #0
 80091a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	f043 0308 	orr.w	r3, r3, #8
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	b94b      	cbnz	r3, 80091d2 <__swsetup_r+0x7a>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d003      	beq.n	80091d2 <__swsetup_r+0x7a>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 fd3b 	bl	8009c48 <__smakebuf_r>
 80091d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d6:	f013 0201 	ands.w	r2, r3, #1
 80091da:	d00a      	beq.n	80091f2 <__swsetup_r+0x9a>
 80091dc:	2200      	movs	r2, #0
 80091de:	60a2      	str	r2, [r4, #8]
 80091e0:	6962      	ldr	r2, [r4, #20]
 80091e2:	4252      	negs	r2, r2
 80091e4:	61a2      	str	r2, [r4, #24]
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	b942      	cbnz	r2, 80091fc <__swsetup_r+0xa4>
 80091ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ee:	d1c5      	bne.n	800917c <__swsetup_r+0x24>
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	0799      	lsls	r1, r3, #30
 80091f4:	bf58      	it	pl
 80091f6:	6962      	ldrpl	r2, [r4, #20]
 80091f8:	60a2      	str	r2, [r4, #8]
 80091fa:	e7f4      	b.n	80091e6 <__swsetup_r+0x8e>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e7f7      	b.n	80091f0 <__swsetup_r+0x98>
 8009200:	20000040 	.word	0x20000040

08009204 <memset>:
 8009204:	4402      	add	r2, r0
 8009206:	4603      	mov	r3, r0
 8009208:	4293      	cmp	r3, r2
 800920a:	d100      	bne.n	800920e <memset+0xa>
 800920c:	4770      	bx	lr
 800920e:	f803 1b01 	strb.w	r1, [r3], #1
 8009212:	e7f9      	b.n	8009208 <memset+0x4>

08009214 <_close_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d06      	ldr	r5, [pc, #24]	@ (8009230 <_close_r+0x1c>)
 8009218:	2300      	movs	r3, #0
 800921a:	4604      	mov	r4, r0
 800921c:	4608      	mov	r0, r1
 800921e:	602b      	str	r3, [r5, #0]
 8009220:	f7f8 fd77 	bl	8001d12 <_close>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_close_r+0x1a>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_close_r+0x1a>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20001738 	.word	0x20001738

08009234 <_lseek_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d07      	ldr	r5, [pc, #28]	@ (8009254 <_lseek_r+0x20>)
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7f8 fd8c 	bl	8001d60 <_lseek>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_lseek_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_lseek_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20001738 	.word	0x20001738

08009258 <_read_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_read_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f8 fd1a 	bl	8001ca0 <_read>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_read_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_read_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20001738 	.word	0x20001738

0800927c <_write_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_write_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 fd25 	bl	8001cda <_write>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_write_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_write_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20001738 	.word	0x20001738

080092a0 <__errno>:
 80092a0:	4b01      	ldr	r3, [pc, #4]	@ (80092a8 <__errno+0x8>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000040 	.word	0x20000040

080092ac <__libc_init_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4d0d      	ldr	r5, [pc, #52]	@ (80092e4 <__libc_init_array+0x38>)
 80092b0:	4c0d      	ldr	r4, [pc, #52]	@ (80092e8 <__libc_init_array+0x3c>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	2600      	movs	r6, #0
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	d109      	bne.n	80092d0 <__libc_init_array+0x24>
 80092bc:	4d0b      	ldr	r5, [pc, #44]	@ (80092ec <__libc_init_array+0x40>)
 80092be:	4c0c      	ldr	r4, [pc, #48]	@ (80092f0 <__libc_init_array+0x44>)
 80092c0:	f000 fd64 	bl	8009d8c <_init>
 80092c4:	1b64      	subs	r4, r4, r5
 80092c6:	10a4      	asrs	r4, r4, #2
 80092c8:	2600      	movs	r6, #0
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d105      	bne.n	80092da <__libc_init_array+0x2e>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d4:	4798      	blx	r3
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7ee      	b.n	80092b8 <__libc_init_array+0xc>
 80092da:	f855 3b04 	ldr.w	r3, [r5], #4
 80092de:	4798      	blx	r3
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7f2      	b.n	80092ca <__libc_init_array+0x1e>
 80092e4:	0800acc0 	.word	0x0800acc0
 80092e8:	0800acc0 	.word	0x0800acc0
 80092ec:	0800acc0 	.word	0x0800acc0
 80092f0:	0800acc4 	.word	0x0800acc4

080092f4 <__retarget_lock_init_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <__retarget_lock_acquire_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <__retarget_lock_release_recursive>:
 80092f8:	4770      	bx	lr

080092fa <memcpy>:
 80092fa:	440a      	add	r2, r1
 80092fc:	4291      	cmp	r1, r2
 80092fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009302:	d100      	bne.n	8009306 <memcpy+0xc>
 8009304:	4770      	bx	lr
 8009306:	b510      	push	{r4, lr}
 8009308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800930c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009310:	4291      	cmp	r1, r2
 8009312:	d1f9      	bne.n	8009308 <memcpy+0xe>
 8009314:	bd10      	pop	{r4, pc}
	...

08009318 <_free_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4605      	mov	r5, r0
 800931c:	2900      	cmp	r1, #0
 800931e:	d041      	beq.n	80093a4 <_free_r+0x8c>
 8009320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009324:	1f0c      	subs	r4, r1, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfb8      	it	lt
 800932a:	18e4      	addlt	r4, r4, r3
 800932c:	f000 f8e0 	bl	80094f0 <__malloc_lock>
 8009330:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <_free_r+0x90>)
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	b933      	cbnz	r3, 8009344 <_free_r+0x2c>
 8009336:	6063      	str	r3, [r4, #4]
 8009338:	6014      	str	r4, [r2, #0]
 800933a:	4628      	mov	r0, r5
 800933c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009340:	f000 b8dc 	b.w	80094fc <__malloc_unlock>
 8009344:	42a3      	cmp	r3, r4
 8009346:	d908      	bls.n	800935a <_free_r+0x42>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	1821      	adds	r1, r4, r0
 800934c:	428b      	cmp	r3, r1
 800934e:	bf01      	itttt	eq
 8009350:	6819      	ldreq	r1, [r3, #0]
 8009352:	685b      	ldreq	r3, [r3, #4]
 8009354:	1809      	addeq	r1, r1, r0
 8009356:	6021      	streq	r1, [r4, #0]
 8009358:	e7ed      	b.n	8009336 <_free_r+0x1e>
 800935a:	461a      	mov	r2, r3
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	b10b      	cbz	r3, 8009364 <_free_r+0x4c>
 8009360:	42a3      	cmp	r3, r4
 8009362:	d9fa      	bls.n	800935a <_free_r+0x42>
 8009364:	6811      	ldr	r1, [r2, #0]
 8009366:	1850      	adds	r0, r2, r1
 8009368:	42a0      	cmp	r0, r4
 800936a:	d10b      	bne.n	8009384 <_free_r+0x6c>
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	4401      	add	r1, r0
 8009370:	1850      	adds	r0, r2, r1
 8009372:	4283      	cmp	r3, r0
 8009374:	6011      	str	r1, [r2, #0]
 8009376:	d1e0      	bne.n	800933a <_free_r+0x22>
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	6053      	str	r3, [r2, #4]
 800937e:	4408      	add	r0, r1
 8009380:	6010      	str	r0, [r2, #0]
 8009382:	e7da      	b.n	800933a <_free_r+0x22>
 8009384:	d902      	bls.n	800938c <_free_r+0x74>
 8009386:	230c      	movs	r3, #12
 8009388:	602b      	str	r3, [r5, #0]
 800938a:	e7d6      	b.n	800933a <_free_r+0x22>
 800938c:	6820      	ldr	r0, [r4, #0]
 800938e:	1821      	adds	r1, r4, r0
 8009390:	428b      	cmp	r3, r1
 8009392:	bf04      	itt	eq
 8009394:	6819      	ldreq	r1, [r3, #0]
 8009396:	685b      	ldreq	r3, [r3, #4]
 8009398:	6063      	str	r3, [r4, #4]
 800939a:	bf04      	itt	eq
 800939c:	1809      	addeq	r1, r1, r0
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	6054      	str	r4, [r2, #4]
 80093a2:	e7ca      	b.n	800933a <_free_r+0x22>
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
 80093a6:	bf00      	nop
 80093a8:	20001744 	.word	0x20001744

080093ac <sbrk_aligned>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	4e0f      	ldr	r6, [pc, #60]	@ (80093ec <sbrk_aligned+0x40>)
 80093b0:	460c      	mov	r4, r1
 80093b2:	6831      	ldr	r1, [r6, #0]
 80093b4:	4605      	mov	r5, r0
 80093b6:	b911      	cbnz	r1, 80093be <sbrk_aligned+0x12>
 80093b8:	f000 fcd8 	bl	8009d6c <_sbrk_r>
 80093bc:	6030      	str	r0, [r6, #0]
 80093be:	4621      	mov	r1, r4
 80093c0:	4628      	mov	r0, r5
 80093c2:	f000 fcd3 	bl	8009d6c <_sbrk_r>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d103      	bne.n	80093d2 <sbrk_aligned+0x26>
 80093ca:	f04f 34ff 	mov.w	r4, #4294967295
 80093ce:	4620      	mov	r0, r4
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
 80093d2:	1cc4      	adds	r4, r0, #3
 80093d4:	f024 0403 	bic.w	r4, r4, #3
 80093d8:	42a0      	cmp	r0, r4
 80093da:	d0f8      	beq.n	80093ce <sbrk_aligned+0x22>
 80093dc:	1a21      	subs	r1, r4, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 fcc4 	bl	8009d6c <_sbrk_r>
 80093e4:	3001      	adds	r0, #1
 80093e6:	d1f2      	bne.n	80093ce <sbrk_aligned+0x22>
 80093e8:	e7ef      	b.n	80093ca <sbrk_aligned+0x1e>
 80093ea:	bf00      	nop
 80093ec:	20001740 	.word	0x20001740

080093f0 <_malloc_r>:
 80093f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	1ccd      	adds	r5, r1, #3
 80093f6:	f025 0503 	bic.w	r5, r5, #3
 80093fa:	3508      	adds	r5, #8
 80093fc:	2d0c      	cmp	r5, #12
 80093fe:	bf38      	it	cc
 8009400:	250c      	movcc	r5, #12
 8009402:	2d00      	cmp	r5, #0
 8009404:	4606      	mov	r6, r0
 8009406:	db01      	blt.n	800940c <_malloc_r+0x1c>
 8009408:	42a9      	cmp	r1, r5
 800940a:	d904      	bls.n	8009416 <_malloc_r+0x26>
 800940c:	230c      	movs	r3, #12
 800940e:	6033      	str	r3, [r6, #0]
 8009410:	2000      	movs	r0, #0
 8009412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094ec <_malloc_r+0xfc>
 800941a:	f000 f869 	bl	80094f0 <__malloc_lock>
 800941e:	f8d8 3000 	ldr.w	r3, [r8]
 8009422:	461c      	mov	r4, r3
 8009424:	bb44      	cbnz	r4, 8009478 <_malloc_r+0x88>
 8009426:	4629      	mov	r1, r5
 8009428:	4630      	mov	r0, r6
 800942a:	f7ff ffbf 	bl	80093ac <sbrk_aligned>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	4604      	mov	r4, r0
 8009432:	d158      	bne.n	80094e6 <_malloc_r+0xf6>
 8009434:	f8d8 4000 	ldr.w	r4, [r8]
 8009438:	4627      	mov	r7, r4
 800943a:	2f00      	cmp	r7, #0
 800943c:	d143      	bne.n	80094c6 <_malloc_r+0xd6>
 800943e:	2c00      	cmp	r4, #0
 8009440:	d04b      	beq.n	80094da <_malloc_r+0xea>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	4639      	mov	r1, r7
 8009446:	4630      	mov	r0, r6
 8009448:	eb04 0903 	add.w	r9, r4, r3
 800944c:	f000 fc8e 	bl	8009d6c <_sbrk_r>
 8009450:	4581      	cmp	r9, r0
 8009452:	d142      	bne.n	80094da <_malloc_r+0xea>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	1a6d      	subs	r5, r5, r1
 8009458:	4629      	mov	r1, r5
 800945a:	4630      	mov	r0, r6
 800945c:	f7ff ffa6 	bl	80093ac <sbrk_aligned>
 8009460:	3001      	adds	r0, #1
 8009462:	d03a      	beq.n	80094da <_malloc_r+0xea>
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	442b      	add	r3, r5
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	f8d8 3000 	ldr.w	r3, [r8]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	bb62      	cbnz	r2, 80094cc <_malloc_r+0xdc>
 8009472:	f8c8 7000 	str.w	r7, [r8]
 8009476:	e00f      	b.n	8009498 <_malloc_r+0xa8>
 8009478:	6822      	ldr	r2, [r4, #0]
 800947a:	1b52      	subs	r2, r2, r5
 800947c:	d420      	bmi.n	80094c0 <_malloc_r+0xd0>
 800947e:	2a0b      	cmp	r2, #11
 8009480:	d917      	bls.n	80094b2 <_malloc_r+0xc2>
 8009482:	1961      	adds	r1, r4, r5
 8009484:	42a3      	cmp	r3, r4
 8009486:	6025      	str	r5, [r4, #0]
 8009488:	bf18      	it	ne
 800948a:	6059      	strne	r1, [r3, #4]
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	bf08      	it	eq
 8009490:	f8c8 1000 	streq.w	r1, [r8]
 8009494:	5162      	str	r2, [r4, r5]
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	4630      	mov	r0, r6
 800949a:	f000 f82f 	bl	80094fc <__malloc_unlock>
 800949e:	f104 000b 	add.w	r0, r4, #11
 80094a2:	1d23      	adds	r3, r4, #4
 80094a4:	f020 0007 	bic.w	r0, r0, #7
 80094a8:	1ac2      	subs	r2, r0, r3
 80094aa:	bf1c      	itt	ne
 80094ac:	1a1b      	subne	r3, r3, r0
 80094ae:	50a3      	strne	r3, [r4, r2]
 80094b0:	e7af      	b.n	8009412 <_malloc_r+0x22>
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	bf0c      	ite	eq
 80094b8:	f8c8 2000 	streq.w	r2, [r8]
 80094bc:	605a      	strne	r2, [r3, #4]
 80094be:	e7eb      	b.n	8009498 <_malloc_r+0xa8>
 80094c0:	4623      	mov	r3, r4
 80094c2:	6864      	ldr	r4, [r4, #4]
 80094c4:	e7ae      	b.n	8009424 <_malloc_r+0x34>
 80094c6:	463c      	mov	r4, r7
 80094c8:	687f      	ldr	r7, [r7, #4]
 80094ca:	e7b6      	b.n	800943a <_malloc_r+0x4a>
 80094cc:	461a      	mov	r2, r3
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d1fb      	bne.n	80094cc <_malloc_r+0xdc>
 80094d4:	2300      	movs	r3, #0
 80094d6:	6053      	str	r3, [r2, #4]
 80094d8:	e7de      	b.n	8009498 <_malloc_r+0xa8>
 80094da:	230c      	movs	r3, #12
 80094dc:	6033      	str	r3, [r6, #0]
 80094de:	4630      	mov	r0, r6
 80094e0:	f000 f80c 	bl	80094fc <__malloc_unlock>
 80094e4:	e794      	b.n	8009410 <_malloc_r+0x20>
 80094e6:	6005      	str	r5, [r0, #0]
 80094e8:	e7d6      	b.n	8009498 <_malloc_r+0xa8>
 80094ea:	bf00      	nop
 80094ec:	20001744 	.word	0x20001744

080094f0 <__malloc_lock>:
 80094f0:	4801      	ldr	r0, [pc, #4]	@ (80094f8 <__malloc_lock+0x8>)
 80094f2:	f7ff bf00 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 80094f6:	bf00      	nop
 80094f8:	2000173c 	.word	0x2000173c

080094fc <__malloc_unlock>:
 80094fc:	4801      	ldr	r0, [pc, #4]	@ (8009504 <__malloc_unlock+0x8>)
 80094fe:	f7ff befb 	b.w	80092f8 <__retarget_lock_release_recursive>
 8009502:	bf00      	nop
 8009504:	2000173c 	.word	0x2000173c

08009508 <__sfputc_r>:
 8009508:	6893      	ldr	r3, [r2, #8]
 800950a:	3b01      	subs	r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	b410      	push	{r4}
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	da08      	bge.n	8009526 <__sfputc_r+0x1e>
 8009514:	6994      	ldr	r4, [r2, #24]
 8009516:	42a3      	cmp	r3, r4
 8009518:	db01      	blt.n	800951e <__sfputc_r+0x16>
 800951a:	290a      	cmp	r1, #10
 800951c:	d103      	bne.n	8009526 <__sfputc_r+0x1e>
 800951e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009522:	f7ff bdda 	b.w	80090da <__swbuf_r>
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	1c58      	adds	r0, r3, #1
 800952a:	6010      	str	r0, [r2, #0]
 800952c:	7019      	strb	r1, [r3, #0]
 800952e:	4608      	mov	r0, r1
 8009530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009534:	4770      	bx	lr

08009536 <__sfputs_r>:
 8009536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009538:	4606      	mov	r6, r0
 800953a:	460f      	mov	r7, r1
 800953c:	4614      	mov	r4, r2
 800953e:	18d5      	adds	r5, r2, r3
 8009540:	42ac      	cmp	r4, r5
 8009542:	d101      	bne.n	8009548 <__sfputs_r+0x12>
 8009544:	2000      	movs	r0, #0
 8009546:	e007      	b.n	8009558 <__sfputs_r+0x22>
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	463a      	mov	r2, r7
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff ffda 	bl	8009508 <__sfputc_r>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d1f3      	bne.n	8009540 <__sfputs_r+0xa>
 8009558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800955c <_vfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	460d      	mov	r5, r1
 8009562:	b09d      	sub	sp, #116	@ 0x74
 8009564:	4614      	mov	r4, r2
 8009566:	4698      	mov	r8, r3
 8009568:	4606      	mov	r6, r0
 800956a:	b118      	cbz	r0, 8009574 <_vfiprintf_r+0x18>
 800956c:	6a03      	ldr	r3, [r0, #32]
 800956e:	b90b      	cbnz	r3, 8009574 <_vfiprintf_r+0x18>
 8009570:	f7ff fcc2 	bl	8008ef8 <__sinit>
 8009574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	d405      	bmi.n	8009586 <_vfiprintf_r+0x2a>
 800957a:	89ab      	ldrh	r3, [r5, #12]
 800957c:	059a      	lsls	r2, r3, #22
 800957e:	d402      	bmi.n	8009586 <_vfiprintf_r+0x2a>
 8009580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009582:	f7ff feb8 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	071b      	lsls	r3, r3, #28
 800958a:	d501      	bpl.n	8009590 <_vfiprintf_r+0x34>
 800958c:	692b      	ldr	r3, [r5, #16]
 800958e:	b99b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x5c>
 8009590:	4629      	mov	r1, r5
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff fde0 	bl	8009158 <__swsetup_r>
 8009598:	b170      	cbz	r0, 80095b8 <_vfiprintf_r+0x5c>
 800959a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800959c:	07dc      	lsls	r4, r3, #31
 800959e:	d504      	bpl.n	80095aa <_vfiprintf_r+0x4e>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	b01d      	add	sp, #116	@ 0x74
 80095a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	0598      	lsls	r0, r3, #22
 80095ae:	d4f7      	bmi.n	80095a0 <_vfiprintf_r+0x44>
 80095b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095b2:	f7ff fea1 	bl	80092f8 <__retarget_lock_release_recursive>
 80095b6:	e7f3      	b.n	80095a0 <_vfiprintf_r+0x44>
 80095b8:	2300      	movs	r3, #0
 80095ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80095bc:	2320      	movs	r3, #32
 80095be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c6:	2330      	movs	r3, #48	@ 0x30
 80095c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009778 <_vfiprintf_r+0x21c>
 80095cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d0:	f04f 0901 	mov.w	r9, #1
 80095d4:	4623      	mov	r3, r4
 80095d6:	469a      	mov	sl, r3
 80095d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095dc:	b10a      	cbz	r2, 80095e2 <_vfiprintf_r+0x86>
 80095de:	2a25      	cmp	r2, #37	@ 0x25
 80095e0:	d1f9      	bne.n	80095d6 <_vfiprintf_r+0x7a>
 80095e2:	ebba 0b04 	subs.w	fp, sl, r4
 80095e6:	d00b      	beq.n	8009600 <_vfiprintf_r+0xa4>
 80095e8:	465b      	mov	r3, fp
 80095ea:	4622      	mov	r2, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7ff ffa1 	bl	8009536 <__sfputs_r>
 80095f4:	3001      	adds	r0, #1
 80095f6:	f000 80a7 	beq.w	8009748 <_vfiprintf_r+0x1ec>
 80095fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fc:	445a      	add	r2, fp
 80095fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009600:	f89a 3000 	ldrb.w	r3, [sl]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 809f 	beq.w	8009748 <_vfiprintf_r+0x1ec>
 800960a:	2300      	movs	r3, #0
 800960c:	f04f 32ff 	mov.w	r2, #4294967295
 8009610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009614:	f10a 0a01 	add.w	sl, sl, #1
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	9307      	str	r3, [sp, #28]
 800961c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009620:	931a      	str	r3, [sp, #104]	@ 0x68
 8009622:	4654      	mov	r4, sl
 8009624:	2205      	movs	r2, #5
 8009626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962a:	4853      	ldr	r0, [pc, #332]	@ (8009778 <_vfiprintf_r+0x21c>)
 800962c:	f7f6 fde0 	bl	80001f0 <memchr>
 8009630:	9a04      	ldr	r2, [sp, #16]
 8009632:	b9d8      	cbnz	r0, 800966c <_vfiprintf_r+0x110>
 8009634:	06d1      	lsls	r1, r2, #27
 8009636:	bf44      	itt	mi
 8009638:	2320      	movmi	r3, #32
 800963a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963e:	0713      	lsls	r3, r2, #28
 8009640:	bf44      	itt	mi
 8009642:	232b      	movmi	r3, #43	@ 0x2b
 8009644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009648:	f89a 3000 	ldrb.w	r3, [sl]
 800964c:	2b2a      	cmp	r3, #42	@ 0x2a
 800964e:	d015      	beq.n	800967c <_vfiprintf_r+0x120>
 8009650:	9a07      	ldr	r2, [sp, #28]
 8009652:	4654      	mov	r4, sl
 8009654:	2000      	movs	r0, #0
 8009656:	f04f 0c0a 	mov.w	ip, #10
 800965a:	4621      	mov	r1, r4
 800965c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009660:	3b30      	subs	r3, #48	@ 0x30
 8009662:	2b09      	cmp	r3, #9
 8009664:	d94b      	bls.n	80096fe <_vfiprintf_r+0x1a2>
 8009666:	b1b0      	cbz	r0, 8009696 <_vfiprintf_r+0x13a>
 8009668:	9207      	str	r2, [sp, #28]
 800966a:	e014      	b.n	8009696 <_vfiprintf_r+0x13a>
 800966c:	eba0 0308 	sub.w	r3, r0, r8
 8009670:	fa09 f303 	lsl.w	r3, r9, r3
 8009674:	4313      	orrs	r3, r2
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	46a2      	mov	sl, r4
 800967a:	e7d2      	b.n	8009622 <_vfiprintf_r+0xc6>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d19      	adds	r1, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9103      	str	r1, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfbb      	ittet	lt
 8009688:	425b      	neglt	r3, r3
 800968a:	f042 0202 	orrlt.w	r2, r2, #2
 800968e:	9307      	strge	r3, [sp, #28]
 8009690:	9307      	strlt	r3, [sp, #28]
 8009692:	bfb8      	it	lt
 8009694:	9204      	strlt	r2, [sp, #16]
 8009696:	7823      	ldrb	r3, [r4, #0]
 8009698:	2b2e      	cmp	r3, #46	@ 0x2e
 800969a:	d10a      	bne.n	80096b2 <_vfiprintf_r+0x156>
 800969c:	7863      	ldrb	r3, [r4, #1]
 800969e:	2b2a      	cmp	r3, #42	@ 0x2a
 80096a0:	d132      	bne.n	8009708 <_vfiprintf_r+0x1ac>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	1d1a      	adds	r2, r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	9203      	str	r2, [sp, #12]
 80096aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ae:	3402      	adds	r4, #2
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009788 <_vfiprintf_r+0x22c>
 80096b6:	7821      	ldrb	r1, [r4, #0]
 80096b8:	2203      	movs	r2, #3
 80096ba:	4650      	mov	r0, sl
 80096bc:	f7f6 fd98 	bl	80001f0 <memchr>
 80096c0:	b138      	cbz	r0, 80096d2 <_vfiprintf_r+0x176>
 80096c2:	9b04      	ldr	r3, [sp, #16]
 80096c4:	eba0 000a 	sub.w	r0, r0, sl
 80096c8:	2240      	movs	r2, #64	@ 0x40
 80096ca:	4082      	lsls	r2, r0
 80096cc:	4313      	orrs	r3, r2
 80096ce:	3401      	adds	r4, #1
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d6:	4829      	ldr	r0, [pc, #164]	@ (800977c <_vfiprintf_r+0x220>)
 80096d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096dc:	2206      	movs	r2, #6
 80096de:	f7f6 fd87 	bl	80001f0 <memchr>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d03f      	beq.n	8009766 <_vfiprintf_r+0x20a>
 80096e6:	4b26      	ldr	r3, [pc, #152]	@ (8009780 <_vfiprintf_r+0x224>)
 80096e8:	bb1b      	cbnz	r3, 8009732 <_vfiprintf_r+0x1d6>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	3307      	adds	r3, #7
 80096ee:	f023 0307 	bic.w	r3, r3, #7
 80096f2:	3308      	adds	r3, #8
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f8:	443b      	add	r3, r7
 80096fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fc:	e76a      	b.n	80095d4 <_vfiprintf_r+0x78>
 80096fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009702:	460c      	mov	r4, r1
 8009704:	2001      	movs	r0, #1
 8009706:	e7a8      	b.n	800965a <_vfiprintf_r+0xfe>
 8009708:	2300      	movs	r3, #0
 800970a:	3401      	adds	r4, #1
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	4619      	mov	r1, r3
 8009710:	f04f 0c0a 	mov.w	ip, #10
 8009714:	4620      	mov	r0, r4
 8009716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971a:	3a30      	subs	r2, #48	@ 0x30
 800971c:	2a09      	cmp	r2, #9
 800971e:	d903      	bls.n	8009728 <_vfiprintf_r+0x1cc>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0c6      	beq.n	80096b2 <_vfiprintf_r+0x156>
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	e7c4      	b.n	80096b2 <_vfiprintf_r+0x156>
 8009728:	fb0c 2101 	mla	r1, ip, r1, r2
 800972c:	4604      	mov	r4, r0
 800972e:	2301      	movs	r3, #1
 8009730:	e7f0      	b.n	8009714 <_vfiprintf_r+0x1b8>
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	462a      	mov	r2, r5
 8009738:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <_vfiprintf_r+0x228>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	4630      	mov	r0, r6
 800973e:	f3af 8000 	nop.w
 8009742:	4607      	mov	r7, r0
 8009744:	1c78      	adds	r0, r7, #1
 8009746:	d1d6      	bne.n	80096f6 <_vfiprintf_r+0x19a>
 8009748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800974a:	07d9      	lsls	r1, r3, #31
 800974c:	d405      	bmi.n	800975a <_vfiprintf_r+0x1fe>
 800974e:	89ab      	ldrh	r3, [r5, #12]
 8009750:	059a      	lsls	r2, r3, #22
 8009752:	d402      	bmi.n	800975a <_vfiprintf_r+0x1fe>
 8009754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009756:	f7ff fdcf 	bl	80092f8 <__retarget_lock_release_recursive>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	065b      	lsls	r3, r3, #25
 800975e:	f53f af1f 	bmi.w	80095a0 <_vfiprintf_r+0x44>
 8009762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009764:	e71e      	b.n	80095a4 <_vfiprintf_r+0x48>
 8009766:	ab03      	add	r3, sp, #12
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	462a      	mov	r2, r5
 800976c:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <_vfiprintf_r+0x228>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f879 	bl	8009868 <_printf_i>
 8009776:	e7e4      	b.n	8009742 <_vfiprintf_r+0x1e6>
 8009778:	0800ac85 	.word	0x0800ac85
 800977c:	0800ac8f 	.word	0x0800ac8f
 8009780:	00000000 	.word	0x00000000
 8009784:	08009537 	.word	0x08009537
 8009788:	0800ac8b 	.word	0x0800ac8b

0800978c <_printf_common>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	4616      	mov	r6, r2
 8009792:	4698      	mov	r8, r3
 8009794:	688a      	ldr	r2, [r1, #8]
 8009796:	690b      	ldr	r3, [r1, #16]
 8009798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800979c:	4293      	cmp	r3, r2
 800979e:	bfb8      	it	lt
 80097a0:	4613      	movlt	r3, r2
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097a8:	4607      	mov	r7, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b10a      	cbz	r2, 80097b2 <_printf_common+0x26>
 80097ae:	3301      	adds	r3, #1
 80097b0:	6033      	str	r3, [r6, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	0699      	lsls	r1, r3, #26
 80097b6:	bf42      	ittt	mi
 80097b8:	6833      	ldrmi	r3, [r6, #0]
 80097ba:	3302      	addmi	r3, #2
 80097bc:	6033      	strmi	r3, [r6, #0]
 80097be:	6825      	ldr	r5, [r4, #0]
 80097c0:	f015 0506 	ands.w	r5, r5, #6
 80097c4:	d106      	bne.n	80097d4 <_printf_common+0x48>
 80097c6:	f104 0a19 	add.w	sl, r4, #25
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	6832      	ldr	r2, [r6, #0]
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dc26      	bgt.n	8009822 <_printf_common+0x96>
 80097d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097d8:	6822      	ldr	r2, [r4, #0]
 80097da:	3b00      	subs	r3, #0
 80097dc:	bf18      	it	ne
 80097de:	2301      	movne	r3, #1
 80097e0:	0692      	lsls	r2, r2, #26
 80097e2:	d42b      	bmi.n	800983c <_printf_common+0xb0>
 80097e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097e8:	4641      	mov	r1, r8
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c8      	blx	r9
 80097ee:	3001      	adds	r0, #1
 80097f0:	d01e      	beq.n	8009830 <_printf_common+0xa4>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	f003 0306 	and.w	r3, r3, #6
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	bf02      	ittt	eq
 80097fe:	68e5      	ldreq	r5, [r4, #12]
 8009800:	6833      	ldreq	r3, [r6, #0]
 8009802:	1aed      	subeq	r5, r5, r3
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	bf0c      	ite	eq
 8009808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800980c:	2500      	movne	r5, #0
 800980e:	4293      	cmp	r3, r2
 8009810:	bfc4      	itt	gt
 8009812:	1a9b      	subgt	r3, r3, r2
 8009814:	18ed      	addgt	r5, r5, r3
 8009816:	2600      	movs	r6, #0
 8009818:	341a      	adds	r4, #26
 800981a:	42b5      	cmp	r5, r6
 800981c:	d11a      	bne.n	8009854 <_printf_common+0xc8>
 800981e:	2000      	movs	r0, #0
 8009820:	e008      	b.n	8009834 <_printf_common+0xa8>
 8009822:	2301      	movs	r3, #1
 8009824:	4652      	mov	r2, sl
 8009826:	4641      	mov	r1, r8
 8009828:	4638      	mov	r0, r7
 800982a:	47c8      	blx	r9
 800982c:	3001      	adds	r0, #1
 800982e:	d103      	bne.n	8009838 <_printf_common+0xac>
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	3501      	adds	r5, #1
 800983a:	e7c6      	b.n	80097ca <_printf_common+0x3e>
 800983c:	18e1      	adds	r1, r4, r3
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	2030      	movs	r0, #48	@ 0x30
 8009842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009846:	4422      	add	r2, r4
 8009848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800984c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009850:	3302      	adds	r3, #2
 8009852:	e7c7      	b.n	80097e4 <_printf_common+0x58>
 8009854:	2301      	movs	r3, #1
 8009856:	4622      	mov	r2, r4
 8009858:	4641      	mov	r1, r8
 800985a:	4638      	mov	r0, r7
 800985c:	47c8      	blx	r9
 800985e:	3001      	adds	r0, #1
 8009860:	d0e6      	beq.n	8009830 <_printf_common+0xa4>
 8009862:	3601      	adds	r6, #1
 8009864:	e7d9      	b.n	800981a <_printf_common+0x8e>
	...

08009868 <_printf_i>:
 8009868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	7e0f      	ldrb	r7, [r1, #24]
 800986e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009870:	2f78      	cmp	r7, #120	@ 0x78
 8009872:	4691      	mov	r9, r2
 8009874:	4680      	mov	r8, r0
 8009876:	460c      	mov	r4, r1
 8009878:	469a      	mov	sl, r3
 800987a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800987e:	d807      	bhi.n	8009890 <_printf_i+0x28>
 8009880:	2f62      	cmp	r7, #98	@ 0x62
 8009882:	d80a      	bhi.n	800989a <_printf_i+0x32>
 8009884:	2f00      	cmp	r7, #0
 8009886:	f000 80d1 	beq.w	8009a2c <_printf_i+0x1c4>
 800988a:	2f58      	cmp	r7, #88	@ 0x58
 800988c:	f000 80b8 	beq.w	8009a00 <_printf_i+0x198>
 8009890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009898:	e03a      	b.n	8009910 <_printf_i+0xa8>
 800989a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800989e:	2b15      	cmp	r3, #21
 80098a0:	d8f6      	bhi.n	8009890 <_printf_i+0x28>
 80098a2:	a101      	add	r1, pc, #4	@ (adr r1, 80098a8 <_printf_i+0x40>)
 80098a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a8:	08009901 	.word	0x08009901
 80098ac:	08009915 	.word	0x08009915
 80098b0:	08009891 	.word	0x08009891
 80098b4:	08009891 	.word	0x08009891
 80098b8:	08009891 	.word	0x08009891
 80098bc:	08009891 	.word	0x08009891
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009891 	.word	0x08009891
 80098c8:	08009891 	.word	0x08009891
 80098cc:	08009891 	.word	0x08009891
 80098d0:	08009891 	.word	0x08009891
 80098d4:	08009a13 	.word	0x08009a13
 80098d8:	0800993f 	.word	0x0800993f
 80098dc:	080099cd 	.word	0x080099cd
 80098e0:	08009891 	.word	0x08009891
 80098e4:	08009891 	.word	0x08009891
 80098e8:	08009a35 	.word	0x08009a35
 80098ec:	08009891 	.word	0x08009891
 80098f0:	0800993f 	.word	0x0800993f
 80098f4:	08009891 	.word	0x08009891
 80098f8:	08009891 	.word	0x08009891
 80098fc:	080099d5 	.word	0x080099d5
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6032      	str	r2, [r6, #0]
 8009908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800990c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009910:	2301      	movs	r3, #1
 8009912:	e09c      	b.n	8009a4e <_printf_i+0x1e6>
 8009914:	6833      	ldr	r3, [r6, #0]
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	1d19      	adds	r1, r3, #4
 800991a:	6031      	str	r1, [r6, #0]
 800991c:	0606      	lsls	r6, r0, #24
 800991e:	d501      	bpl.n	8009924 <_printf_i+0xbc>
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	e003      	b.n	800992c <_printf_i+0xc4>
 8009924:	0645      	lsls	r5, r0, #25
 8009926:	d5fb      	bpl.n	8009920 <_printf_i+0xb8>
 8009928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800992c:	2d00      	cmp	r5, #0
 800992e:	da03      	bge.n	8009938 <_printf_i+0xd0>
 8009930:	232d      	movs	r3, #45	@ 0x2d
 8009932:	426d      	negs	r5, r5
 8009934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009938:	4858      	ldr	r0, [pc, #352]	@ (8009a9c <_printf_i+0x234>)
 800993a:	230a      	movs	r3, #10
 800993c:	e011      	b.n	8009962 <_printf_i+0xfa>
 800993e:	6821      	ldr	r1, [r4, #0]
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	0608      	lsls	r0, r1, #24
 8009944:	f853 5b04 	ldr.w	r5, [r3], #4
 8009948:	d402      	bmi.n	8009950 <_printf_i+0xe8>
 800994a:	0649      	lsls	r1, r1, #25
 800994c:	bf48      	it	mi
 800994e:	b2ad      	uxthmi	r5, r5
 8009950:	2f6f      	cmp	r7, #111	@ 0x6f
 8009952:	4852      	ldr	r0, [pc, #328]	@ (8009a9c <_printf_i+0x234>)
 8009954:	6033      	str	r3, [r6, #0]
 8009956:	bf14      	ite	ne
 8009958:	230a      	movne	r3, #10
 800995a:	2308      	moveq	r3, #8
 800995c:	2100      	movs	r1, #0
 800995e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009962:	6866      	ldr	r6, [r4, #4]
 8009964:	60a6      	str	r6, [r4, #8]
 8009966:	2e00      	cmp	r6, #0
 8009968:	db05      	blt.n	8009976 <_printf_i+0x10e>
 800996a:	6821      	ldr	r1, [r4, #0]
 800996c:	432e      	orrs	r6, r5
 800996e:	f021 0104 	bic.w	r1, r1, #4
 8009972:	6021      	str	r1, [r4, #0]
 8009974:	d04b      	beq.n	8009a0e <_printf_i+0x1a6>
 8009976:	4616      	mov	r6, r2
 8009978:	fbb5 f1f3 	udiv	r1, r5, r3
 800997c:	fb03 5711 	mls	r7, r3, r1, r5
 8009980:	5dc7      	ldrb	r7, [r0, r7]
 8009982:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009986:	462f      	mov	r7, r5
 8009988:	42bb      	cmp	r3, r7
 800998a:	460d      	mov	r5, r1
 800998c:	d9f4      	bls.n	8009978 <_printf_i+0x110>
 800998e:	2b08      	cmp	r3, #8
 8009990:	d10b      	bne.n	80099aa <_printf_i+0x142>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	07df      	lsls	r7, r3, #31
 8009996:	d508      	bpl.n	80099aa <_printf_i+0x142>
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	6861      	ldr	r1, [r4, #4]
 800999c:	4299      	cmp	r1, r3
 800999e:	bfde      	ittt	le
 80099a0:	2330      	movle	r3, #48	@ 0x30
 80099a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099aa:	1b92      	subs	r2, r2, r6
 80099ac:	6122      	str	r2, [r4, #16]
 80099ae:	f8cd a000 	str.w	sl, [sp]
 80099b2:	464b      	mov	r3, r9
 80099b4:	aa03      	add	r2, sp, #12
 80099b6:	4621      	mov	r1, r4
 80099b8:	4640      	mov	r0, r8
 80099ba:	f7ff fee7 	bl	800978c <_printf_common>
 80099be:	3001      	adds	r0, #1
 80099c0:	d14a      	bne.n	8009a58 <_printf_i+0x1f0>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	b004      	add	sp, #16
 80099c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	f043 0320 	orr.w	r3, r3, #32
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	4832      	ldr	r0, [pc, #200]	@ (8009aa0 <_printf_i+0x238>)
 80099d6:	2778      	movs	r7, #120	@ 0x78
 80099d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	061f      	lsls	r7, r3, #24
 80099e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80099e6:	d402      	bmi.n	80099ee <_printf_i+0x186>
 80099e8:	065f      	lsls	r7, r3, #25
 80099ea:	bf48      	it	mi
 80099ec:	b2ad      	uxthmi	r5, r5
 80099ee:	6031      	str	r1, [r6, #0]
 80099f0:	07d9      	lsls	r1, r3, #31
 80099f2:	bf44      	itt	mi
 80099f4:	f043 0320 	orrmi.w	r3, r3, #32
 80099f8:	6023      	strmi	r3, [r4, #0]
 80099fa:	b11d      	cbz	r5, 8009a04 <_printf_i+0x19c>
 80099fc:	2310      	movs	r3, #16
 80099fe:	e7ad      	b.n	800995c <_printf_i+0xf4>
 8009a00:	4826      	ldr	r0, [pc, #152]	@ (8009a9c <_printf_i+0x234>)
 8009a02:	e7e9      	b.n	80099d8 <_printf_i+0x170>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	f023 0320 	bic.w	r3, r3, #32
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	e7f6      	b.n	80099fc <_printf_i+0x194>
 8009a0e:	4616      	mov	r6, r2
 8009a10:	e7bd      	b.n	800998e <_printf_i+0x126>
 8009a12:	6833      	ldr	r3, [r6, #0]
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	6961      	ldr	r1, [r4, #20]
 8009a18:	1d18      	adds	r0, r3, #4
 8009a1a:	6030      	str	r0, [r6, #0]
 8009a1c:	062e      	lsls	r6, r5, #24
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	d501      	bpl.n	8009a26 <_printf_i+0x1be>
 8009a22:	6019      	str	r1, [r3, #0]
 8009a24:	e002      	b.n	8009a2c <_printf_i+0x1c4>
 8009a26:	0668      	lsls	r0, r5, #25
 8009a28:	d5fb      	bpl.n	8009a22 <_printf_i+0x1ba>
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	4616      	mov	r6, r2
 8009a32:	e7bc      	b.n	80099ae <_printf_i+0x146>
 8009a34:	6833      	ldr	r3, [r6, #0]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	6032      	str	r2, [r6, #0]
 8009a3a:	681e      	ldr	r6, [r3, #0]
 8009a3c:	6862      	ldr	r2, [r4, #4]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7f6 fbd5 	bl	80001f0 <memchr>
 8009a46:	b108      	cbz	r0, 8009a4c <_printf_i+0x1e4>
 8009a48:	1b80      	subs	r0, r0, r6
 8009a4a:	6060      	str	r0, [r4, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2300      	movs	r3, #0
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a56:	e7aa      	b.n	80099ae <_printf_i+0x146>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4640      	mov	r0, r8
 8009a60:	47d0      	blx	sl
 8009a62:	3001      	adds	r0, #1
 8009a64:	d0ad      	beq.n	80099c2 <_printf_i+0x15a>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	079b      	lsls	r3, r3, #30
 8009a6a:	d413      	bmi.n	8009a94 <_printf_i+0x22c>
 8009a6c:	68e0      	ldr	r0, [r4, #12]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	4298      	cmp	r0, r3
 8009a72:	bfb8      	it	lt
 8009a74:	4618      	movlt	r0, r3
 8009a76:	e7a6      	b.n	80099c6 <_printf_i+0x15e>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4640      	mov	r0, r8
 8009a80:	47d0      	blx	sl
 8009a82:	3001      	adds	r0, #1
 8009a84:	d09d      	beq.n	80099c2 <_printf_i+0x15a>
 8009a86:	3501      	adds	r5, #1
 8009a88:	68e3      	ldr	r3, [r4, #12]
 8009a8a:	9903      	ldr	r1, [sp, #12]
 8009a8c:	1a5b      	subs	r3, r3, r1
 8009a8e:	42ab      	cmp	r3, r5
 8009a90:	dcf2      	bgt.n	8009a78 <_printf_i+0x210>
 8009a92:	e7eb      	b.n	8009a6c <_printf_i+0x204>
 8009a94:	2500      	movs	r5, #0
 8009a96:	f104 0619 	add.w	r6, r4, #25
 8009a9a:	e7f5      	b.n	8009a88 <_printf_i+0x220>
 8009a9c:	0800ac96 	.word	0x0800ac96
 8009aa0:	0800aca7 	.word	0x0800aca7

08009aa4 <__sflush_r>:
 8009aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	0716      	lsls	r6, r2, #28
 8009aae:	4605      	mov	r5, r0
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	d454      	bmi.n	8009b5e <__sflush_r+0xba>
 8009ab4:	684b      	ldr	r3, [r1, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc02      	bgt.n	8009ac0 <__sflush_r+0x1c>
 8009aba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dd48      	ble.n	8009b52 <__sflush_r+0xae>
 8009ac0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d045      	beq.n	8009b52 <__sflush_r+0xae>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009acc:	682f      	ldr	r7, [r5, #0]
 8009ace:	6a21      	ldr	r1, [r4, #32]
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	d030      	beq.n	8009b36 <__sflush_r+0x92>
 8009ad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	0759      	lsls	r1, r3, #29
 8009ada:	d505      	bpl.n	8009ae8 <__sflush_r+0x44>
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ae2:	b10b      	cbz	r3, 8009ae8 <__sflush_r+0x44>
 8009ae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aec:	6a21      	ldr	r1, [r4, #32]
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b0      	blx	r6
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	d106      	bne.n	8009b06 <__sflush_r+0x62>
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	291d      	cmp	r1, #29
 8009afc:	d82b      	bhi.n	8009b56 <__sflush_r+0xb2>
 8009afe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba8 <__sflush_r+0x104>)
 8009b00:	40ca      	lsrs	r2, r1
 8009b02:	07d6      	lsls	r6, r2, #31
 8009b04:	d527      	bpl.n	8009b56 <__sflush_r+0xb2>
 8009b06:	2200      	movs	r2, #0
 8009b08:	6062      	str	r2, [r4, #4]
 8009b0a:	04d9      	lsls	r1, r3, #19
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	6022      	str	r2, [r4, #0]
 8009b10:	d504      	bpl.n	8009b1c <__sflush_r+0x78>
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0x76>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b903      	cbnz	r3, 8009b1c <__sflush_r+0x78>
 8009b1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b1e:	602f      	str	r7, [r5, #0]
 8009b20:	b1b9      	cbz	r1, 8009b52 <__sflush_r+0xae>
 8009b22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b26:	4299      	cmp	r1, r3
 8009b28:	d002      	beq.n	8009b30 <__sflush_r+0x8c>
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7ff fbf4 	bl	8009318 <_free_r>
 8009b30:	2300      	movs	r3, #0
 8009b32:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b34:	e00d      	b.n	8009b52 <__sflush_r+0xae>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b0      	blx	r6
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	1c50      	adds	r0, r2, #1
 8009b40:	d1c9      	bne.n	8009ad6 <__sflush_r+0x32>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0c6      	beq.n	8009ad6 <__sflush_r+0x32>
 8009b48:	2b1d      	cmp	r3, #29
 8009b4a:	d001      	beq.n	8009b50 <__sflush_r+0xac>
 8009b4c:	2b16      	cmp	r3, #22
 8009b4e:	d11e      	bne.n	8009b8e <__sflush_r+0xea>
 8009b50:	602f      	str	r7, [r5, #0]
 8009b52:	2000      	movs	r0, #0
 8009b54:	e022      	b.n	8009b9c <__sflush_r+0xf8>
 8009b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5a:	b21b      	sxth	r3, r3
 8009b5c:	e01b      	b.n	8009b96 <__sflush_r+0xf2>
 8009b5e:	690f      	ldr	r7, [r1, #16]
 8009b60:	2f00      	cmp	r7, #0
 8009b62:	d0f6      	beq.n	8009b52 <__sflush_r+0xae>
 8009b64:	0793      	lsls	r3, r2, #30
 8009b66:	680e      	ldr	r6, [r1, #0]
 8009b68:	bf08      	it	eq
 8009b6a:	694b      	ldreq	r3, [r1, #20]
 8009b6c:	600f      	str	r7, [r1, #0]
 8009b6e:	bf18      	it	ne
 8009b70:	2300      	movne	r3, #0
 8009b72:	eba6 0807 	sub.w	r8, r6, r7
 8009b76:	608b      	str	r3, [r1, #8]
 8009b78:	f1b8 0f00 	cmp.w	r8, #0
 8009b7c:	dde9      	ble.n	8009b52 <__sflush_r+0xae>
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b82:	4643      	mov	r3, r8
 8009b84:	463a      	mov	r2, r7
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b0      	blx	r6
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	dc08      	bgt.n	8009ba0 <__sflush_r+0xfc>
 8009b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba0:	4407      	add	r7, r0
 8009ba2:	eba8 0800 	sub.w	r8, r8, r0
 8009ba6:	e7e7      	b.n	8009b78 <__sflush_r+0xd4>
 8009ba8:	20400001 	.word	0x20400001

08009bac <_fflush_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	b913      	cbnz	r3, 8009bbc <_fflush_r+0x10>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	4628      	mov	r0, r5
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	b118      	cbz	r0, 8009bc6 <_fflush_r+0x1a>
 8009bbe:	6a03      	ldr	r3, [r0, #32]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <_fflush_r+0x1a>
 8009bc2:	f7ff f999 	bl	8008ef8 <__sinit>
 8009bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0f3      	beq.n	8009bb6 <_fflush_r+0xa>
 8009bce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bd0:	07d0      	lsls	r0, r2, #31
 8009bd2:	d404      	bmi.n	8009bde <_fflush_r+0x32>
 8009bd4:	0599      	lsls	r1, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_fflush_r+0x32>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bda:	f7ff fb8c 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8009bde:	4628      	mov	r0, r5
 8009be0:	4621      	mov	r1, r4
 8009be2:	f7ff ff5f 	bl	8009aa4 <__sflush_r>
 8009be6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009be8:	07da      	lsls	r2, r3, #31
 8009bea:	4605      	mov	r5, r0
 8009bec:	d4e4      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	059b      	lsls	r3, r3, #22
 8009bf2:	d4e1      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f7ff fb7f 	bl	80092f8 <__retarget_lock_release_recursive>
 8009bfa:	e7dd      	b.n	8009bb8 <_fflush_r+0xc>

08009bfc <__swhatbuf_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	460c      	mov	r4, r1
 8009c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c04:	2900      	cmp	r1, #0
 8009c06:	b096      	sub	sp, #88	@ 0x58
 8009c08:	4615      	mov	r5, r2
 8009c0a:	461e      	mov	r6, r3
 8009c0c:	da0d      	bge.n	8009c2a <__swhatbuf_r+0x2e>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c14:	f04f 0100 	mov.w	r1, #0
 8009c18:	bf14      	ite	ne
 8009c1a:	2340      	movne	r3, #64	@ 0x40
 8009c1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c20:	2000      	movs	r0, #0
 8009c22:	6031      	str	r1, [r6, #0]
 8009c24:	602b      	str	r3, [r5, #0]
 8009c26:	b016      	add	sp, #88	@ 0x58
 8009c28:	bd70      	pop	{r4, r5, r6, pc}
 8009c2a:	466a      	mov	r2, sp
 8009c2c:	f000 f87c 	bl	8009d28 <_fstat_r>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dbec      	blt.n	8009c0e <__swhatbuf_r+0x12>
 8009c34:	9901      	ldr	r1, [sp, #4]
 8009c36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c3e:	4259      	negs	r1, r3
 8009c40:	4159      	adcs	r1, r3
 8009c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c46:	e7eb      	b.n	8009c20 <__swhatbuf_r+0x24>

08009c48 <__smakebuf_r>:
 8009c48:	898b      	ldrh	r3, [r1, #12]
 8009c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c4c:	079d      	lsls	r5, r3, #30
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	d507      	bpl.n	8009c64 <__smakebuf_r+0x1c>
 8009c54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	6163      	str	r3, [r4, #20]
 8009c60:	b003      	add	sp, #12
 8009c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c64:	ab01      	add	r3, sp, #4
 8009c66:	466a      	mov	r2, sp
 8009c68:	f7ff ffc8 	bl	8009bfc <__swhatbuf_r>
 8009c6c:	9f00      	ldr	r7, [sp, #0]
 8009c6e:	4605      	mov	r5, r0
 8009c70:	4639      	mov	r1, r7
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff fbbc 	bl	80093f0 <_malloc_r>
 8009c78:	b948      	cbnz	r0, 8009c8e <__smakebuf_r+0x46>
 8009c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7e:	059a      	lsls	r2, r3, #22
 8009c80:	d4ee      	bmi.n	8009c60 <__smakebuf_r+0x18>
 8009c82:	f023 0303 	bic.w	r3, r3, #3
 8009c86:	f043 0302 	orr.w	r3, r3, #2
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	e7e2      	b.n	8009c54 <__smakebuf_r+0xc>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	6020      	str	r0, [r4, #0]
 8009c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	9b01      	ldr	r3, [sp, #4]
 8009c9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c9e:	b15b      	cbz	r3, 8009cb8 <__smakebuf_r+0x70>
 8009ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f000 f851 	bl	8009d4c <_isatty_r>
 8009caa:	b128      	cbz	r0, 8009cb8 <__smakebuf_r+0x70>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	f043 0301 	orr.w	r3, r3, #1
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	431d      	orrs	r5, r3
 8009cbc:	81a5      	strh	r5, [r4, #12]
 8009cbe:	e7cf      	b.n	8009c60 <__smakebuf_r+0x18>

08009cc0 <_putc_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b118      	cbz	r0, 8009cd2 <_putc_r+0x12>
 8009cca:	6a03      	ldr	r3, [r0, #32]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <_putc_r+0x12>
 8009cce:	f7ff f913 	bl	8008ef8 <__sinit>
 8009cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cd4:	07d8      	lsls	r0, r3, #31
 8009cd6:	d405      	bmi.n	8009ce4 <_putc_r+0x24>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	0599      	lsls	r1, r3, #22
 8009cdc:	d402      	bmi.n	8009ce4 <_putc_r+0x24>
 8009cde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ce0:	f7ff fb09 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8009ce4:	68a3      	ldr	r3, [r4, #8]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	60a3      	str	r3, [r4, #8]
 8009cec:	da05      	bge.n	8009cfa <_putc_r+0x3a>
 8009cee:	69a2      	ldr	r2, [r4, #24]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	db12      	blt.n	8009d1a <_putc_r+0x5a>
 8009cf4:	b2eb      	uxtb	r3, r5
 8009cf6:	2b0a      	cmp	r3, #10
 8009cf8:	d00f      	beq.n	8009d1a <_putc_r+0x5a>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	701d      	strb	r5, [r3, #0]
 8009d02:	b2ed      	uxtb	r5, r5
 8009d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d06:	07da      	lsls	r2, r3, #31
 8009d08:	d405      	bmi.n	8009d16 <_putc_r+0x56>
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	059b      	lsls	r3, r3, #22
 8009d0e:	d402      	bmi.n	8009d16 <_putc_r+0x56>
 8009d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d12:	f7ff faf1 	bl	80092f8 <__retarget_lock_release_recursive>
 8009d16:	4628      	mov	r0, r5
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff f9db 	bl	80090da <__swbuf_r>
 8009d24:	4605      	mov	r5, r0
 8009d26:	e7ed      	b.n	8009d04 <_putc_r+0x44>

08009d28 <_fstat_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	@ (8009d48 <_fstat_r+0x20>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	4611      	mov	r1, r2
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	f7f7 fff8 	bl	8001d2a <_fstat>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d102      	bne.n	8009d44 <_fstat_r+0x1c>
 8009d3e:	682b      	ldr	r3, [r5, #0]
 8009d40:	b103      	cbz	r3, 8009d44 <_fstat_r+0x1c>
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	20001738 	.word	0x20001738

08009d4c <_isatty_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d06      	ldr	r5, [pc, #24]	@ (8009d68 <_isatty_r+0x1c>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	f7f7 fff7 	bl	8001d4a <_isatty>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_isatty_r+0x1a>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_isatty_r+0x1a>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20001738 	.word	0x20001738

08009d6c <_sbrk_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	@ (8009d88 <_sbrk_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f8 f800 	bl	8001d7c <_sbrk>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_sbrk_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_sbrk_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20001738 	.word	0x20001738

08009d8c <_init>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr

08009d98 <_fini>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr
