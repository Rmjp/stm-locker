
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009784  08009784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0000a78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009794  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b4  20000074  08009808  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001728  08009808  0000b728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c697  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409e  00000000  00000000  0002773b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146e  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ff  00000000  00000000  0002e68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb9c  00000000  00000000  0005308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f10  00000000  00000000  00071c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007614  00000000  00000000  00149b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00151190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008874 	.word	0x08008874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008874 	.word	0x08008874

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090
 80005ec:	200000e4 	.word	0x200000e4

080005f0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005fe:	2201      	movs	r2, #1
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <__io_putchar+0x20>)
 8000602:	f005 f875 	bl	80056f0 <HAL_UART_Transmit>

  return ch;
 8000606:	687b      	ldr	r3, [r7, #4]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200003cc 	.word	0x200003cc

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b09a      	sub	sp, #104	@ 0x68
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f001 fafc 	bl	8001c16 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f88f 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f9ff 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000626:	f000 f9df 	bl	80009e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f9ad 	bl	8000988 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800062e:	f000 f8e9 	bl	8000804 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000632:	f000 f927 	bl	8000884 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello \n");
 8000636:	4835      	ldr	r0, [pc, #212]	@ (800070c <main+0xf8>)
 8000638:	f007 fa86 	bl	8007b48 <puts>

  SSD1306_Init (); // initialise the display
 800063c:	f000 fd10 	bl	8001060 <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8000640:	210a      	movs	r1, #10
 8000642:	200a      	movs	r0, #10
 8000644:	f000 fe76 	bl	8001334 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000648:	2201      	movs	r2, #1
 800064a:	4931      	ldr	r1, [pc, #196]	@ (8000710 <main+0xfc>)
 800064c:	4831      	ldr	r0, [pc, #196]	@ (8000714 <main+0x100>)
 800064e:	f000 ff05 	bl	800145c <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000652:	211e      	movs	r1, #30
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fe6d 	bl	8001334 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	492c      	ldr	r1, [pc, #176]	@ (8000710 <main+0xfc>)
 800065e:	482e      	ldr	r0, [pc, #184]	@ (8000718 <main+0x104>)
 8000660:	f000 fefc 	bl	800145c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000664:	f000 fdc0 	bl	80011e8 <SSD1306_UpdateScreen>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of i2cQ */
  osMessageQDef(i2cQ, 16, uint16_t);
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <main+0x108>)
 800066a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800066e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQHandle = osMessageCreate(osMessageQ(i2cQ), NULL);
 8000674:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fd88 	bl	8006190 <osMessageCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a27      	ldr	r2, [pc, #156]	@ (8000720 <main+0x10c>)
 8000684:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <main+0x110>)
 8000688:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fd15 	bl	80060d0 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <main+0x114>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad */
  osThreadDef(keypad, keypadTask, osPriorityIdle, 0, 128);
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <main+0x118>)
 80006ae:	f107 0420 	add.w	r4, r7, #32
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadHandle = osThreadCreate(osThread(keypad), NULL);
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fd02 	bl	80060d0 <osThreadCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <main+0x11c>)
 80006d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2c */
  osThreadDef(i2c, i2cTask03, osPriorityIdle, 0, 128);
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <main+0x120>)
 80006d4:	1d3c      	adds	r4, r7, #4
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cHandle = osThreadCreate(osThread(i2c), NULL);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fcf1 	bl	80060d0 <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <main+0x124>)
 80006f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f005 fce5 	bl	80060c2 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (esp32_data_ready)
 80006f8:	4b10      	ldr	r3, [pc, #64]	@ (800073c <main+0x128>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0fb      	beq.n	80006f8 <main+0xe4>
	      {
	          esp32_data_ready = 0;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <main+0x128>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	          // do the read
	          SlaveDataReady_Callback();
 8000706:	f000 fc71 	bl	8000fec <SlaveDataReady_Callback>
    if (esp32_data_ready)
 800070a:	e7f5      	b.n	80006f8 <main+0xe4>
 800070c:	0800888c 	.word	0x0800888c
 8000710:	20000000 	.word	0x20000000
 8000714:	08008894 	.word	0x08008894
 8000718:	0800889c 	.word	0x0800889c
 800071c:	080088a8 	.word	0x080088a8
 8000720:	20000460 	.word	0x20000460
 8000724:	080088c4 	.word	0x080088c4
 8000728:	20000454 	.word	0x20000454
 800072c:	080088e8 	.word	0x080088e8
 8000730:	20000458 	.word	0x20000458
 8000734:	08008908 	.word	0x08008908
 8000738:	2000045c 	.word	0x2000045c
 800073c:	20000464 	.word	0x20000464

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	@ 0x58
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2244      	movs	r2, #68	@ 0x44
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f007 fada 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000762:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000766:	f002 fd97 	bl	8003298 <HAL_PWREx_ControlVoltageScaling>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000770:	f000 fc36 	bl	8000fe0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000774:	f002 fd72 	bl	800325c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <SystemClock_Config+0xc0>)
 800077a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800077e:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <SystemClock_Config+0xc0>)
 8000780:	f023 0318 	bic.w	r3, r3, #24
 8000784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000788:	2314      	movs	r3, #20
 800078a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000798:	2360      	movs	r3, #96	@ 0x60
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007a8:	2318      	movs	r3, #24
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fdc1 	bl	8003344 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fc0a 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2102      	movs	r1, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f9c1 	bl	8003b6c <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007f0:	f000 fbf6 	bl	8000fe0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007f4:	f003 fe06 	bl	8004404 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f001 fe1e 	bl	8002480 <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 fbc9 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f002 fc6b 	bl	800312c <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fbc0 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f002 fcad 	bl	80031c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fbb7 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002e4 	.word	0x200002e4
 800087c:	40005400 	.word	0x40005400
 8000880:	0090194b 	.word	0x0090194b

08000884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	@ 0x38
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b6:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008c0:	f240 3283 	movw	r2, #899	@ 0x383
 80008c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e0:	4828      	ldr	r0, [pc, #160]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008e2:	f003 fe91 	bl	8004608 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008ec:	f000 fb78 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4821      	ldr	r0, [pc, #132]	@ (8000984 <MX_TIM2_Init+0x100>)
 80008fe:	f004 f9ab 	bl	8004c58 <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000908:	f000 fb6a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090c:	481d      	ldr	r0, [pc, #116]	@ (8000984 <MX_TIM2_Init+0x100>)
 800090e:	f003 ff27 	bl	8004760 <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000918:	f000 fb62 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4816      	ldr	r0, [pc, #88]	@ (8000984 <MX_TIM2_Init+0x100>)
 800092c:	f004 fe0e 	bl	800554c <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000936:	f000 fb53 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	@ 0x60
 800093c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_TIM2_Init+0x100>)
 8000952:	f004 f86d 	bl	8004a30 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800095c:	f000 fb40 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2204      	movs	r2, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4807      	ldr	r0, [pc, #28]	@ (8000984 <MX_TIM2_Init+0x100>)
 8000968:	f004 f862 	bl	8004a30 <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000972:	f000 fb35 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000976:	4803      	ldr	r0, [pc, #12]	@ (8000984 <MX_TIM2_Init+0x100>)
 8000978:	f000 ff0c 	bl	8001794 <HAL_TIM_MspPostInit>

}
 800097c:	bf00      	nop
 800097e:	3738      	adds	r7, #56	@ 0x38
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000380 	.word	0x20000380

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <MX_USART2_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009cc:	f004 fe42 	bl	8005654 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 fb03 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200003cc 	.word	0x200003cc
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_DMA_Init+0x38>)
 80009f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <MX_DMA_Init+0x38>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_DMA_Init+0x38>)
 80009fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	2011      	movs	r0, #17
 8000a0c:	f001 f9f4 	bl	8001df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a10:	2011      	movs	r0, #17
 8000a12:	f001 fa0d 	bl	8001e30 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b40      	ldr	r3, [pc, #256]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b3a      	ldr	r3, [pc, #232]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a39      	ldr	r2, [pc, #228]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b37      	ldr	r3, [pc, #220]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a33      	ldr	r2, [pc, #204]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <MX_GPIO_Init+0x118>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f001 fcc8 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	210a      	movs	r1, #10
 8000a94:	482a      	ldr	r0, [pc, #168]	@ (8000b40 <MX_GPIO_Init+0x11c>)
 8000a96:	f001 fcc3 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 8000a9a:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f001 fb31 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000abe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	481c      	ldr	r0, [pc, #112]	@ (8000b40 <MX_GPIO_Init+0x11c>)
 8000ad0:	f001 fb24 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4815      	ldr	r0, [pc, #84]	@ (8000b40 <MX_GPIO_Init+0x11c>)
 8000aec:	f001 fb16 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000af0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f001 fb08 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000b0c:	2330      	movs	r3, #48	@ 0x30
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <MX_GPIO_Init+0x11c>)
 8000b20:	f001 fafc 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2006      	movs	r0, #6
 8000b2a:	f001 f965 	bl	8001df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f001 f97e 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400

08000b44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f005 fb0b 	bl	8006168 <osDelay>
 8000b52:	e7fb      	b.n	8000b4c <StartDefaultTask+0x8>

08000b54 <read_keypad>:
* @brief Function implementing the keypad thread.
* @param argument: Not used
* @retval None
*/
char read_keypad(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    // --- Scan Row 1 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  // Set Row 1 low
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b62:	f001 fc5d 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);      // Set Row 2 high
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f001 fc56 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);      // Set Row 3 high
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	48c3      	ldr	r0, [pc, #780]	@ (8000e88 <read_keypad+0x334>)
 8000b7a:	f001 fc51 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);      // Set Row 4 high
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f001 fc4b 	bl	8002420 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f001 fc2d 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10b      	bne.n	8000bb4 <read_keypad+0x60>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000b9c:	bf00      	nop
 8000b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f001 fc23 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f6      	beq.n	8000b9e <read_keypad+0x4a>
        return '1';
 8000bb0:	2331      	movs	r3, #49	@ 0x31
 8000bb2:	e166      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000bb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f001 fc18 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <read_keypad+0x8a>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000bc6:	bf00      	nop
 8000bc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f001 fc0e 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f6      	beq.n	8000bc8 <read_keypad+0x74>
        return '2';
 8000bda:	2332      	movs	r3, #50	@ 0x32
 8000bdc:	e151      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000bde:	2120      	movs	r1, #32
 8000be0:	48a9      	ldr	r0, [pc, #676]	@ (8000e88 <read_keypad+0x334>)
 8000be2:	f001 fc05 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <read_keypad+0xac>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000bec:	bf00      	nop
 8000bee:	2120      	movs	r1, #32
 8000bf0:	48a5      	ldr	r0, [pc, #660]	@ (8000e88 <read_keypad+0x334>)
 8000bf2:	f001 fbfd 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f8      	beq.n	8000bee <read_keypad+0x9a>
        return '3';
 8000bfc:	2333      	movs	r3, #51	@ 0x33
 8000bfe:	e140      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000c00:	2110      	movs	r1, #16
 8000c02:	48a1      	ldr	r0, [pc, #644]	@ (8000e88 <read_keypad+0x334>)
 8000c04:	f001 fbf4 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d109      	bne.n	8000c22 <read_keypad+0xce>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000c0e:	bf00      	nop
 8000c10:	2110      	movs	r1, #16
 8000c12:	489d      	ldr	r0, [pc, #628]	@ (8000e88 <read_keypad+0x334>)
 8000c14:	f001 fbec 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f8      	beq.n	8000c10 <read_keypad+0xbc>
        return 'A';
 8000c1e:	2341      	movs	r3, #65	@ 0x41
 8000c20:	e12f      	b.n	8000e82 <read_keypad+0x32e>
    }

    // --- Scan Row 2 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f001 fbf8 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Set Row 2 low
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f001 fbf1 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2102      	movs	r1, #2
 8000c42:	4891      	ldr	r0, [pc, #580]	@ (8000e88 <read_keypad+0x334>)
 8000c44:	f001 fbec 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fbe6 	bl	8002420 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5c:	f001 fbc8 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10b      	bne.n	8000c7e <read_keypad+0x12a>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000c66:	bf00      	nop
 8000c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f001 fbbe 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f6      	beq.n	8000c68 <read_keypad+0x114>
        return '4';
 8000c7a:	2334      	movs	r3, #52	@ 0x34
 8000c7c:	e101      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000c7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c86:	f001 fbb3 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <read_keypad+0x154>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000c90:	bf00      	nop
 8000c92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f001 fba9 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f6      	beq.n	8000c92 <read_keypad+0x13e>
        return '5';
 8000ca4:	2335      	movs	r3, #53	@ 0x35
 8000ca6:	e0ec      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4877      	ldr	r0, [pc, #476]	@ (8000e88 <read_keypad+0x334>)
 8000cac:	f001 fba0 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d109      	bne.n	8000cca <read_keypad+0x176>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000cb6:	bf00      	nop
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4873      	ldr	r0, [pc, #460]	@ (8000e88 <read_keypad+0x334>)
 8000cbc:	f001 fb98 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f8      	beq.n	8000cb8 <read_keypad+0x164>
        return '6';
 8000cc6:	2336      	movs	r3, #54	@ 0x36
 8000cc8:	e0db      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000cca:	2110      	movs	r1, #16
 8000ccc:	486e      	ldr	r0, [pc, #440]	@ (8000e88 <read_keypad+0x334>)
 8000cce:	f001 fb8f 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d109      	bne.n	8000cec <read_keypad+0x198>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000cd8:	bf00      	nop
 8000cda:	2110      	movs	r1, #16
 8000cdc:	486a      	ldr	r0, [pc, #424]	@ (8000e88 <read_keypad+0x334>)
 8000cde:	f001 fb87 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f8      	beq.n	8000cda <read_keypad+0x186>
        return 'B';
 8000ce8:	2342      	movs	r3, #66	@ 0x42
 8000cea:	e0ca      	b.n	8000e82 <read_keypad+0x32e>
    }

    // --- Scan Row 3 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f001 fb93 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d04:	f001 fb8c 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Set Row 3 low
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	485e      	ldr	r0, [pc, #376]	@ (8000e88 <read_keypad+0x334>)
 8000d0e:	f001 fb87 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 fb81 	bl	8002420 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000d1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d26:	f001 fb63 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10b      	bne.n	8000d48 <read_keypad+0x1f4>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000d30:	bf00      	nop
 8000d32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f001 fb59 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f6      	beq.n	8000d32 <read_keypad+0x1de>
        return '7';
 8000d44:	2337      	movs	r3, #55	@ 0x37
 8000d46:	e09c      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000d48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f001 fb4e 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10b      	bne.n	8000d72 <read_keypad+0x21e>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000d5a:	bf00      	nop
 8000d5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d64:	f001 fb44 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f6      	beq.n	8000d5c <read_keypad+0x208>
        return '8';
 8000d6e:	2338      	movs	r3, #56	@ 0x38
 8000d70:	e087      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000d72:	2120      	movs	r1, #32
 8000d74:	4844      	ldr	r0, [pc, #272]	@ (8000e88 <read_keypad+0x334>)
 8000d76:	f001 fb3b 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <read_keypad+0x240>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000d80:	bf00      	nop
 8000d82:	2120      	movs	r1, #32
 8000d84:	4840      	ldr	r0, [pc, #256]	@ (8000e88 <read_keypad+0x334>)
 8000d86:	f001 fb33 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f8      	beq.n	8000d82 <read_keypad+0x22e>
        return '9';
 8000d90:	2339      	movs	r3, #57	@ 0x39
 8000d92:	e076      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000d94:	2110      	movs	r1, #16
 8000d96:	483c      	ldr	r0, [pc, #240]	@ (8000e88 <read_keypad+0x334>)
 8000d98:	f001 fb2a 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <read_keypad+0x262>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000da2:	bf00      	nop
 8000da4:	2110      	movs	r1, #16
 8000da6:	4838      	ldr	r0, [pc, #224]	@ (8000e88 <read_keypad+0x334>)
 8000da8:	f001 fb22 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f8      	beq.n	8000da4 <read_keypad+0x250>
        return 'C';
 8000db2:	2343      	movs	r3, #67	@ 0x43
 8000db4:	e065      	b.n	8000e82 <read_keypad+0x32e>
    }

    // --- Scan Row 4 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f001 fb2e 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dce:	f001 fb27 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	482c      	ldr	r0, [pc, #176]	@ (8000e88 <read_keypad+0x334>)
 8000dd8:	f001 fb22 	bl	8002420 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Set Row 4 low
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f001 fb1c 	bl	8002420 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df0:	f001 fafe 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10b      	bne.n	8000e12 <read_keypad+0x2be>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000dfa:	bf00      	nop
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f001 faf4 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f6      	beq.n	8000dfc <read_keypad+0x2a8>
        return '*';
 8000e0e:	232a      	movs	r3, #42	@ 0x2a
 8000e10:	e037      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f001 fae9 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <read_keypad+0x2e8>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000e24:	bf00      	nop
 8000e26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f001 fadf 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f6      	beq.n	8000e26 <read_keypad+0x2d2>
        return '0';
 8000e38:	2330      	movs	r3, #48	@ 0x30
 8000e3a:	e022      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <read_keypad+0x334>)
 8000e40:	f001 fad6 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d109      	bne.n	8000e5e <read_keypad+0x30a>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000e4a:	bf00      	nop
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <read_keypad+0x334>)
 8000e50:	f001 face 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f8      	beq.n	8000e4c <read_keypad+0x2f8>
        return '#';
 8000e5a:	2323      	movs	r3, #35	@ 0x23
 8000e5c:	e011      	b.n	8000e82 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <read_keypad+0x334>)
 8000e62:	f001 fac5 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d109      	bne.n	8000e80 <read_keypad+0x32c>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000e6c:	bf00      	nop
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <read_keypad+0x334>)
 8000e72:	f001 fabd 	bl	80023f0 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f8      	beq.n	8000e6e <read_keypad+0x31a>
        return 'D';
 8000e7c:	2344      	movs	r3, #68	@ 0x44
 8000e7e:	e000      	b.n	8000e82 <read_keypad+0x32e>
    }

    // If no key is pressed, return null character.
    return '\0';
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	48000400 	.word	0x48000400

08000e8c <keypadTask>:

/* USER CODE END Header_keypadTask */
void keypadTask(void const * argument)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	  // Index for current position in the PIN buffer.
	  static uint8_t pin_index = 0;

	  for(;;)
	  {
	    key = read_keypad();  // Scan the keypad
 8000e94:	f7ff fe5e 	bl	8000b54 <read_keypad>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73bb      	strb	r3, [r7, #14]
	    if(key != '\0')
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06e      	beq.n	8000f80 <keypadTask+0xf4>
	    {
	      // If a numeric key (0-9) is pressed, append it if there is space.
	      if(key >= '0' && key <= '9')
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ea6:	d917      	bls.n	8000ed8 <keypadTask+0x4c>
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	2b39      	cmp	r3, #57	@ 0x39
 8000eac:	d814      	bhi.n	8000ed8 <keypadTask+0x4c>
	      {
	        if(pin_index < 4)
 8000eae:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <keypadTask+0xfc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d841      	bhi.n	8000f3a <keypadTask+0xae>
	        {
	          pin[pin_index++] = key;
 8000eb6:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <keypadTask+0xfc>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	b2d1      	uxtb	r1, r2
 8000ebe:	4a32      	ldr	r2, [pc, #200]	@ (8000f88 <keypadTask+0xfc>)
 8000ec0:	7011      	strb	r1, [r2, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4a31      	ldr	r2, [pc, #196]	@ (8000f8c <keypadTask+0x100>)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	5453      	strb	r3, [r2, r1]
	          pin[pin_index] = '\0';
 8000eca:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <keypadTask+0xfc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <keypadTask+0x100>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]
	        if(pin_index < 4)
 8000ed6:	e030      	b.n	8000f3a <keypadTask+0xae>
	        }
	      }
	      // If '*' is pressed, clear the current PIN entry.
	      else if(key == '*')
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8000edc:	d106      	bne.n	8000eec <keypadTask+0x60>
	      {
	        pin_index = 0;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <keypadTask+0xfc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <keypadTask+0x100>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e026      	b.n	8000f3a <keypadTask+0xae>
	      }
	      // If '#' is pressed, assume it's a submit.
	      // (For example, check if the PIN is correct, then clear the buffer.)
	      else if(key == '#')
 8000eec:	7bbb      	ldrb	r3, [r7, #14]
 8000eee:	2b23      	cmp	r3, #35	@ 0x23
 8000ef0:	d123      	bne.n	8000f3a <keypadTask+0xae>
	      {
	        // Example PIN check (replace "1234" with your desired PIN)
	        SSD1306_Clear();
 8000ef2:	f000 fad8 	bl	80014a6 <SSD1306_Clear>
	        SSD1306_GotoXY(0, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 fa1b 	bl	8001334 <SSD1306_GotoXY>
	        if(strcmp(pin, "1234") == 0)
 8000efe:	4924      	ldr	r1, [pc, #144]	@ (8000f90 <keypadTask+0x104>)
 8000f00:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <keypadTask+0x100>)
 8000f02:	f7ff f965 	bl	80001d0 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <keypadTask+0x8c>
	        {
	          SSD1306_Puts("PIN OK", &Font_11x18, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4921      	ldr	r1, [pc, #132]	@ (8000f94 <keypadTask+0x108>)
 8000f10:	4821      	ldr	r0, [pc, #132]	@ (8000f98 <keypadTask+0x10c>)
 8000f12:	f000 faa3 	bl	800145c <SSD1306_Puts>
 8000f16:	e004      	b.n	8000f22 <keypadTask+0x96>
	        }
	        else
	        {
	          SSD1306_Puts("PIN ERR", &Font_11x18, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	491e      	ldr	r1, [pc, #120]	@ (8000f94 <keypadTask+0x108>)
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <keypadTask+0x110>)
 8000f1e:	f000 fa9d 	bl	800145c <SSD1306_Puts>
	        }
	        SSD1306_UpdateScreen();
 8000f22:	f000 f961 	bl	80011e8 <SSD1306_UpdateScreen>
	        osDelay(1000);  // Show the result for a second
 8000f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2a:	f005 f91d 	bl	8006168 <osDelay>

	        // Clear the PIN buffer after submission.
	        pin_index = 0;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <keypadTask+0xfc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <keypadTask+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
	      }

	      // After any key action update the display with the masked PIN.
	      SSD1306_Clear();
 8000f3a:	f000 fab4 	bl	80014a6 <SSD1306_Clear>
	      SSD1306_GotoXY(0, 0);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f9f7 	bl	8001334 <SSD1306_GotoXY>
	      SSD1306_Puts("PIN: ", &Font_11x18, 1);
 8000f46:	2201      	movs	r2, #1
 8000f48:	4912      	ldr	r1, [pc, #72]	@ (8000f94 <keypadTask+0x108>)
 8000f4a:	4815      	ldr	r0, [pc, #84]	@ (8000fa0 <keypadTask+0x114>)
 8000f4c:	f000 fa86 	bl	800145c <SSD1306_Puts>
	      // Print an asterisk for each digit entered.
	      for(uint8_t i = 0; i < pin_index; i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e007      	b.n	8000f66 <keypadTask+0xda>
	      {
	        SSD1306_Puts("*", &Font_11x18, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	490e      	ldr	r1, [pc, #56]	@ (8000f94 <keypadTask+0x108>)
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <keypadTask+0x118>)
 8000f5c:	f000 fa7e 	bl	800145c <SSD1306_Puts>
	      for(uint8_t i = 0; i < pin_index; i++)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <keypadTask+0xfc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3f2      	bcc.n	8000f56 <keypadTask+0xca>
	      }
	      SSD1306_UpdateScreen();
 8000f70:	f000 f93a 	bl	80011e8 <SSD1306_UpdateScreen>

	      // (Optional) Debug print to UART.
	      printf("Key pressed: %c, current PIN: %s\r\n", key, pin);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <keypadTask+0x100>)
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <keypadTask+0x11c>)
 8000f7c:	f006 fd74 	bl	8007a68 <iprintf>
	    }
	    osDelay(50); // Delay to help with debouncing and reduce CPU load.
 8000f80:	2032      	movs	r0, #50	@ 0x32
 8000f82:	f005 f8f1 	bl	8006168 <osDelay>
	    key = read_keypad();  // Scan the keypad
 8000f86:	e785      	b.n	8000e94 <keypadTask+0x8>
 8000f88:	20000468 	.word	0x20000468
 8000f8c:	2000046c 	.word	0x2000046c
 8000f90:	08008924 	.word	0x08008924
 8000f94:	20000000 	.word	0x20000000
 8000f98:	0800892c 	.word	0x0800892c
 8000f9c:	08008934 	.word	0x08008934
 8000fa0:	0800893c 	.word	0x0800893c
 8000fa4:	08008944 	.word	0x08008944
 8000fa8:	08008948 	.word	0x08008948

08000fac <i2cTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask03 */
void i2cTask03(void const * argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2cTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f005 f8d7 	bl	8006168 <osDelay>
 8000fba:	e7fb      	b.n	8000fb4 <i2cTask03+0x8>

08000fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000fce:	f000 fe3b 	bl	8001c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012c00 	.word	0x40012c00

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 4, 100) == HAL_OK)
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	2364      	movs	r3, #100	@ 0x64
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2304      	movs	r3, #4
 8001002:	21c0      	movs	r1, #192	@ 0xc0
 8001004:	4812      	ldr	r0, [pc, #72]	@ (8001050 <SlaveDataReady_Callback+0x64>)
 8001006:	f001 fbef 	bl	80027e8 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d117      	bne.n	8001040 <SlaveDataReady_Callback+0x54>
    {
        printf("Received from ESP32 1:");
 8001010:	4810      	ldr	r0, [pc, #64]	@ (8001054 <SlaveDataReady_Callback+0x68>)
 8001012:	f006 fd29 	bl	8007a68 <iprintf>
        for(int i=0; i<8; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00a      	b.n	8001032 <SlaveDataReady_Callback+0x46>
        	printf("0x%02X ", rxBuffer[i]);
 800101c:	1d3a      	adds	r2, r7, #4
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	@ (8001058 <SlaveDataReady_Callback+0x6c>)
 8001028:	f006 fd1e 	bl	8007a68 <iprintf>
        for(int i=0; i<8; i++){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b07      	cmp	r3, #7
 8001036:	ddf1      	ble.n	800101c <SlaveDataReady_Callback+0x30>
        }
        printf("\n");
 8001038:	200a      	movs	r0, #10
 800103a:	f006 fd27 	bl	8007a8c <putchar>
    }
    else
    {
        printf("I2C read error ESP 1\n");
    }
}
 800103e:	e002      	b.n	8001046 <SlaveDataReady_Callback+0x5a>
        printf("I2C read error ESP 1\n");
 8001040:	4806      	ldr	r0, [pc, #24]	@ (800105c <SlaveDataReady_Callback+0x70>)
 8001042:	f006 fd81 	bl	8007b48 <puts>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200002e4 	.word	0x200002e4
 8001054:	0800896c 	.word	0x0800896c
 8001058:	08008984 	.word	0x08008984
 800105c:	0800898c 	.word	0x0800898c

08001060 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001066:	f000 fa27 	bl	80014b8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800106a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800106e:	2201      	movs	r2, #1
 8001070:	2178      	movs	r1, #120	@ 0x78
 8001072:	485b      	ldr	r0, [pc, #364]	@ (80011e0 <SSD1306_Init+0x180>)
 8001074:	f001 fcae 	bl	80029d4 <HAL_I2C_IsDeviceReady>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800107e:	2300      	movs	r3, #0
 8001080:	e0a9      	b.n	80011d6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001082:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001086:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001088:	e002      	b.n	8001090 <SSD1306_Init+0x30>
		p--;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3b01      	subs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f9      	bne.n	800108a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001096:	22ae      	movs	r2, #174	@ 0xae
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	@ 0x78
 800109c:	f000 fa88 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010a0:	2220      	movs	r2, #32
 80010a2:	2100      	movs	r1, #0
 80010a4:	2078      	movs	r0, #120	@ 0x78
 80010a6:	f000 fa83 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010aa:	2210      	movs	r2, #16
 80010ac:	2100      	movs	r1, #0
 80010ae:	2078      	movs	r0, #120	@ 0x78
 80010b0:	f000 fa7e 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010b4:	22b0      	movs	r2, #176	@ 0xb0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2078      	movs	r0, #120	@ 0x78
 80010ba:	f000 fa79 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010be:	22c8      	movs	r2, #200	@ 0xc8
 80010c0:	2100      	movs	r1, #0
 80010c2:	2078      	movs	r0, #120	@ 0x78
 80010c4:	f000 fa74 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2078      	movs	r0, #120	@ 0x78
 80010ce:	f000 fa6f 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010d2:	2210      	movs	r2, #16
 80010d4:	2100      	movs	r1, #0
 80010d6:	2078      	movs	r0, #120	@ 0x78
 80010d8:	f000 fa6a 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010dc:	2240      	movs	r2, #64	@ 0x40
 80010de:	2100      	movs	r1, #0
 80010e0:	2078      	movs	r0, #120	@ 0x78
 80010e2:	f000 fa65 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010e6:	2281      	movs	r2, #129	@ 0x81
 80010e8:	2100      	movs	r1, #0
 80010ea:	2078      	movs	r0, #120	@ 0x78
 80010ec:	f000 fa60 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010f0:	22ff      	movs	r2, #255	@ 0xff
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	@ 0x78
 80010f6:	f000 fa5b 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010fa:	22a1      	movs	r2, #161	@ 0xa1
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	@ 0x78
 8001100:	f000 fa56 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001104:	22a6      	movs	r2, #166	@ 0xa6
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	@ 0x78
 800110a:	f000 fa51 	bl	80015b0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800110e:	22a8      	movs	r2, #168	@ 0xa8
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	@ 0x78
 8001114:	f000 fa4c 	bl	80015b0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001118:	223f      	movs	r2, #63	@ 0x3f
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	@ 0x78
 800111e:	f000 fa47 	bl	80015b0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001122:	22a4      	movs	r2, #164	@ 0xa4
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	@ 0x78
 8001128:	f000 fa42 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800112c:	22d3      	movs	r2, #211	@ 0xd3
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	@ 0x78
 8001132:	f000 fa3d 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	@ 0x78
 800113c:	f000 fa38 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001140:	22d5      	movs	r2, #213	@ 0xd5
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	@ 0x78
 8001146:	f000 fa33 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800114a:	22f0      	movs	r2, #240	@ 0xf0
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	@ 0x78
 8001150:	f000 fa2e 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001154:	22d9      	movs	r2, #217	@ 0xd9
 8001156:	2100      	movs	r1, #0
 8001158:	2078      	movs	r0, #120	@ 0x78
 800115a:	f000 fa29 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800115e:	2222      	movs	r2, #34	@ 0x22
 8001160:	2100      	movs	r1, #0
 8001162:	2078      	movs	r0, #120	@ 0x78
 8001164:	f000 fa24 	bl	80015b0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001168:	22da      	movs	r2, #218	@ 0xda
 800116a:	2100      	movs	r1, #0
 800116c:	2078      	movs	r0, #120	@ 0x78
 800116e:	f000 fa1f 	bl	80015b0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8001172:	2212      	movs	r2, #18
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	@ 0x78
 8001178:	f000 fa1a 	bl	80015b0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800117c:	22db      	movs	r2, #219	@ 0xdb
 800117e:	2100      	movs	r1, #0
 8001180:	2078      	movs	r0, #120	@ 0x78
 8001182:	f000 fa15 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001186:	2220      	movs	r2, #32
 8001188:	2100      	movs	r1, #0
 800118a:	2078      	movs	r0, #120	@ 0x78
 800118c:	f000 fa10 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001190:	228d      	movs	r2, #141	@ 0x8d
 8001192:	2100      	movs	r1, #0
 8001194:	2078      	movs	r0, #120	@ 0x78
 8001196:	f000 fa0b 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800119a:	2214      	movs	r2, #20
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	@ 0x78
 80011a0:	f000 fa06 	bl	80015b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011a4:	22af      	movs	r2, #175	@ 0xaf
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	@ 0x78
 80011aa:	f000 fa01 	bl	80015b0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011ae:	222e      	movs	r2, #46	@ 0x2e
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	@ 0x78
 80011b4:	f000 f9fc 	bl	80015b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f843 	bl	8001244 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011be:	f000 f813 	bl	80011e8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <SSD1306_Init+0x184>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SSD1306_Init+0x184>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SSD1306_Init+0x184>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002e4 	.word	0x200002e4
 80011e4:	20000874 	.word	0x20000874

080011e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e01d      	b.n	8001230 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3b50      	subs	r3, #80	@ 0x50
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	2100      	movs	r1, #0
 80011fe:	2078      	movs	r0, #120	@ 0x78
 8001200:	f000 f9d6 	bl	80015b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2078      	movs	r0, #120	@ 0x78
 800120a:	f000 f9d1 	bl	80015b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800120e:	2210      	movs	r2, #16
 8001210:	2100      	movs	r1, #0
 8001212:	2078      	movs	r0, #120	@ 0x78
 8001214:	f000 f9cc 	bl	80015b0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	01db      	lsls	r3, r3, #7
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <SSD1306_UpdateScreen+0x58>)
 800121e:	441a      	add	r2, r3
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	2140      	movs	r1, #64	@ 0x40
 8001224:	2078      	movs	r0, #120	@ 0x78
 8001226:	f000 f95d 	bl	80014e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3301      	adds	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d9de      	bls.n	80011f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000474 	.word	0x20000474

08001244 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <SSD1306_Fill+0x14>
 8001254:	2300      	movs	r3, #0
 8001256:	e000      	b.n	800125a <SSD1306_Fill+0x16>
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125e:	4619      	mov	r1, r3
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <SSD1306_Fill+0x2c>)
 8001262:	f006 fd51 	bl	8007d08 <memset>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000474 	.word	0x20000474

08001274 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	460b      	mov	r3, r1
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	70fb      	strb	r3, [r7, #3]
	if (
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	2b7f      	cmp	r3, #127	@ 0x7f
 800128a:	d848      	bhi.n	800131e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001290:	d845      	bhi.n	800131e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001292:	4b26      	ldr	r3, [pc, #152]	@ (800132c <SSD1306_DrawPixel+0xb8>)
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d11a      	bne.n	80012e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ae:	88fa      	ldrh	r2, [r7, #6]
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	b298      	uxth	r0, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <SSD1306_DrawPixel+0xbc>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	4603      	mov	r3, r0
 80012d8:	01db      	lsls	r3, r3, #7
 80012da:	4413      	add	r3, r2
 80012dc:	b2c9      	uxtb	r1, r1
 80012de:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <SSD1306_DrawPixel+0xbc>)
 80012e0:	54d1      	strb	r1, [r2, r3]
 80012e2:	e01d      	b.n	8001320 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	b298      	uxth	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	4413      	add	r3, r2
 80012f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <SSD1306_DrawPixel+0xbc>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	b25b      	sxtb	r3, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	4013      	ands	r3, r2
 800130c:	b259      	sxtb	r1, r3
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	4603      	mov	r3, r0
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4413      	add	r3, r2
 8001316:	b2c9      	uxtb	r1, r1
 8001318:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SSD1306_DrawPixel+0xbc>)
 800131a:	54d1      	strb	r1, [r2, r3]
 800131c:	e000      	b.n	8001320 <SSD1306_DrawPixel+0xac>
		return;
 800131e:	bf00      	nop
	}
}
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000874 	.word	0x20000874
 8001330:	20000474 	.word	0x20000474

08001334 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	80fb      	strh	r3, [r7, #6]
 8001340:	4613      	mov	r3, r2
 8001342:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SSD1306_GotoXY+0x28>)
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <SSD1306_GotoXY+0x28>)
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	8053      	strh	r3, [r2, #2]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000874 	.word	0x20000874

08001360 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
	if (
 800137c:	2b7f      	cmp	r3, #127	@ 0x7f
 800137e:	dc07      	bgt.n	8001390 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	461a      	mov	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800138c:	2b3f      	cmp	r3, #63	@ 0x3f
 800138e:	dd01      	ble.n	8001394 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e05d      	b.n	8001450 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e04b      	b.n	8001432 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b20      	subs	r3, #32
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	7849      	ldrb	r1, [r1, #1]
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4619      	mov	r1, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	440b      	add	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e030      	b.n	8001420 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b298      	uxth	r0, r3
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013dc:	885a      	ldrh	r2, [r3, #2]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	79ba      	ldrb	r2, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff ff43 	bl	8001274 <SSD1306_DrawPixel>
 80013ee:	e014      	b.n	800141a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b298      	uxth	r0, r3
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013fe:	885a      	ldrh	r2, [r3, #2]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	f7ff ff2d 	bl	8001274 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4293      	cmp	r3, r2
 800142a:	d3c8      	bcc.n	80013be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	461a      	mov	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4293      	cmp	r3, r2
 800143c:	d3ad      	bcc.n	800139a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4413      	add	r3, r2
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <SSD1306_Putc+0xf8>)
 800144c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000874 	.word	0x20000874

0800145c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800146a:	e012      	b.n	8001492 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff73 	bl	8001360 <SSD1306_Putc>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e008      	b.n	800149e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e8      	bne.n	800146c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff feca 	bl	8001244 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014b0:	f7ff fe9a 	bl	80011e8 <SSD1306_UpdateScreen>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <ssd1306_I2C_Init+0x28>)
 80014c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c2:	e002      	b.n	80014ca <ssd1306_I2C_Init+0x12>
		p--;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f9      	bne.n	80014c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	0003d090 	.word	0x0003d090

080014e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b0c7      	sub	sp, #284	@ 0x11c
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014f2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80014f6:	600a      	str	r2, [r1, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001502:	4622      	mov	r2, r4
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800150a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800150e:	4602      	mov	r2, r0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001516:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800151a:	460a      	mov	r2, r1
 800151c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800151e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001526:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800152a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001538:	e015      	b.n	8001566 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800153a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800153e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001542:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	441a      	add	r2, r3
 800154a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800154e:	3301      	adds	r3, #1
 8001550:	7811      	ldrb	r1, [r2, #0]
 8001552:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001556:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800155a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800155c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001560:	3301      	adds	r3, #1
 8001562:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001566:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800156a:	b29b      	uxth	r3, r3
 800156c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001570:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d8df      	bhi.n	800153a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800157a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b299      	uxth	r1, r3
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	200a      	movs	r0, #10
 800159a:	9000      	str	r0, [sp, #0]
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <ssd1306_I2C_WriteMulti+0xc8>)
 800159e:	f001 f80b 	bl	80025b8 <HAL_I2C_Master_Transmit>
}
 80015a2:	bf00      	nop
 80015a4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	200002e4 	.word	0x200002e4

080015b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	460b      	mov	r3, r1
 80015bc:	71bb      	strb	r3, [r7, #6]
 80015be:	4613      	mov	r3, r2
 80015c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015c6:	797b      	ldrb	r3, [r7, #5]
 80015c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	b299      	uxth	r1, r3
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	230a      	movs	r3, #10
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2302      	movs	r3, #2
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <ssd1306_I2C_Write+0x38>)
 80015da:	f000 ffed 	bl	80025b8 <HAL_I2C_Master_Transmit>
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002e4 	.word	0x200002e4

080015ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_MspInit+0x4c>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_MspInit+0x4c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_MspInit+0x4c>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_MspInit+0x4c>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	@ 0x58
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_MspInit+0x4c>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	210f      	movs	r1, #15
 8001626:	f06f 0001 	mvn.w	r0, #1
 800162a:	f000 fbe5 	bl	8001df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b09e      	sub	sp, #120	@ 0x78
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2254      	movs	r2, #84	@ 0x54
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fb53 	bl	8007d08 <memset>
  if(hi2c->Instance==I2C1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a37      	ldr	r2, [pc, #220]	@ (8001744 <HAL_I2C_MspInit+0x108>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d166      	bne.n	800173a <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800166c:	2340      	movs	r3, #64	@ 0x40
 800166e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001670:	2300      	movs	r3, #0
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fccd 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001684:	f7ff fcac 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a2e      	ldr	r2, [pc, #184]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a0:	23c0      	movs	r3, #192	@ 0xc0
 80016a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b0:	2304      	movs	r3, #4
 80016b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016b8:	4619      	mov	r1, r3
 80016ba:	4824      	ldr	r0, [pc, #144]	@ (800174c <HAL_I2C_MspInit+0x110>)
 80016bc:	f000 fd2e 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	4a20      	ldr	r2, [pc, #128]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_I2C_MspInit+0x10c>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_I2C_MspInit+0x118>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016e0:	2203      	movs	r2, #3
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800170e:	4810      	ldr	r0, [pc, #64]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 8001710:	f000 fb9c 	bl	8001e4c <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 800171a:	f7ff fc61 	bl	8000fe0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_I2C_MspInit+0x114>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2105      	movs	r1, #5
 800172e:	201f      	movs	r0, #31
 8001730:	f000 fb62 	bl	8001df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001734:	201f      	movs	r0, #31
 8001736:	f000 fb7b 	bl	8001e30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800173a:	bf00      	nop
 800173c:	3778      	adds	r7, #120	@ 0x78
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40005400 	.word	0x40005400
 8001748:	40021000 	.word	0x40021000
 800174c:	48000400 	.word	0x48000400
 8001750:	20000338 	.word	0x20000338
 8001754:	40020080 	.word	0x40020080

08001758 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d11c      	bne.n	80017f0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_TIM_MspPostInit+0x64>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_TIM_MspPostInit+0x64>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_TIM_MspPostInit+0x64>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 80017ce:	2322      	movs	r3, #34	@ 0x22
 80017d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017de:	2301      	movs	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ec:	f000 fc96 	bl	800211c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09e      	sub	sp, #120	@ 0x78
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2254      	movs	r2, #84	@ 0x54
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fa73 	bl	8007d08 <memset>
  if(huart->Instance==USART2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a28      	ldr	r2, [pc, #160]	@ (80018c8 <HAL_UART_MspInit+0xcc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d148      	bne.n	80018be <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800182c:	2302      	movs	r3, #2
 800182e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fbed 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001844:	f7ff fbcc 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001848:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 800184e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001852:	6593      	str	r3, [r2, #88]	@ 0x58
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	4a19      	ldr	r2, [pc, #100]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_UART_MspInit+0xd0>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001878:	2304      	movs	r3, #4
 800187a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001888:	2307      	movs	r3, #7
 800188a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001896:	f000 fc41 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800189a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800189e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018ac:	2303      	movs	r3, #3
 80018ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ba:	f000 fc2f 	bl	800211c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018be:	bf00      	nop
 80018c0:	3778      	adds	r7, #120	@ 0x78
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	@ 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_InitTick+0xc8>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001998 <HAL_InitTick+0xc8>)
 80018e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_InitTick+0xc8>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f6:	f107 020c 	add.w	r2, r7, #12
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f002 faf7 	bl	8003ef4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001906:	f002 fadf 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 800190a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <HAL_InitTick+0xcc>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	3b01      	subs	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_InitTick+0xd0>)
 800191c:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <HAL_InitTick+0xd4>)
 800191e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_InitTick+0xd0>)
 8001922:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001928:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_InitTick+0xd0>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_InitTick+0xd0>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_InitTick+0xd0>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_InitTick+0xd0>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001940:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <HAL_InitTick+0xd0>)
 8001942:	f002 fe61 	bl	8004608 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11b      	bne.n	800198c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001954:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <HAL_InitTick+0xd0>)
 8001956:	f002 feaf 	bl	80046b8 <HAL_TIM_Base_Start_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001968:	2019      	movs	r0, #25
 800196a:	f000 fa61 	bl	8001e30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d808      	bhi.n	8001986 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	2019      	movs	r0, #25
 800197a:	f000 fa3d 	bl	8001df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_InitTick+0xd8>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e002      	b.n	800198c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001990:	4618      	mov	r0, r3
 8001992:	3730      	adds	r7, #48	@ 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	2000087c 	.word	0x2000087c
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	2000000c 	.word	0x2000000c

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <DMA1_Channel7_IRQHandler+0x10>)
 80019ea:	f000 fae7 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000338 	.word	0x20000338

080019f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019fe:	f002 ff10 	bl	8004822 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000087c 	.word	0x2000087c

08001a0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <I2C1_EV_IRQHandler+0x10>)
 8001a12:	f001 f8cb 	bl	8002bac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002e4 	.word	0x200002e4

08001a20 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 fd13 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x24>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000464 	.word	0x20000464

08001a58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00a      	b.n	8001a80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a6a:	f3af 8000 	nop.w
 8001a6e:	4601      	mov	r1, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf0      	blt.n	8001a6a <_read+0x12>
  }

  return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e009      	b.n	8001ab8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd9f 	bl	80005f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf1      	blt.n	8001aa4 <_write+0x12>
  }
  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f006 f91e 	bl	8007da4 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000c000 	.word	0x2000c000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200008c8 	.word	0x200008c8
 8001b9c:	20001728 	.word	0x20001728

08001ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff ffea 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f006 f8dd 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7fe fd0d 	bl	8000614 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bfc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c08:	08009794 	.word	0x08009794
  ldr r2, =_sbss
 8001c0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c10:	20001728 	.word	0x20001728

08001c14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>

08001c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f8de 	bl	8001de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	200f      	movs	r0, #15
 8001c28:	f7ff fe52 	bl	80018d0 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	e001      	b.n	8001c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c38:	f7ff fcd8 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	200008cc 	.word	0x200008cc

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200008cc 	.word	0x200008cc

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff4c 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0a:	f7ff ff61 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	f7ff ffb1 	bl	8001d7c <NVIC_EncodePriority>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff80 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e28:	bf00      	nop
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff54 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e098      	b.n	8001f90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b4d      	ldr	r3, [pc, #308]	@ (8001f9c <HAL_DMA_Init+0x150>)
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d80f      	bhi.n	8001e8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa0 <HAL_DMA_Init+0x154>)
 8001e72:	4413      	add	r3, r2
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_DMA_Init+0x158>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a48      	ldr	r2, [pc, #288]	@ (8001fa8 <HAL_DMA_Init+0x15c>)
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e88:	e00e      	b.n	8001ea8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b46      	ldr	r3, [pc, #280]	@ (8001fac <HAL_DMA_Init+0x160>)
 8001e92:	4413      	add	r3, r2
 8001e94:	4a43      	ldr	r2, [pc, #268]	@ (8001fa4 <HAL_DMA_Init+0x158>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	009a      	lsls	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a42      	ldr	r2, [pc, #264]	@ (8001fb0 <HAL_DMA_Init+0x164>)
 8001ea6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f02:	d039      	beq.n	8001f78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_DMA_Init+0x15c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d11a      	bne.n	8001f44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f0e:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_DMA_Init+0x168>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f003 031c 	and.w	r3, r3, #28
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4924      	ldr	r1, [pc, #144]	@ (8001fb4 <HAL_DMA_Init+0x168>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <HAL_DMA_Init+0x168>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	f003 031c 	and.w	r3, r3, #28
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	491d      	ldr	r1, [pc, #116]	@ (8001fb4 <HAL_DMA_Init+0x168>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
 8001f42:	e019      	b.n	8001f78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f44:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_DMA_Init+0x16c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4c:	f003 031c 	and.w	r3, r3, #28
 8001f50:	210f      	movs	r1, #15
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4917      	ldr	r1, [pc, #92]	@ (8001fb8 <HAL_DMA_Init+0x16c>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_DMA_Init+0x16c>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f003 031c 	and.w	r3, r3, #28
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	4911      	ldr	r1, [pc, #68]	@ (8001fb8 <HAL_DMA_Init+0x16c>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40020407 	.word	0x40020407
 8001fa0:	bffdfff8 	.word	0xbffdfff8
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	bffdfbf8 	.word	0xbffdfbf8
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	400200a8 	.word	0x400200a8
 8001fb8:	400204a8 	.word	0x400204a8

08001fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	f003 031c 	and.w	r3, r3, #28
 8001fdc:	2204      	movs	r2, #4
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d026      	beq.n	8002036 <HAL_DMA_IRQHandler+0x7a>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d021      	beq.n	8002036 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0204 	bic.w	r2, r2, #4
 800200e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	f003 021c 	and.w	r2, r3, #28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	2104      	movs	r1, #4
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	2b00      	cmp	r3, #0
 800202a:	d071      	beq.n	8002110 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002034:	e06c      	b.n	8002110 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f003 031c 	and.w	r3, r3, #28
 800203e:	2202      	movs	r2, #2
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02e      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xec>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d029      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 020a 	bic.w	r2, r2, #10
 8002070:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f003 021c 	and.w	r2, r3, #28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2102      	movs	r1, #2
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d038      	beq.n	8002110 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020a6:	e033      	b.n	8002110 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f003 031c 	and.w	r3, r3, #28
 80020b0:	2208      	movs	r2, #8
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02a      	beq.n	8002112 <HAL_DMA_IRQHandler+0x156>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d025      	beq.n	8002112 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020e 	bic.w	r2, r2, #14
 80020d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f003 021c 	and.w	r2, r3, #28
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002110:	bf00      	nop
 8002112:	bf00      	nop
}
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e148      	b.n	80023be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 813a 	beq.w	80023b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d005      	beq.n	800215c <HAL_GPIO_Init+0x40>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d130      	bne.n	80021be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002192:	2201      	movs	r2, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0201 	and.w	r2, r3, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d017      	beq.n	80021fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8094 	beq.w	80023b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b52      	ldr	r3, [pc, #328]	@ (80023dc <HAL_GPIO_Init+0x2c0>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	4a51      	ldr	r2, [pc, #324]	@ (80023dc <HAL_GPIO_Init+0x2c0>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6613      	str	r3, [r2, #96]	@ 0x60
 800229c:	4b4f      	ldr	r3, [pc, #316]	@ (80023dc <HAL_GPIO_Init+0x2c0>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a8:	4a4d      	ldr	r2, [pc, #308]	@ (80023e0 <HAL_GPIO_Init+0x2c4>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1d4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a43      	ldr	r2, [pc, #268]	@ (80023e4 <HAL_GPIO_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1d0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a42      	ldr	r2, [pc, #264]	@ (80023e8 <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1cc>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e004      	b.n	80022f2 <HAL_GPIO_Init+0x1d6>
 80022e8:	2307      	movs	r3, #7
 80022ea:	e002      	b.n	80022f2 <HAL_GPIO_Init+0x1d6>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_GPIO_Init+0x1d6>
 80022f0:	2300      	movs	r3, #0
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	f002 0203 	and.w	r2, r2, #3
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	4093      	lsls	r3, r2
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002302:	4937      	ldr	r1, [pc, #220]	@ (80023e0 <HAL_GPIO_Init+0x2c4>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002310:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002334:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800233a:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800235e:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002388:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800238e:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b2:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f aeaf 	bne.w	800212c <HAL_GPIO_Init+0x10>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800243c:	e002      	b.n	8002444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002466:	4a05      	ldr	r2, [pc, #20]	@ (800247c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fade 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08d      	b.n	80025ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff f8c8 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	@ 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e006      	b.n	8002508 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002506:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d108      	bne.n	8002522 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	e007      	b.n	8002532 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002544:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
 80025c8:	4613      	mov	r3, r2
 80025ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	f040 80fd 	bne.w	80027d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0x30>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0f6      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025f0:	f7ff fb3e 	bl	8001c70 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2319      	movs	r3, #25
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fb10 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0e1      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	@ 0x21
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2210      	movs	r2, #16
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2bff      	cmp	r3, #255	@ 0xff
 8002642:	d906      	bls.n	8002652 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	22ff      	movs	r2, #255	@ 0xff
 8002648:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800264a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e007      	b.n	8002662 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800265c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002660:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d024      	beq.n	80026b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	4b4e      	ldr	r3, [pc, #312]	@ (80027e0 <HAL_I2C_Master_Transmit+0x228>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fd0b 	bl	80030c8 <I2C_TransferConfig>
 80026b2:	e066      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	4b48      	ldr	r3, [pc, #288]	@ (80027e0 <HAL_I2C_Master_Transmit+0x228>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fd00 	bl	80030c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026c8:	e05b      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb03 	bl	8002cda <I2C_WaitOnTXISFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07b      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d034      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x1ca>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d130      	bne.n	8002782 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	2200      	movs	r2, #0
 8002728:	2180      	movs	r1, #128	@ 0x80
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa7c 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e04d      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2bff      	cmp	r3, #255	@ 0xff
 8002742:	d90e      	bls.n	8002762 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	22ff      	movs	r2, #255	@ 0xff
 8002748:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fcb4 	bl	80030c8 <I2C_TransferConfig>
 8002760:	e00f      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	b2da      	uxtb	r2, r3
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	2300      	movs	r3, #0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fca3 	bl	80030c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d19e      	bne.n	80026ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fae9 	bl	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e01a      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_I2C_Master_Transmit+0x22c>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	80002000 	.word	0x80002000
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	817b      	strh	r3, [r7, #10]
 80027f8:	4613      	mov	r3, r2
 80027fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	f040 80db 	bne.w	80029c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2C_Master_Receive+0x30>
 8002814:	2302      	movs	r3, #2
 8002816:	e0d4      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002820:	f7ff fa26 	bl	8001c70 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2319      	movs	r3, #25
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f9f8 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0bf      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2222      	movs	r2, #34	@ 0x22
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2210      	movs	r2, #16
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	893a      	ldrh	r2, [r7, #8]
 8002862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	2bff      	cmp	r3, #255	@ 0xff
 8002872:	d90e      	bls.n	8002892 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	b2da      	uxtb	r2, r3
 8002880:	8979      	ldrh	r1, [r7, #10]
 8002882:	4b52      	ldr	r3, [pc, #328]	@ (80029cc <HAL_I2C_Master_Receive+0x1e4>)
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fc1c 	bl	80030c8 <I2C_TransferConfig>
 8002890:	e06d      	b.n	800296e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_I2C_Master_Receive+0x1e4>)
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fc0b 	bl	80030c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028b2:	e05c      	b.n	800296e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	6a39      	ldr	r1, [r7, #32]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fa99 	bl	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e07c      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d034      	beq.n	800296e <HAL_I2C_Master_Receive+0x186>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d130      	bne.n	800296e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f986 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e04d      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	2bff      	cmp	r3, #255	@ 0xff
 800292e:	d90e      	bls.n	800294e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	22ff      	movs	r2, #255	@ 0xff
 8002934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	b2da      	uxtb	r2, r3
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fbbe 	bl	80030c8 <I2C_TransferConfig>
 800294c:	e00f      	b.n	800296e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	2300      	movs	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fbad 	bl	80030c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d19d      	bne.n	80028b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	6a39      	ldr	r1, [r7, #32]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f9f3 	bl	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e01a      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_I2C_Master_Receive+0x1e8>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	80002400 	.word	0x80002400
 80029d0:	fe00e800 	.word	0xfe00e800

080029d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80d6 	bne.w	8002ba2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0cc      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2C_IsDeviceReady+0x44>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0c5      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2224      	movs	r2, #36	@ 0x24
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_I2C_IsDeviceReady+0x72>
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a44:	e006      	b.n	8002a54 <HAL_I2C_IsDeviceReady+0x80>
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f909 	bl	8001c70 <HAL_GetTick>
 8002a5e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a8c:	e034      	b.n	8002af8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d01a      	beq.n	8002acc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7ff f8eb 	bl	8001c70 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <HAL_I2C_IsDeviceReady+0xd8>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10f      	bne.n	8002acc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e06b      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_I2C_IsDeviceReady+0x130>
 8002afe:	7fbb      	ldrb	r3, [r7, #30]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0c4      	beq.n	8002a8e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d01a      	beq.n	8002b48 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f883 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e03b      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2220      	movs	r2, #32
 8002b32:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e02d      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2120      	movs	r1, #32
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f868 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e020      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2210      	movs	r2, #16
 8002b68:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f63f af56 	bhi.w	8002a2e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d103      	bne.n	8002bfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d007      	beq.n	8002c1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	619a      	str	r2, [r3, #24]
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c38:	e03b      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f962 	bl	8002f08 <I2C_IsErrorOccurred>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e041      	b.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d02d      	beq.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff f80b 	bl	8001c70 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d122      	bne.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d113      	bne.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00f      	b.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d0b4      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ce6:	e033      	b.n	8002d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f90b 	bl	8002f08 <I2C_IsErrorOccurred>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e031      	b.n	8002d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d025      	beq.n	8002d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe ffb4 	bl	8001c70 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11a      	bne.n	8002d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d013      	beq.n	8002d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d1c4      	bne.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d74:	e02f      	b.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f8c4 	bl	8002f08 <I2C_IsErrorOccurred>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02d      	b.n	8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fe ff71 	bl	8001c70 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11a      	bne.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d013      	beq.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e007      	b.n	8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d1c8      	bne.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e00:	e071      	b.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f87e 	bl	8002f08 <I2C_IsErrorOccurred>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d13b      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d138      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d105      	bne.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d121      	bne.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2210      	movs	r2, #16
 8002e58:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002e74:	400b      	ands	r3, r1
 8002e76:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
 8002e94:	e002      	b.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002e9c:	f7fe fee8 	bl	8001c70 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d119      	bne.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00f      	beq.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d002      	beq.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d083      	beq.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	fe00e800 	.word	0xfe00e800

08002f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	@ 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d068      	beq.n	8003006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f3c:	e049      	b.n	8002fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d045      	beq.n	8002fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe fe93 	bl	8001c70 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_IsErrorOccurred+0x54>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13a      	bne.n	8002fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7e:	d121      	bne.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f86:	d01d      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d01a      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f9e:	f7fe fe67 	bl	8001c70 <HAL_GetTick>
 8002fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa4:	e00e      	b.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fa6:	f7fe fe63 	bl	8001c70 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b19      	cmp	r3, #25
 8002fb2:	d907      	bls.n	8002fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002fc2:	e006      	b.n	8002fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d1e9      	bne.n	8002fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d003      	beq.n	8002fe8 <I2C_IsErrorOccurred+0xe0>
 8002fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0aa      	beq.n	8002f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800304a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01c      	beq.n	80030b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fdaf 	bl	8002be0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <I2C_IsErrorOccurred+0x1bc>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3728      	adds	r7, #40	@ 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	817b      	strh	r3, [r7, #10]
 80030d6:	4613      	mov	r3, r2
 80030d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030e0:	7a7b      	ldrb	r3, [r7, #9]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	0d5b      	lsrs	r3, r3, #21
 8003102:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003106:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <I2C_TransferConfig+0x60>)
 8003108:	430b      	orrs	r3, r1
 800310a:	43db      	mvns	r3, r3
 800310c:	ea02 0103 	and.w	r1, r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	03ff63ff 	.word	0x03ff63ff

0800312c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	d138      	bne.n	80031b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800314c:	2302      	movs	r3, #2
 800314e:	e032      	b.n	80031b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800317e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d139      	bne.n	800324c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e033      	b.n	800324e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2224      	movs	r2, #36	@ 0x24
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000

0800327c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003280:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <HAL_PWREx_GetVoltageRange+0x18>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40007000 	.word	0x40007000

08003298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a6:	d130      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a8:	4b23      	ldr	r3, [pc, #140]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b4:	d038      	beq.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032be:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032c6:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2232      	movs	r2, #50	@ 0x32
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003340 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0c9b      	lsrs	r3, r3, #18
 80032d8:	3301      	adds	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032dc:	e002      	b.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f0:	d102      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f2      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003304:	d110      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e00f      	b.n	800332a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d007      	beq.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003318:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003320:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003326:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40007000 	.word	0x40007000
 800333c:	20000008 	.word	0x20000008
 8003340:	431bde83 	.word	0x431bde83

08003344 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f000 bc02 	b.w	8003b5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003358:	4b96      	ldr	r3, [pc, #600]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003362:	4b94      	ldr	r3, [pc, #592]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80e4 	beq.w	8003542 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_RCC_OscConfig+0x4c>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	f040 808b 	bne.w	800349e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 8087 	bne.w	800349e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003390:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x64>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e3d9      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	4b81      	ldr	r3, [pc, #516]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_RCC_OscConfig+0x7e>
 80033b8:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033c0:	e005      	b.n	80033ce <HAL_RCC_OscConfig+0x8a>
 80033c2:	4b7c      	ldr	r3, [pc, #496]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d223      	bcs.n	800341a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fdbe 	bl	8003f58 <RCC_SetFlashLatencyFromMSIRange>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e3ba      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e6:	4b73      	ldr	r3, [pc, #460]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a72      	ldr	r2, [pc, #456]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	496d      	ldr	r1, [pc, #436]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003404:	4b6b      	ldr	r3, [pc, #428]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	4968      	ldr	r1, [pc, #416]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
 8003418:	e025      	b.n	8003466 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341a:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b63      	ldr	r3, [pc, #396]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4960      	ldr	r1, [pc, #384]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003438:	4b5e      	ldr	r3, [pc, #376]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	495b      	ldr	r1, [pc, #364]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fd7e 	bl	8003f58 <RCC_SetFlashLatencyFromMSIRange>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e37a      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003466:	f000 fc81 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4950      	ldr	r1, [pc, #320]	@ (80035b8 <HAL_RCC_OscConfig+0x274>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a4e      	ldr	r2, [pc, #312]	@ (80035bc <HAL_RCC_OscConfig+0x278>)
 8003484:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003486:	4b4e      	ldr	r3, [pc, #312]	@ (80035c0 <HAL_RCC_OscConfig+0x27c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fa20 	bl	80018d0 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d052      	beq.n	8003540 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	e35e      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d032      	beq.n	800350c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034a6:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fbdd 	bl	8001c70 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ba:	f7fe fbd9 	bl	8001c70 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e347      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034de:	f043 0308 	orr.w	r3, r3, #8
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4930      	ldr	r1, [pc, #192]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034f6:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	492b      	ldr	r1, [pc, #172]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	e01a      	b.n	8003542 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800350c:	4b29      	ldr	r3, [pc, #164]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003518:	f7fe fbaa 	bl	8001c70 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003520:	f7fe fba6 	bl	8001c70 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e314      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003532:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1dc>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d073      	beq.n	8003636 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x21c>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d10e      	bne.n	8003578 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d10b      	bne.n	8003578 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d063      	beq.n	8003634 <HAL_RCC_OscConfig+0x2f0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d15f      	bne.n	8003634 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e2f1      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x24c>
 8003582:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a0b      	ldr	r2, [pc, #44]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e025      	b.n	80035dc <HAL_RCC_OscConfig+0x298>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003598:	d114      	bne.n	80035c4 <HAL_RCC_OscConfig+0x280>
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a02      	ldr	r2, [pc, #8]	@ (80035b4 <HAL_RCC_OscConfig+0x270>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e013      	b.n	80035dc <HAL_RCC_OscConfig+0x298>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08009708 	.word	0x08009708
 80035bc:	20000008 	.word	0x20000008
 80035c0:	2000000c 	.word	0x2000000c
 80035c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a9f      	ldr	r2, [pc, #636]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a9c      	ldr	r2, [pc, #624]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe fb44 	bl	8001c70 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fb40 	bl	8001c70 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e2ae      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fe:	4b92      	ldr	r3, [pc, #584]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x2a8>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fb30 	bl	8001c70 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fb2c 	bl	8001c70 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e29a      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x2d0>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d060      	beq.n	8003704 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x310>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d119      	bne.n	8003682 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d116      	bne.n	8003682 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003654:	4b7c      	ldr	r3, [pc, #496]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x328>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e277      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b76      	ldr	r3, [pc, #472]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	4973      	ldr	r1, [pc, #460]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	e040      	b.n	8003704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d023      	beq.n	80036d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368a:	4b6f      	ldr	r3, [pc, #444]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6e      	ldr	r2, [pc, #440]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe faeb 	bl	8001c70 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe fae7 	bl	8001c70 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e255      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b0:	4b65      	ldr	r3, [pc, #404]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b62      	ldr	r3, [pc, #392]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	495f      	ldr	r1, [pc, #380]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	e018      	b.n	8003704 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe fac7 	bl	8001c70 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fe fac3 	bl	8001c70 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e231      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f8:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d03c      	beq.n	800378a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01c      	beq.n	8003752 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003718:	4b4b      	ldr	r3, [pc, #300]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371e:	4a4a      	ldr	r2, [pc, #296]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fe faa2 	bl	8001c70 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003730:	f7fe fa9e 	bl	8001c70 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e20c      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003742:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ef      	beq.n	8003730 <HAL_RCC_OscConfig+0x3ec>
 8003750:	e01b      	b.n	800378a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003758:	4a3b      	ldr	r2, [pc, #236]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fe fa85 	bl	8001c70 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376a:	f7fe fa81 	bl	8001c70 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1ef      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ef      	bne.n	800376a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80a6 	beq.w	80038e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800379c:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b4:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <HAL_RCC_OscConfig+0x508>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d118      	bne.n	8003802 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d0:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_RCC_OscConfig+0x508>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_RCC_OscConfig+0x508>)
 80037d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037dc:	f7fe fa48 	bl	8001c70 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fe fa44 	bl	8001c70 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1b2      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f6:	4b15      	ldr	r3, [pc, #84]	@ (800384c <HAL_RCC_OscConfig+0x508>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d108      	bne.n	800381c <HAL_RCC_OscConfig+0x4d8>
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	4a0d      	ldr	r2, [pc, #52]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381a:	e029      	b.n	8003870 <HAL_RCC_OscConfig+0x52c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d115      	bne.n	8003850 <HAL_RCC_OscConfig+0x50c>
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382a:	4a07      	ldr	r2, [pc, #28]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003834:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	4a03      	ldr	r2, [pc, #12]	@ (8003848 <HAL_RCC_OscConfig+0x504>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x52c>
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	4b9a      	ldr	r3, [pc, #616]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	4a99      	ldr	r2, [pc, #612]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003860:	4b96      	ldr	r3, [pc, #600]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	4a95      	ldr	r2, [pc, #596]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d016      	beq.n	80038a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fe f9fa 	bl	8001c70 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fe f9f6 	bl	8001c70 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e162      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003896:	4b89      	ldr	r3, [pc, #548]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ed      	beq.n	8003880 <HAL_RCC_OscConfig+0x53c>
 80038a4:	e015      	b.n	80038d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe f9e3 	bl	8001c70 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe f9df 	bl	8001c70 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e14b      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	4b7d      	ldr	r3, [pc, #500]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ed      	bne.n	80038ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d2:	7ffb      	ldrb	r3, [r7, #31]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4b78      	ldr	r3, [pc, #480]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	4a77      	ldr	r2, [pc, #476]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d03c      	beq.n	800396a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038f8:	4b70      	ldr	r3, [pc, #448]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 80038fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fe:	4a6f      	ldr	r2, [pc, #444]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe f9b2 	bl	8001c70 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003910:	f7fe f9ae 	bl	8001c70 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e11c      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003922:	4b66      	ldr	r3, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003924:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCC_OscConfig+0x5cc>
 8003930:	e01b      	b.n	800396a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003932:	4b62      	ldr	r3, [pc, #392]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003934:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003938:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe f995 	bl	8001c70 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800394a:	f7fe f991 	bl	8001c70 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0ff      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800395c:	4b57      	ldr	r3, [pc, #348]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 800395e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ef      	bne.n	800394a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80f3 	beq.w	8003b5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	2b02      	cmp	r3, #2
 800397a:	f040 80c9 	bne.w	8003b10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800397e:	4b4f      	ldr	r3, [pc, #316]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0203 	and.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d12c      	bne.n	80039ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	3b01      	subs	r3, #1
 800399e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d123      	bne.n	80039ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d11b      	bne.n	80039ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d113      	bne.n	80039ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d109      	bne.n	80039ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d06b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d062      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039f2:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0ac      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a02:	4b2e      	ldr	r3, [pc, #184]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2d      	ldr	r2, [pc, #180]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a0e:	f7fe f92f 	bl	8001c70 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fe f92b 	bl	8001c70 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e099      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a28:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a34:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <HAL_RCC_OscConfig+0x77c>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a4e:	0212      	lsls	r2, r2, #8
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0552      	lsls	r2, r2, #21
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0652      	lsls	r2, r2, #25
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a6e:	06d2      	lsls	r2, r2, #27
 8003a70:	430a      	orrs	r2, r1
 8003a72:	4912      	ldr	r1, [pc, #72]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a78:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a84:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a90:	f7fe f8ee 	bl	8001c70 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe f8ea 	bl	8001c70 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e058      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <HAL_RCC_OscConfig+0x778>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab6:	e050      	b.n	8003b5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e04f      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac4:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d144      	bne.n	8003b5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003adc:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ae8:	f7fe f8c2 	bl	8001c70 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fe f8be 	bl	8001c70 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e02c      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x7ac>
 8003b0e:	e024      	b.n	8003b5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b0c      	cmp	r3, #12
 8003b14:	d01f      	beq.n	8003b56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fe f8a5 	bl	8001c70 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fe f8a1 	bl	8001c70 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e00f      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3c:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4905      	ldr	r1, [pc, #20]	@ (8003b64 <HAL_RCC_OscConfig+0x820>)
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCC_OscConfig+0x824>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
 8003b54:	e001      	b.n	8003b5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	feeefffc 	.word	0xfeeefffc

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0e7      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b75      	ldr	r3, [pc, #468]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d910      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b72      	ldr	r3, [pc, #456]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 0207 	bic.w	r2, r3, #7
 8003b96:	4970      	ldr	r1, [pc, #448]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0cf      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d010      	beq.n	8003bde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	4b66      	ldr	r3, [pc, #408]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d908      	bls.n	8003bde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b63      	ldr	r3, [pc, #396]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4960      	ldr	r1, [pc, #384]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04c      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d121      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0a6      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0a:	4b54      	ldr	r3, [pc, #336]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d115      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e09a      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c22:	4b4e      	ldr	r3, [pc, #312]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e08e      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e086      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	4b46      	ldr	r3, [pc, #280]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4943      	ldr	r1, [pc, #268]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe f80c 	bl	8001c70 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7fe f808 	bl	8001c70 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e06e      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	4b3a      	ldr	r3, [pc, #232]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d208      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	492b      	ldr	r1, [pc, #172]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb2:	4b29      	ldr	r3, [pc, #164]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d210      	bcs.n	8003ce2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 0207 	bic.w	r2, r3, #7
 8003cc8:	4923      	ldr	r1, [pc, #140]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd0:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e036      	b.n	8003d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cee:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4918      	ldr	r1, [pc, #96]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0c:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4910      	ldr	r1, [pc, #64]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d20:	f000 f824 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	490b      	ldr	r1, [pc, #44]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f4>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <HAL_RCC_ClockConfig+0x1fc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fd fdc3 	bl	80018d0 <HAL_InitTick>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08009708 	.word	0x08009708
 8003d64:	20000008 	.word	0x20000008
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	@ 0x24
 8003d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d84:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x34>
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d121      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11e      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003da0:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dac:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e005      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10d      	bne.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d102      	bne.n	8003dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003de4:	4b25      	ldr	r3, [pc, #148]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e004      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df0:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d134      	bne.n	8003e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0xac>
 8003e10:	e005      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e1a:	617b      	str	r3, [r7, #20]
      break;
 8003e1c:	e002      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	617b      	str	r3, [r7, #20]
      break;
 8003e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	3301      	adds	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e32:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	fb03 f202 	mul.w	r2, r3, r2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	0e5b      	lsrs	r3, r3, #25
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	3301      	adds	r3, #1
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e64:	69bb      	ldr	r3, [r7, #24]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	@ 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	08009720 	.word	0x08009720
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000008 	.word	0x20000008

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	08009718 	.word	0x08009718

08003ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ecc:	f7ff ffda 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0adb      	lsrs	r3, r3, #11
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4904      	ldr	r1, [pc, #16]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08009718 	.word	0x08009718

08003ef4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	220f      	movs	r2, #15
 8003f02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f04:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f10:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f28:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <HAL_RCC_GetClockConfig+0x60>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0207 	and.w	r2, r3, #7
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40022000 	.word	0x40022000

08003f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f70:	f7ff f984 	bl	800327c <HAL_PWREx_GetVoltageRange>
 8003f74:	6178      	str	r0, [r7, #20]
 8003f76:	e014      	b.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f84:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f90:	f7ff f974 	bl	800327c <HAL_PWREx_GetVoltageRange>
 8003f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa8:	d10b      	bne.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b80      	cmp	r3, #128	@ 0x80
 8003fae:	d919      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fb4:	d902      	bls.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e013      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e010      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b80      	cmp	r3, #128	@ 0x80
 8003fc6:	d902      	bls.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fc8:	2303      	movs	r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e00a      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	d102      	bne.n	8003fda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	e004      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b70      	cmp	r3, #112	@ 0x70
 8003fde:	d101      	bne.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 0207 	bic.w	r2, r3, #7
 8003fec:	4909      	ldr	r1, [pc, #36]	@ (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ff4:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d001      	beq.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	40022000 	.word	0x40022000

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004020:	2300      	movs	r3, #0
 8004022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004024:	2300      	movs	r3, #0
 8004026:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004030:	2b00      	cmp	r3, #0
 8004032:	d031      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800403c:	d01a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800403e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004042:	d814      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004048:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800404c:	d10f      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800404e:	4b5d      	ldr	r3, [pc, #372]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4a5c      	ldr	r2, [pc, #368]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800405a:	e00c      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9de 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	74fb      	strb	r3, [r7, #19]
      break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800407c:	4b51      	ldr	r3, [pc, #324]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	494e      	ldr	r1, [pc, #312]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 809e 	beq.w	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	4a3f      	ldr	r2, [pc, #252]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040dc:	4b3a      	ldr	r3, [pc, #232]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a39      	ldr	r2, [pc, #228]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e8:	f7fd fdc2 	bl	8001c70 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f0:	f7fd fdbe 	bl	8001c70 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	74fb      	strb	r3, [r7, #19]
        break;
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004104:	4b30      	ldr	r3, [pc, #192]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ef      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d15a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004116:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	429a      	cmp	r2, r3
 8004130:	d019      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800413e:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004154:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800415e:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d016      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fd7e 	bl	8001c70 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	e00b      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd fd7a 	bl	8001c70 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d902      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	74fb      	strb	r3, [r7, #19]
            break;
 800418e:	e006      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004190:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ec      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a4:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b2:	4904      	ldr	r1, [pc, #16]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041ba:	e009      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d0:	7c7b      	ldrb	r3, [r7, #17]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	4a89      	ldr	r2, [pc, #548]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ee:	4b84      	ldr	r3, [pc, #528]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f023 0203 	bic.w	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4980      	ldr	r1, [pc, #512]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004210:	4b7b      	ldr	r3, [pc, #492]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004216:	f023 020c 	bic.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	4978      	ldr	r1, [pc, #480]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004232:	4b73      	ldr	r3, [pc, #460]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	496f      	ldr	r1, [pc, #444]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004254:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	4967      	ldr	r1, [pc, #412]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004276:	4b62      	ldr	r3, [pc, #392]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	495e      	ldr	r1, [pc, #376]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004298:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4956      	ldr	r1, [pc, #344]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ba:	4b51      	ldr	r3, [pc, #324]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	494d      	ldr	r1, [pc, #308]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d028      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042dc:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	4945      	ldr	r1, [pc, #276]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042fa:	d106      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
 8004308:	e011      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004312:	d10c      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f882 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800433a:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004340:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	492d      	ldr	r1, [pc, #180]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004358:	d106      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435a:	4b29      	ldr	r3, [pc, #164]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4a28      	ldr	r2, [pc, #160]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004364:	60d3      	str	r3, [r2, #12]
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f853 	bl	8004424 <RCCEx_PLLSAI1_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01c      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004398:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a6:	4916      	ldr	r1, [pc, #88]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f830 	bl	8004424 <RCCEx_PLLSAI1_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ec:	4904      	ldr	r1, [pc, #16]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000

08004404 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004432:	4b74      	ldr	r3, [pc, #464]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800443e:	4b71      	ldr	r3, [pc, #452]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d10d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
       ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004456:	4b6b      	ldr	r3, [pc, #428]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
       ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d047      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e044      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d018      	beq.n	80044aa <RCCEx_PLLSAI1_Config+0x86>
 8004478:	2b03      	cmp	r3, #3
 800447a:	d825      	bhi.n	80044c8 <RCCEx_PLLSAI1_Config+0xa4>
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <RCCEx_PLLSAI1_Config+0x62>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d009      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x74>
 8004484:	e020      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004496:	e01a      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004498:	4b5a      	ldr	r3, [pc, #360]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a8:	e013      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044aa:	4b56      	ldr	r3, [pc, #344]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b6:	4b53      	ldr	r3, [pc, #332]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c6:	e006      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e004      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044de:	4b49      	ldr	r3, [pc, #292]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	430b      	orrs	r3, r1
 80044f4:	4943      	ldr	r1, [pc, #268]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d17c      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004500:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fbb0 	bl	8001c70 <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004512:	e009      	b.n	8004528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004514:	f7fd fbac 	bl	8001c70 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
        break;
 8004526:	e005      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004528:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ef      	bne.n	8004514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d15f      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d110      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004540:	4b30      	ldr	r3, [pc, #192]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6892      	ldr	r2, [r2, #8]
 8004550:	0211      	lsls	r1, r2, #8
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	06d2      	lsls	r2, r2, #27
 8004558:	430a      	orrs	r2, r1
 800455a:	492a      	ldr	r1, [pc, #168]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
 8004560:	e027      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d112      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b26      	ldr	r3, [pc, #152]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004570:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6912      	ldr	r2, [r2, #16]
 800457e:	0852      	lsrs	r2, r2, #1
 8004580:	3a01      	subs	r2, #1
 8004582:	0552      	lsls	r2, r2, #21
 8004584:	430a      	orrs	r2, r1
 8004586:	491f      	ldr	r1, [pc, #124]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
 800458c:	e011      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004596:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	0211      	lsls	r1, r2, #8
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6952      	ldr	r2, [r2, #20]
 80045a4:	0852      	lsrs	r2, r2, #1
 80045a6:	3a01      	subs	r2, #1
 80045a8:	0652      	lsls	r2, r2, #25
 80045aa:	430a      	orrs	r2, r1
 80045ac:	4915      	ldr	r1, [pc, #84]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fd fb57 	bl	8001c70 <HAL_GetTick>
 80045c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c4:	e009      	b.n	80045da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c6:	f7fd fb53 	bl	8001c70 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d902      	bls.n	80045da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	73fb      	strb	r3, [r7, #15]
          break;
 80045d8:	e005      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4903      	ldr	r1, [pc, #12]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e049      	b.n	80046ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd f892 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fbf8 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e03b      	b.n	8004748 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_TIM_Base_Start_IT+0x9c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x4e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x4e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a15      	ldr	r2, [pc, #84]	@ (8004758 <HAL_TIM_Base_Start_IT+0xa0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d115      	bne.n	8004732 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b13      	ldr	r3, [pc, #76]	@ (800475c <HAL_TIM_Base_Start_IT+0xa4>)
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d015      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x8c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471e:	d011      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e008      	b.n	8004744 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40014000 	.word	0x40014000
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e049      	b.n	8004806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f841 	bl	800480e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 fb4c 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0202 	mvn.w	r2, #2
 8004856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fac6 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004872:	e005      	b.n	8004880 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fab8 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fac9 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01b      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0204 	mvn.w	r2, #4
 80048a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 faa0 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 80048be:	e005      	b.n	80048cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fa92 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 faa3 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0208 	mvn.w	r2, #8
 80048ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2204      	movs	r2, #4
 80048f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa7a 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa6c 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa7d 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01b      	beq.n	800496a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0210 	mvn.w	r2, #16
 800493a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2208      	movs	r2, #8
 8004940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa54 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004956:	e005      	b.n	8004964 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa46 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa57 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0201 	mvn.w	r2, #1
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc fb17 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fe38 	bl	800562c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fe30 	bl	8005640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa11 	bl	8004e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0220 	mvn.w	r2, #32
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fdf8 	bl	8005618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0ff      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b14      	cmp	r3, #20
 8004a5a:	f200 80f0 	bhi.w	8004c3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004ab9 	.word	0x08004ab9
 8004a68:	08004c3f 	.word	0x08004c3f
 8004a6c:	08004c3f 	.word	0x08004c3f
 8004a70:	08004c3f 	.word	0x08004c3f
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004c3f 	.word	0x08004c3f
 8004a7c:	08004c3f 	.word	0x08004c3f
 8004a80:	08004c3f 	.word	0x08004c3f
 8004a84:	08004b3b 	.word	0x08004b3b
 8004a88:	08004c3f 	.word	0x08004c3f
 8004a8c:	08004c3f 	.word	0x08004c3f
 8004a90:	08004c3f 	.word	0x08004c3f
 8004a94:	08004b7b 	.word	0x08004b7b
 8004a98:	08004c3f 	.word	0x08004c3f
 8004a9c:	08004c3f 	.word	0x08004c3f
 8004aa0:	08004c3f 	.word	0x08004c3f
 8004aa4:	08004bbd 	.word	0x08004bbd
 8004aa8:	08004c3f 	.word	0x08004c3f
 8004aac:	08004c3f 	.word	0x08004c3f
 8004ab0:	08004c3f 	.word	0x08004c3f
 8004ab4:	08004bfd 	.word	0x08004bfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa2c 	bl	8004f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0208 	orr.w	r2, r2, #8
 8004ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	619a      	str	r2, [r3, #24]
      break;
 8004af6:	e0a5      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fa88 	bl	8005014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6999      	ldr	r1, [r3, #24]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	021a      	lsls	r2, r3, #8
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]
      break;
 8004b38:	e084      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fae1 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0208 	orr.w	r2, r2, #8
 8004b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0204 	bic.w	r2, r2, #4
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69d9      	ldr	r1, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	61da      	str	r2, [r3, #28]
      break;
 8004b78:	e064      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fb39 	bl	80051f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69d9      	ldr	r1, [r3, #28]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	61da      	str	r2, [r3, #28]
      break;
 8004bba:	e043      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb76 	bl	80052b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0208 	orr.w	r2, r2, #8
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bfa:	e023      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fbae 	bl	8005364 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c3c:	e002      	b.n	8004c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
      break;
 8004c42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop

08004c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIM_ConfigClockSource+0x1c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e0b6      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x18a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb0:	d03e      	beq.n	8004d30 <HAL_TIM_ConfigClockSource+0xd8>
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb6:	f200 8087 	bhi.w	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	f000 8086 	beq.w	8004dce <HAL_TIM_ConfigClockSource+0x176>
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc6:	d87f      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cc8:	2b70      	cmp	r3, #112	@ 0x70
 8004cca:	d01a      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xaa>
 8004ccc:	2b70      	cmp	r3, #112	@ 0x70
 8004cce:	d87b      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d050      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x11e>
 8004cd4:	2b60      	cmp	r3, #96	@ 0x60
 8004cd6:	d877      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cd8:	2b50      	cmp	r3, #80	@ 0x50
 8004cda:	d03c      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xfe>
 8004cdc:	2b50      	cmp	r3, #80	@ 0x50
 8004cde:	d873      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d058      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x13e>
 8004ce4:	2b40      	cmp	r3, #64	@ 0x40
 8004ce6:	d86f      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004ce8:	2b30      	cmp	r3, #48	@ 0x30
 8004cea:	d064      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15e>
 8004cec:	2b30      	cmp	r3, #48	@ 0x30
 8004cee:	d86b      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d060      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15e>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d867      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d05c      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15e>
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d05a      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15e>
 8004d00:	e062      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d12:	f000 fbfb 	bl	800550c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
      break;
 8004d2e:	e04f      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d40:	f000 fbe4 	bl	800550c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d52:	609a      	str	r2, [r3, #8]
      break;
 8004d54:	e03c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fb58 	bl	8005418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2150      	movs	r1, #80	@ 0x50
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fbb1 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004d74:	e02c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 fb77 	bl	8005476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2160      	movs	r1, #96	@ 0x60
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fba1 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004d94:	e01c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 fb38 	bl	8005418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2140      	movs	r1, #64	@ 0x40
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb91 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004db4:	e00c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f000 fb88 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004dc6:	e003      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      break;
 8004dcc:	e000      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <TIM_Base_SetConfig+0xd4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x20>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a27      	ldr	r2, [pc, #156]	@ (8004f10 <TIM_Base_SetConfig+0xd4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0x52>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0x52>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a24      	ldr	r2, [pc, #144]	@ (8004f14 <TIM_Base_SetConfig+0xd8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0x52>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a23      	ldr	r2, [pc, #140]	@ (8004f18 <TIM_Base_SetConfig+0xdc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	@ (8004f10 <TIM_Base_SetConfig+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_Base_SetConfig+0xa0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <TIM_Base_SetConfig+0xd8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0xa0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a10      	ldr	r2, [pc, #64]	@ (8004f18 <TIM_Base_SetConfig+0xdc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	611a      	str	r2, [r3, #16]
  }
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400

08004f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 0302 	bic.w	r3, r3, #2
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a24      	ldr	r2, [pc, #144]	@ (8005008 <TIM_OC1_SetConfig+0xec>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_OC1_SetConfig+0x70>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a23      	ldr	r2, [pc, #140]	@ (800500c <TIM_OC1_SetConfig+0xf0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC1_SetConfig+0x70>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a22      	ldr	r2, [pc, #136]	@ (8005010 <TIM_OC1_SetConfig+0xf4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a17      	ldr	r2, [pc, #92]	@ (8005008 <TIM_OC1_SetConfig+0xec>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_OC1_SetConfig+0xa2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a16      	ldr	r2, [pc, #88]	@ (800500c <TIM_OC1_SetConfig+0xf0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_OC1_SetConfig+0xa2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	@ (8005010 <TIM_OC1_SetConfig+0xf4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	621a      	str	r2, [r3, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400

08005014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f023 0210 	bic.w	r2, r3, #16
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <TIM_OC2_SetConfig+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10d      	bne.n	8005094 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <TIM_OC2_SetConfig+0xe8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC2_SetConfig+0x98>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <TIM_OC2_SetConfig+0xec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0x98>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <TIM_OC2_SetConfig+0xf0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <TIM_OC3_SetConfig+0xe4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a18      	ldr	r2, [pc, #96]	@ (80051ec <TIM_OC3_SetConfig+0xe4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_OC3_SetConfig+0x96>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <TIM_OC3_SetConfig+0xe8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_OC3_SetConfig+0x96>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a16      	ldr	r2, [pc, #88]	@ (80051f4 <TIM_OC3_SetConfig+0xec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d113      	bne.n	80051c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400

080051f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <TIM_OC4_SetConfig+0xb0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_OC4_SetConfig+0x74>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <TIM_OC4_SetConfig+0xb4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC4_SetConfig+0x74>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a12      	ldr	r2, [pc, #72]	@ (80052b0 <TIM_OC4_SetConfig+0xb8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d109      	bne.n	8005280 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400

080052b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a13      	ldr	r2, [pc, #76]	@ (8005358 <TIM_OC5_SetConfig+0xa4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC5_SetConfig+0x6a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a12      	ldr	r2, [pc, #72]	@ (800535c <TIM_OC5_SetConfig+0xa8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC5_SetConfig+0x6a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a11      	ldr	r2, [pc, #68]	@ (8005360 <TIM_OC5_SetConfig+0xac>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d109      	bne.n	8005332 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400

08005364 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	051b      	lsls	r3, r3, #20
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a14      	ldr	r2, [pc, #80]	@ (800540c <TIM_OC6_SetConfig+0xa8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <TIM_OC6_SetConfig+0x6c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <TIM_OC6_SetConfig+0xac>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC6_SetConfig+0x6c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a12      	ldr	r2, [pc, #72]	@ (8005414 <TIM_OC6_SetConfig+0xb0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400

08005418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f023 0201 	bic.w	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f023 030a 	bic.w	r3, r3, #10
 8005454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 0210 	bic.w	r2, r3, #16
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f043 0307 	orr.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005560:	2302      	movs	r3, #2
 8005562:	e04f      	b.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d108      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005594:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a14      	ldr	r2, [pc, #80]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d004      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a10      	ldr	r2, [pc, #64]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40014000 	.word	0x40014000

08005618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e040      	b.n	80056e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc f8c0 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	@ 0x24
 8005680:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fade 	bl	8005c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f8af 	bl	8005804 <UART_SetConfig>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e01b      	b.n	80056e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb5d 	bl	8005da0 <UART_CheckIdleState>
 80056e6:	4603      	mov	r3, r0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005704:	2b20      	cmp	r3, #32
 8005706:	d177      	bne.n	80057f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_UART_Transmit+0x24>
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e070      	b.n	80057fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2221      	movs	r2, #33	@ 0x21
 8005724:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005726:	f7fc faa3 	bl	8001c70 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005744:	d108      	bne.n	8005758 <HAL_UART_Transmit+0x68>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	e003      	b.n	8005760 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005760:	e02f      	b.n	80057c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2200      	movs	r2, #0
 800576a:	2180      	movs	r1, #128	@ 0x80
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fbbf 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e03b      	b.n	80057fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	881a      	ldrh	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005794:	b292      	uxth	r2, r2
 8005796:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	3302      	adds	r3, #2
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e007      	b.n	80057b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1c9      	bne.n	8005762 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2140      	movs	r1, #64	@ 0x40
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fb89 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e005      	b.n	80057fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b08a      	sub	sp, #40	@ 0x28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4bb4      	ldr	r3, [pc, #720]	@ (8005b04 <UART_SetConfig+0x300>)
 8005834:	4013      	ands	r3, r2
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4aa9      	ldr	r2, [pc, #676]	@ (8005b08 <UART_SetConfig+0x304>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586c:	4313      	orrs	r3, r2
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4aa0      	ldr	r2, [pc, #640]	@ (8005b0c <UART_SetConfig+0x308>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d126      	bne.n	80058dc <UART_SetConfig+0xd8>
 800588e:	4ba0      	ldr	r3, [pc, #640]	@ (8005b10 <UART_SetConfig+0x30c>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d81b      	bhi.n	80058d4 <UART_SetConfig+0xd0>
 800589c:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <UART_SetConfig+0xa0>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ba:	e080      	b.n	80059be <UART_SetConfig+0x1ba>
 80058bc:	2302      	movs	r3, #2
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e07c      	b.n	80059be <UART_SetConfig+0x1ba>
 80058c4:	2304      	movs	r3, #4
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e078      	b.n	80059be <UART_SetConfig+0x1ba>
 80058cc:	2308      	movs	r3, #8
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e074      	b.n	80059be <UART_SetConfig+0x1ba>
 80058d4:	2310      	movs	r3, #16
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e070      	b.n	80059be <UART_SetConfig+0x1ba>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a8c      	ldr	r2, [pc, #560]	@ (8005b14 <UART_SetConfig+0x310>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d138      	bne.n	8005958 <UART_SetConfig+0x154>
 80058e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <UART_SetConfig+0x30c>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d82d      	bhi.n	8005950 <UART_SetConfig+0x14c>
 80058f4:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <UART_SetConfig+0xf8>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005951 	.word	0x08005951
 8005904:	08005951 	.word	0x08005951
 8005908:	08005951 	.word	0x08005951
 800590c:	08005941 	.word	0x08005941
 8005910:	08005951 	.word	0x08005951
 8005914:	08005951 	.word	0x08005951
 8005918:	08005951 	.word	0x08005951
 800591c:	08005939 	.word	0x08005939
 8005920:	08005951 	.word	0x08005951
 8005924:	08005951 	.word	0x08005951
 8005928:	08005951 	.word	0x08005951
 800592c:	08005949 	.word	0x08005949
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005936:	e042      	b.n	80059be <UART_SetConfig+0x1ba>
 8005938:	2302      	movs	r3, #2
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593e:	e03e      	b.n	80059be <UART_SetConfig+0x1ba>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005946:	e03a      	b.n	80059be <UART_SetConfig+0x1ba>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594e:	e036      	b.n	80059be <UART_SetConfig+0x1ba>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005956:	e032      	b.n	80059be <UART_SetConfig+0x1ba>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a6a      	ldr	r2, [pc, #424]	@ (8005b08 <UART_SetConfig+0x304>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d12a      	bne.n	80059b8 <UART_SetConfig+0x1b4>
 8005962:	4b6b      	ldr	r3, [pc, #428]	@ (8005b10 <UART_SetConfig+0x30c>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800596c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005970:	d01a      	beq.n	80059a8 <UART_SetConfig+0x1a4>
 8005972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005976:	d81b      	bhi.n	80059b0 <UART_SetConfig+0x1ac>
 8005978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597c:	d00c      	beq.n	8005998 <UART_SetConfig+0x194>
 800597e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005982:	d815      	bhi.n	80059b0 <UART_SetConfig+0x1ac>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <UART_SetConfig+0x18c>
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800598c:	d008      	beq.n	80059a0 <UART_SetConfig+0x19c>
 800598e:	e00f      	b.n	80059b0 <UART_SetConfig+0x1ac>
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005996:	e012      	b.n	80059be <UART_SetConfig+0x1ba>
 8005998:	2302      	movs	r3, #2
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599e:	e00e      	b.n	80059be <UART_SetConfig+0x1ba>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a6:	e00a      	b.n	80059be <UART_SetConfig+0x1ba>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ae:	e006      	b.n	80059be <UART_SetConfig+0x1ba>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b6:	e002      	b.n	80059be <UART_SetConfig+0x1ba>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a51      	ldr	r2, [pc, #324]	@ (8005b08 <UART_SetConfig+0x304>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d17a      	bne.n	8005abe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d824      	bhi.n	8005a1a <UART_SetConfig+0x216>
 80059d0:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0x1d4>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a1b 	.word	0x08005a1b
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a1b 	.word	0x08005a1b
 80059e8:	08005a0b 	.word	0x08005a0b
 80059ec:	08005a1b 	.word	0x08005a1b
 80059f0:	08005a1b 	.word	0x08005a1b
 80059f4:	08005a1b 	.word	0x08005a1b
 80059f8:	08005a13 	.word	0x08005a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7fe fa4e 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005a00:	61f8      	str	r0, [r7, #28]
        break;
 8005a02:	e010      	b.n	8005a26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b44      	ldr	r3, [pc, #272]	@ (8005b18 <UART_SetConfig+0x314>)
 8005a06:	61fb      	str	r3, [r7, #28]
        break;
 8005a08:	e00d      	b.n	8005a26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7fe f9af 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005a0e:	61f8      	str	r0, [r7, #28]
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a16:	61fb      	str	r3, [r7, #28]
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8107 	beq.w	8005c3c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d305      	bcc.n	8005a4a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d903      	bls.n	8005a52 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a50:	e0f4      	b.n	8005c3c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2200      	movs	r2, #0
 8005a56:	461c      	mov	r4, r3
 8005a58:	4615      	mov	r5, r2
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	022b      	lsls	r3, r5, #8
 8005a64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a68:	0222      	lsls	r2, r4, #8
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	6849      	ldr	r1, [r1, #4]
 8005a6e:	0849      	lsrs	r1, r1, #1
 8005a70:	2000      	movs	r0, #0
 8005a72:	4688      	mov	r8, r1
 8005a74:	4681      	mov	r9, r0
 8005a76:	eb12 0a08 	adds.w	sl, r2, r8
 8005a7a:	eb43 0b09 	adc.w	fp, r3, r9
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	4659      	mov	r1, fp
 8005a90:	f7fa fbfe 	bl	8000290 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aa2:	d308      	bcc.n	8005ab6 <UART_SetConfig+0x2b2>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aaa:	d204      	bcs.n	8005ab6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	e0c2      	b.n	8005c3c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005abc:	e0be      	b.n	8005c3c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac6:	d16a      	bne.n	8005b9e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d834      	bhi.n	8005b3a <UART_SetConfig+0x336>
 8005ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <UART_SetConfig+0x2d4>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b1d 	.word	0x08005b1d
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b3b 	.word	0x08005b3b
 8005ae8:	08005b2b 	.word	0x08005b2b
 8005aec:	08005b3b 	.word	0x08005b3b
 8005af0:	08005b3b 	.word	0x08005b3b
 8005af4:	08005b3b 	.word	0x08005b3b
 8005af8:	08005b33 	.word	0x08005b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005afc:	f7fe f9ce 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005b00:	61f8      	str	r0, [r7, #28]
        break;
 8005b02:	e020      	b.n	8005b46 <UART_SetConfig+0x342>
 8005b04:	efff69f3 	.word	0xefff69f3
 8005b08:	40008000 	.word	0x40008000
 8005b0c:	40013800 	.word	0x40013800
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40004400 	.word	0x40004400
 8005b18:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b1c:	f7fe f9d4 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8005b20:	61f8      	str	r0, [r7, #28]
        break;
 8005b22:	e010      	b.n	8005b46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b24:	4b4c      	ldr	r3, [pc, #304]	@ (8005c58 <UART_SetConfig+0x454>)
 8005b26:	61fb      	str	r3, [r7, #28]
        break;
 8005b28:	e00d      	b.n	8005b46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2a:	f7fe f91f 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005b2e:	61f8      	str	r0, [r7, #28]
        break;
 8005b30:	e009      	b.n	8005b46 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b36:	61fb      	str	r3, [r7, #28]
        break;
 8005b38:	e005      	b.n	8005b46 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d077      	beq.n	8005c3c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005a      	lsls	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	441a      	add	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d916      	bls.n	8005b96 <UART_SetConfig+0x392>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6e:	d212      	bcs.n	8005b96 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f023 030f 	bic.w	r3, r3, #15
 8005b78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	8afb      	ldrh	r3, [r7, #22]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	8afa      	ldrh	r2, [r7, #22]
 8005b92:	60da      	str	r2, [r3, #12]
 8005b94:	e052      	b.n	8005c3c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b9c:	e04e      	b.n	8005c3c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d827      	bhi.n	8005bf6 <UART_SetConfig+0x3f2>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0x3a8>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	08005bf7 	.word	0x08005bf7
 8005bbc:	08005be7 	.word	0x08005be7
 8005bc0:	08005bf7 	.word	0x08005bf7
 8005bc4:	08005bf7 	.word	0x08005bf7
 8005bc8:	08005bf7 	.word	0x08005bf7
 8005bcc:	08005bef 	.word	0x08005bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f7fe f964 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005bd4:	61f8      	str	r0, [r7, #28]
        break;
 8005bd6:	e014      	b.n	8005c02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7fe f976 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8005bdc:	61f8      	str	r0, [r7, #28]
        break;
 8005bde:	e010      	b.n	8005c02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c58 <UART_SetConfig+0x454>)
 8005be2:	61fb      	str	r3, [r7, #28]
        break;
 8005be4:	e00d      	b.n	8005c02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7fe f8c1 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8005bea:	61f8      	str	r0, [r7, #28]
        break;
 8005bec:	e009      	b.n	8005c02 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bf2:	61fb      	str	r3, [r7, #28]
        break;
 8005bf4:	e005      	b.n	8005c02 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c00:	bf00      	nop
    }

    if (pclk != 0U)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d019      	beq.n	8005c3c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	085a      	lsrs	r2, r3, #1
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	441a      	add	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b0f      	cmp	r3, #15
 8005c20:	d909      	bls.n	8005c36 <UART_SetConfig+0x432>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d205      	bcs.n	8005c36 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e002      	b.n	8005c3c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	@ 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c56:	bf00      	nop
 8005c58:	00f42400 	.word	0x00f42400

08005c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5a:	d10a      	bne.n	8005d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b098      	sub	sp, #96	@ 0x60
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005db0:	f7fb ff5e 	bl	8001c70 <HAL_GetTick>
 8005db4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d12e      	bne.n	8005e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f88c 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d021      	beq.n	8005e22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e062      	b.n	8005ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d149      	bne.n	8005ec4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f856 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d03c      	beq.n	8005ec4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e9c:	61fa      	str	r2, [r7, #28]
 8005e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e011      	b.n	8005ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3758      	adds	r7, #88	@ 0x58
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	e04f      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d04b      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fb feb1 	bl	8001c70 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e04e      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d037      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b80      	cmp	r3, #128	@ 0x80
 8005f36:	d034      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d031      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d110      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2208      	movs	r2, #8
 8005f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f838 	bl	8005fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e029      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7c:	d111      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f81e 	bl	8005fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e00f      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d0a0      	beq.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b095      	sub	sp, #84	@ 0x54
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ff2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e6      	bne.n	8005fd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	61fb      	str	r3, [r7, #28]
   return(result);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800602a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e5      	bne.n	8006004 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603c:	2b01      	cmp	r3, #1
 800603e:	d118      	bne.n	8006072 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	60bb      	str	r3, [r7, #8]
   return(result);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f023 0310 	bic.w	r3, r3, #16
 8006054:	647b      	str	r3, [r7, #68]	@ 0x44
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6979      	ldr	r1, [r7, #20]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	613b      	str	r3, [r7, #16]
   return(result);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006086:	bf00      	nop
 8006088:	3754      	adds	r7, #84	@ 0x54
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	4603      	mov	r3, r0
 800609a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060a4:	2b84      	cmp	r3, #132	@ 0x84
 80060a6:	d005      	beq.n	80060b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	3303      	adds	r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060c6:	f000 fc4d 	bl	8006964 <vTaskStartScheduler>
  
  return osOK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d2:	b089      	sub	sp, #36	@ 0x24
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d020      	beq.n	8006124 <osThreadCreate+0x54>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01c      	beq.n	8006124 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685c      	ldr	r4, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691e      	ldr	r6, [r3, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff ffc8 	bl	8006092 <makeFreeRtosPriority>
 8006102:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800610c:	9202      	str	r2, [sp, #8]
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	9100      	str	r1, [sp, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	4632      	mov	r2, r6
 8006116:	4629      	mov	r1, r5
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fa56 	bl	80065ca <xTaskCreateStatic>
 800611e:	4603      	mov	r3, r0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e01c      	b.n	800615e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685c      	ldr	r4, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006130:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff ffaa 	bl	8006092 <makeFreeRtosPriority>
 800613e:	4602      	mov	r2, r0
 8006140:	f107 030c 	add.w	r3, r7, #12
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	4632      	mov	r2, r6
 800614c:	4629      	mov	r1, r5
 800614e:	4620      	mov	r0, r4
 8006150:	f000 fa9b 	bl	800668a <xTaskCreate>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d001      	beq.n	800615e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800615e:	68fb      	ldr	r3, [r7, #12]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006168 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <osDelay+0x16>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	e000      	b.n	8006180 <osDelay+0x18>
 800617e:	2301      	movs	r3, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fbb9 	bl	80068f8 <vTaskDelay>
  
  return osOK;
 8006186:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b085      	sub	sp, #20
 8006194:	af02      	add	r7, sp, #8
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d011      	beq.n	80061c6 <osMessageCreate+0x36>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2400      	movs	r4, #0
 80061bc:	9400      	str	r4, [sp, #0]
 80061be:	f000 f92d 	bl	800641c <xQueueGenericCreateStatic>
 80061c2:	4603      	mov	r3, r0
 80061c4:	e008      	b.n	80061d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	4619      	mov	r1, r3
 80061d2:	f000 f9a0 	bl	8006516 <xQueueGenericCreate>
 80061d6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}

080061e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 0208 	add.w	r2, r3, #8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f103 0208 	add.w	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f103 0208 	add.w	r2, r3, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d103      	bne.n	80062a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e00c      	b.n	80062bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3308      	adds	r3, #8
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e002      	b.n	80062b0 <vListInsert+0x2e>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d2f6      	bcs.n	80062aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6892      	ldr	r2, [r2, #8]
 800630a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6852      	ldr	r2, [r2, #4]
 8006314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d103      	bne.n	8006328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006374:	f000 ffe8 	bl	8007348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	441a      	add	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a4:	3b01      	subs	r3, #1
 80063a6:	68f9      	ldr	r1, [r7, #12]
 80063a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	441a      	add	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	22ff      	movs	r2, #255	@ 0xff
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	22ff      	movs	r2, #255	@ 0xff
 80063c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d114      	bne.n	80063f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01a      	beq.n	8006408 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3310      	adds	r3, #16
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fce8 	bl	8006dac <xTaskRemoveFromEventList>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d012      	beq.n	8006408 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <xQueueGenericReset+0xd0>)
 80063e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	e009      	b.n	8006408 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3310      	adds	r3, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fef1 	bl	80061e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3324      	adds	r3, #36	@ 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff feec 	bl	80061e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006408:	f000 ffd0 	bl	80073ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800640c:	2301      	movs	r3, #1
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08e      	sub	sp, #56	@ 0x38
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <xQueueGenericCreateStatic+0x56>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <xQueueGenericCreateStatic+0x5a>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <xQueueGenericCreateStatic+0x5c>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	623b      	str	r3, [r7, #32]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <xQueueGenericCreateStatic+0x84>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueGenericCreateStatic+0x88>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueGenericCreateStatic+0x8a>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	61fb      	str	r3, [r7, #28]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064c2:	2348      	movs	r3, #72	@ 0x48
 80064c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b48      	cmp	r3, #72	@ 0x48
 80064ca:	d00b      	beq.n	80064e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61bb      	str	r3, [r7, #24]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f840 	bl	800658c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800650c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800650e:	4618      	mov	r0, r3
 8006510:	3730      	adds	r7, #48	@ 0x30
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006516:	b580      	push	{r7, lr}
 8006518:	b08a      	sub	sp, #40	@ 0x28
 800651a:	af02      	add	r7, sp, #8
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	4613      	mov	r3, r2
 8006522:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <xQueueGenericCreate+0x2c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	613b      	str	r3, [r7, #16]
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	e7fd      	b.n	800653e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3348      	adds	r3, #72	@ 0x48
 8006550:	4618      	mov	r0, r3
 8006552:	f000 ffd9 	bl	8007508 <pvPortMalloc>
 8006556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	3348      	adds	r3, #72	@ 0x48
 8006566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006570:	79fa      	ldrb	r2, [r7, #7]
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f805 	bl	800658c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006582:	69bb      	ldr	r3, [r7, #24]
	}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e002      	b.n	80065ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065ba:	2101      	movs	r1, #1
 80065bc:	69b8      	ldr	r0, [r7, #24]
 80065be:	f7ff fec3 	bl	8006348 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b08e      	sub	sp, #56	@ 0x38
 80065ce:	af04      	add	r7, sp, #16
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	623b      	str	r3, [r7, #32]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61fb      	str	r3, [r7, #28]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006614:	2354      	movs	r3, #84	@ 0x54
 8006616:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b54      	cmp	r3, #84	@ 0x54
 800661c:	d00b      	beq.n	8006636 <xTaskCreateStatic+0x6c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	61bb      	str	r3, [r7, #24]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006636:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01e      	beq.n	800667c <xTaskCreateStatic+0xb2>
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01b      	beq.n	800667c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	2202      	movs	r2, #2
 8006652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006656:	2300      	movs	r3, #0
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	9302      	str	r3, [sp, #8]
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f850 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006674:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006676:	f000 f8d5 	bl	8006824 <prvAddNewTaskToReadyList>
 800667a:	e001      	b.n	8006680 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006680:	697b      	ldr	r3, [r7, #20]
	}
 8006682:	4618      	mov	r0, r3
 8006684:	3728      	adds	r7, #40	@ 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08c      	sub	sp, #48	@ 0x30
 800668e:	af04      	add	r7, sp, #16
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff32 	bl	8007508 <pvPortMalloc>
 80066a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066ac:	2054      	movs	r0, #84	@ 0x54
 80066ae:	f000 ff2b 	bl	8007508 <pvPortMalloc>
 80066b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30
 80066c0:	e005      	b.n	80066ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066c2:	6978      	ldr	r0, [r7, #20]
 80066c4:	f000 ffee 	bl	80076a4 <vPortFree>
 80066c8:	e001      	b.n	80066ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066dc:	88fa      	ldrh	r2, [r7, #6]
 80066de:	2300      	movs	r3, #0
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f80e 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f8:	69f8      	ldr	r0, [r7, #28]
 80066fa:	f000 f893 	bl	8006824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066fe:	2301      	movs	r3, #1
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e002      	b.n	800670a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006704:	f04f 33ff 	mov.w	r3, #4294967295
 8006708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800670a:	69bb      	ldr	r3, [r7, #24]
	}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800672c:	3b01      	subs	r3, #1
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	617b      	str	r3, [r7, #20]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	e012      	b.n	8006790 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	7819      	ldrb	r1, [r3, #0]
 8006772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	3334      	adds	r3, #52	@ 0x34
 800677a:	460a      	mov	r2, r1
 800677c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d006      	beq.n	8006798 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	d9e9      	bls.n	800676a <prvInitialiseNewTask+0x56>
 8006796:	e000      	b.n	800679a <prvInitialiseNewTask+0x86>
			{
				break;
 8006798:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067a2:	e003      	b.n	80067ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	2b06      	cmp	r3, #6
 80067b0:	d901      	bls.n	80067b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067b2:	2306      	movs	r3, #6
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	2200      	movs	r2, #0
 80067c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fd27 	bl	8006220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	3318      	adds	r3, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fd22 	bl	8006220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	f1c3 0207 	rsb	r2, r3, #7
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2200      	movs	r2, #0
 80067f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	69b8      	ldr	r0, [r7, #24]
 8006806:	f000 fc71 	bl	80070ec <pxPortInitialiseStack>
 800680a:	4602      	mov	r2, r0
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800681c:	bf00      	nop
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800682c:	f000 fd8c 	bl	8007348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006830:	4b2a      	ldr	r3, [pc, #168]	@ (80068dc <prvAddNewTaskToReadyList+0xb8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <prvAddNewTaskToReadyList+0xb8>)
 8006838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683a:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <prvAddNewTaskToReadyList+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006842:	4a27      	ldr	r2, [pc, #156]	@ (80068e0 <prvAddNewTaskToReadyList+0xbc>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006848:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <prvAddNewTaskToReadyList+0xb8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d110      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006850:	f000 fb28 	bl	8006ea4 <prvInitialiseTaskLists>
 8006854:	e00d      	b.n	8006872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006856:	4b23      	ldr	r3, [pc, #140]	@ (80068e4 <prvAddNewTaskToReadyList+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800685e:	4b20      	ldr	r3, [pc, #128]	@ (80068e0 <prvAddNewTaskToReadyList+0xbc>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	429a      	cmp	r2, r3
 800686a:	d802      	bhi.n	8006872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800686c:	4a1c      	ldr	r2, [pc, #112]	@ (80068e0 <prvAddNewTaskToReadyList+0xbc>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006872:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a1b      	ldr	r2, [pc, #108]	@ (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 800687a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	4b19      	ldr	r3, [pc, #100]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <prvAddNewTaskToReadyList+0xcc>)
 800689c:	441a      	add	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7ff fcc8 	bl	800623a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068aa:	f000 fd7f 	bl	80073ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <prvAddNewTaskToReadyList+0xc0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068b6:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <prvAddNewTaskToReadyList+0xbc>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d207      	bcs.n	80068d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068c4:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 80068c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200009d0 	.word	0x200009d0
 80068e0:	200008d0 	.word	0x200008d0
 80068e4:	200009dc 	.word	0x200009dc
 80068e8:	200009ec 	.word	0x200009ec
 80068ec:	200009d8 	.word	0x200009d8
 80068f0:	200008d4 	.word	0x200008d4
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800690a:	4b14      	ldr	r3, [pc, #80]	@ (800695c <vTaskDelay+0x64>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <vTaskDelay+0x32>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60bb      	str	r3, [r7, #8]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800692a:	f000 f87d 	bl	8006a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800692e:	2100      	movs	r1, #0
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb75 	bl	8007020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006936:	f000 f885 	bl	8006a44 <xTaskResumeAll>
 800693a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006942:	4b07      	ldr	r3, [pc, #28]	@ (8006960 <vTaskDelay+0x68>)
 8006944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	200009f8 	.word	0x200009f8
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	@ 0x28
 8006968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006972:	463a      	mov	r2, r7
 8006974:	1d39      	adds	r1, r7, #4
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4618      	mov	r0, r3
 800697c:	f7f9 fe1e 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	9202      	str	r2, [sp, #8]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	2300      	movs	r3, #0
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2300      	movs	r3, #0
 8006990:	460a      	mov	r2, r1
 8006992:	491f      	ldr	r1, [pc, #124]	@ (8006a10 <vTaskStartScheduler+0xac>)
 8006994:	481f      	ldr	r0, [pc, #124]	@ (8006a14 <vTaskStartScheduler+0xb0>)
 8006996:	f7ff fe18 	bl	80065ca <xTaskCreateStatic>
 800699a:	4603      	mov	r3, r0
 800699c:	4a1e      	ldr	r2, [pc, #120]	@ (8006a18 <vTaskStartScheduler+0xb4>)
 800699e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a18 <vTaskStartScheduler+0xb4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e001      	b.n	80069b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d116      	bne.n	80069e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	613b      	str	r3, [r7, #16]
}
 80069ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069cc:	4b13      	ldr	r3, [pc, #76]	@ (8006a1c <vTaskStartScheduler+0xb8>)
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069d4:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <vTaskStartScheduler+0xbc>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069da:	4b12      	ldr	r3, [pc, #72]	@ (8006a24 <vTaskStartScheduler+0xc0>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069e0:	f000 fc0e 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069e4:	e00f      	b.n	8006a06 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d10b      	bne.n	8006a06 <vTaskStartScheduler+0xa2>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vTaskStartScheduler+0x9e>
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	080089a4 	.word	0x080089a4
 8006a14:	08006e75 	.word	0x08006e75
 8006a18:	200009f4 	.word	0x200009f4
 8006a1c:	200009f0 	.word	0x200009f0
 8006a20:	200009dc 	.word	0x200009dc
 8006a24:	200009d4 	.word	0x200009d4

08006a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a2c:	4b04      	ldr	r3, [pc, #16]	@ (8006a40 <vTaskSuspendAll+0x18>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	4a03      	ldr	r2, [pc, #12]	@ (8006a40 <vTaskSuspendAll+0x18>)
 8006a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a36:	bf00      	nop
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	200009f8 	.word	0x200009f8

08006a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a52:	4b42      	ldr	r3, [pc, #264]	@ (8006b5c <xTaskResumeAll+0x118>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a72:	f000 fc69 	bl	8007348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a76:	4b39      	ldr	r3, [pc, #228]	@ (8006b5c <xTaskResumeAll+0x118>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	4a37      	ldr	r2, [pc, #220]	@ (8006b5c <xTaskResumeAll+0x118>)
 8006a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a80:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <xTaskResumeAll+0x118>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d161      	bne.n	8006b4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a88:	4b35      	ldr	r3, [pc, #212]	@ (8006b60 <xTaskResumeAll+0x11c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05d      	beq.n	8006b4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a90:	e02e      	b.n	8006af0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a92:	4b34      	ldr	r3, [pc, #208]	@ (8006b64 <xTaskResumeAll+0x120>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fc28 	bl	80062f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fc23 	bl	80062f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b68 <xTaskResumeAll+0x124>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	4a2a      	ldr	r2, [pc, #168]	@ (8006b68 <xTaskResumeAll+0x124>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a27      	ldr	r2, [pc, #156]	@ (8006b6c <xTaskResumeAll+0x128>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7ff fbaf 	bl	800623a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae0:	4b23      	ldr	r3, [pc, #140]	@ (8006b70 <xTaskResumeAll+0x12c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006aea:	4b22      	ldr	r3, [pc, #136]	@ (8006b74 <xTaskResumeAll+0x130>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b64 <xTaskResumeAll+0x120>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1cc      	bne.n	8006a92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006afe:	f000 fa6f 	bl	8006fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b02:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <xTaskResumeAll+0x134>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b0e:	f000 f837 	bl	8006b80 <xTaskIncrementTick>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b18:	4b16      	ldr	r3, [pc, #88]	@ (8006b74 <xTaskResumeAll+0x130>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f1      	bne.n	8006b0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	@ (8006b78 <xTaskResumeAll+0x134>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b30:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <xTaskResumeAll+0x130>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <xTaskResumeAll+0x138>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f000 fc2e 	bl	80073ac <vPortExitCritical>

	return xAlreadyYielded;
 8006b50:	68bb      	ldr	r3, [r7, #8]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	200009f8 	.word	0x200009f8
 8006b60:	200009d0 	.word	0x200009d0
 8006b64:	20000990 	.word	0x20000990
 8006b68:	200009d8 	.word	0x200009d8
 8006b6c:	200008d4 	.word	0x200008d4
 8006b70:	200008d0 	.word	0x200008d0
 8006b74:	200009e4 	.word	0x200009e4
 8006b78:	200009e0 	.word	0x200009e0
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8006cc8 <xTaskIncrementTick+0x148>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f040 808f 	bne.w	8006cb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b94:	4b4d      	ldr	r3, [pc, #308]	@ (8006ccc <xTaskIncrementTick+0x14c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8006ccc <xTaskIncrementTick+0x14c>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d121      	bne.n	8006bec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ba8:	4b49      	ldr	r3, [pc, #292]	@ (8006cd0 <xTaskIncrementTick+0x150>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	603b      	str	r3, [r7, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	e7fd      	b.n	8006bc6 <xTaskIncrementTick+0x46>
 8006bca:	4b41      	ldr	r3, [pc, #260]	@ (8006cd0 <xTaskIncrementTick+0x150>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	4b40      	ldr	r3, [pc, #256]	@ (8006cd4 <xTaskIncrementTick+0x154>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8006cd0 <xTaskIncrementTick+0x150>)
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8006cd4 <xTaskIncrementTick+0x154>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	4b3e      	ldr	r3, [pc, #248]	@ (8006cd8 <xTaskIncrementTick+0x158>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a3c      	ldr	r2, [pc, #240]	@ (8006cd8 <xTaskIncrementTick+0x158>)
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	f000 f9fa 	bl	8006fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bec:	4b3b      	ldr	r3, [pc, #236]	@ (8006cdc <xTaskIncrementTick+0x15c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d348      	bcc.n	8006c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf6:	4b36      	ldr	r3, [pc, #216]	@ (8006cd0 <xTaskIncrementTick+0x150>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c00:	4b36      	ldr	r3, [pc, #216]	@ (8006cdc <xTaskIncrementTick+0x15c>)
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	601a      	str	r2, [r3, #0]
					break;
 8006c08:	e03e      	b.n	8006c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0a:	4b31      	ldr	r3, [pc, #196]	@ (8006cd0 <xTaskIncrementTick+0x150>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c22:	4a2e      	ldr	r2, [pc, #184]	@ (8006cdc <xTaskIncrementTick+0x15c>)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c28:	e02e      	b.n	8006c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fb60 	bl	80062f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3318      	adds	r3, #24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fb57 	bl	80062f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ce0 <xTaskIncrementTick+0x160>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	4a22      	ldr	r2, [pc, #136]	@ (8006ce0 <xTaskIncrementTick+0x160>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce4 <xTaskIncrementTick+0x164>)
 8006c66:	441a      	add	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7ff fae3 	bl	800623a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce8 <xTaskIncrementTick+0x168>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d3b9      	bcc.n	8006bf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c86:	e7b6      	b.n	8006bf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c88:	4b17      	ldr	r3, [pc, #92]	@ (8006ce8 <xTaskIncrementTick+0x168>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	4915      	ldr	r1, [pc, #84]	@ (8006ce4 <xTaskIncrementTick+0x164>)
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d901      	bls.n	8006ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ca4:	4b11      	ldr	r3, [pc, #68]	@ (8006cec <xTaskIncrementTick+0x16c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e004      	b.n	8006cbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <xTaskIncrementTick+0x170>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf0 <xTaskIncrementTick+0x170>)
 8006cba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200009f8 	.word	0x200009f8
 8006ccc:	200009d4 	.word	0x200009d4
 8006cd0:	20000988 	.word	0x20000988
 8006cd4:	2000098c 	.word	0x2000098c
 8006cd8:	200009e8 	.word	0x200009e8
 8006cdc:	200009f0 	.word	0x200009f0
 8006ce0:	200009d8 	.word	0x200009d8
 8006ce4:	200008d4 	.word	0x200008d4
 8006ce8:	200008d0 	.word	0x200008d0
 8006cec:	200009e4 	.word	0x200009e4
 8006cf0:	200009e0 	.word	0x200009e0

08006cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cfa:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <vTaskSwitchContext+0xa4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d02:	4b26      	ldr	r3, [pc, #152]	@ (8006d9c <vTaskSwitchContext+0xa8>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d08:	e040      	b.n	8006d8c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006d0a:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <vTaskSwitchContext+0xa8>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d10:	4b23      	ldr	r3, [pc, #140]	@ (8006da0 <vTaskSwitchContext+0xac>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	fab3 f383 	clz	r3, r3
 8006d1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	f1c3 031f 	rsb	r3, r3, #31
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	491f      	ldr	r1, [pc, #124]	@ (8006da4 <vTaskSwitchContext+0xb0>)
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	607b      	str	r3, [r7, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <vTaskSwitchContext+0x5a>
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4a11      	ldr	r2, [pc, #68]	@ (8006da4 <vTaskSwitchContext+0xb0>)
 8006d5e:	4413      	add	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3308      	adds	r3, #8
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d104      	bne.n	8006d82 <vTaskSwitchContext+0x8e>
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	605a      	str	r2, [r3, #4]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4a07      	ldr	r2, [pc, #28]	@ (8006da8 <vTaskSwitchContext+0xb4>)
 8006d8a:	6013      	str	r3, [r2, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	200009f8 	.word	0x200009f8
 8006d9c:	200009e4 	.word	0x200009e4
 8006da0:	200009d8 	.word	0x200009d8
 8006da4:	200008d4 	.word	0x200008d4
 8006da8:	200008d0 	.word	0x200008d0

08006dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff fa88 	bl	80062f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e5c <xTaskRemoveFromEventList+0xb0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11c      	bne.n	8006e26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fa7f 	bl	80062f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	4b18      	ldr	r3, [pc, #96]	@ (8006e60 <xTaskRemoveFromEventList+0xb4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <xTaskRemoveFromEventList+0xb4>)
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4a13      	ldr	r2, [pc, #76]	@ (8006e64 <xTaskRemoveFromEventList+0xb8>)
 8006e16:	441a      	add	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f7ff fa0b 	bl	800623a <vListInsertEnd>
 8006e24:	e005      	b.n	8006e32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	3318      	adds	r3, #24
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	480e      	ldr	r0, [pc, #56]	@ (8006e68 <xTaskRemoveFromEventList+0xbc>)
 8006e2e:	f7ff fa04 	bl	800623a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <xTaskRemoveFromEventList+0xc0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d905      	bls.n	8006e4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e44:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <xTaskRemoveFromEventList+0xc4>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e001      	b.n	8006e50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200009f8 	.word	0x200009f8
 8006e60:	200009d8 	.word	0x200009d8
 8006e64:	200008d4 	.word	0x200008d4
 8006e68:	20000990 	.word	0x20000990
 8006e6c:	200008d0 	.word	0x200008d0
 8006e70:	200009e4 	.word	0x200009e4

08006e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e7c:	f000 f852 	bl	8006f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <prvIdleTask+0x28>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d9f9      	bls.n	8006e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <prvIdleTask+0x2c>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e98:	e7f0      	b.n	8006e7c <prvIdleTask+0x8>
 8006e9a:	bf00      	nop
 8006e9c:	200008d4 	.word	0x200008d4
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	e00c      	b.n	8006eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a12      	ldr	r2, [pc, #72]	@ (8006f04 <prvInitialiseTaskLists+0x60>)
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff f98e 	bl	80061e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	d9ef      	bls.n	8006eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ed0:	480d      	ldr	r0, [pc, #52]	@ (8006f08 <prvInitialiseTaskLists+0x64>)
 8006ed2:	f7ff f985 	bl	80061e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ed6:	480d      	ldr	r0, [pc, #52]	@ (8006f0c <prvInitialiseTaskLists+0x68>)
 8006ed8:	f7ff f982 	bl	80061e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006edc:	480c      	ldr	r0, [pc, #48]	@ (8006f10 <prvInitialiseTaskLists+0x6c>)
 8006ede:	f7ff f97f 	bl	80061e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ee2:	480c      	ldr	r0, [pc, #48]	@ (8006f14 <prvInitialiseTaskLists+0x70>)
 8006ee4:	f7ff f97c 	bl	80061e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ee8:	480b      	ldr	r0, [pc, #44]	@ (8006f18 <prvInitialiseTaskLists+0x74>)
 8006eea:	f7ff f979 	bl	80061e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eee:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <prvInitialiseTaskLists+0x78>)
 8006ef0:	4a05      	ldr	r2, [pc, #20]	@ (8006f08 <prvInitialiseTaskLists+0x64>)
 8006ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f20 <prvInitialiseTaskLists+0x7c>)
 8006ef6:	4a05      	ldr	r2, [pc, #20]	@ (8006f0c <prvInitialiseTaskLists+0x68>)
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	200008d4 	.word	0x200008d4
 8006f08:	20000960 	.word	0x20000960
 8006f0c:	20000974 	.word	0x20000974
 8006f10:	20000990 	.word	0x20000990
 8006f14:	200009a4 	.word	0x200009a4
 8006f18:	200009bc 	.word	0x200009bc
 8006f1c:	20000988 	.word	0x20000988
 8006f20:	2000098c 	.word	0x2000098c

08006f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f2a:	e019      	b.n	8006f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f2c:	f000 fa0c 	bl	8007348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <prvCheckTasksWaitingTermination+0x50>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f9d9 	bl	80062f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f42:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <prvCheckTasksWaitingTermination+0x54>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	4a0b      	ldr	r2, [pc, #44]	@ (8006f78 <prvCheckTasksWaitingTermination+0x54>)
 8006f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4a0a      	ldr	r2, [pc, #40]	@ (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f56:	f000 fa29 	bl	80073ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f810 	bl	8006f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f60:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e1      	bne.n	8006f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200009a4 	.word	0x200009a4
 8006f78:	200009d0 	.word	0x200009d0
 8006f7c:	200009b8 	.word	0x200009b8

08006f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fb84 	bl	80076a4 <vPortFree>
				vPortFree( pxTCB );
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fb81 	bl	80076a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fa2:	e019      	b.n	8006fd8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d103      	bne.n	8006fb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fb78 	bl	80076a4 <vPortFree>
	}
 8006fb4:	e010      	b.n	8006fd8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d00b      	beq.n	8006fd8 <prvDeleteTCB+0x58>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	e7fd      	b.n	8006fd4 <prvDeleteTCB+0x54>
	}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8007018 <prvResetNextTaskUnblockTime+0x38>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <prvResetNextTaskUnblockTime+0x3c>)
 8006ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ff8:	e008      	b.n	800700c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <prvResetNextTaskUnblockTime+0x38>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a04      	ldr	r2, [pc, #16]	@ (800701c <prvResetNextTaskUnblockTime+0x3c>)
 800700a:	6013      	str	r3, [r2, #0]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000988 	.word	0x20000988
 800701c:	200009f0 	.word	0x200009f0

08007020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800702a:	4b29      	ldr	r3, [pc, #164]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007030:	4b28      	ldr	r3, [pc, #160]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f95c 	bl	80062f4 <uxListRemove>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007042:	4b24      	ldr	r3, [pc, #144]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	2201      	movs	r2, #1
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43da      	mvns	r2, r3
 8007050:	4b21      	ldr	r3, [pc, #132]	@ (80070d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4013      	ands	r3, r2
 8007056:	4a20      	ldr	r2, [pc, #128]	@ (80070d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d10a      	bne.n	8007078 <prvAddCurrentTaskToDelayedList+0x58>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007068:	4b1a      	ldr	r3, [pc, #104]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	481a      	ldr	r0, [pc, #104]	@ (80070dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007072:	f7ff f8e2 	bl	800623a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007076:	e026      	b.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007080:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d209      	bcs.n	80070a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007090:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7ff f8f0 	bl	8006282 <vListInsert>
}
 80070a2:	e010      	b.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a4:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7ff f8e6 	bl	8006282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070b6:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d202      	bcs.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070c0:	4a09      	ldr	r2, [pc, #36]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6013      	str	r3, [r2, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200009d4 	.word	0x200009d4
 80070d4:	200008d0 	.word	0x200008d0
 80070d8:	200009d8 	.word	0x200009d8
 80070dc:	200009bc 	.word	0x200009bc
 80070e0:	2000098c 	.word	0x2000098c
 80070e4:	20000988 	.word	0x20000988
 80070e8:	200009f0 	.word	0x200009f0

080070ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3b04      	subs	r3, #4
 80070fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b04      	subs	r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f023 0201 	bic.w	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3b04      	subs	r3, #4
 800711a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800711c:	4a0c      	ldr	r2, [pc, #48]	@ (8007150 <pxPortInitialiseStack+0x64>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3b14      	subs	r3, #20
 8007126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3b04      	subs	r3, #4
 8007132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f06f 0202 	mvn.w	r2, #2
 800713a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b20      	subs	r3, #32
 8007140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	08007155 	.word	0x08007155

08007154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800715e:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <prvTaskExitError+0x58>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d00b      	beq.n	8007180 <prvTaskExitError+0x2c>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60fb      	str	r3, [r7, #12]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <prvTaskExitError+0x28>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60bb      	str	r3, [r7, #8]
}
 8007192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007194:	bf00      	nop
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0fc      	beq.n	8007196 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000014 	.word	0x20000014

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	@ (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007206:	4b47      	ldr	r3, [pc, #284]	@ (8007324 <xPortStartScheduler+0x124>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a47      	ldr	r2, [pc, #284]	@ (8007328 <xPortStartScheduler+0x128>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10b      	bne.n	8007228 <xPortStartScheduler+0x28>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	60fb      	str	r3, [r7, #12]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007228:	4b3e      	ldr	r3, [pc, #248]	@ (8007324 <xPortStartScheduler+0x124>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a3f      	ldr	r2, [pc, #252]	@ (800732c <xPortStartScheduler+0x12c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d10b      	bne.n	800724a <xPortStartScheduler+0x4a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	613b      	str	r3, [r7, #16]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800724a:	4b39      	ldr	r3, [pc, #228]	@ (8007330 <xPortStartScheduler+0x130>)
 800724c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	22ff      	movs	r2, #255	@ 0xff
 800725a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <xPortStartScheduler+0x134>)
 8007270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007272:	4b31      	ldr	r3, [pc, #196]	@ (8007338 <xPortStartScheduler+0x138>)
 8007274:	2207      	movs	r2, #7
 8007276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007278:	e009      	b.n	800728e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800727a:	4b2f      	ldr	r3, [pc, #188]	@ (8007338 <xPortStartScheduler+0x138>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3b01      	subs	r3, #1
 8007280:	4a2d      	ldr	r2, [pc, #180]	@ (8007338 <xPortStartScheduler+0x138>)
 8007282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007296:	2b80      	cmp	r3, #128	@ 0x80
 8007298:	d0ef      	beq.n	800727a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800729a:	4b27      	ldr	r3, [pc, #156]	@ (8007338 <xPortStartScheduler+0x138>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1c3 0307 	rsb	r3, r3, #7
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d00b      	beq.n	80072be <xPortStartScheduler+0xbe>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072be:	4b1e      	ldr	r3, [pc, #120]	@ (8007338 <xPortStartScheduler+0x138>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <xPortStartScheduler+0x138>)
 80072c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007338 <xPortStartScheduler+0x138>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072d0:	4a19      	ldr	r2, [pc, #100]	@ (8007338 <xPortStartScheduler+0x138>)
 80072d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072dc:	4b17      	ldr	r3, [pc, #92]	@ (800733c <xPortStartScheduler+0x13c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a16      	ldr	r2, [pc, #88]	@ (800733c <xPortStartScheduler+0x13c>)
 80072e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e8:	4b14      	ldr	r3, [pc, #80]	@ (800733c <xPortStartScheduler+0x13c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a13      	ldr	r2, [pc, #76]	@ (800733c <xPortStartScheduler+0x13c>)
 80072ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072f4:	f000 f8da 	bl	80074ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072f8:	4b11      	ldr	r3, [pc, #68]	@ (8007340 <xPortStartScheduler+0x140>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072fe:	f000 f8f9 	bl	80074f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007302:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <xPortStartScheduler+0x144>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a0f      	ldr	r2, [pc, #60]	@ (8007344 <xPortStartScheduler+0x144>)
 8007308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800730c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800730e:	f7ff ff63 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007312:	f7ff fcef 	bl	8006cf4 <vTaskSwitchContext>
	prvTaskExitError();
 8007316:	f7ff ff1d 	bl	8007154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	e000ed00 	.word	0xe000ed00
 8007328:	410fc271 	.word	0x410fc271
 800732c:	410fc270 	.word	0x410fc270
 8007330:	e000e400 	.word	0xe000e400
 8007334:	200009fc 	.word	0x200009fc
 8007338:	20000a00 	.word	0x20000a00
 800733c:	e000ed20 	.word	0xe000ed20
 8007340:	20000014 	.word	0x20000014
 8007344:	e000ef34 	.word	0xe000ef34

08007348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <vPortEnterCritical+0x5c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	4a0e      	ldr	r2, [pc, #56]	@ (80073a4 <vPortEnterCritical+0x5c>)
 800736a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800736c:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <vPortEnterCritical+0x5c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d110      	bne.n	8007396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007374:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <vPortEnterCritical+0x60>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <vPortEnterCritical+0x4e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	603b      	str	r3, [r7, #0]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <vPortEnterCritical+0x4a>
	}
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20000014 	.word	0x20000014
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073b2:	4b12      	ldr	r3, [pc, #72]	@ (80073fc <vPortExitCritical+0x50>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <vPortExitCritical+0x26>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <vPortExitCritical+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	4a08      	ldr	r2, [pc, #32]	@ (80073fc <vPortExitCritical+0x50>)
 80073da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073dc:	4b07      	ldr	r3, [pc, #28]	@ (80073fc <vPortExitCritical+0x50>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <vPortExitCritical+0x44>
 80073e4:	2300      	movs	r3, #0
 80073e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000014 	.word	0x20000014

08007400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007400:	f3ef 8009 	mrs	r0, PSP
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <pxCurrentTCBConst>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	f01e 0f10 	tst.w	lr, #16
 8007410:	bf08      	it	eq
 8007412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007424:	f380 8811 	msr	BASEPRI, r0
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f7ff fc60 	bl	8006cf4 <vTaskSwitchContext>
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f380 8811 	msr	BASEPRI, r0
 800743c:	bc09      	pop	{r0, r3}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f01e 0f10 	tst.w	lr, #16
 800744a:	bf08      	it	eq
 800744c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007450:	f380 8809 	msr	PSP, r0
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w

08007460 <pxCurrentTCBConst>:
 8007460:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007482:	f7ff fb7d 	bl	8006b80 <xTaskIncrementTick>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <SysTick_Handler+0x40>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074b6:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <vPortSetupTimerInterrupt+0x38>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <vPortSetupTimerInterrupt+0x3c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	@ (80074ec <vPortSetupTimerInterrupt+0x40>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <vPortSetupTimerInterrupt+0x44>)
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ce:	4b04      	ldr	r3, [pc, #16]	@ (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000e010 	.word	0xe000e010
 80074e4:	e000e018 	.word	0xe000e018
 80074e8:	20000008 	.word	0x20000008
 80074ec:	10624dd3 	.word	0x10624dd3
 80074f0:	e000e014 	.word	0xe000e014

080074f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007504 <vPortEnableVFP+0x10>
 80074f8:	6801      	ldr	r1, [r0, #0]
 80074fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074fe:	6001      	str	r1, [r0, #0]
 8007500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007502:	bf00      	nop
 8007504:	e000ed88 	.word	0xe000ed88

08007508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007514:	f7ff fa88 	bl	8006a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007518:	4b5c      	ldr	r3, [pc, #368]	@ (800768c <pvPortMalloc+0x184>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007520:	f000 f924 	bl	800776c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007524:	4b5a      	ldr	r3, [pc, #360]	@ (8007690 <pvPortMalloc+0x188>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 8095 	bne.w	800765c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01e      	beq.n	8007576 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007538:	2208      	movs	r2, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b00      	cmp	r3, #0
 8007548:	d015      	beq.n	8007576 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f023 0307 	bic.w	r3, r3, #7
 8007550:	3308      	adds	r3, #8
 8007552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <pvPortMalloc+0x6e>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	617b      	str	r3, [r7, #20]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d06f      	beq.n	800765c <pvPortMalloc+0x154>
 800757c:	4b45      	ldr	r3, [pc, #276]	@ (8007694 <pvPortMalloc+0x18c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d86a      	bhi.n	800765c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007586:	4b44      	ldr	r3, [pc, #272]	@ (8007698 <pvPortMalloc+0x190>)
 8007588:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800758a:	4b43      	ldr	r3, [pc, #268]	@ (8007698 <pvPortMalloc+0x190>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007590:	e004      	b.n	800759c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d903      	bls.n	80075ae <pvPortMalloc+0xa6>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f1      	bne.n	8007592 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075ae:	4b37      	ldr	r3, [pc, #220]	@ (800768c <pvPortMalloc+0x184>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d051      	beq.n	800765c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2208      	movs	r2, #8
 80075be:	4413      	add	r3, r2
 80075c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	2308      	movs	r3, #8
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d920      	bls.n	800761c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <pvPortMalloc+0xfc>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	613b      	str	r3, [r7, #16]
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007616:	69b8      	ldr	r0, [r7, #24]
 8007618:	f000 f90a 	bl	8007830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800761c:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <pvPortMalloc+0x18c>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	4a1b      	ldr	r2, [pc, #108]	@ (8007694 <pvPortMalloc+0x18c>)
 8007628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800762a:	4b1a      	ldr	r3, [pc, #104]	@ (8007694 <pvPortMalloc+0x18c>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b1b      	ldr	r3, [pc, #108]	@ (800769c <pvPortMalloc+0x194>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d203      	bcs.n	800763e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007636:	4b17      	ldr	r3, [pc, #92]	@ (8007694 <pvPortMalloc+0x18c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a18      	ldr	r2, [pc, #96]	@ (800769c <pvPortMalloc+0x194>)
 800763c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	4b13      	ldr	r3, [pc, #76]	@ (8007690 <pvPortMalloc+0x188>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	431a      	orrs	r2, r3
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007652:	4b13      	ldr	r3, [pc, #76]	@ (80076a0 <pvPortMalloc+0x198>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a11      	ldr	r2, [pc, #68]	@ (80076a0 <pvPortMalloc+0x198>)
 800765a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800765c:	f7ff f9f2 	bl	8006a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <pvPortMalloc+0x17a>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	60fb      	str	r3, [r7, #12]
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	e7fd      	b.n	800767e <pvPortMalloc+0x176>
	return pvReturn;
 8007682:	69fb      	ldr	r3, [r7, #28]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3728      	adds	r7, #40	@ 0x28
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200015c4 	.word	0x200015c4
 8007690:	200015d8 	.word	0x200015d8
 8007694:	200015c8 	.word	0x200015c8
 8007698:	200015bc 	.word	0x200015bc
 800769c:	200015cc 	.word	0x200015cc
 80076a0:	200015d0 	.word	0x200015d0

080076a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d04f      	beq.n	8007756 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076b6:	2308      	movs	r3, #8
 80076b8:	425b      	negs	r3, r3
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4413      	add	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4b25      	ldr	r3, [pc, #148]	@ (8007760 <vPortFree+0xbc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4013      	ands	r3, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10b      	bne.n	80076ea <vPortFree+0x46>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60fb      	str	r3, [r7, #12]
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop
 80076e8:	e7fd      	b.n	80076e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <vPortFree+0x66>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4b14      	ldr	r3, [pc, #80]	@ (8007760 <vPortFree+0xbc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01e      	beq.n	8007756 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11a      	bne.n	8007756 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	4b0e      	ldr	r3, [pc, #56]	@ (8007760 <vPortFree+0xbc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	43db      	mvns	r3, r3
 800772a:	401a      	ands	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007730:	f7ff f97a 	bl	8006a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b0a      	ldr	r3, [pc, #40]	@ (8007764 <vPortFree+0xc0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4413      	add	r3, r2
 800773e:	4a09      	ldr	r2, [pc, #36]	@ (8007764 <vPortFree+0xc0>)
 8007740:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007742:	6938      	ldr	r0, [r7, #16]
 8007744:	f000 f874 	bl	8007830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007748:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <vPortFree+0xc4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	4a06      	ldr	r2, [pc, #24]	@ (8007768 <vPortFree+0xc4>)
 8007750:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007752:	f7ff f977 	bl	8006a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007756:	bf00      	nop
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	200015d8 	.word	0x200015d8
 8007764:	200015c8 	.word	0x200015c8
 8007768:	200015d4 	.word	0x200015d4

0800776c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007772:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007778:	4b27      	ldr	r3, [pc, #156]	@ (8007818 <prvHeapInit+0xac>)
 800777a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <prvHeapInit+0xac>)
 800779c:	4413      	add	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077a4:	4a1d      	ldr	r2, [pc, #116]	@ (800781c <prvHeapInit+0xb0>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077aa:	4b1c      	ldr	r3, [pc, #112]	@ (800781c <prvHeapInit+0xb0>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a15      	ldr	r2, [pc, #84]	@ (8007820 <prvHeapInit+0xb4>)
 80077cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077ce:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <prvHeapInit+0xb4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077d6:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <prvHeapInit+0xb4>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <prvHeapInit+0xb4>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007824 <prvHeapInit+0xb8>)
 80077fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a09      	ldr	r2, [pc, #36]	@ (8007828 <prvHeapInit+0xbc>)
 8007802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007804:	4b09      	ldr	r3, [pc, #36]	@ (800782c <prvHeapInit+0xc0>)
 8007806:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800780a:	601a      	str	r2, [r3, #0]
}
 800780c:	bf00      	nop
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20000a04 	.word	0x20000a04
 800781c:	200015bc 	.word	0x200015bc
 8007820:	200015c4 	.word	0x200015c4
 8007824:	200015cc 	.word	0x200015cc
 8007828:	200015c8 	.word	0x200015c8
 800782c:	200015d8 	.word	0x200015d8

08007830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007838:	4b28      	ldr	r3, [pc, #160]	@ (80078dc <prvInsertBlockIntoFreeList+0xac>)
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e002      	b.n	8007844 <prvInsertBlockIntoFreeList+0x14>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d8f7      	bhi.n	800783e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	4413      	add	r3, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d108      	bne.n	8007872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d118      	bne.n	80078b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b15      	ldr	r3, [pc, #84]	@ (80078e0 <prvInsertBlockIntoFreeList+0xb0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d00d      	beq.n	80078ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	441a      	add	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e008      	b.n	80078c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078ae:	4b0c      	ldr	r3, [pc, #48]	@ (80078e0 <prvInsertBlockIntoFreeList+0xb0>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e003      	b.n	80078c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d002      	beq.n	80078ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200015bc 	.word	0x200015bc
 80078e0:	200015c4 	.word	0x200015c4

080078e4 <std>:
 80078e4:	2300      	movs	r3, #0
 80078e6:	b510      	push	{r4, lr}
 80078e8:	4604      	mov	r4, r0
 80078ea:	e9c0 3300 	strd	r3, r3, [r0]
 80078ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078f2:	6083      	str	r3, [r0, #8]
 80078f4:	8181      	strh	r1, [r0, #12]
 80078f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078f8:	81c2      	strh	r2, [r0, #14]
 80078fa:	6183      	str	r3, [r0, #24]
 80078fc:	4619      	mov	r1, r3
 80078fe:	2208      	movs	r2, #8
 8007900:	305c      	adds	r0, #92	@ 0x5c
 8007902:	f000 fa01 	bl	8007d08 <memset>
 8007906:	4b0d      	ldr	r3, [pc, #52]	@ (800793c <std+0x58>)
 8007908:	6263      	str	r3, [r4, #36]	@ 0x24
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <std+0x5c>)
 800790c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <std+0x60>)
 8007910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <std+0x64>)
 8007914:	6323      	str	r3, [r4, #48]	@ 0x30
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x68>)
 8007918:	6224      	str	r4, [r4, #32]
 800791a:	429c      	cmp	r4, r3
 800791c:	d006      	beq.n	800792c <std+0x48>
 800791e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007922:	4294      	cmp	r4, r2
 8007924:	d002      	beq.n	800792c <std+0x48>
 8007926:	33d0      	adds	r3, #208	@ 0xd0
 8007928:	429c      	cmp	r4, r3
 800792a:	d105      	bne.n	8007938 <std+0x54>
 800792c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	f000 ba60 	b.w	8007df8 <__retarget_lock_init_recursive>
 8007938:	bd10      	pop	{r4, pc}
 800793a:	bf00      	nop
 800793c:	08007b59 	.word	0x08007b59
 8007940:	08007b7b 	.word	0x08007b7b
 8007944:	08007bb3 	.word	0x08007bb3
 8007948:	08007bd7 	.word	0x08007bd7
 800794c:	200015dc 	.word	0x200015dc

08007950 <stdio_exit_handler>:
 8007950:	4a02      	ldr	r2, [pc, #8]	@ (800795c <stdio_exit_handler+0xc>)
 8007952:	4903      	ldr	r1, [pc, #12]	@ (8007960 <stdio_exit_handler+0x10>)
 8007954:	4803      	ldr	r0, [pc, #12]	@ (8007964 <stdio_exit_handler+0x14>)
 8007956:	f000 b869 	b.w	8007a2c <_fwalk_sglue>
 800795a:	bf00      	nop
 800795c:	20000018 	.word	0x20000018
 8007960:	08008695 	.word	0x08008695
 8007964:	20000028 	.word	0x20000028

08007968 <cleanup_stdio>:
 8007968:	6841      	ldr	r1, [r0, #4]
 800796a:	4b0c      	ldr	r3, [pc, #48]	@ (800799c <cleanup_stdio+0x34>)
 800796c:	4299      	cmp	r1, r3
 800796e:	b510      	push	{r4, lr}
 8007970:	4604      	mov	r4, r0
 8007972:	d001      	beq.n	8007978 <cleanup_stdio+0x10>
 8007974:	f000 fe8e 	bl	8008694 <_fflush_r>
 8007978:	68a1      	ldr	r1, [r4, #8]
 800797a:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <cleanup_stdio+0x38>)
 800797c:	4299      	cmp	r1, r3
 800797e:	d002      	beq.n	8007986 <cleanup_stdio+0x1e>
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fe87 	bl	8008694 <_fflush_r>
 8007986:	68e1      	ldr	r1, [r4, #12]
 8007988:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <cleanup_stdio+0x3c>)
 800798a:	4299      	cmp	r1, r3
 800798c:	d004      	beq.n	8007998 <cleanup_stdio+0x30>
 800798e:	4620      	mov	r0, r4
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f000 be7e 	b.w	8008694 <_fflush_r>
 8007998:	bd10      	pop	{r4, pc}
 800799a:	bf00      	nop
 800799c:	200015dc 	.word	0x200015dc
 80079a0:	20001644 	.word	0x20001644
 80079a4:	200016ac 	.word	0x200016ac

080079a8 <global_stdio_init.part.0>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <global_stdio_init.part.0+0x30>)
 80079ac:	4c0b      	ldr	r4, [pc, #44]	@ (80079dc <global_stdio_init.part.0+0x34>)
 80079ae:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <global_stdio_init.part.0+0x38>)
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	2200      	movs	r2, #0
 80079b6:	2104      	movs	r1, #4
 80079b8:	f7ff ff94 	bl	80078e4 <std>
 80079bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079c0:	2201      	movs	r2, #1
 80079c2:	2109      	movs	r1, #9
 80079c4:	f7ff ff8e 	bl	80078e4 <std>
 80079c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079cc:	2202      	movs	r2, #2
 80079ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d2:	2112      	movs	r1, #18
 80079d4:	f7ff bf86 	b.w	80078e4 <std>
 80079d8:	20001714 	.word	0x20001714
 80079dc:	200015dc 	.word	0x200015dc
 80079e0:	08007951 	.word	0x08007951

080079e4 <__sfp_lock_acquire>:
 80079e4:	4801      	ldr	r0, [pc, #4]	@ (80079ec <__sfp_lock_acquire+0x8>)
 80079e6:	f000 ba08 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 80079ea:	bf00      	nop
 80079ec:	2000171d 	.word	0x2000171d

080079f0 <__sfp_lock_release>:
 80079f0:	4801      	ldr	r0, [pc, #4]	@ (80079f8 <__sfp_lock_release+0x8>)
 80079f2:	f000 ba03 	b.w	8007dfc <__retarget_lock_release_recursive>
 80079f6:	bf00      	nop
 80079f8:	2000171d 	.word	0x2000171d

080079fc <__sinit>:
 80079fc:	b510      	push	{r4, lr}
 80079fe:	4604      	mov	r4, r0
 8007a00:	f7ff fff0 	bl	80079e4 <__sfp_lock_acquire>
 8007a04:	6a23      	ldr	r3, [r4, #32]
 8007a06:	b11b      	cbz	r3, 8007a10 <__sinit+0x14>
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f7ff bff0 	b.w	80079f0 <__sfp_lock_release>
 8007a10:	4b04      	ldr	r3, [pc, #16]	@ (8007a24 <__sinit+0x28>)
 8007a12:	6223      	str	r3, [r4, #32]
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <__sinit+0x2c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f5      	bne.n	8007a08 <__sinit+0xc>
 8007a1c:	f7ff ffc4 	bl	80079a8 <global_stdio_init.part.0>
 8007a20:	e7f2      	b.n	8007a08 <__sinit+0xc>
 8007a22:	bf00      	nop
 8007a24:	08007969 	.word	0x08007969
 8007a28:	20001714 	.word	0x20001714

08007a2c <_fwalk_sglue>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4607      	mov	r7, r0
 8007a32:	4688      	mov	r8, r1
 8007a34:	4614      	mov	r4, r2
 8007a36:	2600      	movs	r6, #0
 8007a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a40:	d505      	bpl.n	8007a4e <_fwalk_sglue+0x22>
 8007a42:	6824      	ldr	r4, [r4, #0]
 8007a44:	2c00      	cmp	r4, #0
 8007a46:	d1f7      	bne.n	8007a38 <_fwalk_sglue+0xc>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d907      	bls.n	8007a64 <_fwalk_sglue+0x38>
 8007a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	d003      	beq.n	8007a64 <_fwalk_sglue+0x38>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4638      	mov	r0, r7
 8007a60:	47c0      	blx	r8
 8007a62:	4306      	orrs	r6, r0
 8007a64:	3568      	adds	r5, #104	@ 0x68
 8007a66:	e7e9      	b.n	8007a3c <_fwalk_sglue+0x10>

08007a68 <iprintf>:
 8007a68:	b40f      	push	{r0, r1, r2, r3}
 8007a6a:	b507      	push	{r0, r1, r2, lr}
 8007a6c:	4906      	ldr	r1, [pc, #24]	@ (8007a88 <iprintf+0x20>)
 8007a6e:	ab04      	add	r3, sp, #16
 8007a70:	6808      	ldr	r0, [r1, #0]
 8007a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a76:	6881      	ldr	r1, [r0, #8]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	f000 fae3 	bl	8008044 <_vfiprintf_r>
 8007a7e:	b003      	add	sp, #12
 8007a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a84:	b004      	add	sp, #16
 8007a86:	4770      	bx	lr
 8007a88:	20000024 	.word	0x20000024

08007a8c <putchar>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	@ (8007a98 <putchar+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	6882      	ldr	r2, [r0, #8]
 8007a94:	f000 be88 	b.w	80087a8 <_putc_r>
 8007a98:	20000024 	.word	0x20000024

08007a9c <_puts_r>:
 8007a9c:	6a03      	ldr	r3, [r0, #32]
 8007a9e:	b570      	push	{r4, r5, r6, lr}
 8007aa0:	6884      	ldr	r4, [r0, #8]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	b90b      	cbnz	r3, 8007aac <_puts_r+0x10>
 8007aa8:	f7ff ffa8 	bl	80079fc <__sinit>
 8007aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_puts_r+0x22>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0598      	lsls	r0, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_puts_r+0x22>
 8007ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aba:	f000 f99e 	bl	8007dfa <__retarget_lock_acquire_recursive>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	d502      	bpl.n	8007aca <_puts_r+0x2e>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d135      	bne.n	8007b36 <_puts_r+0x9a>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 f8c5 	bl	8007c5c <__swsetup_r>
 8007ad2:	b380      	cbz	r0, 8007b36 <_puts_r+0x9a>
 8007ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ada:	07da      	lsls	r2, r3, #31
 8007adc:	d405      	bmi.n	8007aea <_puts_r+0x4e>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	059b      	lsls	r3, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_puts_r+0x4e>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae6:	f000 f989 	bl	8007dfc <__retarget_lock_release_recursive>
 8007aea:	4628      	mov	r0, r5
 8007aec:	bd70      	pop	{r4, r5, r6, pc}
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da04      	bge.n	8007afc <_puts_r+0x60>
 8007af2:	69a2      	ldr	r2, [r4, #24]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	dc17      	bgt.n	8007b28 <_puts_r+0x8c>
 8007af8:	290a      	cmp	r1, #10
 8007afa:	d015      	beq.n	8007b28 <_puts_r+0x8c>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	7019      	strb	r1, [r3, #0]
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	60a3      	str	r3, [r4, #8]
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	d1ed      	bne.n	8007aee <_puts_r+0x52>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da11      	bge.n	8007b3a <_puts_r+0x9e>
 8007b16:	4622      	mov	r2, r4
 8007b18:	210a      	movs	r1, #10
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f85f 	bl	8007bde <__swbuf_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0d7      	beq.n	8007ad4 <_puts_r+0x38>
 8007b24:	250a      	movs	r5, #10
 8007b26:	e7d7      	b.n	8007ad8 <_puts_r+0x3c>
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f857 	bl	8007bde <__swbuf_r>
 8007b30:	3001      	adds	r0, #1
 8007b32:	d1e7      	bne.n	8007b04 <_puts_r+0x68>
 8007b34:	e7ce      	b.n	8007ad4 <_puts_r+0x38>
 8007b36:	3e01      	subs	r6, #1
 8007b38:	e7e4      	b.n	8007b04 <_puts_r+0x68>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	220a      	movs	r2, #10
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e7ee      	b.n	8007b24 <_puts_r+0x88>
	...

08007b48 <puts>:
 8007b48:	4b02      	ldr	r3, [pc, #8]	@ (8007b54 <puts+0xc>)
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f7ff bfa5 	b.w	8007a9c <_puts_r>
 8007b52:	bf00      	nop
 8007b54:	20000024 	.word	0x20000024

08007b58 <__sread>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b60:	f000 f8fc 	bl	8007d5c <_read_r>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	bfab      	itete	ge
 8007b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b6c:	181b      	addge	r3, r3, r0
 8007b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b72:	bfac      	ite	ge
 8007b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b76:	81a3      	strhlt	r3, [r4, #12]
 8007b78:	bd10      	pop	{r4, pc}

08007b7a <__swrite>:
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	461f      	mov	r7, r3
 8007b80:	898b      	ldrh	r3, [r1, #12]
 8007b82:	05db      	lsls	r3, r3, #23
 8007b84:	4605      	mov	r5, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	4616      	mov	r6, r2
 8007b8a:	d505      	bpl.n	8007b98 <__swrite+0x1e>
 8007b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b90:	2302      	movs	r3, #2
 8007b92:	2200      	movs	r2, #0
 8007b94:	f000 f8d0 	bl	8007d38 <_lseek_r>
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bae:	f000 b8e7 	b.w	8007d80 <_write_r>

08007bb2 <__sseek>:
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bba:	f000 f8bd 	bl	8007d38 <_lseek_r>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	bf15      	itete	ne
 8007bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bce:	81a3      	strheq	r3, [r4, #12]
 8007bd0:	bf18      	it	ne
 8007bd2:	81a3      	strhne	r3, [r4, #12]
 8007bd4:	bd10      	pop	{r4, pc}

08007bd6 <__sclose>:
 8007bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bda:	f000 b89d 	b.w	8007d18 <_close_r>

08007bde <__swbuf_r>:
 8007bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be0:	460e      	mov	r6, r1
 8007be2:	4614      	mov	r4, r2
 8007be4:	4605      	mov	r5, r0
 8007be6:	b118      	cbz	r0, 8007bf0 <__swbuf_r+0x12>
 8007be8:	6a03      	ldr	r3, [r0, #32]
 8007bea:	b90b      	cbnz	r3, 8007bf0 <__swbuf_r+0x12>
 8007bec:	f7ff ff06 	bl	80079fc <__sinit>
 8007bf0:	69a3      	ldr	r3, [r4, #24]
 8007bf2:	60a3      	str	r3, [r4, #8]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	071a      	lsls	r2, r3, #28
 8007bf8:	d501      	bpl.n	8007bfe <__swbuf_r+0x20>
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	b943      	cbnz	r3, 8007c10 <__swbuf_r+0x32>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 f82b 	bl	8007c5c <__swsetup_r>
 8007c06:	b118      	cbz	r0, 8007c10 <__swbuf_r+0x32>
 8007c08:	f04f 37ff 	mov.w	r7, #4294967295
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	6922      	ldr	r2, [r4, #16]
 8007c14:	1a98      	subs	r0, r3, r2
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	b2f6      	uxtb	r6, r6
 8007c1a:	4283      	cmp	r3, r0
 8007c1c:	4637      	mov	r7, r6
 8007c1e:	dc05      	bgt.n	8007c2c <__swbuf_r+0x4e>
 8007c20:	4621      	mov	r1, r4
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 fd36 	bl	8008694 <_fflush_r>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1ed      	bne.n	8007c08 <__swbuf_r+0x2a>
 8007c2c:	68a3      	ldr	r3, [r4, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	701e      	strb	r6, [r3, #0]
 8007c3a:	6962      	ldr	r2, [r4, #20]
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d004      	beq.n	8007c4c <__swbuf_r+0x6e>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	07db      	lsls	r3, r3, #31
 8007c46:	d5e1      	bpl.n	8007c0c <__swbuf_r+0x2e>
 8007c48:	2e0a      	cmp	r6, #10
 8007c4a:	d1df      	bne.n	8007c0c <__swbuf_r+0x2e>
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fd20 	bl	8008694 <_fflush_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d0d9      	beq.n	8007c0c <__swbuf_r+0x2e>
 8007c58:	e7d6      	b.n	8007c08 <__swbuf_r+0x2a>
	...

08007c5c <__swsetup_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4b29      	ldr	r3, [pc, #164]	@ (8007d04 <__swsetup_r+0xa8>)
 8007c60:	4605      	mov	r5, r0
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	460c      	mov	r4, r1
 8007c66:	b118      	cbz	r0, 8007c70 <__swsetup_r+0x14>
 8007c68:	6a03      	ldr	r3, [r0, #32]
 8007c6a:	b90b      	cbnz	r3, 8007c70 <__swsetup_r+0x14>
 8007c6c:	f7ff fec6 	bl	80079fc <__sinit>
 8007c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c74:	0719      	lsls	r1, r3, #28
 8007c76:	d422      	bmi.n	8007cbe <__swsetup_r+0x62>
 8007c78:	06da      	lsls	r2, r3, #27
 8007c7a:	d407      	bmi.n	8007c8c <__swsetup_r+0x30>
 8007c7c:	2209      	movs	r2, #9
 8007c7e:	602a      	str	r2, [r5, #0]
 8007c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	e033      	b.n	8007cf4 <__swsetup_r+0x98>
 8007c8c:	0758      	lsls	r0, r3, #29
 8007c8e:	d512      	bpl.n	8007cb6 <__swsetup_r+0x5a>
 8007c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c92:	b141      	cbz	r1, 8007ca6 <__swsetup_r+0x4a>
 8007c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <__swsetup_r+0x46>
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f8af 	bl	8007e00 <_free_r>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f043 0308 	orr.w	r3, r3, #8
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	b94b      	cbnz	r3, 8007cd6 <__swsetup_r+0x7a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ccc:	d003      	beq.n	8007cd6 <__swsetup_r+0x7a>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 fd2d 	bl	8008730 <__smakebuf_r>
 8007cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cda:	f013 0201 	ands.w	r2, r3, #1
 8007cde:	d00a      	beq.n	8007cf6 <__swsetup_r+0x9a>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60a2      	str	r2, [r4, #8]
 8007ce4:	6962      	ldr	r2, [r4, #20]
 8007ce6:	4252      	negs	r2, r2
 8007ce8:	61a2      	str	r2, [r4, #24]
 8007cea:	6922      	ldr	r2, [r4, #16]
 8007cec:	b942      	cbnz	r2, 8007d00 <__swsetup_r+0xa4>
 8007cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cf2:	d1c5      	bne.n	8007c80 <__swsetup_r+0x24>
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	0799      	lsls	r1, r3, #30
 8007cf8:	bf58      	it	pl
 8007cfa:	6962      	ldrpl	r2, [r4, #20]
 8007cfc:	60a2      	str	r2, [r4, #8]
 8007cfe:	e7f4      	b.n	8007cea <__swsetup_r+0x8e>
 8007d00:	2000      	movs	r0, #0
 8007d02:	e7f7      	b.n	8007cf4 <__swsetup_r+0x98>
 8007d04:	20000024 	.word	0x20000024

08007d08 <memset>:
 8007d08:	4402      	add	r2, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <_close_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	@ (8007d34 <_close_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fed1 	bl	8001aca <_close>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_close_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_close_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20001718 	.word	0x20001718

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	@ (8007d58 <_lseek_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7f9 fee6 	bl	8001b18 <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20001718 	.word	0x20001718

08007d5c <_read_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_read_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 fe74 	bl	8001a58 <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_read_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_read_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20001718 	.word	0x20001718

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	@ (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 fe7f 	bl	8001a92 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20001718 	.word	0x20001718

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	@ (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000024 	.word	0x20000024

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	@ (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	@ (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f000 fd56 	bl	8008874 <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	0800978c 	.word	0x0800978c
 8007dec:	0800978c 	.word	0x0800978c
 8007df0:	0800978c 	.word	0x0800978c
 8007df4:	08009790 	.word	0x08009790

08007df8 <__retarget_lock_init_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <__retarget_lock_acquire_recursive>:
 8007dfa:	4770      	bx	lr

08007dfc <__retarget_lock_release_recursive>:
 8007dfc:	4770      	bx	lr
	...

08007e00 <_free_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4605      	mov	r5, r0
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d041      	beq.n	8007e8c <_free_r+0x8c>
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f0c      	subs	r4, r1, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfb8      	it	lt
 8007e12:	18e4      	addlt	r4, r4, r3
 8007e14:	f000 f8e0 	bl	8007fd8 <__malloc_lock>
 8007e18:	4a1d      	ldr	r2, [pc, #116]	@ (8007e90 <_free_r+0x90>)
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	b933      	cbnz	r3, 8007e2c <_free_r+0x2c>
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	6014      	str	r4, [r2, #0]
 8007e22:	4628      	mov	r0, r5
 8007e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e28:	f000 b8dc 	b.w	8007fe4 <__malloc_unlock>
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d908      	bls.n	8007e42 <_free_r+0x42>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	1821      	adds	r1, r4, r0
 8007e34:	428b      	cmp	r3, r1
 8007e36:	bf01      	itttt	eq
 8007e38:	6819      	ldreq	r1, [r3, #0]
 8007e3a:	685b      	ldreq	r3, [r3, #4]
 8007e3c:	1809      	addeq	r1, r1, r0
 8007e3e:	6021      	streq	r1, [r4, #0]
 8007e40:	e7ed      	b.n	8007e1e <_free_r+0x1e>
 8007e42:	461a      	mov	r2, r3
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b10b      	cbz	r3, 8007e4c <_free_r+0x4c>
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d9fa      	bls.n	8007e42 <_free_r+0x42>
 8007e4c:	6811      	ldr	r1, [r2, #0]
 8007e4e:	1850      	adds	r0, r2, r1
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d10b      	bne.n	8007e6c <_free_r+0x6c>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	4401      	add	r1, r0
 8007e58:	1850      	adds	r0, r2, r1
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	d1e0      	bne.n	8007e22 <_free_r+0x22>
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	6053      	str	r3, [r2, #4]
 8007e66:	4408      	add	r0, r1
 8007e68:	6010      	str	r0, [r2, #0]
 8007e6a:	e7da      	b.n	8007e22 <_free_r+0x22>
 8007e6c:	d902      	bls.n	8007e74 <_free_r+0x74>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	e7d6      	b.n	8007e22 <_free_r+0x22>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	1821      	adds	r1, r4, r0
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	bf04      	itt	eq
 8007e7c:	6819      	ldreq	r1, [r3, #0]
 8007e7e:	685b      	ldreq	r3, [r3, #4]
 8007e80:	6063      	str	r3, [r4, #4]
 8007e82:	bf04      	itt	eq
 8007e84:	1809      	addeq	r1, r1, r0
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	6054      	str	r4, [r2, #4]
 8007e8a:	e7ca      	b.n	8007e22 <_free_r+0x22>
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001724 	.word	0x20001724

08007e94 <sbrk_aligned>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4e0f      	ldr	r6, [pc, #60]	@ (8007ed4 <sbrk_aligned+0x40>)
 8007e98:	460c      	mov	r4, r1
 8007e9a:	6831      	ldr	r1, [r6, #0]
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	b911      	cbnz	r1, 8007ea6 <sbrk_aligned+0x12>
 8007ea0:	f000 fcd8 	bl	8008854 <_sbrk_r>
 8007ea4:	6030      	str	r0, [r6, #0]
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 fcd3 	bl	8008854 <_sbrk_r>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d103      	bne.n	8007eba <sbrk_aligned+0x26>
 8007eb2:	f04f 34ff 	mov.w	r4, #4294967295
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	1cc4      	adds	r4, r0, #3
 8007ebc:	f024 0403 	bic.w	r4, r4, #3
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d0f8      	beq.n	8007eb6 <sbrk_aligned+0x22>
 8007ec4:	1a21      	subs	r1, r4, r0
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 fcc4 	bl	8008854 <_sbrk_r>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1f2      	bne.n	8007eb6 <sbrk_aligned+0x22>
 8007ed0:	e7ef      	b.n	8007eb2 <sbrk_aligned+0x1e>
 8007ed2:	bf00      	nop
 8007ed4:	20001720 	.word	0x20001720

08007ed8 <_malloc_r>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	1ccd      	adds	r5, r1, #3
 8007ede:	f025 0503 	bic.w	r5, r5, #3
 8007ee2:	3508      	adds	r5, #8
 8007ee4:	2d0c      	cmp	r5, #12
 8007ee6:	bf38      	it	cc
 8007ee8:	250c      	movcc	r5, #12
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	4606      	mov	r6, r0
 8007eee:	db01      	blt.n	8007ef4 <_malloc_r+0x1c>
 8007ef0:	42a9      	cmp	r1, r5
 8007ef2:	d904      	bls.n	8007efe <_malloc_r+0x26>
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	6033      	str	r3, [r6, #0]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fd4 <_malloc_r+0xfc>
 8007f02:	f000 f869 	bl	8007fd8 <__malloc_lock>
 8007f06:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0a:	461c      	mov	r4, r3
 8007f0c:	bb44      	cbnz	r4, 8007f60 <_malloc_r+0x88>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ffbf 	bl	8007e94 <sbrk_aligned>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	4604      	mov	r4, r0
 8007f1a:	d158      	bne.n	8007fce <_malloc_r+0xf6>
 8007f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f20:	4627      	mov	r7, r4
 8007f22:	2f00      	cmp	r7, #0
 8007f24:	d143      	bne.n	8007fae <_malloc_r+0xd6>
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d04b      	beq.n	8007fc2 <_malloc_r+0xea>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4630      	mov	r0, r6
 8007f30:	eb04 0903 	add.w	r9, r4, r3
 8007f34:	f000 fc8e 	bl	8008854 <_sbrk_r>
 8007f38:	4581      	cmp	r9, r0
 8007f3a:	d142      	bne.n	8007fc2 <_malloc_r+0xea>
 8007f3c:	6821      	ldr	r1, [r4, #0]
 8007f3e:	1a6d      	subs	r5, r5, r1
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ffa6 	bl	8007e94 <sbrk_aligned>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d03a      	beq.n	8007fc2 <_malloc_r+0xea>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	442b      	add	r3, r5
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	f8d8 3000 	ldr.w	r3, [r8]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	bb62      	cbnz	r2, 8007fb4 <_malloc_r+0xdc>
 8007f5a:	f8c8 7000 	str.w	r7, [r8]
 8007f5e:	e00f      	b.n	8007f80 <_malloc_r+0xa8>
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	1b52      	subs	r2, r2, r5
 8007f64:	d420      	bmi.n	8007fa8 <_malloc_r+0xd0>
 8007f66:	2a0b      	cmp	r2, #11
 8007f68:	d917      	bls.n	8007f9a <_malloc_r+0xc2>
 8007f6a:	1961      	adds	r1, r4, r5
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	6025      	str	r5, [r4, #0]
 8007f70:	bf18      	it	ne
 8007f72:	6059      	strne	r1, [r3, #4]
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	bf08      	it	eq
 8007f78:	f8c8 1000 	streq.w	r1, [r8]
 8007f7c:	5162      	str	r2, [r4, r5]
 8007f7e:	604b      	str	r3, [r1, #4]
 8007f80:	4630      	mov	r0, r6
 8007f82:	f000 f82f 	bl	8007fe4 <__malloc_unlock>
 8007f86:	f104 000b 	add.w	r0, r4, #11
 8007f8a:	1d23      	adds	r3, r4, #4
 8007f8c:	f020 0007 	bic.w	r0, r0, #7
 8007f90:	1ac2      	subs	r2, r0, r3
 8007f92:	bf1c      	itt	ne
 8007f94:	1a1b      	subne	r3, r3, r0
 8007f96:	50a3      	strne	r3, [r4, r2]
 8007f98:	e7af      	b.n	8007efa <_malloc_r+0x22>
 8007f9a:	6862      	ldr	r2, [r4, #4]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	bf0c      	ite	eq
 8007fa0:	f8c8 2000 	streq.w	r2, [r8]
 8007fa4:	605a      	strne	r2, [r3, #4]
 8007fa6:	e7eb      	b.n	8007f80 <_malloc_r+0xa8>
 8007fa8:	4623      	mov	r3, r4
 8007faa:	6864      	ldr	r4, [r4, #4]
 8007fac:	e7ae      	b.n	8007f0c <_malloc_r+0x34>
 8007fae:	463c      	mov	r4, r7
 8007fb0:	687f      	ldr	r7, [r7, #4]
 8007fb2:	e7b6      	b.n	8007f22 <_malloc_r+0x4a>
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d1fb      	bne.n	8007fb4 <_malloc_r+0xdc>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6053      	str	r3, [r2, #4]
 8007fc0:	e7de      	b.n	8007f80 <_malloc_r+0xa8>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6033      	str	r3, [r6, #0]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 f80c 	bl	8007fe4 <__malloc_unlock>
 8007fcc:	e794      	b.n	8007ef8 <_malloc_r+0x20>
 8007fce:	6005      	str	r5, [r0, #0]
 8007fd0:	e7d6      	b.n	8007f80 <_malloc_r+0xa8>
 8007fd2:	bf00      	nop
 8007fd4:	20001724 	.word	0x20001724

08007fd8 <__malloc_lock>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	@ (8007fe0 <__malloc_lock+0x8>)
 8007fda:	f7ff bf0e 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8007fde:	bf00      	nop
 8007fe0:	2000171c 	.word	0x2000171c

08007fe4 <__malloc_unlock>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	@ (8007fec <__malloc_unlock+0x8>)
 8007fe6:	f7ff bf09 	b.w	8007dfc <__retarget_lock_release_recursive>
 8007fea:	bf00      	nop
 8007fec:	2000171c 	.word	0x2000171c

08007ff0 <__sfputc_r>:
 8007ff0:	6893      	ldr	r3, [r2, #8]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	b410      	push	{r4}
 8007ff8:	6093      	str	r3, [r2, #8]
 8007ffa:	da08      	bge.n	800800e <__sfputc_r+0x1e>
 8007ffc:	6994      	ldr	r4, [r2, #24]
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	db01      	blt.n	8008006 <__sfputc_r+0x16>
 8008002:	290a      	cmp	r1, #10
 8008004:	d103      	bne.n	800800e <__sfputc_r+0x1e>
 8008006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800800a:	f7ff bde8 	b.w	8007bde <__swbuf_r>
 800800e:	6813      	ldr	r3, [r2, #0]
 8008010:	1c58      	adds	r0, r3, #1
 8008012:	6010      	str	r0, [r2, #0]
 8008014:	7019      	strb	r1, [r3, #0]
 8008016:	4608      	mov	r0, r1
 8008018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801c:	4770      	bx	lr

0800801e <__sfputs_r>:
 800801e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008020:	4606      	mov	r6, r0
 8008022:	460f      	mov	r7, r1
 8008024:	4614      	mov	r4, r2
 8008026:	18d5      	adds	r5, r2, r3
 8008028:	42ac      	cmp	r4, r5
 800802a:	d101      	bne.n	8008030 <__sfputs_r+0x12>
 800802c:	2000      	movs	r0, #0
 800802e:	e007      	b.n	8008040 <__sfputs_r+0x22>
 8008030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008034:	463a      	mov	r2, r7
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ffda 	bl	8007ff0 <__sfputc_r>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d1f3      	bne.n	8008028 <__sfputs_r+0xa>
 8008040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008044 <_vfiprintf_r>:
 8008044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	460d      	mov	r5, r1
 800804a:	b09d      	sub	sp, #116	@ 0x74
 800804c:	4614      	mov	r4, r2
 800804e:	4698      	mov	r8, r3
 8008050:	4606      	mov	r6, r0
 8008052:	b118      	cbz	r0, 800805c <_vfiprintf_r+0x18>
 8008054:	6a03      	ldr	r3, [r0, #32]
 8008056:	b90b      	cbnz	r3, 800805c <_vfiprintf_r+0x18>
 8008058:	f7ff fcd0 	bl	80079fc <__sinit>
 800805c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800805e:	07d9      	lsls	r1, r3, #31
 8008060:	d405      	bmi.n	800806e <_vfiprintf_r+0x2a>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	059a      	lsls	r2, r3, #22
 8008066:	d402      	bmi.n	800806e <_vfiprintf_r+0x2a>
 8008068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800806a:	f7ff fec6 	bl	8007dfa <__retarget_lock_acquire_recursive>
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	071b      	lsls	r3, r3, #28
 8008072:	d501      	bpl.n	8008078 <_vfiprintf_r+0x34>
 8008074:	692b      	ldr	r3, [r5, #16]
 8008076:	b99b      	cbnz	r3, 80080a0 <_vfiprintf_r+0x5c>
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff fdee 	bl	8007c5c <__swsetup_r>
 8008080:	b170      	cbz	r0, 80080a0 <_vfiprintf_r+0x5c>
 8008082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008084:	07dc      	lsls	r4, r3, #31
 8008086:	d504      	bpl.n	8008092 <_vfiprintf_r+0x4e>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	b01d      	add	sp, #116	@ 0x74
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	0598      	lsls	r0, r3, #22
 8008096:	d4f7      	bmi.n	8008088 <_vfiprintf_r+0x44>
 8008098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800809a:	f7ff feaf 	bl	8007dfc <__retarget_lock_release_recursive>
 800809e:	e7f3      	b.n	8008088 <_vfiprintf_r+0x44>
 80080a0:	2300      	movs	r3, #0
 80080a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a4:	2320      	movs	r3, #32
 80080a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ae:	2330      	movs	r3, #48	@ 0x30
 80080b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008260 <_vfiprintf_r+0x21c>
 80080b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080b8:	f04f 0901 	mov.w	r9, #1
 80080bc:	4623      	mov	r3, r4
 80080be:	469a      	mov	sl, r3
 80080c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c4:	b10a      	cbz	r2, 80080ca <_vfiprintf_r+0x86>
 80080c6:	2a25      	cmp	r2, #37	@ 0x25
 80080c8:	d1f9      	bne.n	80080be <_vfiprintf_r+0x7a>
 80080ca:	ebba 0b04 	subs.w	fp, sl, r4
 80080ce:	d00b      	beq.n	80080e8 <_vfiprintf_r+0xa4>
 80080d0:	465b      	mov	r3, fp
 80080d2:	4622      	mov	r2, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ffa1 	bl	800801e <__sfputs_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	f000 80a7 	beq.w	8008230 <_vfiprintf_r+0x1ec>
 80080e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080e4:	445a      	add	r2, fp
 80080e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80080e8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 809f 	beq.w	8008230 <_vfiprintf_r+0x1ec>
 80080f2:	2300      	movs	r3, #0
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fc:	f10a 0a01 	add.w	sl, sl, #1
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	9307      	str	r3, [sp, #28]
 8008104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008108:	931a      	str	r3, [sp, #104]	@ 0x68
 800810a:	4654      	mov	r4, sl
 800810c:	2205      	movs	r2, #5
 800810e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008112:	4853      	ldr	r0, [pc, #332]	@ (8008260 <_vfiprintf_r+0x21c>)
 8008114:	f7f8 f86c 	bl	80001f0 <memchr>
 8008118:	9a04      	ldr	r2, [sp, #16]
 800811a:	b9d8      	cbnz	r0, 8008154 <_vfiprintf_r+0x110>
 800811c:	06d1      	lsls	r1, r2, #27
 800811e:	bf44      	itt	mi
 8008120:	2320      	movmi	r3, #32
 8008122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008126:	0713      	lsls	r3, r2, #28
 8008128:	bf44      	itt	mi
 800812a:	232b      	movmi	r3, #43	@ 0x2b
 800812c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008130:	f89a 3000 	ldrb.w	r3, [sl]
 8008134:	2b2a      	cmp	r3, #42	@ 0x2a
 8008136:	d015      	beq.n	8008164 <_vfiprintf_r+0x120>
 8008138:	9a07      	ldr	r2, [sp, #28]
 800813a:	4654      	mov	r4, sl
 800813c:	2000      	movs	r0, #0
 800813e:	f04f 0c0a 	mov.w	ip, #10
 8008142:	4621      	mov	r1, r4
 8008144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008148:	3b30      	subs	r3, #48	@ 0x30
 800814a:	2b09      	cmp	r3, #9
 800814c:	d94b      	bls.n	80081e6 <_vfiprintf_r+0x1a2>
 800814e:	b1b0      	cbz	r0, 800817e <_vfiprintf_r+0x13a>
 8008150:	9207      	str	r2, [sp, #28]
 8008152:	e014      	b.n	800817e <_vfiprintf_r+0x13a>
 8008154:	eba0 0308 	sub.w	r3, r0, r8
 8008158:	fa09 f303 	lsl.w	r3, r9, r3
 800815c:	4313      	orrs	r3, r2
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	46a2      	mov	sl, r4
 8008162:	e7d2      	b.n	800810a <_vfiprintf_r+0xc6>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	1d19      	adds	r1, r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	9103      	str	r1, [sp, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bfbb      	ittet	lt
 8008170:	425b      	neglt	r3, r3
 8008172:	f042 0202 	orrlt.w	r2, r2, #2
 8008176:	9307      	strge	r3, [sp, #28]
 8008178:	9307      	strlt	r3, [sp, #28]
 800817a:	bfb8      	it	lt
 800817c:	9204      	strlt	r2, [sp, #16]
 800817e:	7823      	ldrb	r3, [r4, #0]
 8008180:	2b2e      	cmp	r3, #46	@ 0x2e
 8008182:	d10a      	bne.n	800819a <_vfiprintf_r+0x156>
 8008184:	7863      	ldrb	r3, [r4, #1]
 8008186:	2b2a      	cmp	r3, #42	@ 0x2a
 8008188:	d132      	bne.n	80081f0 <_vfiprintf_r+0x1ac>
 800818a:	9b03      	ldr	r3, [sp, #12]
 800818c:	1d1a      	adds	r2, r3, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	9203      	str	r2, [sp, #12]
 8008192:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008196:	3402      	adds	r4, #2
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008270 <_vfiprintf_r+0x22c>
 800819e:	7821      	ldrb	r1, [r4, #0]
 80081a0:	2203      	movs	r2, #3
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7f8 f824 	bl	80001f0 <memchr>
 80081a8:	b138      	cbz	r0, 80081ba <_vfiprintf_r+0x176>
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	eba0 000a 	sub.w	r0, r0, sl
 80081b0:	2240      	movs	r2, #64	@ 0x40
 80081b2:	4082      	lsls	r2, r0
 80081b4:	4313      	orrs	r3, r2
 80081b6:	3401      	adds	r4, #1
 80081b8:	9304      	str	r3, [sp, #16]
 80081ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081be:	4829      	ldr	r0, [pc, #164]	@ (8008264 <_vfiprintf_r+0x220>)
 80081c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081c4:	2206      	movs	r2, #6
 80081c6:	f7f8 f813 	bl	80001f0 <memchr>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d03f      	beq.n	800824e <_vfiprintf_r+0x20a>
 80081ce:	4b26      	ldr	r3, [pc, #152]	@ (8008268 <_vfiprintf_r+0x224>)
 80081d0:	bb1b      	cbnz	r3, 800821a <_vfiprintf_r+0x1d6>
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	3307      	adds	r3, #7
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	3308      	adds	r3, #8
 80081dc:	9303      	str	r3, [sp, #12]
 80081de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e0:	443b      	add	r3, r7
 80081e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e4:	e76a      	b.n	80080bc <_vfiprintf_r+0x78>
 80081e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ea:	460c      	mov	r4, r1
 80081ec:	2001      	movs	r0, #1
 80081ee:	e7a8      	b.n	8008142 <_vfiprintf_r+0xfe>
 80081f0:	2300      	movs	r3, #0
 80081f2:	3401      	adds	r4, #1
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	4619      	mov	r1, r3
 80081f8:	f04f 0c0a 	mov.w	ip, #10
 80081fc:	4620      	mov	r0, r4
 80081fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008202:	3a30      	subs	r2, #48	@ 0x30
 8008204:	2a09      	cmp	r2, #9
 8008206:	d903      	bls.n	8008210 <_vfiprintf_r+0x1cc>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0c6      	beq.n	800819a <_vfiprintf_r+0x156>
 800820c:	9105      	str	r1, [sp, #20]
 800820e:	e7c4      	b.n	800819a <_vfiprintf_r+0x156>
 8008210:	fb0c 2101 	mla	r1, ip, r1, r2
 8008214:	4604      	mov	r4, r0
 8008216:	2301      	movs	r3, #1
 8008218:	e7f0      	b.n	80081fc <_vfiprintf_r+0x1b8>
 800821a:	ab03      	add	r3, sp, #12
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	462a      	mov	r2, r5
 8008220:	4b12      	ldr	r3, [pc, #72]	@ (800826c <_vfiprintf_r+0x228>)
 8008222:	a904      	add	r1, sp, #16
 8008224:	4630      	mov	r0, r6
 8008226:	f3af 8000 	nop.w
 800822a:	4607      	mov	r7, r0
 800822c:	1c78      	adds	r0, r7, #1
 800822e:	d1d6      	bne.n	80081de <_vfiprintf_r+0x19a>
 8008230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	d405      	bmi.n	8008242 <_vfiprintf_r+0x1fe>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	059a      	lsls	r2, r3, #22
 800823a:	d402      	bmi.n	8008242 <_vfiprintf_r+0x1fe>
 800823c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823e:	f7ff fddd 	bl	8007dfc <__retarget_lock_release_recursive>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	065b      	lsls	r3, r3, #25
 8008246:	f53f af1f 	bmi.w	8008088 <_vfiprintf_r+0x44>
 800824a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800824c:	e71e      	b.n	800808c <_vfiprintf_r+0x48>
 800824e:	ab03      	add	r3, sp, #12
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	462a      	mov	r2, r5
 8008254:	4b05      	ldr	r3, [pc, #20]	@ (800826c <_vfiprintf_r+0x228>)
 8008256:	a904      	add	r1, sp, #16
 8008258:	4630      	mov	r0, r6
 800825a:	f000 f879 	bl	8008350 <_printf_i>
 800825e:	e7e4      	b.n	800822a <_vfiprintf_r+0x1e6>
 8008260:	08009750 	.word	0x08009750
 8008264:	0800975a 	.word	0x0800975a
 8008268:	00000000 	.word	0x00000000
 800826c:	0800801f 	.word	0x0800801f
 8008270:	08009756 	.word	0x08009756

08008274 <_printf_common>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	4616      	mov	r6, r2
 800827a:	4698      	mov	r8, r3
 800827c:	688a      	ldr	r2, [r1, #8]
 800827e:	690b      	ldr	r3, [r1, #16]
 8008280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008284:	4293      	cmp	r3, r2
 8008286:	bfb8      	it	lt
 8008288:	4613      	movlt	r3, r2
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008290:	4607      	mov	r7, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b10a      	cbz	r2, 800829a <_printf_common+0x26>
 8008296:	3301      	adds	r3, #1
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	0699      	lsls	r1, r3, #26
 800829e:	bf42      	ittt	mi
 80082a0:	6833      	ldrmi	r3, [r6, #0]
 80082a2:	3302      	addmi	r3, #2
 80082a4:	6033      	strmi	r3, [r6, #0]
 80082a6:	6825      	ldr	r5, [r4, #0]
 80082a8:	f015 0506 	ands.w	r5, r5, #6
 80082ac:	d106      	bne.n	80082bc <_printf_common+0x48>
 80082ae:	f104 0a19 	add.w	sl, r4, #25
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	6832      	ldr	r2, [r6, #0]
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dc26      	bgt.n	800830a <_printf_common+0x96>
 80082bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	3b00      	subs	r3, #0
 80082c4:	bf18      	it	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	0692      	lsls	r2, r2, #26
 80082ca:	d42b      	bmi.n	8008324 <_printf_common+0xb0>
 80082cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082d0:	4641      	mov	r1, r8
 80082d2:	4638      	mov	r0, r7
 80082d4:	47c8      	blx	r9
 80082d6:	3001      	adds	r0, #1
 80082d8:	d01e      	beq.n	8008318 <_printf_common+0xa4>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	6922      	ldr	r2, [r4, #16]
 80082de:	f003 0306 	and.w	r3, r3, #6
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	bf02      	ittt	eq
 80082e6:	68e5      	ldreq	r5, [r4, #12]
 80082e8:	6833      	ldreq	r3, [r6, #0]
 80082ea:	1aed      	subeq	r5, r5, r3
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	bf0c      	ite	eq
 80082f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082f4:	2500      	movne	r5, #0
 80082f6:	4293      	cmp	r3, r2
 80082f8:	bfc4      	itt	gt
 80082fa:	1a9b      	subgt	r3, r3, r2
 80082fc:	18ed      	addgt	r5, r5, r3
 80082fe:	2600      	movs	r6, #0
 8008300:	341a      	adds	r4, #26
 8008302:	42b5      	cmp	r5, r6
 8008304:	d11a      	bne.n	800833c <_printf_common+0xc8>
 8008306:	2000      	movs	r0, #0
 8008308:	e008      	b.n	800831c <_printf_common+0xa8>
 800830a:	2301      	movs	r3, #1
 800830c:	4652      	mov	r2, sl
 800830e:	4641      	mov	r1, r8
 8008310:	4638      	mov	r0, r7
 8008312:	47c8      	blx	r9
 8008314:	3001      	adds	r0, #1
 8008316:	d103      	bne.n	8008320 <_printf_common+0xac>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	3501      	adds	r5, #1
 8008322:	e7c6      	b.n	80082b2 <_printf_common+0x3e>
 8008324:	18e1      	adds	r1, r4, r3
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	2030      	movs	r0, #48	@ 0x30
 800832a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800832e:	4422      	add	r2, r4
 8008330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008338:	3302      	adds	r3, #2
 800833a:	e7c7      	b.n	80082cc <_printf_common+0x58>
 800833c:	2301      	movs	r3, #1
 800833e:	4622      	mov	r2, r4
 8008340:	4641      	mov	r1, r8
 8008342:	4638      	mov	r0, r7
 8008344:	47c8      	blx	r9
 8008346:	3001      	adds	r0, #1
 8008348:	d0e6      	beq.n	8008318 <_printf_common+0xa4>
 800834a:	3601      	adds	r6, #1
 800834c:	e7d9      	b.n	8008302 <_printf_common+0x8e>
	...

08008350 <_printf_i>:
 8008350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	7e0f      	ldrb	r7, [r1, #24]
 8008356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008358:	2f78      	cmp	r7, #120	@ 0x78
 800835a:	4691      	mov	r9, r2
 800835c:	4680      	mov	r8, r0
 800835e:	460c      	mov	r4, r1
 8008360:	469a      	mov	sl, r3
 8008362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008366:	d807      	bhi.n	8008378 <_printf_i+0x28>
 8008368:	2f62      	cmp	r7, #98	@ 0x62
 800836a:	d80a      	bhi.n	8008382 <_printf_i+0x32>
 800836c:	2f00      	cmp	r7, #0
 800836e:	f000 80d1 	beq.w	8008514 <_printf_i+0x1c4>
 8008372:	2f58      	cmp	r7, #88	@ 0x58
 8008374:	f000 80b8 	beq.w	80084e8 <_printf_i+0x198>
 8008378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800837c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008380:	e03a      	b.n	80083f8 <_printf_i+0xa8>
 8008382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008386:	2b15      	cmp	r3, #21
 8008388:	d8f6      	bhi.n	8008378 <_printf_i+0x28>
 800838a:	a101      	add	r1, pc, #4	@ (adr r1, 8008390 <_printf_i+0x40>)
 800838c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008390:	080083e9 	.word	0x080083e9
 8008394:	080083fd 	.word	0x080083fd
 8008398:	08008379 	.word	0x08008379
 800839c:	08008379 	.word	0x08008379
 80083a0:	08008379 	.word	0x08008379
 80083a4:	08008379 	.word	0x08008379
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008379 	.word	0x08008379
 80083b0:	08008379 	.word	0x08008379
 80083b4:	08008379 	.word	0x08008379
 80083b8:	08008379 	.word	0x08008379
 80083bc:	080084fb 	.word	0x080084fb
 80083c0:	08008427 	.word	0x08008427
 80083c4:	080084b5 	.word	0x080084b5
 80083c8:	08008379 	.word	0x08008379
 80083cc:	08008379 	.word	0x08008379
 80083d0:	0800851d 	.word	0x0800851d
 80083d4:	08008379 	.word	0x08008379
 80083d8:	08008427 	.word	0x08008427
 80083dc:	08008379 	.word	0x08008379
 80083e0:	08008379 	.word	0x08008379
 80083e4:	080084bd 	.word	0x080084bd
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6032      	str	r2, [r6, #0]
 80083f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083f8:	2301      	movs	r3, #1
 80083fa:	e09c      	b.n	8008536 <_printf_i+0x1e6>
 80083fc:	6833      	ldr	r3, [r6, #0]
 80083fe:	6820      	ldr	r0, [r4, #0]
 8008400:	1d19      	adds	r1, r3, #4
 8008402:	6031      	str	r1, [r6, #0]
 8008404:	0606      	lsls	r6, r0, #24
 8008406:	d501      	bpl.n	800840c <_printf_i+0xbc>
 8008408:	681d      	ldr	r5, [r3, #0]
 800840a:	e003      	b.n	8008414 <_printf_i+0xc4>
 800840c:	0645      	lsls	r5, r0, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0xb8>
 8008410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008414:	2d00      	cmp	r5, #0
 8008416:	da03      	bge.n	8008420 <_printf_i+0xd0>
 8008418:	232d      	movs	r3, #45	@ 0x2d
 800841a:	426d      	negs	r5, r5
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008420:	4858      	ldr	r0, [pc, #352]	@ (8008584 <_printf_i+0x234>)
 8008422:	230a      	movs	r3, #10
 8008424:	e011      	b.n	800844a <_printf_i+0xfa>
 8008426:	6821      	ldr	r1, [r4, #0]
 8008428:	6833      	ldr	r3, [r6, #0]
 800842a:	0608      	lsls	r0, r1, #24
 800842c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008430:	d402      	bmi.n	8008438 <_printf_i+0xe8>
 8008432:	0649      	lsls	r1, r1, #25
 8008434:	bf48      	it	mi
 8008436:	b2ad      	uxthmi	r5, r5
 8008438:	2f6f      	cmp	r7, #111	@ 0x6f
 800843a:	4852      	ldr	r0, [pc, #328]	@ (8008584 <_printf_i+0x234>)
 800843c:	6033      	str	r3, [r6, #0]
 800843e:	bf14      	ite	ne
 8008440:	230a      	movne	r3, #10
 8008442:	2308      	moveq	r3, #8
 8008444:	2100      	movs	r1, #0
 8008446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800844a:	6866      	ldr	r6, [r4, #4]
 800844c:	60a6      	str	r6, [r4, #8]
 800844e:	2e00      	cmp	r6, #0
 8008450:	db05      	blt.n	800845e <_printf_i+0x10e>
 8008452:	6821      	ldr	r1, [r4, #0]
 8008454:	432e      	orrs	r6, r5
 8008456:	f021 0104 	bic.w	r1, r1, #4
 800845a:	6021      	str	r1, [r4, #0]
 800845c:	d04b      	beq.n	80084f6 <_printf_i+0x1a6>
 800845e:	4616      	mov	r6, r2
 8008460:	fbb5 f1f3 	udiv	r1, r5, r3
 8008464:	fb03 5711 	mls	r7, r3, r1, r5
 8008468:	5dc7      	ldrb	r7, [r0, r7]
 800846a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800846e:	462f      	mov	r7, r5
 8008470:	42bb      	cmp	r3, r7
 8008472:	460d      	mov	r5, r1
 8008474:	d9f4      	bls.n	8008460 <_printf_i+0x110>
 8008476:	2b08      	cmp	r3, #8
 8008478:	d10b      	bne.n	8008492 <_printf_i+0x142>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	07df      	lsls	r7, r3, #31
 800847e:	d508      	bpl.n	8008492 <_printf_i+0x142>
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	6861      	ldr	r1, [r4, #4]
 8008484:	4299      	cmp	r1, r3
 8008486:	bfde      	ittt	le
 8008488:	2330      	movle	r3, #48	@ 0x30
 800848a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800848e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008492:	1b92      	subs	r2, r2, r6
 8008494:	6122      	str	r2, [r4, #16]
 8008496:	f8cd a000 	str.w	sl, [sp]
 800849a:	464b      	mov	r3, r9
 800849c:	aa03      	add	r2, sp, #12
 800849e:	4621      	mov	r1, r4
 80084a0:	4640      	mov	r0, r8
 80084a2:	f7ff fee7 	bl	8008274 <_printf_common>
 80084a6:	3001      	adds	r0, #1
 80084a8:	d14a      	bne.n	8008540 <_printf_i+0x1f0>
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	b004      	add	sp, #16
 80084b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	f043 0320 	orr.w	r3, r3, #32
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	4832      	ldr	r0, [pc, #200]	@ (8008588 <_printf_i+0x238>)
 80084be:	2778      	movs	r7, #120	@ 0x78
 80084c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	6831      	ldr	r1, [r6, #0]
 80084c8:	061f      	lsls	r7, r3, #24
 80084ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80084ce:	d402      	bmi.n	80084d6 <_printf_i+0x186>
 80084d0:	065f      	lsls	r7, r3, #25
 80084d2:	bf48      	it	mi
 80084d4:	b2ad      	uxthmi	r5, r5
 80084d6:	6031      	str	r1, [r6, #0]
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	bf44      	itt	mi
 80084dc:	f043 0320 	orrmi.w	r3, r3, #32
 80084e0:	6023      	strmi	r3, [r4, #0]
 80084e2:	b11d      	cbz	r5, 80084ec <_printf_i+0x19c>
 80084e4:	2310      	movs	r3, #16
 80084e6:	e7ad      	b.n	8008444 <_printf_i+0xf4>
 80084e8:	4826      	ldr	r0, [pc, #152]	@ (8008584 <_printf_i+0x234>)
 80084ea:	e7e9      	b.n	80084c0 <_printf_i+0x170>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	f023 0320 	bic.w	r3, r3, #32
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	e7f6      	b.n	80084e4 <_printf_i+0x194>
 80084f6:	4616      	mov	r6, r2
 80084f8:	e7bd      	b.n	8008476 <_printf_i+0x126>
 80084fa:	6833      	ldr	r3, [r6, #0]
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	6961      	ldr	r1, [r4, #20]
 8008500:	1d18      	adds	r0, r3, #4
 8008502:	6030      	str	r0, [r6, #0]
 8008504:	062e      	lsls	r6, r5, #24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	d501      	bpl.n	800850e <_printf_i+0x1be>
 800850a:	6019      	str	r1, [r3, #0]
 800850c:	e002      	b.n	8008514 <_printf_i+0x1c4>
 800850e:	0668      	lsls	r0, r5, #25
 8008510:	d5fb      	bpl.n	800850a <_printf_i+0x1ba>
 8008512:	8019      	strh	r1, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	4616      	mov	r6, r2
 800851a:	e7bc      	b.n	8008496 <_printf_i+0x146>
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	6032      	str	r2, [r6, #0]
 8008522:	681e      	ldr	r6, [r3, #0]
 8008524:	6862      	ldr	r2, [r4, #4]
 8008526:	2100      	movs	r1, #0
 8008528:	4630      	mov	r0, r6
 800852a:	f7f7 fe61 	bl	80001f0 <memchr>
 800852e:	b108      	cbz	r0, 8008534 <_printf_i+0x1e4>
 8008530:	1b80      	subs	r0, r0, r6
 8008532:	6060      	str	r0, [r4, #4]
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	6123      	str	r3, [r4, #16]
 8008538:	2300      	movs	r3, #0
 800853a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800853e:	e7aa      	b.n	8008496 <_printf_i+0x146>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	4632      	mov	r2, r6
 8008544:	4649      	mov	r1, r9
 8008546:	4640      	mov	r0, r8
 8008548:	47d0      	blx	sl
 800854a:	3001      	adds	r0, #1
 800854c:	d0ad      	beq.n	80084aa <_printf_i+0x15a>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	079b      	lsls	r3, r3, #30
 8008552:	d413      	bmi.n	800857c <_printf_i+0x22c>
 8008554:	68e0      	ldr	r0, [r4, #12]
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	4298      	cmp	r0, r3
 800855a:	bfb8      	it	lt
 800855c:	4618      	movlt	r0, r3
 800855e:	e7a6      	b.n	80084ae <_printf_i+0x15e>
 8008560:	2301      	movs	r3, #1
 8008562:	4632      	mov	r2, r6
 8008564:	4649      	mov	r1, r9
 8008566:	4640      	mov	r0, r8
 8008568:	47d0      	blx	sl
 800856a:	3001      	adds	r0, #1
 800856c:	d09d      	beq.n	80084aa <_printf_i+0x15a>
 800856e:	3501      	adds	r5, #1
 8008570:	68e3      	ldr	r3, [r4, #12]
 8008572:	9903      	ldr	r1, [sp, #12]
 8008574:	1a5b      	subs	r3, r3, r1
 8008576:	42ab      	cmp	r3, r5
 8008578:	dcf2      	bgt.n	8008560 <_printf_i+0x210>
 800857a:	e7eb      	b.n	8008554 <_printf_i+0x204>
 800857c:	2500      	movs	r5, #0
 800857e:	f104 0619 	add.w	r6, r4, #25
 8008582:	e7f5      	b.n	8008570 <_printf_i+0x220>
 8008584:	08009761 	.word	0x08009761
 8008588:	08009772 	.word	0x08009772

0800858c <__sflush_r>:
 800858c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008594:	0716      	lsls	r6, r2, #28
 8008596:	4605      	mov	r5, r0
 8008598:	460c      	mov	r4, r1
 800859a:	d454      	bmi.n	8008646 <__sflush_r+0xba>
 800859c:	684b      	ldr	r3, [r1, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dc02      	bgt.n	80085a8 <__sflush_r+0x1c>
 80085a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd48      	ble.n	800863a <__sflush_r+0xae>
 80085a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085aa:	2e00      	cmp	r6, #0
 80085ac:	d045      	beq.n	800863a <__sflush_r+0xae>
 80085ae:	2300      	movs	r3, #0
 80085b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085b4:	682f      	ldr	r7, [r5, #0]
 80085b6:	6a21      	ldr	r1, [r4, #32]
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	d030      	beq.n	800861e <__sflush_r+0x92>
 80085bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	0759      	lsls	r1, r3, #29
 80085c2:	d505      	bpl.n	80085d0 <__sflush_r+0x44>
 80085c4:	6863      	ldr	r3, [r4, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085ca:	b10b      	cbz	r3, 80085d0 <__sflush_r+0x44>
 80085cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085d4:	6a21      	ldr	r1, [r4, #32]
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b0      	blx	r6
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	d106      	bne.n	80085ee <__sflush_r+0x62>
 80085e0:	6829      	ldr	r1, [r5, #0]
 80085e2:	291d      	cmp	r1, #29
 80085e4:	d82b      	bhi.n	800863e <__sflush_r+0xb2>
 80085e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008690 <__sflush_r+0x104>)
 80085e8:	40ca      	lsrs	r2, r1
 80085ea:	07d6      	lsls	r6, r2, #31
 80085ec:	d527      	bpl.n	800863e <__sflush_r+0xb2>
 80085ee:	2200      	movs	r2, #0
 80085f0:	6062      	str	r2, [r4, #4]
 80085f2:	04d9      	lsls	r1, r3, #19
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	6022      	str	r2, [r4, #0]
 80085f8:	d504      	bpl.n	8008604 <__sflush_r+0x78>
 80085fa:	1c42      	adds	r2, r0, #1
 80085fc:	d101      	bne.n	8008602 <__sflush_r+0x76>
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	b903      	cbnz	r3, 8008604 <__sflush_r+0x78>
 8008602:	6560      	str	r0, [r4, #84]	@ 0x54
 8008604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008606:	602f      	str	r7, [r5, #0]
 8008608:	b1b9      	cbz	r1, 800863a <__sflush_r+0xae>
 800860a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800860e:	4299      	cmp	r1, r3
 8008610:	d002      	beq.n	8008618 <__sflush_r+0x8c>
 8008612:	4628      	mov	r0, r5
 8008614:	f7ff fbf4 	bl	8007e00 <_free_r>
 8008618:	2300      	movs	r3, #0
 800861a:	6363      	str	r3, [r4, #52]	@ 0x34
 800861c:	e00d      	b.n	800863a <__sflush_r+0xae>
 800861e:	2301      	movs	r3, #1
 8008620:	4628      	mov	r0, r5
 8008622:	47b0      	blx	r6
 8008624:	4602      	mov	r2, r0
 8008626:	1c50      	adds	r0, r2, #1
 8008628:	d1c9      	bne.n	80085be <__sflush_r+0x32>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0c6      	beq.n	80085be <__sflush_r+0x32>
 8008630:	2b1d      	cmp	r3, #29
 8008632:	d001      	beq.n	8008638 <__sflush_r+0xac>
 8008634:	2b16      	cmp	r3, #22
 8008636:	d11e      	bne.n	8008676 <__sflush_r+0xea>
 8008638:	602f      	str	r7, [r5, #0]
 800863a:	2000      	movs	r0, #0
 800863c:	e022      	b.n	8008684 <__sflush_r+0xf8>
 800863e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008642:	b21b      	sxth	r3, r3
 8008644:	e01b      	b.n	800867e <__sflush_r+0xf2>
 8008646:	690f      	ldr	r7, [r1, #16]
 8008648:	2f00      	cmp	r7, #0
 800864a:	d0f6      	beq.n	800863a <__sflush_r+0xae>
 800864c:	0793      	lsls	r3, r2, #30
 800864e:	680e      	ldr	r6, [r1, #0]
 8008650:	bf08      	it	eq
 8008652:	694b      	ldreq	r3, [r1, #20]
 8008654:	600f      	str	r7, [r1, #0]
 8008656:	bf18      	it	ne
 8008658:	2300      	movne	r3, #0
 800865a:	eba6 0807 	sub.w	r8, r6, r7
 800865e:	608b      	str	r3, [r1, #8]
 8008660:	f1b8 0f00 	cmp.w	r8, #0
 8008664:	dde9      	ble.n	800863a <__sflush_r+0xae>
 8008666:	6a21      	ldr	r1, [r4, #32]
 8008668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800866a:	4643      	mov	r3, r8
 800866c:	463a      	mov	r2, r7
 800866e:	4628      	mov	r0, r5
 8008670:	47b0      	blx	r6
 8008672:	2800      	cmp	r0, #0
 8008674:	dc08      	bgt.n	8008688 <__sflush_r+0xfc>
 8008676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	4407      	add	r7, r0
 800868a:	eba8 0800 	sub.w	r8, r8, r0
 800868e:	e7e7      	b.n	8008660 <__sflush_r+0xd4>
 8008690:	20400001 	.word	0x20400001

08008694 <_fflush_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	690b      	ldr	r3, [r1, #16]
 8008698:	4605      	mov	r5, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b913      	cbnz	r3, 80086a4 <_fflush_r+0x10>
 800869e:	2500      	movs	r5, #0
 80086a0:	4628      	mov	r0, r5
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	b118      	cbz	r0, 80086ae <_fflush_r+0x1a>
 80086a6:	6a03      	ldr	r3, [r0, #32]
 80086a8:	b90b      	cbnz	r3, 80086ae <_fflush_r+0x1a>
 80086aa:	f7ff f9a7 	bl	80079fc <__sinit>
 80086ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f3      	beq.n	800869e <_fflush_r+0xa>
 80086b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086b8:	07d0      	lsls	r0, r2, #31
 80086ba:	d404      	bmi.n	80086c6 <_fflush_r+0x32>
 80086bc:	0599      	lsls	r1, r3, #22
 80086be:	d402      	bmi.n	80086c6 <_fflush_r+0x32>
 80086c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086c2:	f7ff fb9a 	bl	8007dfa <__retarget_lock_acquire_recursive>
 80086c6:	4628      	mov	r0, r5
 80086c8:	4621      	mov	r1, r4
 80086ca:	f7ff ff5f 	bl	800858c <__sflush_r>
 80086ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d0:	07da      	lsls	r2, r3, #31
 80086d2:	4605      	mov	r5, r0
 80086d4:	d4e4      	bmi.n	80086a0 <_fflush_r+0xc>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d4e1      	bmi.n	80086a0 <_fflush_r+0xc>
 80086dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086de:	f7ff fb8d 	bl	8007dfc <__retarget_lock_release_recursive>
 80086e2:	e7dd      	b.n	80086a0 <_fflush_r+0xc>

080086e4 <__swhatbuf_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	460c      	mov	r4, r1
 80086e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ec:	2900      	cmp	r1, #0
 80086ee:	b096      	sub	sp, #88	@ 0x58
 80086f0:	4615      	mov	r5, r2
 80086f2:	461e      	mov	r6, r3
 80086f4:	da0d      	bge.n	8008712 <__swhatbuf_r+0x2e>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086fc:	f04f 0100 	mov.w	r1, #0
 8008700:	bf14      	ite	ne
 8008702:	2340      	movne	r3, #64	@ 0x40
 8008704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008708:	2000      	movs	r0, #0
 800870a:	6031      	str	r1, [r6, #0]
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	b016      	add	sp, #88	@ 0x58
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	466a      	mov	r2, sp
 8008714:	f000 f87c 	bl	8008810 <_fstat_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	dbec      	blt.n	80086f6 <__swhatbuf_r+0x12>
 800871c:	9901      	ldr	r1, [sp, #4]
 800871e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008726:	4259      	negs	r1, r3
 8008728:	4159      	adcs	r1, r3
 800872a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800872e:	e7eb      	b.n	8008708 <__swhatbuf_r+0x24>

08008730 <__smakebuf_r>:
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008734:	079d      	lsls	r5, r3, #30
 8008736:	4606      	mov	r6, r0
 8008738:	460c      	mov	r4, r1
 800873a:	d507      	bpl.n	800874c <__smakebuf_r+0x1c>
 800873c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	2301      	movs	r3, #1
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	b003      	add	sp, #12
 800874a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800874c:	ab01      	add	r3, sp, #4
 800874e:	466a      	mov	r2, sp
 8008750:	f7ff ffc8 	bl	80086e4 <__swhatbuf_r>
 8008754:	9f00      	ldr	r7, [sp, #0]
 8008756:	4605      	mov	r5, r0
 8008758:	4639      	mov	r1, r7
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff fbbc 	bl	8007ed8 <_malloc_r>
 8008760:	b948      	cbnz	r0, 8008776 <__smakebuf_r+0x46>
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	059a      	lsls	r2, r3, #22
 8008768:	d4ee      	bmi.n	8008748 <__smakebuf_r+0x18>
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	f043 0302 	orr.w	r3, r3, #2
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	e7e2      	b.n	800873c <__smakebuf_r+0xc>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	6020      	str	r0, [r4, #0]
 800877a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008786:	b15b      	cbz	r3, 80087a0 <__smakebuf_r+0x70>
 8008788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878c:	4630      	mov	r0, r6
 800878e:	f000 f851 	bl	8008834 <_isatty_r>
 8008792:	b128      	cbz	r0, 80087a0 <__smakebuf_r+0x70>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	431d      	orrs	r5, r3
 80087a4:	81a5      	strh	r5, [r4, #12]
 80087a6:	e7cf      	b.n	8008748 <__smakebuf_r+0x18>

080087a8 <_putc_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	460d      	mov	r5, r1
 80087ac:	4614      	mov	r4, r2
 80087ae:	4606      	mov	r6, r0
 80087b0:	b118      	cbz	r0, 80087ba <_putc_r+0x12>
 80087b2:	6a03      	ldr	r3, [r0, #32]
 80087b4:	b90b      	cbnz	r3, 80087ba <_putc_r+0x12>
 80087b6:	f7ff f921 	bl	80079fc <__sinit>
 80087ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087bc:	07d8      	lsls	r0, r3, #31
 80087be:	d405      	bmi.n	80087cc <_putc_r+0x24>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	0599      	lsls	r1, r3, #22
 80087c4:	d402      	bmi.n	80087cc <_putc_r+0x24>
 80087c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087c8:	f7ff fb17 	bl	8007dfa <__retarget_lock_acquire_recursive>
 80087cc:	68a3      	ldr	r3, [r4, #8]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	60a3      	str	r3, [r4, #8]
 80087d4:	da05      	bge.n	80087e2 <_putc_r+0x3a>
 80087d6:	69a2      	ldr	r2, [r4, #24]
 80087d8:	4293      	cmp	r3, r2
 80087da:	db12      	blt.n	8008802 <_putc_r+0x5a>
 80087dc:	b2eb      	uxtb	r3, r5
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	d00f      	beq.n	8008802 <_putc_r+0x5a>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	701d      	strb	r5, [r3, #0]
 80087ea:	b2ed      	uxtb	r5, r5
 80087ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ee:	07da      	lsls	r2, r3, #31
 80087f0:	d405      	bmi.n	80087fe <_putc_r+0x56>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	059b      	lsls	r3, r3, #22
 80087f6:	d402      	bmi.n	80087fe <_putc_r+0x56>
 80087f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087fa:	f7ff faff 	bl	8007dfc <__retarget_lock_release_recursive>
 80087fe:	4628      	mov	r0, r5
 8008800:	bd70      	pop	{r4, r5, r6, pc}
 8008802:	4629      	mov	r1, r5
 8008804:	4622      	mov	r2, r4
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff f9e9 	bl	8007bde <__swbuf_r>
 800880c:	4605      	mov	r5, r0
 800880e:	e7ed      	b.n	80087ec <_putc_r+0x44>

08008810 <_fstat_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d07      	ldr	r5, [pc, #28]	@ (8008830 <_fstat_r+0x20>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	4611      	mov	r1, r2
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f7f9 f960 	bl	8001ae2 <_fstat>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d102      	bne.n	800882c <_fstat_r+0x1c>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b103      	cbz	r3, 800882c <_fstat_r+0x1c>
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	bd38      	pop	{r3, r4, r5, pc}
 800882e:	bf00      	nop
 8008830:	20001718 	.word	0x20001718

08008834 <_isatty_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d06      	ldr	r5, [pc, #24]	@ (8008850 <_isatty_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f9 f95f 	bl	8001b02 <_isatty>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_isatty_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_isatty_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20001718 	.word	0x20001718

08008854 <_sbrk_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	@ (8008870 <_sbrk_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f9 f968 	bl	8001b34 <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_sbrk_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_sbrk_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20001718 	.word	0x20001718

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
