
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000870c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  0800889c  0800889c  0000989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009794  08009794  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009794  08009794  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800979c  0800979c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097a0  080097a0  0000a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080097a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b4  20000074  08009818  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001728  08009818  0000b728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c69b  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b3  00000000  00000000  0002773f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146e  00000000  00000000  0002d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ff  00000000  00000000  0002e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb9b  00000000  00000000  000530a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f10  00000000  00000000  00071c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007618  00000000  00000000  00149b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001511ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008884 	.word	0x08008884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008884 	.word	0x08008884

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090
 80005ec:	200000e4 	.word	0x200000e4

080005f0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005fe:	2201      	movs	r2, #1
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <__io_putchar+0x20>)
 8000602:	f005 f87b 	bl	80056fc <HAL_UART_Transmit>

  return ch;
 8000606:	687b      	ldr	r3, [r7, #4]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200003cc 	.word	0x200003cc

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b09a      	sub	sp, #104	@ 0x68
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f001 fb02 	bl	8001c22 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f889 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f9f9 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000626:	f000 f9d9 	bl	80009dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f9a7 	bl	800097c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800062e:	f000 f8e3 	bl	80007f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000632:	f000 f921 	bl	8000878 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello \n");
 8000636:	4833      	ldr	r0, [pc, #204]	@ (8000704 <main+0xf0>)
 8000638:	f007 fa8e 	bl	8007b58 <puts>

  SSD1306_Init (); // initialise the display
 800063c:	f000 fd16 	bl	800106c <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8000640:	210a      	movs	r1, #10
 8000642:	200a      	movs	r0, #10
 8000644:	f000 fe7c 	bl	8001340 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000648:	2201      	movs	r2, #1
 800064a:	492f      	ldr	r1, [pc, #188]	@ (8000708 <main+0xf4>)
 800064c:	482f      	ldr	r0, [pc, #188]	@ (800070c <main+0xf8>)
 800064e:	f000 ff0b 	bl	8001468 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000652:	211e      	movs	r1, #30
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fe73 	bl	8001340 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	492a      	ldr	r1, [pc, #168]	@ (8000708 <main+0xf4>)
 800065e:	482c      	ldr	r0, [pc, #176]	@ (8000710 <main+0xfc>)
 8000660:	f000 ff02 	bl	8001468 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000664:	f000 fdc6 	bl	80011f4 <SSD1306_UpdateScreen>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of i2cQ */
  osMessageQDef(i2cQ, 16, uint16_t);
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <main+0x100>)
 800066a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800066e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQHandle = osMessageCreate(osMessageQ(i2cQ), NULL);
 8000674:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fd8e 	bl	800619c <osMessageCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <main+0x104>)
 8000684:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <main+0x108>)
 8000688:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fd1b 	bl	80060dc <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000720 <main+0x10c>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad */
  osThreadDef(keypad, keypadTask, osPriorityIdle, 0, 128);
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0x110>)
 80006ae:	f107 0420 	add.w	r4, r7, #32
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadHandle = osThreadCreate(osThread(keypad), NULL);
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fd08 	bl	80060dc <osThreadCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <main+0x114>)
 80006d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2c */
  osThreadDef(i2c, i2cTask03, osPriorityIdle, 0, 128);
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <main+0x118>)
 80006d4:	1d3c      	adds	r4, r7, #4
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cHandle = osThreadCreate(osThread(i2c), NULL);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fcf7 	bl	80060dc <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <main+0x11c>)
 80006f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f005 fceb 	bl	80060ce <osKernelStart>
 80006f8:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3768      	adds	r7, #104	@ 0x68
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	bf00      	nop
 8000704:	0800889c 	.word	0x0800889c
 8000708:	20000000 	.word	0x20000000
 800070c:	080088a4 	.word	0x080088a4
 8000710:	080088ac 	.word	0x080088ac
 8000714:	080088b8 	.word	0x080088b8
 8000718:	20000460 	.word	0x20000460
 800071c:	080088d4 	.word	0x080088d4
 8000720:	20000454 	.word	0x20000454
 8000724:	080088f8 	.word	0x080088f8
 8000728:	20000458 	.word	0x20000458
 800072c:	08008918 	.word	0x08008918
 8000730:	2000045c 	.word	0x2000045c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	@ 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	@ 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 fae8 	bl	8007d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800075a:	f002 fda3 	bl	80032a4 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 fc42 	bl	8000fec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f002 fd7e 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <SystemClock_Config+0xc0>)
 800076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000772:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <SystemClock_Config+0xc0>)
 8000774:	f023 0318 	bic.w	r3, r3, #24
 8000778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800077c:	2314      	movs	r3, #20
 800077e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800078c:	2360      	movs	r3, #96	@ 0x60
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000794:	2301      	movs	r3, #1
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800079c:	2318      	movs	r3, #24
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fdcd 	bl	8003350 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007bc:	f000 fc16 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f9cd 	bl	8003b78 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007e4:	f000 fc02 	bl	8000fec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007e8:	f003 fe12 	bl	8004410 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ec:	bf00      	nop
 80007ee:	3758      	adds	r7, #88	@ 0x58
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C1_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C1_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C1_Init+0x74>)
 8000834:	f001 fe2a 	bl	800248c <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fbd5 	bl	8000fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C1_Init+0x74>)
 8000846:	f002 fc77 	bl	8003138 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fbcc 	bl	8000fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C1_Init+0x74>)
 8000858:	f002 fcb9 	bl	80031ce <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fbc3 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200002e4 	.word	0x200002e4
 8000870:	40005400 	.word	0x40005400
 8000874:	0090194b 	.word	0x0090194b

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	@ 0x38
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80008b2:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008b4:	f240 3283 	movw	r2, #899	@ 0x383
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4828      	ldr	r0, [pc, #160]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008d6:	f003 fe9d 	bl	8004614 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008e0:	f000 fb84 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4821      	ldr	r0, [pc, #132]	@ (8000978 <MX_TIM2_Init+0x100>)
 80008f2:	f004 f9b7 	bl	8004c64 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008fc:	f000 fb76 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	481d      	ldr	r0, [pc, #116]	@ (8000978 <MX_TIM2_Init+0x100>)
 8000902:	f003 ff33 	bl	800476c <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800090c:	f000 fb6e 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4816      	ldr	r0, [pc, #88]	@ (8000978 <MX_TIM2_Init+0x100>)
 8000920:	f004 fe1a 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800092a:	f000 fb5f 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	@ 0x60
 8000930:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_TIM2_Init+0x100>)
 8000946:	f004 f879 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000950:	f000 fb4c 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	2204      	movs	r2, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	@ (8000978 <MX_TIM2_Init+0x100>)
 800095c:	f004 f86e 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000966:	f000 fb41 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800096a:	4803      	ldr	r0, [pc, #12]	@ (8000978 <MX_TIM2_Init+0x100>)
 800096c:	f000 ff18 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	@ 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000380 	.word	0x20000380

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <MX_USART2_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009c0:	f004 fe4e 	bl	8005660 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 fb0f 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200003cc 	.word	0x200003cc
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_DMA_Init+0x38>)
 80009e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <MX_DMA_Init+0x38>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_DMA_Init+0x38>)
 80009f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2011      	movs	r0, #17
 8000a00:	f001 fa00 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a04:	2011      	movs	r0, #17
 8000a06:	f001 fa19 	bl	8001e3c <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b40      	ldr	r3, [pc, #256]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a3f      	ldr	r2, [pc, #252]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a39      	ldr	r2, [pc, #228]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a33      	ldr	r2, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f001 fcd4 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	210a      	movs	r1, #10
 8000a88:	482a      	ldr	r0, [pc, #168]	@ (8000b34 <MX_GPIO_Init+0x11c>)
 8000a8a:	f001 fccf 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 8000a8e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f001 fb3d 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_GPIO_Init+0x11c>)
 8000ac4:	f001 fb30 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <MX_GPIO_Init+0x11c>)
 8000ae0:	f001 fb22 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000ae4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afc:	f001 fb14 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000b00:	2330      	movs	r3, #48	@ 0x30
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <MX_GPIO_Init+0x11c>)
 8000b14:	f001 fb08 	bl	8002128 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2006      	movs	r0, #6
 8000b1e:	f001 f971 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b22:	2006      	movs	r0, #6
 8000b24:	f001 f98a 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000400 	.word	0x48000400

08000b38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f005 fb17 	bl	8006174 <osDelay>
 8000b46:	e7fb      	b.n	8000b40 <StartDefaultTask+0x8>

08000b48 <read_keypad>:
* @brief Function implementing the keypad thread.
* @param argument: Not used
* @retval None
*/
char read_keypad(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    // --- Scan Row 1 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  // Set Row 1 low
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f001 fc69 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);      // Set Row 2 high
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f001 fc62 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);      // Set Row 3 high
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	48c3      	ldr	r0, [pc, #780]	@ (8000e7c <read_keypad+0x334>)
 8000b6e:	f001 fc5d 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);      // Set Row 4 high
 8000b72:	2201      	movs	r2, #1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7a:	f001 fc57 	bl	800242c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f001 fc39 	bl	80023fc <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10b      	bne.n	8000ba8 <read_keypad+0x60>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000b90:	bf00      	nop
 8000b92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f001 fc2f 	bl	80023fc <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f6      	beq.n	8000b92 <read_keypad+0x4a>
        return '1';
 8000ba4:	2331      	movs	r3, #49	@ 0x31
 8000ba6:	e166      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f001 fc24 	bl	80023fc <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10b      	bne.n	8000bd2 <read_keypad+0x8a>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000bba:	bf00      	nop
 8000bbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f001 fc1a 	bl	80023fc <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f6      	beq.n	8000bbc <read_keypad+0x74>
        return '2';
 8000bce:	2332      	movs	r3, #50	@ 0x32
 8000bd0:	e151      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	48a9      	ldr	r0, [pc, #676]	@ (8000e7c <read_keypad+0x334>)
 8000bd6:	f001 fc11 	bl	80023fc <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <read_keypad+0xac>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000be0:	bf00      	nop
 8000be2:	2120      	movs	r1, #32
 8000be4:	48a5      	ldr	r0, [pc, #660]	@ (8000e7c <read_keypad+0x334>)
 8000be6:	f001 fc09 	bl	80023fc <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f8      	beq.n	8000be2 <read_keypad+0x9a>
        return '3';
 8000bf0:	2333      	movs	r3, #51	@ 0x33
 8000bf2:	e140      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	48a1      	ldr	r0, [pc, #644]	@ (8000e7c <read_keypad+0x334>)
 8000bf8:	f001 fc00 	bl	80023fc <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <read_keypad+0xce>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000c02:	bf00      	nop
 8000c04:	2110      	movs	r1, #16
 8000c06:	489d      	ldr	r0, [pc, #628]	@ (8000e7c <read_keypad+0x334>)
 8000c08:	f001 fbf8 	bl	80023fc <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <read_keypad+0xbc>
        return 'A';
 8000c12:	2341      	movs	r3, #65	@ 0x41
 8000c14:	e12f      	b.n	8000e76 <read_keypad+0x32e>
    }

    // --- Scan Row 2 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c20:	f001 fc04 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Set Row 2 low
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f001 fbfd 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2102      	movs	r1, #2
 8000c36:	4891      	ldr	r0, [pc, #580]	@ (8000e7c <read_keypad+0x334>)
 8000c38:	f001 fbf8 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c44:	f001 fbf2 	bl	800242c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fbd4 	bl	80023fc <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10b      	bne.n	8000c72 <read_keypad+0x12a>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000c5a:	bf00      	nop
 8000c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f001 fbca 	bl	80023fc <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f6      	beq.n	8000c5c <read_keypad+0x114>
        return '4';
 8000c6e:	2334      	movs	r3, #52	@ 0x34
 8000c70:	e101      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7a:	f001 fbbf 	bl	80023fc <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10b      	bne.n	8000c9c <read_keypad+0x154>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000c84:	bf00      	nop
 8000c86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8e:	f001 fbb5 	bl	80023fc <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f6      	beq.n	8000c86 <read_keypad+0x13e>
        return '5';
 8000c98:	2335      	movs	r3, #53	@ 0x35
 8000c9a:	e0ec      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4877      	ldr	r0, [pc, #476]	@ (8000e7c <read_keypad+0x334>)
 8000ca0:	f001 fbac 	bl	80023fc <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d109      	bne.n	8000cbe <read_keypad+0x176>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000caa:	bf00      	nop
 8000cac:	2120      	movs	r1, #32
 8000cae:	4873      	ldr	r0, [pc, #460]	@ (8000e7c <read_keypad+0x334>)
 8000cb0:	f001 fba4 	bl	80023fc <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f8      	beq.n	8000cac <read_keypad+0x164>
        return '6';
 8000cba:	2336      	movs	r3, #54	@ 0x36
 8000cbc:	e0db      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	486e      	ldr	r0, [pc, #440]	@ (8000e7c <read_keypad+0x334>)
 8000cc2:	f001 fb9b 	bl	80023fc <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <read_keypad+0x198>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000ccc:	bf00      	nop
 8000cce:	2110      	movs	r1, #16
 8000cd0:	486a      	ldr	r0, [pc, #424]	@ (8000e7c <read_keypad+0x334>)
 8000cd2:	f001 fb93 	bl	80023fc <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f8      	beq.n	8000cce <read_keypad+0x186>
        return 'B';
 8000cdc:	2342      	movs	r3, #66	@ 0x42
 8000cde:	e0ca      	b.n	8000e76 <read_keypad+0x32e>
    }

    // --- Scan Row 3 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f001 fb9f 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f001 fb98 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Set Row 3 low
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2102      	movs	r1, #2
 8000d00:	485e      	ldr	r0, [pc, #376]	@ (8000e7c <read_keypad+0x334>)
 8000d02:	f001 fb93 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f001 fb8d 	bl	800242c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 fb6f 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10b      	bne.n	8000d3c <read_keypad+0x1f4>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000d24:	bf00      	nop
 8000d26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2e:	f001 fb65 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f6      	beq.n	8000d26 <read_keypad+0x1de>
        return '7';
 8000d38:	2337      	movs	r3, #55	@ 0x37
 8000d3a:	e09c      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f001 fb5a 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10b      	bne.n	8000d66 <read_keypad+0x21e>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000d4e:	bf00      	nop
 8000d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	f001 fb50 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f6      	beq.n	8000d50 <read_keypad+0x208>
        return '8';
 8000d62:	2338      	movs	r3, #56	@ 0x38
 8000d64:	e087      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000d66:	2120      	movs	r1, #32
 8000d68:	4844      	ldr	r0, [pc, #272]	@ (8000e7c <read_keypad+0x334>)
 8000d6a:	f001 fb47 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <read_keypad+0x240>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000d74:	bf00      	nop
 8000d76:	2120      	movs	r1, #32
 8000d78:	4840      	ldr	r0, [pc, #256]	@ (8000e7c <read_keypad+0x334>)
 8000d7a:	f001 fb3f 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f8      	beq.n	8000d76 <read_keypad+0x22e>
        return '9';
 8000d84:	2339      	movs	r3, #57	@ 0x39
 8000d86:	e076      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000d88:	2110      	movs	r1, #16
 8000d8a:	483c      	ldr	r0, [pc, #240]	@ (8000e7c <read_keypad+0x334>)
 8000d8c:	f001 fb36 	bl	80023fc <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <read_keypad+0x262>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000d96:	bf00      	nop
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4838      	ldr	r0, [pc, #224]	@ (8000e7c <read_keypad+0x334>)
 8000d9c:	f001 fb2e 	bl	80023fc <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f8      	beq.n	8000d98 <read_keypad+0x250>
        return 'C';
 8000da6:	2343      	movs	r3, #67	@ 0x43
 8000da8:	e065      	b.n	8000e76 <read_keypad+0x32e>
    }

    // --- Scan Row 4 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f001 fb3a 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f001 fb33 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2102      	movs	r1, #2
 8000dca:	482c      	ldr	r0, [pc, #176]	@ (8000e7c <read_keypad+0x334>)
 8000dcc:	f001 fb2e 	bl	800242c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Set Row 4 low
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2180      	movs	r1, #128	@ 0x80
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f001 fb28 	bl	800242c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f001 fb0a 	bl	80023fc <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10b      	bne.n	8000e06 <read_keypad+0x2be>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000dee:	bf00      	nop
 8000df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f001 fb00 	bl	80023fc <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f6      	beq.n	8000df0 <read_keypad+0x2a8>
        return '*';
 8000e02:	232a      	movs	r3, #42	@ 0x2a
 8000e04:	e037      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000e06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f001 faf5 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10b      	bne.n	8000e30 <read_keypad+0x2e8>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000e18:	bf00      	nop
 8000e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f001 faeb 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f6      	beq.n	8000e1a <read_keypad+0x2d2>
        return '0';
 8000e2c:	2330      	movs	r3, #48	@ 0x30
 8000e2e:	e022      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000e30:	2120      	movs	r1, #32
 8000e32:	4812      	ldr	r0, [pc, #72]	@ (8000e7c <read_keypad+0x334>)
 8000e34:	f001 fae2 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <read_keypad+0x30a>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000e3e:	bf00      	nop
 8000e40:	2120      	movs	r1, #32
 8000e42:	480e      	ldr	r0, [pc, #56]	@ (8000e7c <read_keypad+0x334>)
 8000e44:	f001 fada 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f8      	beq.n	8000e40 <read_keypad+0x2f8>
        return '#';
 8000e4e:	2323      	movs	r3, #35	@ 0x23
 8000e50:	e011      	b.n	8000e76 <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000e52:	2110      	movs	r1, #16
 8000e54:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <read_keypad+0x334>)
 8000e56:	f001 fad1 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <read_keypad+0x32c>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000e60:	bf00      	nop
 8000e62:	2110      	movs	r1, #16
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <read_keypad+0x334>)
 8000e66:	f001 fac9 	bl	80023fc <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f8      	beq.n	8000e62 <read_keypad+0x31a>
        return 'D';
 8000e70:	2344      	movs	r3, #68	@ 0x44
 8000e72:	e000      	b.n	8000e76 <read_keypad+0x32e>
    }

    // If no key is pressed, return null character.
    return '\0';
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	48000400 	.word	0x48000400

08000e80 <keypadTask>:

/* USER CODE END Header_keypadTask */
void keypadTask(void const * argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	  // Index for current position in the PIN buffer.
	  static uint8_t pin_index = 0;

	  for(;;)
	  {
	    key = read_keypad();  // Scan the keypad
 8000e88:	f7ff fe5e 	bl	8000b48 <read_keypad>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73bb      	strb	r3, [r7, #14]
	    if(key != '\0')
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d06e      	beq.n	8000f74 <keypadTask+0xf4>
	    {
	      // If a numeric key (0-9) is pressed, append it if there is space.
	      if(key >= '0' && key <= '9')
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e9a:	d917      	bls.n	8000ecc <keypadTask+0x4c>
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	2b39      	cmp	r3, #57	@ 0x39
 8000ea0:	d814      	bhi.n	8000ecc <keypadTask+0x4c>
	      {
	        if(pin_index < 4)
 8000ea2:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <keypadTask+0xfc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d841      	bhi.n	8000f2e <keypadTask+0xae>
	        {
	          pin[pin_index++] = key;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <keypadTask+0xfc>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	b2d1      	uxtb	r1, r2
 8000eb2:	4a32      	ldr	r2, [pc, #200]	@ (8000f7c <keypadTask+0xfc>)
 8000eb4:	7011      	strb	r1, [r2, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4a31      	ldr	r2, [pc, #196]	@ (8000f80 <keypadTask+0x100>)
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	5453      	strb	r3, [r2, r1]
	          pin[pin_index] = '\0';
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <keypadTask+0xfc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <keypadTask+0x100>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	5499      	strb	r1, [r3, r2]
	        if(pin_index < 4)
 8000eca:	e030      	b.n	8000f2e <keypadTask+0xae>
	        }
	      }
	      // If '*' is pressed, clear the current PIN entry.
	      else if(key == '*')
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ed0:	d106      	bne.n	8000ee0 <keypadTask+0x60>
	      {
	        pin_index = 0;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <keypadTask+0xfc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000ed8:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <keypadTask+0x100>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e026      	b.n	8000f2e <keypadTask+0xae>
	      }
	      // If '#' is pressed, assume it's a submit.
	      // (For example, check if the PIN is correct, then clear the buffer.)
	      else if(key == '#')
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	2b23      	cmp	r3, #35	@ 0x23
 8000ee4:	d123      	bne.n	8000f2e <keypadTask+0xae>
	      {
	        // Example PIN check (replace "1234" with your desired PIN)
	        SSD1306_Clear();
 8000ee6:	f000 fae4 	bl	80014b2 <SSD1306_Clear>
	        SSD1306_GotoXY(0, 0);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 fa27 	bl	8001340 <SSD1306_GotoXY>
	        if(strcmp(pin, "1234") == 0)
 8000ef2:	4924      	ldr	r1, [pc, #144]	@ (8000f84 <keypadTask+0x104>)
 8000ef4:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <keypadTask+0x100>)
 8000ef6:	f7ff f96b 	bl	80001d0 <strcmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <keypadTask+0x8c>
	        {
	          SSD1306_Puts("PIN OK", &Font_11x18, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	4921      	ldr	r1, [pc, #132]	@ (8000f88 <keypadTask+0x108>)
 8000f04:	4821      	ldr	r0, [pc, #132]	@ (8000f8c <keypadTask+0x10c>)
 8000f06:	f000 faaf 	bl	8001468 <SSD1306_Puts>
 8000f0a:	e004      	b.n	8000f16 <keypadTask+0x96>
	        }
	        else
	        {
	          SSD1306_Puts("PIN ERR", &Font_11x18, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	491e      	ldr	r1, [pc, #120]	@ (8000f88 <keypadTask+0x108>)
 8000f10:	481f      	ldr	r0, [pc, #124]	@ (8000f90 <keypadTask+0x110>)
 8000f12:	f000 faa9 	bl	8001468 <SSD1306_Puts>
	        }
	        SSD1306_UpdateScreen();
 8000f16:	f000 f96d 	bl	80011f4 <SSD1306_UpdateScreen>
	        osDelay(1000);  // Show the result for a second
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f005 f929 	bl	8006174 <osDelay>

	        // Clear the PIN buffer after submission.
	        pin_index = 0;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <keypadTask+0xfc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <keypadTask+0x100>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	      }

	      // After any key action update the display with the masked PIN.
	      SSD1306_Clear();
 8000f2e:	f000 fac0 	bl	80014b2 <SSD1306_Clear>
	      SSD1306_GotoXY(0, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 fa03 	bl	8001340 <SSD1306_GotoXY>
	      SSD1306_Puts("PIN: ", &Font_11x18, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4912      	ldr	r1, [pc, #72]	@ (8000f88 <keypadTask+0x108>)
 8000f3e:	4815      	ldr	r0, [pc, #84]	@ (8000f94 <keypadTask+0x114>)
 8000f40:	f000 fa92 	bl	8001468 <SSD1306_Puts>
	      // Print an asterisk for each digit entered.
	      for(uint8_t i = 0; i < pin_index; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e007      	b.n	8000f5a <keypadTask+0xda>
	      {
	        SSD1306_Puts("x", &Font_11x18, 1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	490e      	ldr	r1, [pc, #56]	@ (8000f88 <keypadTask+0x108>)
 8000f4e:	4812      	ldr	r0, [pc, #72]	@ (8000f98 <keypadTask+0x118>)
 8000f50:	f000 fa8a 	bl	8001468 <SSD1306_Puts>
	      for(uint8_t i = 0; i < pin_index; i++)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3301      	adds	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <keypadTask+0xfc>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d3f2      	bcc.n	8000f4a <keypadTask+0xca>
	      }
	      SSD1306_UpdateScreen();
 8000f64:	f000 f946 	bl	80011f4 <SSD1306_UpdateScreen>

	      // (Optional) Debug print to UART.
	      printf("Key pressed: %c, current PIN: %s\r\n", key, pin);
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <keypadTask+0x100>)
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <keypadTask+0x11c>)
 8000f70:	f006 fd82 	bl	8007a78 <iprintf>
	    }
	    osDelay(50); // Delay to help with debouncing and reduce CPU load.
 8000f74:	2032      	movs	r0, #50	@ 0x32
 8000f76:	f005 f8fd 	bl	8006174 <osDelay>
	    key = read_keypad();  // Scan the keypad
 8000f7a:	e785      	b.n	8000e88 <keypadTask+0x8>
 8000f7c:	20000468 	.word	0x20000468
 8000f80:	2000046c 	.word	0x2000046c
 8000f84:	08008934 	.word	0x08008934
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	0800893c 	.word	0x0800893c
 8000f90:	08008944 	.word	0x08008944
 8000f94:	0800894c 	.word	0x0800894c
 8000f98:	08008954 	.word	0x08008954
 8000f9c:	08008958 	.word	0x08008958

08000fa0 <i2cTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask03 */
void i2cTask03(void const * argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	      /* USER CODE END WHILE */

	      /* USER CODE BEGIN 3 */
	      if (esp32_data_ready)
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <i2cTask03+0x24>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <i2cTask03+0x1a>
	  	      {
	  	          esp32_data_ready = 0;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <i2cTask03+0x24>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	  	          // do the read
	  	          SlaveDataReady_Callback();
 8000fb6:	f000 f81f 	bl	8000ff8 <SlaveDataReady_Callback>
	  	      }
	    /* USER CODE END 3 */
    osDelay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f005 f8da 	bl	8006174 <osDelay>
	      if (esp32_data_ready)
 8000fc0:	e7f2      	b.n	8000fa8 <i2cTask03+0x8>
 8000fc2:	bf00      	nop
 8000fc4:	20000464 	.word	0x20000464

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000fda:	f000 fe3b 	bl	8001c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012c00 	.word	0x40012c00

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 4, 100) == HAL_OK)
 8001006:	1d3a      	adds	r2, r7, #4
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2304      	movs	r3, #4
 800100e:	21c0      	movs	r1, #192	@ 0xc0
 8001010:	4812      	ldr	r0, [pc, #72]	@ (800105c <SlaveDataReady_Callback+0x64>)
 8001012:	f001 fbef 	bl	80027f4 <HAL_I2C_Master_Receive>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d117      	bne.n	800104c <SlaveDataReady_Callback+0x54>
    {
        printf("Received from ESP32 1:");
 800101c:	4810      	ldr	r0, [pc, #64]	@ (8001060 <SlaveDataReady_Callback+0x68>)
 800101e:	f006 fd2b 	bl	8007a78 <iprintf>
        for(int i=0; i<8; i++){
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00a      	b.n	800103e <SlaveDataReady_Callback+0x46>
        	printf("0x%02X ", rxBuffer[i]);
 8001028:	1d3a      	adds	r2, r7, #4
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <SlaveDataReady_Callback+0x6c>)
 8001034:	f006 fd20 	bl	8007a78 <iprintf>
        for(int i=0; i<8; i++){
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b07      	cmp	r3, #7
 8001042:	ddf1      	ble.n	8001028 <SlaveDataReady_Callback+0x30>
        }
        printf("\n");
 8001044:	200a      	movs	r0, #10
 8001046:	f006 fd29 	bl	8007a9c <putchar>
    }
    else
    {
        printf("I2C read error ESP 1\n");
    }
}
 800104a:	e002      	b.n	8001052 <SlaveDataReady_Callback+0x5a>
        printf("I2C read error ESP 1\n");
 800104c:	4806      	ldr	r0, [pc, #24]	@ (8001068 <SlaveDataReady_Callback+0x70>)
 800104e:	f006 fd83 	bl	8007b58 <puts>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002e4 	.word	0x200002e4
 8001060:	0800897c 	.word	0x0800897c
 8001064:	08008994 	.word	0x08008994
 8001068:	0800899c 	.word	0x0800899c

0800106c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001072:	f000 fa27 	bl	80014c4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001076:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800107a:	2201      	movs	r2, #1
 800107c:	2178      	movs	r1, #120	@ 0x78
 800107e:	485b      	ldr	r0, [pc, #364]	@ (80011ec <SSD1306_Init+0x180>)
 8001080:	f001 fcae 	bl	80029e0 <HAL_I2C_IsDeviceReady>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800108a:	2300      	movs	r3, #0
 800108c:	e0a9      	b.n	80011e2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800108e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001092:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001094:	e002      	b.n	800109c <SSD1306_Init+0x30>
		p--;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3b01      	subs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010a2:	22ae      	movs	r2, #174	@ 0xae
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	@ 0x78
 80010a8:	f000 fa88 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010ac:	2220      	movs	r2, #32
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	@ 0x78
 80010b2:	f000 fa83 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010b6:	2210      	movs	r2, #16
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	@ 0x78
 80010bc:	f000 fa7e 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010c0:	22b0      	movs	r2, #176	@ 0xb0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	@ 0x78
 80010c6:	f000 fa79 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ca:	22c8      	movs	r2, #200	@ 0xc8
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	@ 0x78
 80010d0:	f000 fa74 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	@ 0x78
 80010da:	f000 fa6f 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010de:	2210      	movs	r2, #16
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	@ 0x78
 80010e4:	f000 fa6a 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010e8:	2240      	movs	r2, #64	@ 0x40
 80010ea:	2100      	movs	r1, #0
 80010ec:	2078      	movs	r0, #120	@ 0x78
 80010ee:	f000 fa65 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010f2:	2281      	movs	r2, #129	@ 0x81
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	@ 0x78
 80010f8:	f000 fa60 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010fc:	22ff      	movs	r2, #255	@ 0xff
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	@ 0x78
 8001102:	f000 fa5b 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001106:	22a1      	movs	r2, #161	@ 0xa1
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	@ 0x78
 800110c:	f000 fa56 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001110:	22a6      	movs	r2, #166	@ 0xa6
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	@ 0x78
 8001116:	f000 fa51 	bl	80015bc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800111a:	22a8      	movs	r2, #168	@ 0xa8
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	@ 0x78
 8001120:	f000 fa4c 	bl	80015bc <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001124:	223f      	movs	r2, #63	@ 0x3f
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	f000 fa47 	bl	80015bc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800112e:	22a4      	movs	r2, #164	@ 0xa4
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 fa42 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001138:	22d3      	movs	r2, #211	@ 0xd3
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	@ 0x78
 800113e:	f000 fa3d 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	@ 0x78
 8001148:	f000 fa38 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800114c:	22d5      	movs	r2, #213	@ 0xd5
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	@ 0x78
 8001152:	f000 fa33 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001156:	22f0      	movs	r2, #240	@ 0xf0
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	@ 0x78
 800115c:	f000 fa2e 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001160:	22d9      	movs	r2, #217	@ 0xd9
 8001162:	2100      	movs	r1, #0
 8001164:	2078      	movs	r0, #120	@ 0x78
 8001166:	f000 fa29 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800116a:	2222      	movs	r2, #34	@ 0x22
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	@ 0x78
 8001170:	f000 fa24 	bl	80015bc <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001174:	22da      	movs	r2, #218	@ 0xda
 8001176:	2100      	movs	r1, #0
 8001178:	2078      	movs	r0, #120	@ 0x78
 800117a:	f000 fa1f 	bl	80015bc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800117e:	2212      	movs	r2, #18
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	@ 0x78
 8001184:	f000 fa1a 	bl	80015bc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001188:	22db      	movs	r2, #219	@ 0xdb
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	@ 0x78
 800118e:	f000 fa15 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001192:	2220      	movs	r2, #32
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	@ 0x78
 8001198:	f000 fa10 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800119c:	228d      	movs	r2, #141	@ 0x8d
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	@ 0x78
 80011a2:	f000 fa0b 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011a6:	2214      	movs	r2, #20
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	@ 0x78
 80011ac:	f000 fa06 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011b0:	22af      	movs	r2, #175	@ 0xaf
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	@ 0x78
 80011b6:	f000 fa01 	bl	80015bc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011ba:	222e      	movs	r2, #46	@ 0x2e
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	@ 0x78
 80011c0:	f000 f9fc 	bl	80015bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f843 	bl	8001250 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011ca:	f000 f813 	bl	80011f4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <SSD1306_Init+0x184>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SSD1306_Init+0x184>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <SSD1306_Init+0x184>)
 80011dc:	2201      	movs	r2, #1
 80011de:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200002e4 	.word	0x200002e4
 80011f0:	20000874 	.word	0x20000874

080011f4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e01d      	b.n	800123c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3b50      	subs	r3, #80	@ 0x50
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	@ 0x78
 800120c:	f000 f9d6 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 f9d1 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800121a:	2210      	movs	r2, #16
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	@ 0x78
 8001220:	f000 f9cc 	bl	80015bc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4a08      	ldr	r2, [pc, #32]	@ (800124c <SSD1306_UpdateScreen+0x58>)
 800122a:	441a      	add	r2, r3
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	2140      	movs	r1, #64	@ 0x40
 8001230:	2078      	movs	r0, #120	@ 0x78
 8001232:	f000 f95d 	bl	80014f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3301      	adds	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d9de      	bls.n	8001200 <SSD1306_UpdateScreen+0xc>
	}
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000474 	.word	0x20000474

08001250 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <SSD1306_Fill+0x14>
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <SSD1306_Fill+0x16>
 8001264:	23ff      	movs	r3, #255	@ 0xff
 8001266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126a:	4619      	mov	r1, r3
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <SSD1306_Fill+0x2c>)
 800126e:	f006 fd53 	bl	8007d18 <memset>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000474 	.word	0x20000474

08001280 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	460b      	mov	r3, r1
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	70fb      	strb	r3, [r7, #3]
	if (
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2b7f      	cmp	r3, #127	@ 0x7f
 8001296:	d848      	bhi.n	800132a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	2b3f      	cmp	r3, #63	@ 0x3f
 800129c:	d845      	bhi.n	800132a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <SSD1306_DrawPixel+0xb8>)
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d11a      	bne.n	80012f0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	01db      	lsls	r3, r3, #7
 80012c6:	4413      	add	r3, r2
 80012c8:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <SSD1306_DrawPixel+0xbc>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b259      	sxtb	r1, r3
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	4603      	mov	r3, r0
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	4413      	add	r3, r2
 80012e8:	b2c9      	uxtb	r1, r1
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <SSD1306_DrawPixel+0xbc>)
 80012ec:	54d1      	strb	r1, [r2, r3]
 80012ee:	e01d      	b.n	800132c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012f0:	88fa      	ldrh	r2, [r7, #6]
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	b298      	uxth	r0, r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4413      	add	r3, r2
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <SSD1306_DrawPixel+0xbc>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	b25a      	sxtb	r2, r3
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	b25b      	sxtb	r3, r3
 8001316:	4013      	ands	r3, r2
 8001318:	b259      	sxtb	r1, r3
 800131a:	88fa      	ldrh	r2, [r7, #6]
 800131c:	4603      	mov	r3, r0
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4413      	add	r3, r2
 8001322:	b2c9      	uxtb	r1, r1
 8001324:	4a05      	ldr	r2, [pc, #20]	@ (800133c <SSD1306_DrawPixel+0xbc>)
 8001326:	54d1      	strb	r1, [r2, r3]
 8001328:	e000      	b.n	800132c <SSD1306_DrawPixel+0xac>
		return;
 800132a:	bf00      	nop
	}
}
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000874 	.word	0x20000874
 800133c:	20000474 	.word	0x20000474

08001340 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001350:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SSD1306_GotoXY+0x28>)
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <SSD1306_GotoXY+0x28>)
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	8053      	strh	r3, [r2, #2]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20000874 	.word	0x20000874

0800136c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <SSD1306_Putc+0xf8>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
	if (
 8001388:	2b7f      	cmp	r3, #127	@ 0x7f
 800138a:	dc07      	bgt.n	800139c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800138c:	4b35      	ldr	r3, [pc, #212]	@ (8001464 <SSD1306_Putc+0xf8>)
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001398:	2b3f      	cmp	r3, #63	@ 0x3f
 800139a:	dd01      	ble.n	80013a0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800139c:	2300      	movs	r3, #0
 800139e:	e05d      	b.n	800145c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e04b      	b.n	800143e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	3b20      	subs	r3, #32
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	7849      	ldrb	r1, [r1, #1]
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	440b      	add	r3, r1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e030      	b.n	800142c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <SSD1306_Putc+0xf8>)
 80013dc:	881a      	ldrh	r2, [r3, #0]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <SSD1306_Putc+0xf8>)
 80013e8:	885a      	ldrh	r2, [r3, #2]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff ff43 	bl	8001280 <SSD1306_DrawPixel>
 80013fa:	e014      	b.n	8001426 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <SSD1306_Putc+0xf8>)
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b298      	uxth	r0, r3
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <SSD1306_Putc+0xf8>)
 800140a:	885a      	ldrh	r2, [r3, #2]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b299      	uxth	r1, r3
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f7ff ff2d 	bl	8001280 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3301      	adds	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4293      	cmp	r3, r2
 8001436:	d3c8      	bcc.n	80013ca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3ad      	bcc.n	80013a6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SSD1306_Putc+0xf8>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <SSD1306_Putc+0xf8>)
 8001458:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800145a:	79fb      	ldrb	r3, [r7, #7]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000874 	.word	0x20000874

08001468 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001476:	e012      	b.n	800149e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff73 	bl	800136c <SSD1306_Putc>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	e008      	b.n	80014aa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e8      	bne.n	8001478 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	781b      	ldrb	r3, [r3, #0]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff feca 	bl	8001250 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014bc:	f7ff fe9a 	bl	80011f4 <SSD1306_UpdateScreen>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <ssd1306_I2C_Init+0x28>)
 80014cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ce:	e002      	b.n	80014d6 <ssd1306_I2C_Init+0x12>
		p--;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	0003d090 	.word	0x0003d090

080014f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b0c7      	sub	sp, #284	@ 0x11c
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014fe:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001502:	600a      	str	r2, [r1, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800150a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800150e:	4622      	mov	r2, r4
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001516:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800151a:	4602      	mov	r2, r0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001522:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001526:	460a      	mov	r2, r1
 8001528:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800152a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001532:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001536:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001544:	e015      	b.n	8001572 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001546:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800154a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800154e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	441a      	add	r2, r3
 8001556:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800155a:	3301      	adds	r3, #1
 800155c:	7811      	ldrb	r1, [r2, #0]
 800155e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001562:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001566:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001568:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800156c:	3301      	adds	r3, #1
 800156e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001572:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001576:	b29b      	uxth	r3, r3
 8001578:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800157c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8df      	bhi.n	8001546 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b299      	uxth	r1, r3
 8001592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	200a      	movs	r0, #10
 80015a6:	9000      	str	r0, [sp, #0]
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80015aa:	f001 f80b 	bl	80025c4 <HAL_I2C_Master_Transmit>
}
 80015ae:	bf00      	nop
 80015b0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	200002e4 	.word	0x200002e4

080015bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	71bb      	strb	r3, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <ssd1306_I2C_Write+0x38>)
 80015e6:	f000 ffed 	bl	80025c4 <HAL_I2C_Master_Transmit>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002e4 	.word	0x200002e4

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_MspInit+0x4c>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <HAL_MspInit+0x4c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	@ 0x60
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_MspInit+0x4c>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_MspInit+0x4c>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_MspInit+0x4c>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	210f      	movs	r1, #15
 8001632:	f06f 0001 	mvn.w	r0, #1
 8001636:	f000 fbe5 	bl	8001e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09e      	sub	sp, #120	@ 0x78
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2254      	movs	r2, #84	@ 0x54
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fb55 	bl	8007d18 <memset>
  if(hi2c->Instance==I2C1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a37      	ldr	r2, [pc, #220]	@ (8001750 <HAL_I2C_MspInit+0x108>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d166      	bne.n	8001746 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001678:	2340      	movs	r3, #64	@ 0x40
 800167a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fccd 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff fcac 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	4a2e      	ldr	r2, [pc, #184]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ac:	23c0      	movs	r3, #192	@ 0xc0
 80016ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016c4:	4619      	mov	r1, r3
 80016c6:	4824      	ldr	r0, [pc, #144]	@ (8001758 <HAL_I2C_MspInit+0x110>)
 80016c8:	f000 fd2e 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 80016d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_I2C_MspInit+0x10c>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_I2C_MspInit+0x114>)
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_I2C_MspInit+0x118>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <HAL_I2C_MspInit+0x114>)
 80016ec:	2203      	movs	r2, #3
 80016ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_I2C_MspInit+0x114>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_I2C_MspInit+0x114>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_I2C_MspInit+0x114>)
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_I2C_MspInit+0x114>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_I2C_MspInit+0x114>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_I2C_MspInit+0x114>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_I2C_MspInit+0x114>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800171a:	4810      	ldr	r0, [pc, #64]	@ (800175c <HAL_I2C_MspInit+0x114>)
 800171c:	f000 fb9c 	bl	8001e58 <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 8001726:	f7ff fc61 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_I2C_MspInit+0x114>)
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_I2C_MspInit+0x114>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	201f      	movs	r0, #31
 800173c:	f000 fb62 	bl	8001e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001740:	201f      	movs	r0, #31
 8001742:	f000 fb7b 	bl	8001e3c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001746:	bf00      	nop
 8001748:	3778      	adds	r7, #120	@ 0x78
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	20000338 	.word	0x20000338
 8001760:	40020080 	.word	0x40020080

08001764 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d10b      	bne.n	800178e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_TIM_Base_MspInit+0x38>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	4a08      	ldr	r2, [pc, #32]	@ (800179c <HAL_TIM_Base_MspInit+0x38>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_TIM_Base_MspInit+0x38>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d11c      	bne.n	80017fc <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_TIM_MspPostInit+0x64>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_TIM_MspPostInit+0x64>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_TIM_MspPostInit+0x64>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 80017da:	2322      	movs	r3, #34	@ 0x22
 80017dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f8:	f000 fc96 	bl	8002128 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09e      	sub	sp, #120	@ 0x78
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2254      	movs	r2, #84	@ 0x54
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fa75 	bl	8007d18 <memset>
  if(huart->Instance==USART2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <HAL_UART_MspInit+0xcc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d148      	bne.n	80018ca <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001838:	2302      	movs	r3, #2
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fbed 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff fbcc 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001854:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	4a19      	ldr	r2, [pc, #100]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0xd0>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001884:	2304      	movs	r3, #4
 8001886:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001894:	2307      	movs	r3, #7
 8001896:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f000 fc41 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018b8:	2303      	movs	r3, #3
 80018ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c6:	f000 fc2f 	bl	8002128 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018ca:	bf00      	nop
 80018cc:	3778      	adds	r7, #120	@ 0x78
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	@ 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <HAL_InitTick+0xc8>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <HAL_InitTick+0xc8>)
 80018f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_InitTick+0xc8>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001902:	f107 020c 	add.w	r2, r7, #12
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f002 faf7 	bl	8003f00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001912:	f002 fadf 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8001916:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <HAL_InitTick+0xcc>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9b      	lsrs	r3, r3, #18
 8001922:	3b01      	subs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_InitTick+0xd0>)
 8001928:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <HAL_InitTick+0xd4>)
 800192a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_InitTick+0xd0>)
 800192e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001934:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <HAL_InitTick+0xd0>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_InitTick+0xd0>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_InitTick+0xd0>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_InitTick+0xd0>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800194c:	4817      	ldr	r0, [pc, #92]	@ (80019ac <HAL_InitTick+0xd0>)
 800194e:	f002 fe61 	bl	8004614 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001960:	4812      	ldr	r0, [pc, #72]	@ (80019ac <HAL_InitTick+0xd0>)
 8001962:	f002 feaf 	bl	80046c4 <HAL_TIM_Base_Start_IT>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800196c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001970:	2b00      	cmp	r3, #0
 8001972:	d111      	bne.n	8001998 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001974:	2019      	movs	r0, #25
 8001976:	f000 fa61 	bl	8001e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d808      	bhi.n	8001992 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	2019      	movs	r0, #25
 8001986:	f000 fa3d 	bl	8001e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_InitTick+0xd8>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e002      	b.n	8001998 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800199c:	4618      	mov	r0, r3
 800199e:	3730      	adds	r7, #48	@ 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	2000087c 	.word	0x2000087c
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	2000000c 	.word	0x2000000c

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <DMA1_Channel7_IRQHandler+0x10>)
 80019f6:	f000 fae7 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000338 	.word	0x20000338

08001a04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a0a:	f002 ff10 	bl	800482e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000087c 	.word	0x2000087c

08001a18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <I2C1_EV_IRQHandler+0x10>)
 8001a1e:	f001 f8cb 	bl	8002bb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002e4 	.word	0x200002e4

08001a2c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f000 fd13 	bl	800245c <HAL_GPIO_EXTI_IRQHandler>
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x24>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000464 	.word	0x20000464

08001a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
  }

  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd99 	bl	80005f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
  }
  return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
  return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f006 f920 	bl	8007db4 <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000c000 	.word	0x2000c000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	200008c8 	.word	0x200008c8
 8001ba8:	20001728 	.word	0x20001728

08001bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <SystemInit+0x20>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <SystemInit+0x20>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd4:	f7ff ffea 	bl	8001bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bda:	490d      	ldr	r1, [pc, #52]	@ (8001c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <LoopForever+0xe>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c1c <LoopForever+0x16>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f006 f8df 	bl	8007dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c02:	f7fe fd07 	bl	8000614 <main>

08001c06 <LoopForever>:

LoopForever:
    b LoopForever
 8001c06:	e7fe      	b.n	8001c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c14:	080097a4 	.word	0x080097a4
  ldr r2, =_sbss
 8001c18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c1c:	20001728 	.word	0x20001728

08001c20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_IRQHandler>

08001c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f8de 	bl	8001dee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fe52 	bl	80018dc <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e001      	b.n	8001c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c44:	f7ff fcd8 	bl	80015f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000010 	.word	0x20000010
 8001c78:	200008cc 	.word	0x200008cc

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200008cc 	.word	0x200008cc

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	@ (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ff4c 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff61 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb1 	bl	8001d88 <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff80 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff54 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e098      	b.n	8001f9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa8 <HAL_DMA_Init+0x150>)
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d80f      	bhi.n	8001e96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <HAL_DMA_Init+0x154>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb0 <HAL_DMA_Init+0x158>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a48      	ldr	r2, [pc, #288]	@ (8001fb4 <HAL_DMA_Init+0x15c>)
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e94:	e00e      	b.n	8001eb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <HAL_DMA_Init+0x160>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a43      	ldr	r2, [pc, #268]	@ (8001fb0 <HAL_DMA_Init+0x158>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	@ (8001fbc <HAL_DMA_Init+0x164>)
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f0e:	d039      	beq.n	8001f84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_DMA_Init+0x15c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d11a      	bne.n	8001f50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f1a:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <HAL_DMA_Init+0x168>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f003 031c 	and.w	r3, r3, #28
 8001f26:	210f      	movs	r1, #15
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4924      	ldr	r1, [pc, #144]	@ (8001fc0 <HAL_DMA_Init+0x168>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <HAL_DMA_Init+0x168>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	f003 031c 	and.w	r3, r3, #28
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	491d      	ldr	r1, [pc, #116]	@ (8001fc0 <HAL_DMA_Init+0x168>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
 8001f4e:	e019      	b.n	8001f84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	f003 031c 	and.w	r3, r3, #28
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4917      	ldr	r1, [pc, #92]	@ (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f003 031c 	and.w	r3, r3, #28
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	4911      	ldr	r1, [pc, #68]	@ (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40020407 	.word	0x40020407
 8001fac:	bffdfff8 	.word	0xbffdfff8
 8001fb0:	cccccccd 	.word	0xcccccccd
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	bffdfbf8 	.word	0xbffdfbf8
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	400200a8 	.word	0x400200a8
 8001fc4:	400204a8 	.word	0x400204a8

08001fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe4:	f003 031c 	and.w	r3, r3, #28
 8001fe8:	2204      	movs	r2, #4
 8001fea:	409a      	lsls	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d026      	beq.n	8002042 <HAL_DMA_IRQHandler+0x7a>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d021      	beq.n	8002042 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	f003 021c 	and.w	r2, r3, #28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	2104      	movs	r1, #4
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	d071      	beq.n	800211c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002040:	e06c      	b.n	800211c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f003 031c 	and.w	r3, r3, #28
 800204a:	2202      	movs	r2, #2
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02e      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xec>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d029      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 020a 	bic.w	r2, r2, #10
 800207c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f003 021c 	and.w	r2, r3, #28
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	2102      	movs	r1, #2
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d038      	beq.n	800211c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020b2:	e033      	b.n	800211c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f003 031c 	and.w	r3, r3, #28
 80020bc:	2208      	movs	r2, #8
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02a      	beq.n	800211e <HAL_DMA_IRQHandler+0x156>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d025      	beq.n	800211e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020e 	bic.w	r2, r2, #14
 80020e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f003 021c 	and.w	r2, r3, #28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800211c:	bf00      	nop
 800211e:	bf00      	nop
}
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e148      	b.n	80023ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 813a 	beq.w	80023c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d017      	beq.n	8002206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d123      	bne.n	800225a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8094 	beq.w	80023c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229c:	4b52      	ldr	r3, [pc, #328]	@ (80023e8 <HAL_GPIO_Init+0x2c0>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a0:	4a51      	ldr	r2, [pc, #324]	@ (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80022a8:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b4:	4a4d      	ldr	r2, [pc, #308]	@ (80023ec <HAL_GPIO_Init+0x2c4>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022de:	d00d      	beq.n	80022fc <HAL_GPIO_Init+0x1d4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a43      	ldr	r2, [pc, #268]	@ (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <HAL_GPIO_Init+0x1d0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a42      	ldr	r2, [pc, #264]	@ (80023f4 <HAL_GPIO_Init+0x2cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_GPIO_Init+0x1cc>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022f4:	2307      	movs	r3, #7
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230e:	4937      	ldr	r1, [pc, #220]	@ (80023ec <HAL_GPIO_Init+0x2c4>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231c:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002340:	4a2d      	ldr	r2, [pc, #180]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002346:	4b2c      	ldr	r3, [pc, #176]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236a:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002394:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800239a:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023be:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f aeaf 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e001      	b.n	800241e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002448:	e002      	b.n	8002450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fade 	bl	8001a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08d      	b.n	80025ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f8c8 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	e006      	b.n	8002514 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002512:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d108      	bne.n	800252e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	e007      	b.n	800253e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800253c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800254c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69d9      	ldr	r1, [r3, #28]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
 80025d4:	4613      	mov	r3, r2
 80025d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	f040 80fd 	bne.w	80027e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x30>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0f6      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025fc:	f7ff fb3e 	bl	8001c7c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2319      	movs	r3, #25
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fb10 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e1      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2221      	movs	r2, #33	@ 0x21
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2210      	movs	r2, #16
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	893a      	ldrh	r2, [r7, #8]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2bff      	cmp	r3, #255	@ 0xff
 800264e:	d906      	bls.n	800265e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	@ 0xff
 8002654:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e007      	b.n	800266e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	4b4e      	ldr	r3, [pc, #312]	@ (80027ec <HAL_I2C_Master_Transmit+0x228>)
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fd0b 	bl	80030d4 <I2C_TransferConfig>
 80026be:	e066      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <HAL_I2C_Master_Transmit+0x228>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fd00 	bl	80030d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026d4:	e05b      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fb03 	bl	8002ce6 <I2C_WaitOnTXISFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07b      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d034      	beq.n	800278e <HAL_I2C_Master_Transmit+0x1ca>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d130      	bne.n	800278e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2200      	movs	r2, #0
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa7c 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e04d      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2bff      	cmp	r3, #255	@ 0xff
 800274e:	d90e      	bls.n	800276e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	22ff      	movs	r2, #255	@ 0xff
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	b2da      	uxtb	r2, r3
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	2300      	movs	r3, #0
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fcb4 	bl	80030d4 <I2C_TransferConfig>
 800276c:	e00f      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fca3 	bl	80030d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d19e      	bne.n	80026d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6a39      	ldr	r1, [r7, #32]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fae9 	bl	8002d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01a      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2220      	movs	r2, #32
 80027b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_I2C_Master_Transmit+0x22c>)
 80027c0:	400b      	ands	r3, r1
 80027c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	80002000 	.word	0x80002000
 80027f0:	fe00e800 	.word	0xfe00e800

080027f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	817b      	strh	r3, [r7, #10]
 8002804:	4613      	mov	r3, r2
 8002806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 80db 	bne.w	80029cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2C_Master_Receive+0x30>
 8002820:	2302      	movs	r3, #2
 8002822:	e0d4      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800282c:	f7ff fa26 	bl	8001c7c <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f9f8 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0bf      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2222      	movs	r2, #34	@ 0x22
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2210      	movs	r2, #16
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	893a      	ldrh	r2, [r7, #8]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2bff      	cmp	r3, #255	@ 0xff
 800287e:	d90e      	bls.n	800289e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fc1c 	bl	80030d4 <I2C_TransferConfig>
 800289c:	e06d      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	8979      	ldrh	r1, [r7, #10]
 80028b0:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_I2C_Master_Receive+0x1e4>)
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fc0b 	bl	80030d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028be:	e05c      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fa99 	bl	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e07c      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d034      	beq.n	800297a <HAL_I2C_Master_Receive+0x186>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d130      	bne.n	800297a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f986 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e04d      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2bff      	cmp	r3, #255	@ 0xff
 800293a:	d90e      	bls.n	800295a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fbbe 	bl	80030d4 <I2C_TransferConfig>
 8002958:	e00f      	b.n	800297a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fbad 	bl	80030d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d19d      	bne.n	80028c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f9f3 	bl	8002d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01a      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2220      	movs	r2, #32
 800299e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_I2C_Master_Receive+0x1e8>)
 80029ac:	400b      	ands	r3, r1
 80029ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	80002400 	.word	0x80002400
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80d6 	bne.w	8002bae <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0cc      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2C_IsDeviceReady+0x44>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0c5      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_I2C_IsDeviceReady+0x72>
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a50:	e006      	b.n	8002a60 <HAL_I2C_IsDeviceReady+0x80>
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a66:	f7ff f909 	bl	8001c7c <HAL_GetTick>
 8002a6a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a98:	e034      	b.n	8002b04 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7ff f8eb 	bl	8001c7c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <HAL_I2C_IsDeviceReady+0xd8>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e06b      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b04:	7ffb      	ldrb	r3, [r7, #31]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_I2C_IsDeviceReady+0x130>
 8002b0a:	7fbb      	ldrb	r3, [r7, #30]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0c4      	beq.n	8002a9a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d01a      	beq.n	8002b54 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2120      	movs	r1, #32
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f883 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e03b      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e02d      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f868 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e020      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2210      	movs	r2, #16
 8002b74:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f63f af56 	bhi.w	8002a3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
  }
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d103      	bne.n	8002c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d007      	beq.n	8002c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	619a      	str	r2, [r3, #24]
  }
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e03b      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f962 	bl	8002f14 <I2C_IsErrorOccurred>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d02d      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7ff f80b 	bl	8001c7c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d122      	bne.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d113      	bne.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0b4      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf2:	e033      	b.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f90b 	bl	8002f14 <I2C_IsErrorOccurred>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e031      	b.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d025      	beq.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d10:	f7fe ffb4 	bl	8001c7c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d302      	bcc.n	8002d26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11a      	bne.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d013      	beq.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d1c4      	bne.n	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d80:	e02f      	b.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8c4 	bl	8002f14 <I2C_IsErrorOccurred>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02d      	b.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fe ff71 	bl	8001c7c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d013      	beq.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e007      	b.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d1c8      	bne.n	8002d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e0c:	e071      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f87e 	bl	8002f14 <I2C_IsErrorOccurred>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d13b      	bne.n	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d138      	bne.n	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d105      	bne.n	8002e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d121      	bne.n	8002ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2220      	movs	r2, #32
 8002e72:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002e80:	400b      	ands	r3, r1
 8002e82:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
 8002ea0:	e002      	b.n	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ea8:	f7fe fee8 	bl	8001c7c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d119      	bne.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00f      	beq.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d002      	beq.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d083      	beq.n	8002e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d068      	beq.n	8003012 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f48:	e049      	b.n	8002fde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d045      	beq.n	8002fde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7fe fe93 	bl	8001c7c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_IsErrorOccurred+0x54>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13a      	bne.n	8002fde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8a:	d121      	bne.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f92:	d01d      	beq.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d01a      	beq.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fa8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002faa:	f7fe fe67 	bl	8001c7c <HAL_GetTick>
 8002fae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb0:	e00e      	b.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fb2:	f7fe fe63 	bl	8001c7c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b19      	cmp	r3, #25
 8002fbe:	d907      	bls.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002fce:	e006      	b.n	8002fde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d1e9      	bne.n	8002fb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d003      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xe0>
 8002fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0aa      	beq.n	8002f4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2220      	movs	r2, #32
 8003002:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003056:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01c      	beq.n	80030c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff fdaf 	bl	8002bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <I2C_IsErrorOccurred+0x1bc>)
 800309a:	400b      	ands	r3, r1
 800309c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3728      	adds	r7, #40	@ 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	fe00e800 	.word	0xfe00e800

080030d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	4613      	mov	r3, r2
 80030e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ec:	7a7b      	ldrb	r3, [r7, #9]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003102:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	0d5b      	lsrs	r3, r3, #21
 800310e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <I2C_TransferConfig+0x60>)
 8003114:	430b      	orrs	r3, r1
 8003116:	43db      	mvns	r3, r3
 8003118:	ea02 0103 	and.w	r1, r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	03ff63ff 	.word	0x03ff63ff

08003138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d138      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003158:	2302      	movs	r3, #2
 800315a:	e032      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	@ 0x24
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800318a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d139      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e033      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	@ 0x24
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40007000 	.word	0x40007000

08003288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b2:	d130      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c0:	d038      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2232      	movs	r2, #50	@ 0x32
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e8:	e002      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f0:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fc:	d102      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f2      	bne.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003304:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003310:	d110      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e00f      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003322:	d007      	beq.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003324:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800332c:	4a05      	ldr	r2, [pc, #20]	@ (8003344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000
 8003348:	20000008 	.word	0x20000008
 800334c:	431bde83 	.word	0x431bde83

08003350 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f000 bc02 	b.w	8003b68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003364:	4b96      	ldr	r3, [pc, #600]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336e:	4b94      	ldr	r3, [pc, #592]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80e4 	beq.w	800354e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_RCC_OscConfig+0x4c>
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	f040 808b 	bne.w	80034aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b01      	cmp	r3, #1
 8003398:	f040 8087 	bne.w	80034aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339c:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x64>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e3d9      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	4b81      	ldr	r3, [pc, #516]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_RCC_OscConfig+0x7e>
 80033c4:	4b7e      	ldr	r3, [pc, #504]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033cc:	e005      	b.n	80033da <HAL_RCC_OscConfig+0x8a>
 80033ce:	4b7c      	ldr	r3, [pc, #496]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033da:	4293      	cmp	r3, r2
 80033dc:	d223      	bcs.n	8003426 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fdbe 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e3ba      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f2:	4b73      	ldr	r3, [pc, #460]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a72      	ldr	r2, [pc, #456]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b70      	ldr	r3, [pc, #448]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	496d      	ldr	r1, [pc, #436]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003410:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	4968      	ldr	r1, [pc, #416]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e025      	b.n	8003472 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003426:	4b66      	ldr	r3, [pc, #408]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a65      	ldr	r2, [pc, #404]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4960      	ldr	r1, [pc, #384]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003444:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	495b      	ldr	r1, [pc, #364]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fd7e 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e37a      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003472:	f000 fc81 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003476:	4602      	mov	r2, r0
 8003478:	4b51      	ldr	r3, [pc, #324]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	4950      	ldr	r1, [pc, #320]	@ (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003484:	5ccb      	ldrb	r3, [r1, r3]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a4e      	ldr	r2, [pc, #312]	@ (80035c8 <HAL_RCC_OscConfig+0x278>)
 8003490:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003492:	4b4e      	ldr	r3, [pc, #312]	@ (80035cc <HAL_RCC_OscConfig+0x27c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fa20 	bl	80018dc <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d052      	beq.n	800354c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	e35e      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d032      	beq.n	8003518 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034b2:	4b43      	ldr	r3, [pc, #268]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034be:	f7fe fbdd 	bl	8001c7c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c6:	f7fe fbd9 	bl	8001c7c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e347      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d8:	4b39      	ldr	r3, [pc, #228]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a35      	ldr	r2, [pc, #212]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b33      	ldr	r3, [pc, #204]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4930      	ldr	r1, [pc, #192]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003502:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	492b      	ldr	r1, [pc, #172]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
 8003516:	e01a      	b.n	800354e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003518:	4b29      	ldr	r3, [pc, #164]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003524:	f7fe fbaa 	bl	8001c7c <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800352c:	f7fe fba6 	bl	8001c7c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e314      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1dc>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d073      	beq.n	8003642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x21c>
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d10e      	bne.n	8003584 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b14      	ldr	r3, [pc, #80]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d063      	beq.n	8003640 <HAL_RCC_OscConfig+0x2f0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d15f      	bne.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e2f1      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x24c>
 800358e:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0b      	ldr	r2, [pc, #44]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e025      	b.n	80035e8 <HAL_RCC_OscConfig+0x298>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a4:	d114      	bne.n	80035d0 <HAL_RCC_OscConfig+0x280>
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a05      	ldr	r2, [pc, #20]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a02      	ldr	r2, [pc, #8]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e013      	b.n	80035e8 <HAL_RCC_OscConfig+0x298>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08009718 	.word	0x08009718
 80035c8:	20000008 	.word	0x20000008
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fb44 	bl	8001c7c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fb40 	bl	8001c7c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2ae      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360a:	4b92      	ldr	r3, [pc, #584]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2a8>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fb30 	bl	8001c7c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fb2c 	bl	8001c7c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e29a      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003632:	4b88      	ldr	r3, [pc, #544]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x2d0>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d060      	beq.n	8003710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x310>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d119      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d116      	bne.n	800368e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	4b7c      	ldr	r3, [pc, #496]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x328>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e277      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b76      	ldr	r3, [pc, #472]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	4973      	ldr	r1, [pc, #460]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	e040      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003696:	4b6f      	ldr	r3, [pc, #444]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe faeb 	bl	8001c7c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fae7 	bl	8001c7c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e255      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036bc:	4b65      	ldr	r3, [pc, #404]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b62      	ldr	r3, [pc, #392]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	495f      	ldr	r1, [pc, #380]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b5d      	ldr	r3, [pc, #372]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe fac7 	bl	8001c7c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe fac3 	bl	8001c7c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e231      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03c      	beq.n	8003796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003724:	4b4b      	ldr	r3, [pc, #300]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372a:	4a4a      	ldr	r2, [pc, #296]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fe faa2 	bl	8001c7c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe fa9e 	bl	8001c7c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e20c      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <HAL_RCC_OscConfig+0x3ec>
 800375c:	e01b      	b.n	8003796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003764:	4a3b      	ldr	r2, [pc, #236]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fa85 	bl	8001c7c <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003776:	f7fe fa81 	bl	8001c7c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1ef      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003788:	4b32      	ldr	r3, [pc, #200]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ef      	bne.n	8003776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a6 	beq.w	80038f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c0:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	4b21      	ldr	r3, [pc, #132]	@ (8003858 <HAL_RCC_OscConfig+0x508>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <HAL_RCC_OscConfig+0x508>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <HAL_RCC_OscConfig+0x508>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7fe fa48 	bl	8001c7c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fe fa44 	bl	8001c7c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e1b2      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <HAL_RCC_OscConfig+0x508>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x4d8>
 8003816:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	4a0d      	ldr	r2, [pc, #52]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003826:	e029      	b.n	800387c <HAL_RCC_OscConfig+0x52c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d115      	bne.n	800385c <HAL_RCC_OscConfig+0x50c>
 8003830:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	4a07      	ldr	r2, [pc, #28]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003846:	4a03      	ldr	r2, [pc, #12]	@ (8003854 <HAL_RCC_OscConfig+0x504>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x52c>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
 800385c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	4a99      	ldr	r2, [pc, #612]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800386c:	4b96      	ldr	r3, [pc, #600]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	4a95      	ldr	r2, [pc, #596]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f9fa 	bl	8001c7c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe f9f6 	bl	8001c7c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e162      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b89      	ldr	r3, [pc, #548]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ed      	beq.n	800388c <HAL_RCC_OscConfig+0x53c>
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe f9e3 	bl	8001c7c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe f9df 	bl	8001c7c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e14b      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d0:	4b7d      	ldr	r3, [pc, #500]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ed      	bne.n	80038ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b78      	ldr	r3, [pc, #480]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	4a77      	ldr	r2, [pc, #476]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03c      	beq.n	8003976 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003904:	4b70      	ldr	r3, [pc, #448]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800390a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fe f9b2 	bl	8001c7c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391c:	f7fe f9ae 	bl	8001c7c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e11c      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800392e:	4b66      	ldr	r3, [pc, #408]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCC_OscConfig+0x5cc>
 800393c:	e01b      	b.n	8003976 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800393e:	4b62      	ldr	r3, [pc, #392]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003944:	4a60      	ldr	r2, [pc, #384]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fe f995 	bl	8001c7c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003956:	f7fe f991 	bl	8001c7c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0ff      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003968:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 800396a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ef      	bne.n	8003956 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80f3 	beq.w	8003b66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	2b02      	cmp	r3, #2
 8003986:	f040 80c9 	bne.w	8003b1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800398a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0203 	and.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d12c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	3b01      	subs	r3, #1
 80039aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d123      	bne.n	80039f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d11b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d113      	bne.n	80039f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d109      	bne.n	80039f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d06b      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d062      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039fe:	4b32      	ldr	r3, [pc, #200]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0ac      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a1a:	f7fe f92f 	bl	8001c7c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fe f92b 	bl	8001c7c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e099      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a40:	4b21      	ldr	r3, [pc, #132]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	4b21      	ldr	r3, [pc, #132]	@ (8003acc <HAL_RCC_OscConfig+0x77c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a50:	3a01      	subs	r2, #1
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a5a:	0212      	lsls	r2, r2, #8
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0552      	lsls	r2, r2, #21
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a6e:	0852      	lsrs	r2, r2, #1
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0652      	lsls	r2, r2, #25
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a7a:	06d2      	lsls	r2, r2, #27
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	4912      	ldr	r1, [pc, #72]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a84:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a9c:	f7fe f8ee 	bl	8001c7c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe f8ea 	bl	8001c7c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e058      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac2:	e050      	b.n	8003b66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e04f      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad0:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d144      	bne.n	8003b66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003adc:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae8:	4b21      	ldr	r3, [pc, #132]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a20      	ldr	r2, [pc, #128]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003af4:	f7fe f8c2 	bl	8001c7c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe f8be 	bl	8001c7c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e02c      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x7ac>
 8003b1a:	e024      	b.n	8003b66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d01f      	beq.n	8003b62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b22:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe f8a5 	bl	8001c7c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fe f8a1 	bl	8001c7c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e00f      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	4905      	ldr	r1, [pc, #20]	@ (8003b70 <HAL_RCC_OscConfig+0x820>)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_OscConfig+0x824>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60cb      	str	r3, [r1, #12]
 8003b60:	e001      	b.n	8003b66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	feeefffc 	.word	0xfeeefffc

08003b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0e7      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b75      	ldr	r3, [pc, #468]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d910      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b72      	ldr	r3, [pc, #456]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 0207 	bic.w	r2, r3, #7
 8003ba2:	4970      	ldr	r1, [pc, #448]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b6e      	ldr	r3, [pc, #440]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0cf      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d908      	bls.n	8003bea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b63      	ldr	r3, [pc, #396]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4960      	ldr	r1, [pc, #384]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d04c      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d121      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0a6      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c16:	4b54      	ldr	r3, [pc, #336]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d115      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e09a      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e08e      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e086      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b46      	ldr	r3, [pc, #280]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4943      	ldr	r1, [pc, #268]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fe f80c 	bl	8001c7c <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fe f808 	bl	8001c7c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e06e      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 020c 	and.w	r2, r3, #12
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1eb      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d208      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	4b2e      	ldr	r3, [pc, #184]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	492b      	ldr	r1, [pc, #172]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cbe:	4b29      	ldr	r3, [pc, #164]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d210      	bcs.n	8003cee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 0207 	bic.w	r2, r3, #7
 8003cd4:	4923      	ldr	r1, [pc, #140]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cdc:	4b21      	ldr	r3, [pc, #132]	@ (8003d64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e036      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	4918      	ldr	r1, [pc, #96]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4910      	ldr	r1, [pc, #64]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2c:	f000 f824 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	490b      	ldr	r1, [pc, #44]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f4>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d4c:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x1fc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd fdc3 	bl	80018dc <HAL_InitTick>
 8003d56:	4603      	mov	r3, r0
 8003d58:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08009718 	.word	0x08009718
 8003d70:	20000008 	.word	0x20000008
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	@ 0x24
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d86:	4b3e      	ldr	r3, [pc, #248]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d90:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x34>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d11e      	bne.n	8003dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dac:	4b34      	ldr	r3, [pc, #208]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d102      	bne.n	8003df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df0:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e004      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dfc:	4b23      	ldr	r3, [pc, #140]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d134      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e06:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0xac>
 8003e1c:	e005      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e20:	617b      	str	r3, [r7, #20]
      break;
 8003e22:	e005      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e26:	617b      	str	r3, [r7, #20]
      break;
 8003e28:	e002      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	617b      	str	r3, [r7, #20]
      break;
 8003e2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e3e:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	fb03 f202 	mul.w	r2, r3, r2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	0e5b      	lsrs	r3, r3, #25
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	3301      	adds	r3, #1
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e70:	69bb      	ldr	r3, [r7, #24]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3724      	adds	r7, #36	@ 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08009730 	.word	0x08009730
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	007a1200 	.word	0x007a1200

08003e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000008 	.word	0x20000008

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eac:	f7ff fff0 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4904      	ldr	r1, [pc, #16]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08009728 	.word	0x08009728

08003ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ed8:	f7ff ffda 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0adb      	lsrs	r3, r3, #11
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4904      	ldr	r1, [pc, #16]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	08009728 	.word	0x08009728

08003f00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f10:	4b12      	ldr	r3, [pc, #72]	@ (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0203 	and.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_GetClockConfig+0x5c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	08db      	lsrs	r3, r3, #3
 8003f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <HAL_RCC_GetClockConfig+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0207 	and.w	r2, r3, #7
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40022000 	.word	0x40022000

08003f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f70:	4b2a      	ldr	r3, [pc, #168]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f7c:	f7ff f984 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003f80:	6178      	str	r0, [r7, #20]
 8003f82:	e014      	b.n	8003fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	4a24      	ldr	r2, [pc, #144]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f90:	4b22      	ldr	r3, [pc, #136]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f9c:	f7ff f974 	bl	8003288 <HAL_PWREx_GetVoltageRange>
 8003fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb4:	d10b      	bne.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	@ 0x80
 8003fba:	d919      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fc0:	d902      	bls.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e013      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e010      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	d902      	bls.n	8003fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	e00a      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b80      	cmp	r3, #128	@ 0x80
 8003fde:	d102      	bne.n	8003fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e004      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b70      	cmp	r3, #112	@ 0x70
 8003fea:	d101      	bne.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fec:	2301      	movs	r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 0207 	bic.w	r2, r3, #7
 8003ff8:	4909      	ldr	r1, [pc, #36]	@ (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004000:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	40022000 	.word	0x40022000

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800402c:	2300      	movs	r3, #0
 800402e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004030:	2300      	movs	r3, #0
 8004032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403c:	2b00      	cmp	r3, #0
 800403e:	d031      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004048:	d01a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800404a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800404e:	d814      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004058:	d10f      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800405a:	4b5d      	ldr	r3, [pc, #372]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4a5c      	ldr	r2, [pc, #368]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f9de 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	74fb      	strb	r3, [r7, #19]
      break;
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004088:	4b51      	ldr	r3, [pc, #324]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	494e      	ldr	r1, [pc, #312]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800409e:	e001      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 809e 	beq.w	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b6:	4b46      	ldr	r3, [pc, #280]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040cc:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	4a3f      	ldr	r2, [pc, #252]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d8:	4b3d      	ldr	r3, [pc, #244]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e4:	2301      	movs	r3, #1
 80040e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a39      	ldr	r2, [pc, #228]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f4:	f7fd fdc2 	bl	8001c7c <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fc:	f7fd fdbe 	bl	8001c7c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	74fb      	strb	r3, [r7, #19]
        break;
 800410e:	e005      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004110:	4b30      	ldr	r3, [pc, #192]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ef      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d15a      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004122:	4b2b      	ldr	r3, [pc, #172]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01e      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	429a      	cmp	r2, r3
 800413c:	d019      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004148:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800414a:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415a:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800416a:	4a19      	ldr	r2, [pc, #100]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d016      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fd7e 	bl	8001c7c <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004182:	e00b      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fd7a 	bl	8001c7c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d902      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	74fb      	strb	r3, [r7, #19]
            break;
 800419a:	e006      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ec      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041be:	4904      	ldr	r1, [pc, #16]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041dc:	7c7b      	ldrb	r3, [r7, #17]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d105      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	4b8a      	ldr	r3, [pc, #552]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	4a89      	ldr	r2, [pc, #548]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041fa:	4b84      	ldr	r3, [pc, #528]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f023 0203 	bic.w	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4980      	ldr	r1, [pc, #512]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800421c:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f023 020c 	bic.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	4978      	ldr	r1, [pc, #480]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423e:	4b73      	ldr	r3, [pc, #460]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004244:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	496f      	ldr	r1, [pc, #444]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004260:	4b6a      	ldr	r3, [pc, #424]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	4967      	ldr	r1, [pc, #412]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004282:	4b62      	ldr	r3, [pc, #392]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	495e      	ldr	r1, [pc, #376]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	4956      	ldr	r1, [pc, #344]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c6:	4b51      	ldr	r3, [pc, #324]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d028      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e8:	4b48      	ldr	r3, [pc, #288]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4945      	ldr	r1, [pc, #276]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004306:	d106      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004308:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004312:	60d3      	str	r3, [r2, #12]
 8004314:	e011      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800431e:	d10c      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f882 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d028      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004346:	4b31      	ldr	r3, [pc, #196]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	492d      	ldr	r1, [pc, #180]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004364:	d106      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4a28      	ldr	r2, [pc, #160]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004370:	60d3      	str	r3, [r2, #12]
 8004372:	e011      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800437c:	d10c      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f853 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01c      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	4916      	ldr	r1, [pc, #88]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043c2:	d10c      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f830 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ea:	4b08      	ldr	r3, [pc, #32]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f8:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004400:	7cbb      	ldrb	r3, [r7, #18]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a04      	ldr	r2, [pc, #16]	@ (800442c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443e:	4b74      	ldr	r3, [pc, #464]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444a:	4b71      	ldr	r3, [pc, #452]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
       ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004462:	4b6b      	ldr	r3, [pc, #428]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
       ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d047      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e044      	b.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d018      	beq.n	80044b6 <RCCEx_PLLSAI1_Config+0x86>
 8004484:	2b03      	cmp	r3, #3
 8004486:	d825      	bhi.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x62>
 800448c:	2b02      	cmp	r3, #2
 800448e:	d009      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x74>
 8004490:	e020      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004492:	4b5f      	ldr	r3, [pc, #380]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11d      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a2:	e01a      	b.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e013      	b.n	80044de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b6:	4b56      	ldr	r3, [pc, #344]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c2:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d2:	e006      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e004      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ea:	4b49      	ldr	r3, [pc, #292]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	430b      	orrs	r3, r1
 8004500:	4943      	ldr	r1, [pc, #268]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d17c      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800450c:	4b40      	ldr	r3, [pc, #256]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3f      	ldr	r2, [pc, #252]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004518:	f7fd fbb0 	bl	8001c7c <HAL_GetTick>
 800451c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451e:	e009      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004520:	f7fd fbac 	bl	8001c7c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	73fb      	strb	r3, [r7, #15]
        break;
 8004532:	e005      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ef      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d15f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d110      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800454c:	4b30      	ldr	r3, [pc, #192]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004554:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6892      	ldr	r2, [r2, #8]
 800455c:	0211      	lsls	r1, r2, #8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	06d2      	lsls	r2, r2, #27
 8004564:	430a      	orrs	r2, r1
 8004566:	492a      	ldr	r1, [pc, #168]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
 800456c:	e027      	b.n	80045be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d112      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004574:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800457c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
 8004584:	0211      	lsls	r1, r2, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6912      	ldr	r2, [r2, #16]
 800458a:	0852      	lsrs	r2, r2, #1
 800458c:	3a01      	subs	r2, #1
 800458e:	0552      	lsls	r2, r2, #21
 8004590:	430a      	orrs	r2, r1
 8004592:	491f      	ldr	r1, [pc, #124]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
 8004598:	e011      	b.n	80045be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459a:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6892      	ldr	r2, [r2, #8]
 80045aa:	0211      	lsls	r1, r2, #8
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6952      	ldr	r2, [r2, #20]
 80045b0:	0852      	lsrs	r2, r2, #1
 80045b2:	3a01      	subs	r2, #1
 80045b4:	0652      	lsls	r2, r2, #25
 80045b6:	430a      	orrs	r2, r1
 80045b8:	4915      	ldr	r1, [pc, #84]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045be:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fd fb57 	bl	8001c7c <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d0:	e009      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d2:	f7fd fb53 	bl	8001c7c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	73fb      	strb	r3, [r7, #15]
          break;
 80045e4:	e005      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ef      	beq.n	80045d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e049      	b.n	80046ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd f892 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fbf8 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e03b      	b.n	8004754 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <HAL_TIM_Base_Start_IT+0x9c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0x4e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004706:	d004      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0x4e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a15      	ldr	r2, [pc, #84]	@ (8004764 <HAL_TIM_Base_Start_IT+0xa0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d115      	bne.n	800473e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	4b13      	ldr	r3, [pc, #76]	@ (8004768 <HAL_TIM_Base_Start_IT+0xa4>)
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d015      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x8c>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472a:	d011      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	e008      	b.n	8004750 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e000      	b.n	8004752 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40014000 	.word	0x40014000
 8004768:	00010007 	.word	0x00010007

0800476c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e049      	b.n	8004812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f841 	bl	800481a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 fb4c 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01b      	beq.n	8004892 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0202 	mvn.w	r2, #2
 8004862:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fac6 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 800487e:	e005      	b.n	800488c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fab8 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fac9 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01b      	beq.n	80048de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0204 	mvn.w	r2, #4
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 faa0 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa92 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 faa3 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01b      	beq.n	800492a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0208 	mvn.w	r2, #8
 80048fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2204      	movs	r2, #4
 8004900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa7a 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004916:	e005      	b.n	8004924 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa6c 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa7d 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01b      	beq.n	8004976 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0210 	mvn.w	r2, #16
 8004946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2208      	movs	r2, #8
 800494c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa54 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004962:	e005      	b.n	8004970 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa46 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa57 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0201 	mvn.w	r2, #1
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fc fb17 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fe38 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fe30 	bl	800564c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa11 	bl	8004e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0220 	mvn.w	r2, #32
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fdf8 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0ff      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b14      	cmp	r3, #20
 8004a66:	f200 80f0 	bhi.w	8004c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004c4b 	.word	0x08004c4b
 8004a78:	08004c4b 	.word	0x08004c4b
 8004a7c:	08004c4b 	.word	0x08004c4b
 8004a80:	08004b05 	.word	0x08004b05
 8004a84:	08004c4b 	.word	0x08004c4b
 8004a88:	08004c4b 	.word	0x08004c4b
 8004a8c:	08004c4b 	.word	0x08004c4b
 8004a90:	08004b47 	.word	0x08004b47
 8004a94:	08004c4b 	.word	0x08004c4b
 8004a98:	08004c4b 	.word	0x08004c4b
 8004a9c:	08004c4b 	.word	0x08004c4b
 8004aa0:	08004b87 	.word	0x08004b87
 8004aa4:	08004c4b 	.word	0x08004c4b
 8004aa8:	08004c4b 	.word	0x08004c4b
 8004aac:	08004c4b 	.word	0x08004c4b
 8004ab0:	08004bc9 	.word	0x08004bc9
 8004ab4:	08004c4b 	.word	0x08004c4b
 8004ab8:	08004c4b 	.word	0x08004c4b
 8004abc:	08004c4b 	.word	0x08004c4b
 8004ac0:	08004c09 	.word	0x08004c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fa2c 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6999      	ldr	r1, [r3, #24]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	619a      	str	r2, [r3, #24]
      break;
 8004b02:	e0a5      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fa88 	bl	8005020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]
      break;
 8004b44:	e084      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fae1 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0208 	orr.w	r2, r2, #8
 8004b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0204 	bic.w	r2, r2, #4
 8004b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
      break;
 8004b84:	e064      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fb39 	bl	8005204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	61da      	str	r2, [r3, #28]
      break;
 8004bc6:	e043      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fb76 	bl	80052c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0204 	bic.w	r2, r2, #4
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c06:	e023      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fbae 	bl	8005370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c48:	e002      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_ConfigClockSource+0x1c>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0b6      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x18a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbc:	d03e      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0xd8>
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc2:	f200 8087 	bhi.w	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cca:	f000 8086 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x176>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd2:	d87f      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cd4:	2b70      	cmp	r3, #112	@ 0x70
 8004cd6:	d01a      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0xaa>
 8004cd8:	2b70      	cmp	r3, #112	@ 0x70
 8004cda:	d87b      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cdc:	2b60      	cmp	r3, #96	@ 0x60
 8004cde:	d050      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x11e>
 8004ce0:	2b60      	cmp	r3, #96	@ 0x60
 8004ce2:	d877      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004ce4:	2b50      	cmp	r3, #80	@ 0x50
 8004ce6:	d03c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0xfe>
 8004ce8:	2b50      	cmp	r3, #80	@ 0x50
 8004cea:	d873      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d058      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x13e>
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d86f      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b30      	cmp	r3, #48	@ 0x30
 8004cf6:	d064      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004cf8:	2b30      	cmp	r3, #48	@ 0x30
 8004cfa:	d86b      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d060      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d867      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05c      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d05a      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d0c:	e062      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	f000 fbfb 	bl	8005518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	609a      	str	r2, [r3, #8]
      break;
 8004d3a:	e04f      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	f000 fbe4 	bl	8005518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5e:	609a      	str	r2, [r3, #8]
      break;
 8004d60:	e03c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 fb58 	bl	8005424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2150      	movs	r1, #80	@ 0x50
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fbb1 	bl	80054e2 <TIM_ITRx_SetConfig>
      break;
 8004d80:	e02c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fb77 	bl	8005482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2160      	movs	r1, #96	@ 0x60
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fba1 	bl	80054e2 <TIM_ITRx_SetConfig>
      break;
 8004da0:	e01c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fb38 	bl	8005424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb91 	bl	80054e2 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e00c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f000 fb88 	bl	80054e2 <TIM_ITRx_SetConfig>
      break;
 8004dd2:	e003      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd8:	e000      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <TIM_Base_SetConfig+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x20>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	@ (8004f1c <TIM_Base_SetConfig+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_Base_SetConfig+0x52>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0x52>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a24      	ldr	r2, [pc, #144]	@ (8004f20 <TIM_Base_SetConfig+0xd8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0x52>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a23      	ldr	r2, [pc, #140]	@ (8004f24 <TIM_Base_SetConfig+0xdc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a12      	ldr	r2, [pc, #72]	@ (8004f1c <TIM_Base_SetConfig+0xd4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0xa0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a11      	ldr	r2, [pc, #68]	@ (8004f20 <TIM_Base_SetConfig+0xd8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0xa0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a10      	ldr	r2, [pc, #64]	@ (8004f24 <TIM_Base_SetConfig+0xdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f023 0201 	bic.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a24      	ldr	r2, [pc, #144]	@ (8005014 <TIM_OC1_SetConfig+0xec>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC1_SetConfig+0x70>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <TIM_OC1_SetConfig+0xf0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC1_SetConfig+0x70>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a22      	ldr	r2, [pc, #136]	@ (800501c <TIM_OC1_SetConfig+0xf4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0308 	bic.w	r3, r3, #8
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <TIM_OC1_SetConfig+0xec>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_OC1_SetConfig+0xa2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a16      	ldr	r2, [pc, #88]	@ (8005018 <TIM_OC1_SetConfig+0xf0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0xa2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	@ (800501c <TIM_OC1_SetConfig+0xf4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400

08005020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f023 0210 	bic.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a22      	ldr	r2, [pc, #136]	@ (8005108 <TIM_OC2_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a19      	ldr	r2, [pc, #100]	@ (8005108 <TIM_OC2_SetConfig+0xe8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC2_SetConfig+0x98>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a18      	ldr	r2, [pc, #96]	@ (800510c <TIM_OC2_SetConfig+0xec>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0x98>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <TIM_OC2_SetConfig+0xf0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d113      	bne.n	80050e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40014000 	.word	0x40014000
 8005110:	40014400 	.word	0x40014400

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <TIM_OC3_SetConfig+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10d      	bne.n	8005192 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a18      	ldr	r2, [pc, #96]	@ (80051f8 <TIM_OC3_SetConfig+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_OC3_SetConfig+0x96>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a17      	ldr	r2, [pc, #92]	@ (80051fc <TIM_OC3_SetConfig+0xe8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_OC3_SetConfig+0x96>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a16      	ldr	r2, [pc, #88]	@ (8005200 <TIM_OC3_SetConfig+0xec>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d113      	bne.n	80051d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400

08005204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	031b      	lsls	r3, r3, #12
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <TIM_OC4_SetConfig+0xb0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC4_SetConfig+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <TIM_OC4_SetConfig+0xb4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC4_SetConfig+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a12      	ldr	r2, [pc, #72]	@ (80052bc <TIM_OC4_SetConfig+0xb8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d109      	bne.n	800528c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800527e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400

080052c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <TIM_OC5_SetConfig+0xa4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_OC5_SetConfig+0x6a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a12      	ldr	r2, [pc, #72]	@ (8005368 <TIM_OC5_SetConfig+0xa8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC5_SetConfig+0x6a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a11      	ldr	r2, [pc, #68]	@ (800536c <TIM_OC5_SetConfig+0xac>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d109      	bne.n	800533e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400

08005370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	051b      	lsls	r3, r3, #20
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <TIM_OC6_SetConfig+0xa8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_OC6_SetConfig+0x6c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a13      	ldr	r2, [pc, #76]	@ (800541c <TIM_OC6_SetConfig+0xac>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_OC6_SetConfig+0x6c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <TIM_OC6_SetConfig+0xb0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400

08005424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0201 	bic.w	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800544e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 030a 	bic.w	r3, r3, #10
 8005460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005482:	b480      	push	{r7}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 0210 	bic.w	r2, r3, #16
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	f043 0307 	orr.w	r3, r3, #7
 8005504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	431a      	orrs	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4313      	orrs	r3, r2
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	609a      	str	r2, [r3, #8]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e04f      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a21      	ldr	r2, [pc, #132]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a14      	ldr	r2, [pc, #80]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d8:	d004      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a10      	ldr	r2, [pc, #64]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e040      	b.n	80056f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc f8c0 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	@ 0x24
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fade 	bl	8005c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8af 	bl	8005810 <UART_SetConfig>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e01b      	b.n	80056f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fb5d 	bl	8005dac <UART_CheckIdleState>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005710:	2b20      	cmp	r3, #32
 8005712:	d177      	bne.n	8005804 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_UART_Transmit+0x24>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e070      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	@ 0x21
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005732:	f7fc faa3 	bl	8001c7c <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005750:	d108      	bne.n	8005764 <HAL_UART_Transmit+0x68>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e003      	b.n	800576c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800576c:	e02f      	b.n	80057ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	@ 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbbf 	bl	8005efc <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e03b      	b.n	8005806 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	881a      	ldrh	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a0:	b292      	uxth	r2, r2
 80057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3302      	adds	r3, #2
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e007      	b.n	80057bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c9      	bne.n	800576e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	@ 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fb89 	bl	8005efc <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e005      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b08a      	sub	sp, #40	@ 0x28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	431a      	orrs	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	4313      	orrs	r3, r2
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4bb4      	ldr	r3, [pc, #720]	@ (8005b10 <UART_SetConfig+0x300>)
 8005840:	4013      	ands	r3, r2
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005848:	430b      	orrs	r3, r1
 800584a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4aa9      	ldr	r2, [pc, #676]	@ (8005b14 <UART_SetConfig+0x304>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	4313      	orrs	r3, r2
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4aa0      	ldr	r2, [pc, #640]	@ (8005b18 <UART_SetConfig+0x308>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d126      	bne.n	80058e8 <UART_SetConfig+0xd8>
 800589a:	4ba0      	ldr	r3, [pc, #640]	@ (8005b1c <UART_SetConfig+0x30c>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d81b      	bhi.n	80058e0 <UART_SetConfig+0xd0>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0xa0>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058d9 	.word	0x080058d9
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c6:	e080      	b.n	80059ca <UART_SetConfig+0x1ba>
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ce:	e07c      	b.n	80059ca <UART_SetConfig+0x1ba>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d6:	e078      	b.n	80059ca <UART_SetConfig+0x1ba>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058de:	e074      	b.n	80059ca <UART_SetConfig+0x1ba>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e6:	e070      	b.n	80059ca <UART_SetConfig+0x1ba>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a8c      	ldr	r2, [pc, #560]	@ (8005b20 <UART_SetConfig+0x310>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d138      	bne.n	8005964 <UART_SetConfig+0x154>
 80058f2:	4b8a      	ldr	r3, [pc, #552]	@ (8005b1c <UART_SetConfig+0x30c>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d82d      	bhi.n	800595c <UART_SetConfig+0x14c>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <UART_SetConfig+0xf8>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800593d 	.word	0x0800593d
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800595d 	.word	0x0800595d
 8005914:	0800595d 	.word	0x0800595d
 8005918:	0800594d 	.word	0x0800594d
 800591c:	0800595d 	.word	0x0800595d
 8005920:	0800595d 	.word	0x0800595d
 8005924:	0800595d 	.word	0x0800595d
 8005928:	08005945 	.word	0x08005945
 800592c:	0800595d 	.word	0x0800595d
 8005930:	0800595d 	.word	0x0800595d
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005955 	.word	0x08005955
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e042      	b.n	80059ca <UART_SetConfig+0x1ba>
 8005944:	2302      	movs	r3, #2
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e03e      	b.n	80059ca <UART_SetConfig+0x1ba>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e03a      	b.n	80059ca <UART_SetConfig+0x1ba>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595a:	e036      	b.n	80059ca <UART_SetConfig+0x1ba>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005962:	e032      	b.n	80059ca <UART_SetConfig+0x1ba>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6a      	ldr	r2, [pc, #424]	@ (8005b14 <UART_SetConfig+0x304>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d12a      	bne.n	80059c4 <UART_SetConfig+0x1b4>
 800596e:	4b6b      	ldr	r3, [pc, #428]	@ (8005b1c <UART_SetConfig+0x30c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005974:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800597c:	d01a      	beq.n	80059b4 <UART_SetConfig+0x1a4>
 800597e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005982:	d81b      	bhi.n	80059bc <UART_SetConfig+0x1ac>
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005988:	d00c      	beq.n	80059a4 <UART_SetConfig+0x194>
 800598a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800598e:	d815      	bhi.n	80059bc <UART_SetConfig+0x1ac>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <UART_SetConfig+0x18c>
 8005994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005998:	d008      	beq.n	80059ac <UART_SetConfig+0x19c>
 800599a:	e00f      	b.n	80059bc <UART_SetConfig+0x1ac>
 800599c:	2300      	movs	r3, #0
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a2:	e012      	b.n	80059ca <UART_SetConfig+0x1ba>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e00e      	b.n	80059ca <UART_SetConfig+0x1ba>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b2:	e00a      	b.n	80059ca <UART_SetConfig+0x1ba>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ba:	e006      	b.n	80059ca <UART_SetConfig+0x1ba>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c2:	e002      	b.n	80059ca <UART_SetConfig+0x1ba>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a51      	ldr	r2, [pc, #324]	@ (8005b14 <UART_SetConfig+0x304>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d17a      	bne.n	8005aca <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d824      	bhi.n	8005a26 <UART_SetConfig+0x216>
 80059dc:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <UART_SetConfig+0x1d4>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a27 	.word	0x08005a27
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a27 	.word	0x08005a27
 80059f4:	08005a17 	.word	0x08005a17
 80059f8:	08005a27 	.word	0x08005a27
 80059fc:	08005a27 	.word	0x08005a27
 8005a00:	08005a27 	.word	0x08005a27
 8005a04:	08005a1f 	.word	0x08005a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe fa4e 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	61f8      	str	r0, [r7, #28]
        break;
 8005a0e:	e010      	b.n	8005a32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a10:	4b44      	ldr	r3, [pc, #272]	@ (8005b24 <UART_SetConfig+0x314>)
 8005a12:	61fb      	str	r3, [r7, #28]
        break;
 8005a14:	e00d      	b.n	8005a32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a16:	f7fe f9af 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8005a1a:	61f8      	str	r0, [r7, #28]
        break;
 8005a1c:	e009      	b.n	8005a32 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a22:	61fb      	str	r3, [r7, #28]
        break;
 8005a24:	e005      	b.n	8005a32 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8107 	beq.w	8005c48 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d305      	bcc.n	8005a56 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d903      	bls.n	8005a5e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a5c:	e0f4      	b.n	8005c48 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2200      	movs	r2, #0
 8005a62:	461c      	mov	r4, r3
 8005a64:	4615      	mov	r5, r2
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	022b      	lsls	r3, r5, #8
 8005a70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a74:	0222      	lsls	r2, r4, #8
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	6849      	ldr	r1, [r1, #4]
 8005a7a:	0849      	lsrs	r1, r1, #1
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	4688      	mov	r8, r1
 8005a80:	4681      	mov	r9, r0
 8005a82:	eb12 0a08 	adds.w	sl, r2, r8
 8005a86:	eb43 0b09 	adc.w	fp, r3, r9
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a98:	4650      	mov	r0, sl
 8005a9a:	4659      	mov	r1, fp
 8005a9c:	f7fa fbf8 	bl	8000290 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aae:	d308      	bcc.n	8005ac2 <UART_SetConfig+0x2b2>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ab6:	d204      	bcs.n	8005ac2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	e0c2      	b.n	8005c48 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ac8:	e0be      	b.n	8005c48 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad2:	d16a      	bne.n	8005baa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d834      	bhi.n	8005b46 <UART_SetConfig+0x336>
 8005adc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <UART_SetConfig+0x2d4>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b31 	.word	0x08005b31
 8005af0:	08005b47 	.word	0x08005b47
 8005af4:	08005b37 	.word	0x08005b37
 8005af8:	08005b47 	.word	0x08005b47
 8005afc:	08005b47 	.word	0x08005b47
 8005b00:	08005b47 	.word	0x08005b47
 8005b04:	08005b3f 	.word	0x08005b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b08:	f7fe f9ce 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005b0c:	61f8      	str	r0, [r7, #28]
        break;
 8005b0e:	e020      	b.n	8005b52 <UART_SetConfig+0x342>
 8005b10:	efff69f3 	.word	0xefff69f3
 8005b14:	40008000 	.word	0x40008000
 8005b18:	40013800 	.word	0x40013800
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40004400 	.word	0x40004400
 8005b24:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b28:	f7fe f9d4 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	61f8      	str	r0, [r7, #28]
        break;
 8005b2e:	e010      	b.n	8005b52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b30:	4b4c      	ldr	r3, [pc, #304]	@ (8005c64 <UART_SetConfig+0x454>)
 8005b32:	61fb      	str	r3, [r7, #28]
        break;
 8005b34:	e00d      	b.n	8005b52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fe f91f 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8005b3a:	61f8      	str	r0, [r7, #28]
        break;
 8005b3c:	e009      	b.n	8005b52 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b42:	61fb      	str	r3, [r7, #28]
        break;
 8005b44:	e005      	b.n	8005b52 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d077      	beq.n	8005c48 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	005a      	lsls	r2, r3, #1
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	441a      	add	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b0f      	cmp	r3, #15
 8005b72:	d916      	bls.n	8005ba2 <UART_SetConfig+0x392>
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b7a:	d212      	bcs.n	8005ba2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f023 030f 	bic.w	r3, r3, #15
 8005b84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	8afb      	ldrh	r3, [r7, #22]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	8afa      	ldrh	r2, [r7, #22]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	e052      	b.n	8005c48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ba8:	e04e      	b.n	8005c48 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005baa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d827      	bhi.n	8005c02 <UART_SetConfig+0x3f2>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x3a8>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	08005c03 	.word	0x08005c03
 8005bc8:	08005bf3 	.word	0x08005bf3
 8005bcc:	08005c03 	.word	0x08005c03
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c03 	.word	0x08005c03
 8005bd8:	08005bfb 	.word	0x08005bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe f964 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005be0:	61f8      	str	r0, [r7, #28]
        break;
 8005be2:	e014      	b.n	8005c0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe f976 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8005be8:	61f8      	str	r0, [r7, #28]
        break;
 8005bea:	e010      	b.n	8005c0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bec:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <UART_SetConfig+0x454>)
 8005bee:	61fb      	str	r3, [r7, #28]
        break;
 8005bf0:	e00d      	b.n	8005c0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf2:	f7fe f8c1 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8005bf6:	61f8      	str	r0, [r7, #28]
        break;
 8005bf8:	e009      	b.n	8005c0e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfe:	61fb      	str	r3, [r7, #28]
        break;
 8005c00:	e005      	b.n	8005c0e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d019      	beq.n	8005c48 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	085a      	lsrs	r2, r3, #1
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b0f      	cmp	r3, #15
 8005c2c:	d909      	bls.n	8005c42 <UART_SetConfig+0x432>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d205      	bcs.n	8005c42 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	e002      	b.n	8005c48 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	@ 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	00f42400 	.word	0x00f42400

08005c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d66:	d10a      	bne.n	8005d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b098      	sub	sp, #96	@ 0x60
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dbc:	f7fb ff5e 	bl	8001c7c <HAL_GetTick>
 8005dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d12e      	bne.n	8005e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f88c 	bl	8005efc <UART_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d021      	beq.n	8005e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e6      	bne.n	8005dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e062      	b.n	8005ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d149      	bne.n	8005ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e44:	2200      	movs	r2, #0
 8005e46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f856 	bl	8005efc <UART_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d03c      	beq.n	8005ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	623b      	str	r3, [r7, #32]
   return(result);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea8:	61fa      	str	r2, [r7, #28]
 8005eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e011      	b.n	8005ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3758      	adds	r7, #88	@ 0x58
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0c:	e04f      	b.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d04b      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f16:	f7fb feb1 	bl	8001c7c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e04e      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d037      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b80      	cmp	r3, #128	@ 0x80
 8005f42:	d034      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d031      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d110      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f838 	bl	8005fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e029      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f88:	d111      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f81e 	bl	8005fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e00f      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	bf0c      	ite	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	2300      	movne	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d0a0      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b095      	sub	sp, #84	@ 0x54
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ffe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e6      	bne.n	8005fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f023 0301 	bic.w	r3, r3, #1
 8006026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e5      	bne.n	8006010 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b01      	cmp	r3, #1
 800604a:	d118      	bne.n	800607e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	60bb      	str	r3, [r7, #8]
   return(result);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f023 0310 	bic.w	r3, r3, #16
 8006060:	647b      	str	r3, [r7, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6979      	ldr	r1, [r7, #20]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	613b      	str	r3, [r7, #16]
   return(result);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006092:	bf00      	nop
 8006094:	3754      	adds	r7, #84	@ 0x54
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	4603      	mov	r3, r0
 80060a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060b0:	2b84      	cmp	r3, #132	@ 0x84
 80060b2:	d005      	beq.n	80060c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	3303      	adds	r3, #3
 80060be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060c0:	68fb      	ldr	r3, [r7, #12]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060d2:	f000 fc4d 	bl	8006970 <vTaskStartScheduler>
  
  return osOK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd80      	pop	{r7, pc}

080060dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060de:	b089      	sub	sp, #36	@ 0x24
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d020      	beq.n	8006130 <osThreadCreate+0x54>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01c      	beq.n	8006130 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685c      	ldr	r4, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691e      	ldr	r6, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ffc8 	bl	800609e <makeFreeRtosPriority>
 800610e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006118:	9202      	str	r2, [sp, #8]
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	9100      	str	r1, [sp, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	4632      	mov	r2, r6
 8006122:	4629      	mov	r1, r5
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fa56 	bl	80065d6 <xTaskCreateStatic>
 800612a:	4603      	mov	r3, r0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e01c      	b.n	800616a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685c      	ldr	r4, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800613c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ffaa 	bl	800609e <makeFreeRtosPriority>
 800614a:	4602      	mov	r2, r0
 800614c:	f107 030c 	add.w	r3, r7, #12
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	9200      	str	r2, [sp, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	4632      	mov	r2, r6
 8006158:	4629      	mov	r1, r5
 800615a:	4620      	mov	r0, r4
 800615c:	f000 fa9b 	bl	8006696 <xTaskCreate>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d001      	beq.n	800616a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006174 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <osDelay+0x16>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	e000      	b.n	800618c <osDelay+0x18>
 800618a:	2301      	movs	r3, #1
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fbb9 	bl	8006904 <vTaskDelay>
  
  return osOK;
 8006192:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d011      	beq.n	80061d2 <osMessageCreate+0x36>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00d      	beq.n	80061d2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2400      	movs	r4, #0
 80061c8:	9400      	str	r4, [sp, #0]
 80061ca:	f000 f92d 	bl	8006428 <xQueueGenericCreateStatic>
 80061ce:	4603      	mov	r3, r0
 80061d0:	e008      	b.n	80061e4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	4619      	mov	r1, r3
 80061de:	f000 f9a0 	bl	8006522 <xQueueGenericCreate>
 80061e2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f103 0208 	add.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d103      	bne.n	80062ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e00c      	b.n	80062c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3308      	adds	r3, #8
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e002      	b.n	80062bc <vListInsert+0x2e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d2f6      	bcs.n	80062b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6892      	ldr	r2, [r2, #8]
 8006316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6852      	ldr	r2, [r2, #4]
 8006320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d103      	bne.n	8006334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006380:	f000 ffea 	bl	8007358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638c:	68f9      	ldr	r1, [r7, #12]
 800638e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	441a      	add	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	3b01      	subs	r3, #1
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	22ff      	movs	r2, #255	@ 0xff
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	@ 0xff
 80063cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d114      	bne.n	8006400 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01a      	beq.n	8006414 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3310      	adds	r3, #16
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fce8 	bl	8006db8 <xTaskRemoveFromEventList>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <xQueueGenericReset+0xd0>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	e009      	b.n	8006414 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3310      	adds	r3, #16
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fef1 	bl	80061ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3324      	adds	r3, #36	@ 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff feec 	bl	80061ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006414:	f000 ffd2 	bl	80073bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006418:	2301      	movs	r3, #1
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08e      	sub	sp, #56	@ 0x38
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10b      	bne.n	8006454 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <xQueueGenericCreateStatic+0x56>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <xQueueGenericCreateStatic+0x5a>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueGenericCreateStatic+0x5c>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	623b      	str	r3, [r7, #32]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <xQueueGenericCreateStatic+0x84>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <xQueueGenericCreateStatic+0x88>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <xQueueGenericCreateStatic+0x8a>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61fb      	str	r3, [r7, #28]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064ce:	2348      	movs	r3, #72	@ 0x48
 80064d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b48      	cmp	r3, #72	@ 0x48
 80064d6:	d00b      	beq.n	80064f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006504:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f840 	bl	8006598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800651a:	4618      	mov	r0, r3
 800651c:	3730      	adds	r7, #48	@ 0x30
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08a      	sub	sp, #40	@ 0x28
 8006526:	af02      	add	r7, sp, #8
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	4613      	mov	r3, r2
 800652e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	613b      	str	r3, [r7, #16]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3348      	adds	r3, #72	@ 0x48
 800655c:	4618      	mov	r0, r3
 800655e:	f000 ffdb 	bl	8007518 <pvPortMalloc>
 8006562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3348      	adds	r3, #72	@ 0x48
 8006572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800657c:	79fa      	ldrb	r2, [r7, #7]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f805 	bl	8006598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800658e:	69bb      	ldr	r3, [r7, #24]
	}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065c6:	2101      	movs	r1, #1
 80065c8:	69b8      	ldr	r0, [r7, #24]
 80065ca:	f7ff fec3 	bl	8006354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08e      	sub	sp, #56	@ 0x38
 80065da:	af04      	add	r7, sp, #16
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	623b      	str	r3, [r7, #32]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	61fb      	str	r3, [r7, #28]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006620:	2354      	movs	r3, #84	@ 0x54
 8006622:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b54      	cmp	r3, #84	@ 0x54
 8006628:	d00b      	beq.n	8006642 <xTaskCreateStatic+0x6c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01e      	beq.n	8006688 <xTaskCreateStatic+0xb2>
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01b      	beq.n	8006688 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006658:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006662:	2300      	movs	r3, #0
 8006664:	9303      	str	r3, [sp, #12]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f850 	bl	8006720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006680:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006682:	f000 f8d5 	bl	8006830 <prvAddNewTaskToReadyList>
 8006686:	e001      	b.n	800668c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800668c:	697b      	ldr	r3, [r7, #20]
	}
 800668e:	4618      	mov	r0, r3
 8006690:	3728      	adds	r7, #40	@ 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08c      	sub	sp, #48	@ 0x30
 800669a:	af04      	add	r7, sp, #16
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 ff34 	bl	8007518 <pvPortMalloc>
 80066b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066b8:	2054      	movs	r0, #84	@ 0x54
 80066ba:	f000 ff2d 	bl	8007518 <pvPortMalloc>
 80066be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80066cc:	e005      	b.n	80066da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066ce:	6978      	ldr	r0, [r7, #20]
 80066d0:	f000 fff0 	bl	80076b4 <vPortFree>
 80066d4:	e001      	b.n	80066da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d017      	beq.n	8006710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	2300      	movs	r3, #0
 80066ec:	9303      	str	r3, [sp, #12]
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	9302      	str	r3, [sp, #8]
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f80e 	bl	8006720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006704:	69f8      	ldr	r0, [r7, #28]
 8006706:	f000 f893 	bl	8006830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800670a:	2301      	movs	r3, #1
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	e002      	b.n	8006716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006716:	69bb      	ldr	r3, [r7, #24]
	}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006738:	3b01      	subs	r3, #1
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	617b      	str	r3, [r7, #20]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01f      	beq.n	80067b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e012      	b.n	800679c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	3334      	adds	r3, #52	@ 0x34
 8006786:	460a      	mov	r2, r1
 8006788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3301      	adds	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d9e9      	bls.n	8006776 <prvInitialiseNewTask+0x56>
 80067a2:	e000      	b.n	80067a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80067a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067ae:	e003      	b.n	80067b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d901      	bls.n	80067c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067be:	2306      	movs	r3, #6
 80067c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fd27 	bl	800622c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fd22 	bl	800622c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	f1c3 0207 	rsb	r2, r3, #7
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	2200      	movs	r2, #0
 8006802:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f000 fc71 	bl	80070f8 <pxPortInitialiseStack>
 8006816:	4602      	mov	r2, r0
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800681c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006826:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006838:	f000 fd8e 	bl	8007358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800683c:	4b2a      	ldr	r3, [pc, #168]	@ (80068e8 <prvAddNewTaskToReadyList+0xb8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	4a29      	ldr	r2, [pc, #164]	@ (80068e8 <prvAddNewTaskToReadyList+0xb8>)
 8006844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006846:	4b29      	ldr	r3, [pc, #164]	@ (80068ec <prvAddNewTaskToReadyList+0xbc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800684e:	4a27      	ldr	r2, [pc, #156]	@ (80068ec <prvAddNewTaskToReadyList+0xbc>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006854:	4b24      	ldr	r3, [pc, #144]	@ (80068e8 <prvAddNewTaskToReadyList+0xb8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d110      	bne.n	800687e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800685c:	f000 fb28 	bl	8006eb0 <prvInitialiseTaskLists>
 8006860:	e00d      	b.n	800687e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006862:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <prvAddNewTaskToReadyList+0xc0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800686a:	4b20      	ldr	r3, [pc, #128]	@ (80068ec <prvAddNewTaskToReadyList+0xbc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	429a      	cmp	r2, r3
 8006876:	d802      	bhi.n	800687e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006878:	4a1c      	ldr	r2, [pc, #112]	@ (80068ec <prvAddNewTaskToReadyList+0xbc>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800687e:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a1b      	ldr	r2, [pc, #108]	@ (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 8006886:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	2201      	movs	r2, #1
 800688e:	409a      	lsls	r2, r3
 8006890:	4b19      	ldr	r3, [pc, #100]	@ (80068f8 <prvAddNewTaskToReadyList+0xc8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4313      	orrs	r3, r2
 8006896:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <prvAddNewTaskToReadyList+0xc8>)
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4a15      	ldr	r2, [pc, #84]	@ (80068fc <prvAddNewTaskToReadyList+0xcc>)
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7ff fcc8 	bl	8006246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b6:	f000 fd81 	bl	80073bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <prvAddNewTaskToReadyList+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c2:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddNewTaskToReadyList+0xbc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d207      	bcs.n	80068e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <prvAddNewTaskToReadyList+0xd0>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	200009d0 	.word	0x200009d0
 80068ec:	200008d0 	.word	0x200008d0
 80068f0:	200009dc 	.word	0x200009dc
 80068f4:	200009ec 	.word	0x200009ec
 80068f8:	200009d8 	.word	0x200009d8
 80068fc:	200008d4 	.word	0x200008d4
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006916:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <vTaskDelay+0x64>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vTaskDelay+0x32>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60bb      	str	r3, [r7, #8]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006936:	f000 f87d 	bl	8006a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb75 	bl	800702c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006942:	f000 f885 	bl	8006a50 <xTaskResumeAll>
 8006946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800694e:	4b07      	ldr	r3, [pc, #28]	@ (800696c <vTaskDelay+0x68>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	200009f8 	.word	0x200009f8
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800697e:	463a      	mov	r2, r7
 8006980:	1d39      	adds	r1, r7, #4
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4618      	mov	r0, r3
 8006988:	f7f9 fe18 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	460a      	mov	r2, r1
 800699e:	491f      	ldr	r1, [pc, #124]	@ (8006a1c <vTaskStartScheduler+0xac>)
 80069a0:	481f      	ldr	r0, [pc, #124]	@ (8006a20 <vTaskStartScheduler+0xb0>)
 80069a2:	f7ff fe18 	bl	80065d6 <xTaskCreateStatic>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a24 <vTaskStartScheduler+0xb4>)
 80069aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006a24 <vTaskStartScheduler+0xb4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e001      	b.n	80069be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d116      	bne.n	80069f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	613b      	str	r3, [r7, #16]
}
 80069d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069d8:	4b13      	ldr	r3, [pc, #76]	@ (8006a28 <vTaskStartScheduler+0xb8>)
 80069da:	f04f 32ff 	mov.w	r2, #4294967295
 80069de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e0:	4b12      	ldr	r3, [pc, #72]	@ (8006a2c <vTaskStartScheduler+0xbc>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e6:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <vTaskStartScheduler+0xc0>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ec:	f000 fc10 	bl	8007210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069f0:	e00f      	b.n	8006a12 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d10b      	bne.n	8006a12 <vTaskStartScheduler+0xa2>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vTaskStartScheduler+0x9e>
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	080089b4 	.word	0x080089b4
 8006a20:	08006e81 	.word	0x08006e81
 8006a24:	200009f4 	.word	0x200009f4
 8006a28:	200009f0 	.word	0x200009f0
 8006a2c:	200009dc 	.word	0x200009dc
 8006a30:	200009d4 	.word	0x200009d4

08006a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a38:	4b04      	ldr	r3, [pc, #16]	@ (8006a4c <vTaskSuspendAll+0x18>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a03      	ldr	r2, [pc, #12]	@ (8006a4c <vTaskSuspendAll+0x18>)
 8006a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	200009f8 	.word	0x200009f8

08006a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a5e:	4b42      	ldr	r3, [pc, #264]	@ (8006b68 <xTaskResumeAll+0x118>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10b      	bne.n	8006a7e <xTaskResumeAll+0x2e>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a7e:	f000 fc6b 	bl	8007358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a82:	4b39      	ldr	r3, [pc, #228]	@ (8006b68 <xTaskResumeAll+0x118>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	4a37      	ldr	r2, [pc, #220]	@ (8006b68 <xTaskResumeAll+0x118>)
 8006a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8c:	4b36      	ldr	r3, [pc, #216]	@ (8006b68 <xTaskResumeAll+0x118>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d161      	bne.n	8006b58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a94:	4b35      	ldr	r3, [pc, #212]	@ (8006b6c <xTaskResumeAll+0x11c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d05d      	beq.n	8006b58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9c:	e02e      	b.n	8006afc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9e:	4b34      	ldr	r3, [pc, #208]	@ (8006b70 <xTaskResumeAll+0x120>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fc28 	bl	8006300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fc23 	bl	8006300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	2201      	movs	r2, #1
 8006ac0:	409a      	lsls	r2, r3
 8006ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b74 <xTaskResumeAll+0x124>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b74 <xTaskResumeAll+0x124>)
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a27      	ldr	r2, [pc, #156]	@ (8006b78 <xTaskResumeAll+0x128>)
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7ff fbaf 	bl	8006246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aec:	4b23      	ldr	r3, [pc, #140]	@ (8006b7c <xTaskResumeAll+0x12c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006af6:	4b22      	ldr	r3, [pc, #136]	@ (8006b80 <xTaskResumeAll+0x130>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006afc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <xTaskResumeAll+0x120>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1cc      	bne.n	8006a9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b0a:	f000 fa6f 	bl	8006fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <xTaskResumeAll+0x134>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b1a:	f000 f837 	bl	8006b8c <xTaskIncrementTick>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b24:	4b16      	ldr	r3, [pc, #88]	@ (8006b80 <xTaskResumeAll+0x130>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b36:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <xTaskResumeAll+0x134>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b3c:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <xTaskResumeAll+0x130>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b48:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <xTaskResumeAll+0x138>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b58:	f000 fc30 	bl	80073bc <vPortExitCritical>

	return xAlreadyYielded;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	200009f8 	.word	0x200009f8
 8006b6c:	200009d0 	.word	0x200009d0
 8006b70:	20000990 	.word	0x20000990
 8006b74:	200009d8 	.word	0x200009d8
 8006b78:	200008d4 	.word	0x200008d4
 8006b7c:	200008d0 	.word	0x200008d0
 8006b80:	200009e4 	.word	0x200009e4
 8006b84:	200009e0 	.word	0x200009e0
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b96:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd4 <xTaskIncrementTick+0x148>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 808f 	bne.w	8006cbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8006cd8 <xTaskIncrementTick+0x14c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8006cd8 <xTaskIncrementTick+0x14c>)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d121      	bne.n	8006bf8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bb4:	4b49      	ldr	r3, [pc, #292]	@ (8006cdc <xTaskIncrementTick+0x150>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <xTaskIncrementTick+0x46>
 8006bd6:	4b41      	ldr	r3, [pc, #260]	@ (8006cdc <xTaskIncrementTick+0x150>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	4b40      	ldr	r3, [pc, #256]	@ (8006ce0 <xTaskIncrementTick+0x154>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a3e      	ldr	r2, [pc, #248]	@ (8006cdc <xTaskIncrementTick+0x150>)
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ce0 <xTaskIncrementTick+0x154>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce4 <xTaskIncrementTick+0x158>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ce4 <xTaskIncrementTick+0x158>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	f000 f9fa 	bl	8006fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <xTaskIncrementTick+0x15c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d348      	bcc.n	8006c94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c02:	4b36      	ldr	r3, [pc, #216]	@ (8006cdc <xTaskIncrementTick+0x150>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c0c:	4b36      	ldr	r3, [pc, #216]	@ (8006ce8 <xTaskIncrementTick+0x15c>)
 8006c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c12:	601a      	str	r2, [r3, #0]
					break;
 8006c14:	e03e      	b.n	8006c94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c16:	4b31      	ldr	r3, [pc, #196]	@ (8006cdc <xTaskIncrementTick+0x150>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d203      	bcs.n	8006c36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce8 <xTaskIncrementTick+0x15c>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c34:	e02e      	b.n	8006c94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fb60 	bl	8006300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	3318      	adds	r3, #24
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fb57 	bl	8006300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	2201      	movs	r2, #1
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <xTaskIncrementTick+0x160>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	4a22      	ldr	r2, [pc, #136]	@ (8006cec <xTaskIncrementTick+0x160>)
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf0 <xTaskIncrementTick+0x164>)
 8006c72:	441a      	add	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f7ff fae3 	bl	8006246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <xTaskIncrementTick+0x168>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3b9      	bcc.n	8006c02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c92:	e7b6      	b.n	8006c02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c94:	4b17      	ldr	r3, [pc, #92]	@ (8006cf4 <xTaskIncrementTick+0x168>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4915      	ldr	r1, [pc, #84]	@ (8006cf0 <xTaskIncrementTick+0x164>)
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d901      	bls.n	8006cb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cb0:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <xTaskIncrementTick+0x16c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e004      	b.n	8006cc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006cfc <xTaskIncrementTick+0x170>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8006cfc <xTaskIncrementTick+0x170>)
 8006cc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200009f8 	.word	0x200009f8
 8006cd8:	200009d4 	.word	0x200009d4
 8006cdc:	20000988 	.word	0x20000988
 8006ce0:	2000098c 	.word	0x2000098c
 8006ce4:	200009e8 	.word	0x200009e8
 8006ce8:	200009f0 	.word	0x200009f0
 8006cec:	200009d8 	.word	0x200009d8
 8006cf0:	200008d4 	.word	0x200008d4
 8006cf4:	200008d0 	.word	0x200008d0
 8006cf8:	200009e4 	.word	0x200009e4
 8006cfc:	200009e0 	.word	0x200009e0

08006d00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d06:	4b27      	ldr	r3, [pc, #156]	@ (8006da4 <vTaskSwitchContext+0xa4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d0e:	4b26      	ldr	r3, [pc, #152]	@ (8006da8 <vTaskSwitchContext+0xa8>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d14:	e040      	b.n	8006d98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006d16:	4b24      	ldr	r3, [pc, #144]	@ (8006da8 <vTaskSwitchContext+0xa8>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1c:	4b23      	ldr	r3, [pc, #140]	@ (8006dac <vTaskSwitchContext+0xac>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	fab3 f383 	clz	r3, r3
 8006d28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	f1c3 031f 	rsb	r3, r3, #31
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	491f      	ldr	r1, [pc, #124]	@ (8006db0 <vTaskSwitchContext+0xb0>)
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	607b      	str	r3, [r7, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <vTaskSwitchContext+0x5a>
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <vTaskSwitchContext+0xb0>)
 8006d6a:	4413      	add	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d104      	bne.n	8006d8e <vTaskSwitchContext+0x8e>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a07      	ldr	r2, [pc, #28]	@ (8006db4 <vTaskSwitchContext+0xb4>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	200009f8 	.word	0x200009f8
 8006da8:	200009e4 	.word	0x200009e4
 8006dac:	200009d8 	.word	0x200009d8
 8006db0:	200008d4 	.word	0x200008d4
 8006db4:	200008d0 	.word	0x200008d0

08006db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10b      	bne.n	8006de6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	60fb      	str	r3, [r7, #12]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3318      	adds	r3, #24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fa88 	bl	8006300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <xTaskRemoveFromEventList+0xb0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11c      	bne.n	8006e32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff fa7f 	bl	8006300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	2201      	movs	r2, #1
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	4b18      	ldr	r3, [pc, #96]	@ (8006e6c <xTaskRemoveFromEventList+0xb4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <xTaskRemoveFromEventList+0xb4>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a13      	ldr	r2, [pc, #76]	@ (8006e70 <xTaskRemoveFromEventList+0xb8>)
 8006e22:	441a      	add	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7ff fa0b 	bl	8006246 <vListInsertEnd>
 8006e30:	e005      	b.n	8006e3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3318      	adds	r3, #24
 8006e36:	4619      	mov	r1, r3
 8006e38:	480e      	ldr	r0, [pc, #56]	@ (8006e74 <xTaskRemoveFromEventList+0xbc>)
 8006e3a:	f7ff fa04 	bl	8006246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <xTaskRemoveFromEventList+0xc0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d905      	bls.n	8006e58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e50:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <xTaskRemoveFromEventList+0xc4>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e001      	b.n	8006e5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e5c:	697b      	ldr	r3, [r7, #20]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200009f8 	.word	0x200009f8
 8006e6c:	200009d8 	.word	0x200009d8
 8006e70:	200008d4 	.word	0x200008d4
 8006e74:	20000990 	.word	0x20000990
 8006e78:	200008d0 	.word	0x200008d0
 8006e7c:	200009e4 	.word	0x200009e4

08006e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e88:	f000 f852 	bl	8006f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ea8 <prvIdleTask+0x28>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d9f9      	bls.n	8006e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <prvIdleTask+0x2c>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ea4:	e7f0      	b.n	8006e88 <prvIdleTask+0x8>
 8006ea6:	bf00      	nop
 8006ea8:	200008d4 	.word	0x200008d4
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	e00c      	b.n	8006ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4a12      	ldr	r2, [pc, #72]	@ (8006f10 <prvInitialiseTaskLists+0x60>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff f98e 	bl	80061ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b06      	cmp	r3, #6
 8006eda:	d9ef      	bls.n	8006ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006edc:	480d      	ldr	r0, [pc, #52]	@ (8006f14 <prvInitialiseTaskLists+0x64>)
 8006ede:	f7ff f985 	bl	80061ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ee2:	480d      	ldr	r0, [pc, #52]	@ (8006f18 <prvInitialiseTaskLists+0x68>)
 8006ee4:	f7ff f982 	bl	80061ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ee8:	480c      	ldr	r0, [pc, #48]	@ (8006f1c <prvInitialiseTaskLists+0x6c>)
 8006eea:	f7ff f97f 	bl	80061ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eee:	480c      	ldr	r0, [pc, #48]	@ (8006f20 <prvInitialiseTaskLists+0x70>)
 8006ef0:	f7ff f97c 	bl	80061ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ef4:	480b      	ldr	r0, [pc, #44]	@ (8006f24 <prvInitialiseTaskLists+0x74>)
 8006ef6:	f7ff f979 	bl	80061ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <prvInitialiseTaskLists+0x78>)
 8006efc:	4a05      	ldr	r2, [pc, #20]	@ (8006f14 <prvInitialiseTaskLists+0x64>)
 8006efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f00:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <prvInitialiseTaskLists+0x7c>)
 8006f02:	4a05      	ldr	r2, [pc, #20]	@ (8006f18 <prvInitialiseTaskLists+0x68>)
 8006f04:	601a      	str	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200008d4 	.word	0x200008d4
 8006f14:	20000960 	.word	0x20000960
 8006f18:	20000974 	.word	0x20000974
 8006f1c:	20000990 	.word	0x20000990
 8006f20:	200009a4 	.word	0x200009a4
 8006f24:	200009bc 	.word	0x200009bc
 8006f28:	20000988 	.word	0x20000988
 8006f2c:	2000098c 	.word	0x2000098c

08006f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f36:	e019      	b.n	8006f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f38:	f000 fa0e 	bl	8007358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3c:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <prvCheckTasksWaitingTermination+0x50>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff f9d9 	bl	8006300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <prvCheckTasksWaitingTermination+0x54>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <prvCheckTasksWaitingTermination+0x54>)
 8006f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f58:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <prvCheckTasksWaitingTermination+0x58>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f88 <prvCheckTasksWaitingTermination+0x58>)
 8006f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f62:	f000 fa2b 	bl	80073bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f810 	bl	8006f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f6c:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <prvCheckTasksWaitingTermination+0x58>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e1      	bne.n	8006f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200009a4 	.word	0x200009a4
 8006f84:	200009d0 	.word	0x200009d0
 8006f88:	200009b8 	.word	0x200009b8

08006f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d108      	bne.n	8006fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fb86 	bl	80076b4 <vPortFree>
				vPortFree( pxTCB );
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb83 	bl	80076b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fae:	e019      	b.n	8006fe4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d103      	bne.n	8006fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb7a 	bl	80076b4 <vPortFree>
	}
 8006fc0:	e010      	b.n	8006fe4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d00b      	beq.n	8006fe4 <prvDeleteTCB+0x58>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <prvDeleteTCB+0x54>
	}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <prvResetNextTaskUnblockTime+0x38>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <prvResetNextTaskUnblockTime+0x3c>)
 8006ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8007002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007004:	e008      	b.n	8007018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007006:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <prvResetNextTaskUnblockTime+0x38>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a04      	ldr	r2, [pc, #16]	@ (8007028 <prvResetNextTaskUnblockTime+0x3c>)
 8007016:	6013      	str	r3, [r2, #0]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000988 	.word	0x20000988
 8007028:	200009f0 	.word	0x200009f0

0800702c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007036:	4b29      	ldr	r3, [pc, #164]	@ (80070dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703c:	4b28      	ldr	r3, [pc, #160]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3304      	adds	r3, #4
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f95c 	bl	8006300 <uxListRemove>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800704e:	4b24      	ldr	r3, [pc, #144]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	4b21      	ldr	r3, [pc, #132]	@ (80070e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4013      	ands	r3, r2
 8007062:	4a20      	ldr	r2, [pc, #128]	@ (80070e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007064:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d10a      	bne.n	8007084 <prvAddCurrentTaskToDelayedList+0x58>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	481a      	ldr	r0, [pc, #104]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800707e:	f7ff f8e2 	bl	8006246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007082:	e026      	b.n	80070d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800708c:	4b14      	ldr	r3, [pc, #80]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	429a      	cmp	r2, r3
 800709a:	d209      	bcs.n	80070b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800709c:	4b13      	ldr	r3, [pc, #76]	@ (80070ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7ff f8f0 	bl	800628e <vListInsert>
}
 80070ae:	e010      	b.n	80070d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b0:	4b0f      	ldr	r3, [pc, #60]	@ (80070f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7ff f8e6 	bl	800628e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070c2:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d202      	bcs.n	80070d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070cc:	4a09      	ldr	r2, [pc, #36]	@ (80070f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6013      	str	r3, [r2, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200009d4 	.word	0x200009d4
 80070e0:	200008d0 	.word	0x200008d0
 80070e4:	200009d8 	.word	0x200009d8
 80070e8:	200009bc 	.word	0x200009bc
 80070ec:	2000098c 	.word	0x2000098c
 80070f0:	20000988 	.word	0x20000988
 80070f4:	200009f0 	.word	0x200009f0

080070f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3b04      	subs	r3, #4
 8007108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3b04      	subs	r3, #4
 8007116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f023 0201 	bic.w	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3b04      	subs	r3, #4
 8007126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007128:	4a0c      	ldr	r2, [pc, #48]	@ (800715c <pxPortInitialiseStack+0x64>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3b14      	subs	r3, #20
 8007132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3b04      	subs	r3, #4
 800713e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b20      	subs	r3, #32
 800714c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	08007161 	.word	0x08007161

08007160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800716a:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <prvTaskExitError+0x58>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d00b      	beq.n	800718c <prvTaskExitError+0x2c>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60fb      	str	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <prvTaskExitError+0x28>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60bb      	str	r3, [r7, #8]
}
 800719e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071a0:	bf00      	nop
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0fc      	beq.n	80071a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000014 	.word	0x20000014
 80071bc:	00000000 	.word	0x00000000

080071c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071c0:	4b07      	ldr	r3, [pc, #28]	@ (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071e8:	4808      	ldr	r0, [pc, #32]	@ (800720c <prvPortStartFirstTask+0x24>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f380 8808 	msr	MSP, r0
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8814 	msr	CONTROL, r0
 80071fa:	b662      	cpsie	i
 80071fc:	b661      	cpsie	f
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	df00      	svc	0
 8007208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800720a:	bf00      	nop
 800720c:	e000ed08 	.word	0xe000ed08

08007210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007216:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <xPortStartScheduler+0x124>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a47      	ldr	r2, [pc, #284]	@ (8007338 <xPortStartScheduler+0x128>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10b      	bne.n	8007238 <xPortStartScheduler+0x28>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007238:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <xPortStartScheduler+0x124>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a3f      	ldr	r2, [pc, #252]	@ (800733c <xPortStartScheduler+0x12c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10b      	bne.n	800725a <xPortStartScheduler+0x4a>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	613b      	str	r3, [r7, #16]
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	e7fd      	b.n	8007256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800725a:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <xPortStartScheduler+0x130>)
 800725c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	22ff      	movs	r2, #255	@ 0xff
 800726a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800727c:	b2da      	uxtb	r2, r3
 800727e:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <xPortStartScheduler+0x134>)
 8007280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007282:	4b31      	ldr	r3, [pc, #196]	@ (8007348 <xPortStartScheduler+0x138>)
 8007284:	2207      	movs	r2, #7
 8007286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007288:	e009      	b.n	800729e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800728a:	4b2f      	ldr	r3, [pc, #188]	@ (8007348 <xPortStartScheduler+0x138>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3b01      	subs	r3, #1
 8007290:	4a2d      	ldr	r2, [pc, #180]	@ (8007348 <xPortStartScheduler+0x138>)
 8007292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	b2db      	uxtb	r3, r3
 800729c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a6:	2b80      	cmp	r3, #128	@ 0x80
 80072a8:	d0ef      	beq.n	800728a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072aa:	4b27      	ldr	r3, [pc, #156]	@ (8007348 <xPortStartScheduler+0x138>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1c3 0307 	rsb	r3, r3, #7
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d00b      	beq.n	80072ce <xPortStartScheduler+0xbe>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60bb      	str	r3, [r7, #8]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007348 <xPortStartScheduler+0x138>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <xPortStartScheduler+0x138>)
 80072d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007348 <xPortStartScheduler+0x138>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072e0:	4a19      	ldr	r2, [pc, #100]	@ (8007348 <xPortStartScheduler+0x138>)
 80072e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072ec:	4b17      	ldr	r3, [pc, #92]	@ (800734c <xPortStartScheduler+0x13c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	@ (800734c <xPortStartScheduler+0x13c>)
 80072f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072f8:	4b14      	ldr	r3, [pc, #80]	@ (800734c <xPortStartScheduler+0x13c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a13      	ldr	r2, [pc, #76]	@ (800734c <xPortStartScheduler+0x13c>)
 80072fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007304:	f000 f8da 	bl	80074bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007308:	4b11      	ldr	r3, [pc, #68]	@ (8007350 <xPortStartScheduler+0x140>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800730e:	f000 f8f9 	bl	8007504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007312:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <xPortStartScheduler+0x144>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a0f      	ldr	r2, [pc, #60]	@ (8007354 <xPortStartScheduler+0x144>)
 8007318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800731c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800731e:	f7ff ff63 	bl	80071e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007322:	f7ff fced 	bl	8006d00 <vTaskSwitchContext>
	prvTaskExitError();
 8007326:	f7ff ff1b 	bl	8007160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed00 	.word	0xe000ed00
 8007338:	410fc271 	.word	0x410fc271
 800733c:	410fc270 	.word	0x410fc270
 8007340:	e000e400 	.word	0xe000e400
 8007344:	200009fc 	.word	0x200009fc
 8007348:	20000a00 	.word	0x20000a00
 800734c:	e000ed20 	.word	0xe000ed20
 8007350:	20000014 	.word	0x20000014
 8007354:	e000ef34 	.word	0xe000ef34

08007358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
}
 8007370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007372:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <vPortEnterCritical+0x5c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3301      	adds	r3, #1
 8007378:	4a0e      	ldr	r2, [pc, #56]	@ (80073b4 <vPortEnterCritical+0x5c>)
 800737a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800737c:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <vPortEnterCritical+0x5c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d110      	bne.n	80073a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007384:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <vPortEnterCritical+0x60>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	603b      	str	r3, [r7, #0]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <vPortEnterCritical+0x4a>
	}
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000014 	.word	0x20000014
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073c2:	4b12      	ldr	r3, [pc, #72]	@ (800740c <vPortExitCritical+0x50>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <vPortExitCritical+0x26>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	607b      	str	r3, [r7, #4]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <vPortExitCritical+0x50>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4a08      	ldr	r2, [pc, #32]	@ (800740c <vPortExitCritical+0x50>)
 80073ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073ec:	4b07      	ldr	r3, [pc, #28]	@ (800740c <vPortExitCritical+0x50>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <vPortExitCritical+0x44>
 80073f4:	2300      	movs	r3, #0
 80073f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000014 	.word	0x20000014

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f01e 0f10 	tst.w	lr, #16
 8007420:	bf08      	it	eq
 8007422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	6010      	str	r0, [r2, #0]
 800742c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007434:	f380 8811 	msr	BASEPRI, r0
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f7ff fc5e 	bl	8006d00 <vTaskSwitchContext>
 8007444:	f04f 0000 	mov.w	r0, #0
 8007448:	f380 8811 	msr	BASEPRI, r0
 800744c:	bc09      	pop	{r0, r3}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	f01e 0f10 	tst.w	lr, #16
 800745a:	bf08      	it	eq
 800745c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007460:	f380 8809 	msr	PSP, r0
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst>:
 8007470:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007492:	f7ff fb7b 	bl	8006b8c <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <SysTick_Handler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	@ (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	4a09      	ldr	r2, [pc, #36]	@ (8007500 <vPortSetupTimerInterrupt+0x44>)
 80074da:	3b01      	subs	r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074de:	4b04      	ldr	r3, [pc, #16]	@ (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010
 80074f4:	e000e018 	.word	0xe000e018
 80074f8:	20000008 	.word	0x20000008
 80074fc:	10624dd3 	.word	0x10624dd3
 8007500:	e000e014 	.word	0xe000e014

08007504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007514 <vPortEnableVFP+0x10>
 8007508:	6801      	ldr	r1, [r0, #0]
 800750a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800750e:	6001      	str	r1, [r0, #0]
 8007510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007512:	bf00      	nop
 8007514:	e000ed88 	.word	0xe000ed88

08007518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	@ 0x28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007524:	f7ff fa86 	bl	8006a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007528:	4b5c      	ldr	r3, [pc, #368]	@ (800769c <pvPortMalloc+0x184>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007530:	f000 f924 	bl	800777c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007534:	4b5a      	ldr	r3, [pc, #360]	@ (80076a0 <pvPortMalloc+0x188>)
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 8095 	bne.w	800766c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01e      	beq.n	8007586 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007548:	2208      	movs	r2, #8
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d015      	beq.n	8007586 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f023 0307 	bic.w	r3, r3, #7
 8007560:	3308      	adds	r3, #8
 8007562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <pvPortMalloc+0x6e>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	617b      	str	r3, [r7, #20]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d06f      	beq.n	800766c <pvPortMalloc+0x154>
 800758c:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <pvPortMalloc+0x18c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d86a      	bhi.n	800766c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007596:	4b44      	ldr	r3, [pc, #272]	@ (80076a8 <pvPortMalloc+0x190>)
 8007598:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800759a:	4b43      	ldr	r3, [pc, #268]	@ (80076a8 <pvPortMalloc+0x190>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a0:	e004      	b.n	80075ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <pvPortMalloc+0xa6>
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f1      	bne.n	80075a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075be:	4b37      	ldr	r3, [pc, #220]	@ (800769c <pvPortMalloc+0x184>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d051      	beq.n	800766c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2208      	movs	r2, #8
 80075ce:	4413      	add	r3, r2
 80075d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	1ad2      	subs	r2, r2, r3
 80075e2:	2308      	movs	r3, #8
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d920      	bls.n	800762c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4413      	add	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <pvPortMalloc+0xfc>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	613b      	str	r3, [r7, #16]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	1ad2      	subs	r2, r2, r3
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007626:	69b8      	ldr	r0, [r7, #24]
 8007628:	f000 f90a 	bl	8007840 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800762c:	4b1d      	ldr	r3, [pc, #116]	@ (80076a4 <pvPortMalloc+0x18c>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <pvPortMalloc+0x18c>)
 8007638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800763a:	4b1a      	ldr	r3, [pc, #104]	@ (80076a4 <pvPortMalloc+0x18c>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <pvPortMalloc+0x194>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d203      	bcs.n	800764e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007646:	4b17      	ldr	r3, [pc, #92]	@ (80076a4 <pvPortMalloc+0x18c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <pvPortMalloc+0x194>)
 800764c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4b13      	ldr	r3, [pc, #76]	@ (80076a0 <pvPortMalloc+0x188>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	431a      	orrs	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007662:	4b13      	ldr	r3, [pc, #76]	@ (80076b0 <pvPortMalloc+0x198>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a11      	ldr	r2, [pc, #68]	@ (80076b0 <pvPortMalloc+0x198>)
 800766a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800766c:	f7ff f9f0 	bl	8006a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <pvPortMalloc+0x17a>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60fb      	str	r3, [r7, #12]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <pvPortMalloc+0x176>
	return pvReturn;
 8007692:	69fb      	ldr	r3, [r7, #28]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	@ 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200015c4 	.word	0x200015c4
 80076a0:	200015d8 	.word	0x200015d8
 80076a4:	200015c8 	.word	0x200015c8
 80076a8:	200015bc 	.word	0x200015bc
 80076ac:	200015cc 	.word	0x200015cc
 80076b0:	200015d0 	.word	0x200015d0

080076b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04f      	beq.n	8007766 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076c6:	2308      	movs	r3, #8
 80076c8:	425b      	negs	r3, r3
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4413      	add	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	4b25      	ldr	r3, [pc, #148]	@ (8007770 <vPortFree+0xbc>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4013      	ands	r3, r2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <vPortFree+0x46>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <vPortFree+0x66>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60bb      	str	r3, [r7, #8]
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	e7fd      	b.n	8007716 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	4b14      	ldr	r3, [pc, #80]	@ (8007770 <vPortFree+0xbc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01e      	beq.n	8007766 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d11a      	bne.n	8007766 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	4b0e      	ldr	r3, [pc, #56]	@ (8007770 <vPortFree+0xbc>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	43db      	mvns	r3, r3
 800773a:	401a      	ands	r2, r3
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007740:	f7ff f978 	bl	8006a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <vPortFree+0xc0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4413      	add	r3, r2
 800774e:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <vPortFree+0xc0>)
 8007750:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007752:	6938      	ldr	r0, [r7, #16]
 8007754:	f000 f874 	bl	8007840 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007758:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <vPortFree+0xc4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	4a06      	ldr	r2, [pc, #24]	@ (8007778 <vPortFree+0xc4>)
 8007760:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007762:	f7ff f975 	bl	8006a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200015d8 	.word	0x200015d8
 8007774:	200015c8 	.word	0x200015c8
 8007778:	200015d4 	.word	0x200015d4

0800777c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007782:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007786:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007788:	4b27      	ldr	r3, [pc, #156]	@ (8007828 <prvHeapInit+0xac>)
 800778a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3307      	adds	r3, #7
 800779a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007828 <prvHeapInit+0xac>)
 80077ac:	4413      	add	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077b4:	4a1d      	ldr	r2, [pc, #116]	@ (800782c <prvHeapInit+0xb0>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ba:	4b1c      	ldr	r3, [pc, #112]	@ (800782c <prvHeapInit+0xb0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4413      	add	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077c8:	2208      	movs	r2, #8
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4a15      	ldr	r2, [pc, #84]	@ (8007830 <prvHeapInit+0xb4>)
 80077dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077de:	4b14      	ldr	r3, [pc, #80]	@ (8007830 <prvHeapInit+0xb4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2200      	movs	r2, #0
 80077e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077e6:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <prvHeapInit+0xb4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	1ad2      	subs	r2, r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007830 <prvHeapInit+0xb4>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <prvHeapInit+0xb8>)
 800780a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	4a09      	ldr	r2, [pc, #36]	@ (8007838 <prvHeapInit+0xbc>)
 8007812:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007814:	4b09      	ldr	r3, [pc, #36]	@ (800783c <prvHeapInit+0xc0>)
 8007816:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20000a04 	.word	0x20000a04
 800782c:	200015bc 	.word	0x200015bc
 8007830:	200015c4 	.word	0x200015c4
 8007834:	200015cc 	.word	0x200015cc
 8007838:	200015c8 	.word	0x200015c8
 800783c:	200015d8 	.word	0x200015d8

08007840 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007848:	4b28      	ldr	r3, [pc, #160]	@ (80078ec <prvInsertBlockIntoFreeList+0xac>)
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e002      	b.n	8007854 <prvInsertBlockIntoFreeList+0x14>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d8f7      	bhi.n	800784e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4413      	add	r3, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d108      	bne.n	8007882 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	441a      	add	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d118      	bne.n	80078c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <prvInsertBlockIntoFreeList+0xb0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d00d      	beq.n	80078be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	441a      	add	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e008      	b.n	80078d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078be:	4b0c      	ldr	r3, [pc, #48]	@ (80078f0 <prvInsertBlockIntoFreeList+0xb0>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d002      	beq.n	80078de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	200015bc 	.word	0x200015bc
 80078f0:	200015c4 	.word	0x200015c4

080078f4 <std>:
 80078f4:	2300      	movs	r3, #0
 80078f6:	b510      	push	{r4, lr}
 80078f8:	4604      	mov	r4, r0
 80078fa:	e9c0 3300 	strd	r3, r3, [r0]
 80078fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007902:	6083      	str	r3, [r0, #8]
 8007904:	8181      	strh	r1, [r0, #12]
 8007906:	6643      	str	r3, [r0, #100]	@ 0x64
 8007908:	81c2      	strh	r2, [r0, #14]
 800790a:	6183      	str	r3, [r0, #24]
 800790c:	4619      	mov	r1, r3
 800790e:	2208      	movs	r2, #8
 8007910:	305c      	adds	r0, #92	@ 0x5c
 8007912:	f000 fa01 	bl	8007d18 <memset>
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x58>)
 8007918:	6263      	str	r3, [r4, #36]	@ 0x24
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <std+0x5c>)
 800791c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <std+0x60>)
 8007920:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007922:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <std+0x64>)
 8007924:	6323      	str	r3, [r4, #48]	@ 0x30
 8007926:	4b0d      	ldr	r3, [pc, #52]	@ (800795c <std+0x68>)
 8007928:	6224      	str	r4, [r4, #32]
 800792a:	429c      	cmp	r4, r3
 800792c:	d006      	beq.n	800793c <std+0x48>
 800792e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007932:	4294      	cmp	r4, r2
 8007934:	d002      	beq.n	800793c <std+0x48>
 8007936:	33d0      	adds	r3, #208	@ 0xd0
 8007938:	429c      	cmp	r4, r3
 800793a:	d105      	bne.n	8007948 <std+0x54>
 800793c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007944:	f000 ba60 	b.w	8007e08 <__retarget_lock_init_recursive>
 8007948:	bd10      	pop	{r4, pc}
 800794a:	bf00      	nop
 800794c:	08007b69 	.word	0x08007b69
 8007950:	08007b8b 	.word	0x08007b8b
 8007954:	08007bc3 	.word	0x08007bc3
 8007958:	08007be7 	.word	0x08007be7
 800795c:	200015dc 	.word	0x200015dc

08007960 <stdio_exit_handler>:
 8007960:	4a02      	ldr	r2, [pc, #8]	@ (800796c <stdio_exit_handler+0xc>)
 8007962:	4903      	ldr	r1, [pc, #12]	@ (8007970 <stdio_exit_handler+0x10>)
 8007964:	4803      	ldr	r0, [pc, #12]	@ (8007974 <stdio_exit_handler+0x14>)
 8007966:	f000 b869 	b.w	8007a3c <_fwalk_sglue>
 800796a:	bf00      	nop
 800796c:	20000018 	.word	0x20000018
 8007970:	080086a5 	.word	0x080086a5
 8007974:	20000028 	.word	0x20000028

08007978 <cleanup_stdio>:
 8007978:	6841      	ldr	r1, [r0, #4]
 800797a:	4b0c      	ldr	r3, [pc, #48]	@ (80079ac <cleanup_stdio+0x34>)
 800797c:	4299      	cmp	r1, r3
 800797e:	b510      	push	{r4, lr}
 8007980:	4604      	mov	r4, r0
 8007982:	d001      	beq.n	8007988 <cleanup_stdio+0x10>
 8007984:	f000 fe8e 	bl	80086a4 <_fflush_r>
 8007988:	68a1      	ldr	r1, [r4, #8]
 800798a:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <cleanup_stdio+0x38>)
 800798c:	4299      	cmp	r1, r3
 800798e:	d002      	beq.n	8007996 <cleanup_stdio+0x1e>
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fe87 	bl	80086a4 <_fflush_r>
 8007996:	68e1      	ldr	r1, [r4, #12]
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <cleanup_stdio+0x3c>)
 800799a:	4299      	cmp	r1, r3
 800799c:	d004      	beq.n	80079a8 <cleanup_stdio+0x30>
 800799e:	4620      	mov	r0, r4
 80079a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a4:	f000 be7e 	b.w	80086a4 <_fflush_r>
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	200015dc 	.word	0x200015dc
 80079b0:	20001644 	.word	0x20001644
 80079b4:	200016ac 	.word	0x200016ac

080079b8 <global_stdio_init.part.0>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <global_stdio_init.part.0+0x30>)
 80079bc:	4c0b      	ldr	r4, [pc, #44]	@ (80079ec <global_stdio_init.part.0+0x34>)
 80079be:	4a0c      	ldr	r2, [pc, #48]	@ (80079f0 <global_stdio_init.part.0+0x38>)
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	4620      	mov	r0, r4
 80079c4:	2200      	movs	r2, #0
 80079c6:	2104      	movs	r1, #4
 80079c8:	f7ff ff94 	bl	80078f4 <std>
 80079cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079d0:	2201      	movs	r2, #1
 80079d2:	2109      	movs	r1, #9
 80079d4:	f7ff ff8e 	bl	80078f4 <std>
 80079d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079dc:	2202      	movs	r2, #2
 80079de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e2:	2112      	movs	r1, #18
 80079e4:	f7ff bf86 	b.w	80078f4 <std>
 80079e8:	20001714 	.word	0x20001714
 80079ec:	200015dc 	.word	0x200015dc
 80079f0:	08007961 	.word	0x08007961

080079f4 <__sfp_lock_acquire>:
 80079f4:	4801      	ldr	r0, [pc, #4]	@ (80079fc <__sfp_lock_acquire+0x8>)
 80079f6:	f000 ba08 	b.w	8007e0a <__retarget_lock_acquire_recursive>
 80079fa:	bf00      	nop
 80079fc:	2000171d 	.word	0x2000171d

08007a00 <__sfp_lock_release>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__sfp_lock_release+0x8>)
 8007a02:	f000 ba03 	b.w	8007e0c <__retarget_lock_release_recursive>
 8007a06:	bf00      	nop
 8007a08:	2000171d 	.word	0x2000171d

08007a0c <__sinit>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4604      	mov	r4, r0
 8007a10:	f7ff fff0 	bl	80079f4 <__sfp_lock_acquire>
 8007a14:	6a23      	ldr	r3, [r4, #32]
 8007a16:	b11b      	cbz	r3, 8007a20 <__sinit+0x14>
 8007a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1c:	f7ff bff0 	b.w	8007a00 <__sfp_lock_release>
 8007a20:	4b04      	ldr	r3, [pc, #16]	@ (8007a34 <__sinit+0x28>)
 8007a22:	6223      	str	r3, [r4, #32]
 8007a24:	4b04      	ldr	r3, [pc, #16]	@ (8007a38 <__sinit+0x2c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f5      	bne.n	8007a18 <__sinit+0xc>
 8007a2c:	f7ff ffc4 	bl	80079b8 <global_stdio_init.part.0>
 8007a30:	e7f2      	b.n	8007a18 <__sinit+0xc>
 8007a32:	bf00      	nop
 8007a34:	08007979 	.word	0x08007979
 8007a38:	20001714 	.word	0x20001714

08007a3c <_fwalk_sglue>:
 8007a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a40:	4607      	mov	r7, r0
 8007a42:	4688      	mov	r8, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	2600      	movs	r6, #0
 8007a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a50:	d505      	bpl.n	8007a5e <_fwalk_sglue+0x22>
 8007a52:	6824      	ldr	r4, [r4, #0]
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	d1f7      	bne.n	8007a48 <_fwalk_sglue+0xc>
 8007a58:	4630      	mov	r0, r6
 8007a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d907      	bls.n	8007a74 <_fwalk_sglue+0x38>
 8007a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	d003      	beq.n	8007a74 <_fwalk_sglue+0x38>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c0      	blx	r8
 8007a72:	4306      	orrs	r6, r0
 8007a74:	3568      	adds	r5, #104	@ 0x68
 8007a76:	e7e9      	b.n	8007a4c <_fwalk_sglue+0x10>

08007a78 <iprintf>:
 8007a78:	b40f      	push	{r0, r1, r2, r3}
 8007a7a:	b507      	push	{r0, r1, r2, lr}
 8007a7c:	4906      	ldr	r1, [pc, #24]	@ (8007a98 <iprintf+0x20>)
 8007a7e:	ab04      	add	r3, sp, #16
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a86:	6881      	ldr	r1, [r0, #8]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	f000 fae3 	bl	8008054 <_vfiprintf_r>
 8007a8e:	b003      	add	sp, #12
 8007a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a94:	b004      	add	sp, #16
 8007a96:	4770      	bx	lr
 8007a98:	20000024 	.word	0x20000024

08007a9c <putchar>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	@ (8007aa8 <putchar+0xc>)
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	6882      	ldr	r2, [r0, #8]
 8007aa4:	f000 be88 	b.w	80087b8 <_putc_r>
 8007aa8:	20000024 	.word	0x20000024

08007aac <_puts_r>:
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b570      	push	{r4, r5, r6, lr}
 8007ab0:	6884      	ldr	r4, [r0, #8]
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	460e      	mov	r6, r1
 8007ab6:	b90b      	cbnz	r3, 8007abc <_puts_r+0x10>
 8007ab8:	f7ff ffa8 	bl	8007a0c <__sinit>
 8007abc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d405      	bmi.n	8007ace <_puts_r+0x22>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	0598      	lsls	r0, r3, #22
 8007ac6:	d402      	bmi.n	8007ace <_puts_r+0x22>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aca:	f000 f99e 	bl	8007e0a <__retarget_lock_acquire_recursive>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	0719      	lsls	r1, r3, #28
 8007ad2:	d502      	bpl.n	8007ada <_puts_r+0x2e>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d135      	bne.n	8007b46 <_puts_r+0x9a>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4628      	mov	r0, r5
 8007ade:	f000 f8c5 	bl	8007c6c <__swsetup_r>
 8007ae2:	b380      	cbz	r0, 8007b46 <_puts_r+0x9a>
 8007ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aea:	07da      	lsls	r2, r3, #31
 8007aec:	d405      	bmi.n	8007afa <_puts_r+0x4e>
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	059b      	lsls	r3, r3, #22
 8007af2:	d402      	bmi.n	8007afa <_puts_r+0x4e>
 8007af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af6:	f000 f989 	bl	8007e0c <__retarget_lock_release_recursive>
 8007afa:	4628      	mov	r0, r5
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da04      	bge.n	8007b0c <_puts_r+0x60>
 8007b02:	69a2      	ldr	r2, [r4, #24]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	dc17      	bgt.n	8007b38 <_puts_r+0x8c>
 8007b08:	290a      	cmp	r1, #10
 8007b0a:	d015      	beq.n	8007b38 <_puts_r+0x8c>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	7019      	strb	r1, [r3, #0]
 8007b14:	68a3      	ldr	r3, [r4, #8]
 8007b16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60a3      	str	r3, [r4, #8]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d1ed      	bne.n	8007afe <_puts_r+0x52>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da11      	bge.n	8007b4a <_puts_r+0x9e>
 8007b26:	4622      	mov	r2, r4
 8007b28:	210a      	movs	r1, #10
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f85f 	bl	8007bee <__swbuf_r>
 8007b30:	3001      	adds	r0, #1
 8007b32:	d0d7      	beq.n	8007ae4 <_puts_r+0x38>
 8007b34:	250a      	movs	r5, #10
 8007b36:	e7d7      	b.n	8007ae8 <_puts_r+0x3c>
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f857 	bl	8007bee <__swbuf_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d1e7      	bne.n	8007b14 <_puts_r+0x68>
 8007b44:	e7ce      	b.n	8007ae4 <_puts_r+0x38>
 8007b46:	3e01      	subs	r6, #1
 8007b48:	e7e4      	b.n	8007b14 <_puts_r+0x68>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	220a      	movs	r2, #10
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e7ee      	b.n	8007b34 <_puts_r+0x88>
	...

08007b58 <puts>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	@ (8007b64 <puts+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f7ff bfa5 	b.w	8007aac <_puts_r>
 8007b62:	bf00      	nop
 8007b64:	20000024 	.word	0x20000024

08007b68 <__sread>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	f000 f8fc 	bl	8007d6c <_read_r>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	bfab      	itete	ge
 8007b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b7c:	181b      	addge	r3, r3, r0
 8007b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b82:	bfac      	ite	ge
 8007b84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b86:	81a3      	strhlt	r3, [r4, #12]
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__swrite>:
 8007b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	461f      	mov	r7, r3
 8007b90:	898b      	ldrh	r3, [r1, #12]
 8007b92:	05db      	lsls	r3, r3, #23
 8007b94:	4605      	mov	r5, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4616      	mov	r6, r2
 8007b9a:	d505      	bpl.n	8007ba8 <__swrite+0x1e>
 8007b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f000 f8d0 	bl	8007d48 <_lseek_r>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	4628      	mov	r0, r5
 8007bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	f000 b8e7 	b.w	8007d90 <_write_r>

08007bc2 <__sseek>:
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bca:	f000 f8bd 	bl	8007d48 <_lseek_r>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	bf15      	itete	ne
 8007bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bde:	81a3      	strheq	r3, [r4, #12]
 8007be0:	bf18      	it	ne
 8007be2:	81a3      	strhne	r3, [r4, #12]
 8007be4:	bd10      	pop	{r4, pc}

08007be6 <__sclose>:
 8007be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bea:	f000 b89d 	b.w	8007d28 <_close_r>

08007bee <__swbuf_r>:
 8007bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf0:	460e      	mov	r6, r1
 8007bf2:	4614      	mov	r4, r2
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	b118      	cbz	r0, 8007c00 <__swbuf_r+0x12>
 8007bf8:	6a03      	ldr	r3, [r0, #32]
 8007bfa:	b90b      	cbnz	r3, 8007c00 <__swbuf_r+0x12>
 8007bfc:	f7ff ff06 	bl	8007a0c <__sinit>
 8007c00:	69a3      	ldr	r3, [r4, #24]
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	071a      	lsls	r2, r3, #28
 8007c08:	d501      	bpl.n	8007c0e <__swbuf_r+0x20>
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	b943      	cbnz	r3, 8007c20 <__swbuf_r+0x32>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 f82b 	bl	8007c6c <__swsetup_r>
 8007c16:	b118      	cbz	r0, 8007c20 <__swbuf_r+0x32>
 8007c18:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	6922      	ldr	r2, [r4, #16]
 8007c24:	1a98      	subs	r0, r3, r2
 8007c26:	6963      	ldr	r3, [r4, #20]
 8007c28:	b2f6      	uxtb	r6, r6
 8007c2a:	4283      	cmp	r3, r0
 8007c2c:	4637      	mov	r7, r6
 8007c2e:	dc05      	bgt.n	8007c3c <__swbuf_r+0x4e>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 fd36 	bl	80086a4 <_fflush_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d1ed      	bne.n	8007c18 <__swbuf_r+0x2a>
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	701e      	strb	r6, [r3, #0]
 8007c4a:	6962      	ldr	r2, [r4, #20]
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d004      	beq.n	8007c5c <__swbuf_r+0x6e>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	07db      	lsls	r3, r3, #31
 8007c56:	d5e1      	bpl.n	8007c1c <__swbuf_r+0x2e>
 8007c58:	2e0a      	cmp	r6, #10
 8007c5a:	d1df      	bne.n	8007c1c <__swbuf_r+0x2e>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fd20 	bl	80086a4 <_fflush_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0d9      	beq.n	8007c1c <__swbuf_r+0x2e>
 8007c68:	e7d6      	b.n	8007c18 <__swbuf_r+0x2a>
	...

08007c6c <__swsetup_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <__swsetup_r+0xa8>)
 8007c70:	4605      	mov	r5, r0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	460c      	mov	r4, r1
 8007c76:	b118      	cbz	r0, 8007c80 <__swsetup_r+0x14>
 8007c78:	6a03      	ldr	r3, [r0, #32]
 8007c7a:	b90b      	cbnz	r3, 8007c80 <__swsetup_r+0x14>
 8007c7c:	f7ff fec6 	bl	8007a0c <__sinit>
 8007c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c84:	0719      	lsls	r1, r3, #28
 8007c86:	d422      	bmi.n	8007cce <__swsetup_r+0x62>
 8007c88:	06da      	lsls	r2, r3, #27
 8007c8a:	d407      	bmi.n	8007c9c <__swsetup_r+0x30>
 8007c8c:	2209      	movs	r2, #9
 8007c8e:	602a      	str	r2, [r5, #0]
 8007c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9a:	e033      	b.n	8007d04 <__swsetup_r+0x98>
 8007c9c:	0758      	lsls	r0, r3, #29
 8007c9e:	d512      	bpl.n	8007cc6 <__swsetup_r+0x5a>
 8007ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca2:	b141      	cbz	r1, 8007cb6 <__swsetup_r+0x4a>
 8007ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <__swsetup_r+0x46>
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 f8af 	bl	8007e10 <_free_r>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	b94b      	cbnz	r3, 8007ce6 <__swsetup_r+0x7a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cdc:	d003      	beq.n	8007ce6 <__swsetup_r+0x7a>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 fd2d 	bl	8008740 <__smakebuf_r>
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	f013 0201 	ands.w	r2, r3, #1
 8007cee:	d00a      	beq.n	8007d06 <__swsetup_r+0x9a>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	60a2      	str	r2, [r4, #8]
 8007cf4:	6962      	ldr	r2, [r4, #20]
 8007cf6:	4252      	negs	r2, r2
 8007cf8:	61a2      	str	r2, [r4, #24]
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	b942      	cbnz	r2, 8007d10 <__swsetup_r+0xa4>
 8007cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d02:	d1c5      	bne.n	8007c90 <__swsetup_r+0x24>
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	0799      	lsls	r1, r3, #30
 8007d08:	bf58      	it	pl
 8007d0a:	6962      	ldrpl	r2, [r4, #20]
 8007d0c:	60a2      	str	r2, [r4, #8]
 8007d0e:	e7f4      	b.n	8007cfa <__swsetup_r+0x8e>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7f7      	b.n	8007d04 <__swsetup_r+0x98>
 8007d14:	20000024 	.word	0x20000024

08007d18 <memset>:
 8007d18:	4402      	add	r2, r0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d100      	bne.n	8007d22 <memset+0xa>
 8007d20:	4770      	bx	lr
 8007d22:	f803 1b01 	strb.w	r1, [r3], #1
 8007d26:	e7f9      	b.n	8007d1c <memset+0x4>

08007d28 <_close_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4d06      	ldr	r5, [pc, #24]	@ (8007d44 <_close_r+0x1c>)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7f9 fecf 	bl	8001ad6 <_close>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_close_r+0x1a>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_close_r+0x1a>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20001718 	.word	0x20001718

08007d48 <_lseek_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	@ (8007d68 <_lseek_r+0x20>)
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7f9 fee4 	bl	8001b24 <_lseek>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_lseek_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_lseek_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20001718 	.word	0x20001718

08007d6c <_read_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d07      	ldr	r5, [pc, #28]	@ (8007d8c <_read_r+0x20>)
 8007d70:	4604      	mov	r4, r0
 8007d72:	4608      	mov	r0, r1
 8007d74:	4611      	mov	r1, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f7f9 fe72 	bl	8001a64 <_read>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_read_r+0x1e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_read_r+0x1e>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20001718 	.word	0x20001718

08007d90 <_write_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	@ (8007db0 <_write_r+0x20>)
 8007d94:	4604      	mov	r4, r0
 8007d96:	4608      	mov	r0, r1
 8007d98:	4611      	mov	r1, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	602a      	str	r2, [r5, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f7f9 fe7d 	bl	8001a9e <_write>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_write_r+0x1e>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_write_r+0x1e>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	20001718 	.word	0x20001718

08007db4 <__errno>:
 8007db4:	4b01      	ldr	r3, [pc, #4]	@ (8007dbc <__errno+0x8>)
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20000024 	.word	0x20000024

08007dc0 <__libc_init_array>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8007df8 <__libc_init_array+0x38>)
 8007dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8007dfc <__libc_init_array+0x3c>)
 8007dc6:	1b64      	subs	r4, r4, r5
 8007dc8:	10a4      	asrs	r4, r4, #2
 8007dca:	2600      	movs	r6, #0
 8007dcc:	42a6      	cmp	r6, r4
 8007dce:	d109      	bne.n	8007de4 <__libc_init_array+0x24>
 8007dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8007e00 <__libc_init_array+0x40>)
 8007dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8007e04 <__libc_init_array+0x44>)
 8007dd4:	f000 fd56 	bl	8008884 <_init>
 8007dd8:	1b64      	subs	r4, r4, r5
 8007dda:	10a4      	asrs	r4, r4, #2
 8007ddc:	2600      	movs	r6, #0
 8007dde:	42a6      	cmp	r6, r4
 8007de0:	d105      	bne.n	8007dee <__libc_init_array+0x2e>
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de8:	4798      	blx	r3
 8007dea:	3601      	adds	r6, #1
 8007dec:	e7ee      	b.n	8007dcc <__libc_init_array+0xc>
 8007dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df2:	4798      	blx	r3
 8007df4:	3601      	adds	r6, #1
 8007df6:	e7f2      	b.n	8007dde <__libc_init_array+0x1e>
 8007df8:	0800979c 	.word	0x0800979c
 8007dfc:	0800979c 	.word	0x0800979c
 8007e00:	0800979c 	.word	0x0800979c
 8007e04:	080097a0 	.word	0x080097a0

08007e08 <__retarget_lock_init_recursive>:
 8007e08:	4770      	bx	lr

08007e0a <__retarget_lock_acquire_recursive>:
 8007e0a:	4770      	bx	lr

08007e0c <__retarget_lock_release_recursive>:
 8007e0c:	4770      	bx	lr
	...

08007e10 <_free_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d041      	beq.n	8007e9c <_free_r+0x8c>
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f0c      	subs	r4, r1, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb8      	it	lt
 8007e22:	18e4      	addlt	r4, r4, r3
 8007e24:	f000 f8e0 	bl	8007fe8 <__malloc_lock>
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <_free_r+0x90>)
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x2c>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	4628      	mov	r0, r5
 8007e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e38:	f000 b8dc 	b.w	8007ff4 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x42>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	1821      	adds	r1, r4, r0
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x1e>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x4c>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x42>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1850      	adds	r0, r2, r1
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x6c>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	4401      	add	r1, r0
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x22>
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	4408      	add	r0, r1
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x22>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x74>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x22>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x22>
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20001724 	.word	0x20001724

08007ea4 <sbrk_aligned>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee4 <sbrk_aligned+0x40>)
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	b911      	cbnz	r1, 8007eb6 <sbrk_aligned+0x12>
 8007eb0:	f000 fcd8 	bl	8008864 <_sbrk_r>
 8007eb4:	6030      	str	r0, [r6, #0]
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 fcd3 	bl	8008864 <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d103      	bne.n	8007eca <sbrk_aligned+0x26>
 8007ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	1cc4      	adds	r4, r0, #3
 8007ecc:	f024 0403 	bic.w	r4, r4, #3
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d0f8      	beq.n	8007ec6 <sbrk_aligned+0x22>
 8007ed4:	1a21      	subs	r1, r4, r0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fcc4 	bl	8008864 <_sbrk_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d1f2      	bne.n	8007ec6 <sbrk_aligned+0x22>
 8007ee0:	e7ef      	b.n	8007ec2 <sbrk_aligned+0x1e>
 8007ee2:	bf00      	nop
 8007ee4:	20001720 	.word	0x20001720

08007ee8 <_malloc_r>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d904      	bls.n	8007f0e <_malloc_r+0x26>
 8007f04:	230c      	movs	r3, #12
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe4 <_malloc_r+0xfc>
 8007f12:	f000 f869 	bl	8007fe8 <__malloc_lock>
 8007f16:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1a:	461c      	mov	r4, r3
 8007f1c:	bb44      	cbnz	r4, 8007f70 <_malloc_r+0x88>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ffbf 	bl	8007ea4 <sbrk_aligned>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	4604      	mov	r4, r0
 8007f2a:	d158      	bne.n	8007fde <_malloc_r+0xf6>
 8007f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f30:	4627      	mov	r7, r4
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d143      	bne.n	8007fbe <_malloc_r+0xd6>
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d04b      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	eb04 0903 	add.w	r9, r4, r3
 8007f44:	f000 fc8e 	bl	8008864 <_sbrk_r>
 8007f48:	4581      	cmp	r9, r0
 8007f4a:	d142      	bne.n	8007fd2 <_malloc_r+0xea>
 8007f4c:	6821      	ldr	r1, [r4, #0]
 8007f4e:	1a6d      	subs	r5, r5, r1
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa6 	bl	8007ea4 <sbrk_aligned>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d03a      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	442b      	add	r3, r5
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f8d8 3000 	ldr.w	r3, [r8]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	bb62      	cbnz	r2, 8007fc4 <_malloc_r+0xdc>
 8007f6a:	f8c8 7000 	str.w	r7, [r8]
 8007f6e:	e00f      	b.n	8007f90 <_malloc_r+0xa8>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	1b52      	subs	r2, r2, r5
 8007f74:	d420      	bmi.n	8007fb8 <_malloc_r+0xd0>
 8007f76:	2a0b      	cmp	r2, #11
 8007f78:	d917      	bls.n	8007faa <_malloc_r+0xc2>
 8007f7a:	1961      	adds	r1, r4, r5
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	bf18      	it	ne
 8007f82:	6059      	strne	r1, [r3, #4]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	bf08      	it	eq
 8007f88:	f8c8 1000 	streq.w	r1, [r8]
 8007f8c:	5162      	str	r2, [r4, r5]
 8007f8e:	604b      	str	r3, [r1, #4]
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f82f 	bl	8007ff4 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac2      	subs	r2, r0, r3
 8007fa2:	bf1c      	itt	ne
 8007fa4:	1a1b      	subne	r3, r3, r0
 8007fa6:	50a3      	strne	r3, [r4, r2]
 8007fa8:	e7af      	b.n	8007f0a <_malloc_r+0x22>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	bf0c      	ite	eq
 8007fb0:	f8c8 2000 	streq.w	r2, [r8]
 8007fb4:	605a      	strne	r2, [r3, #4]
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0xa8>
 8007fb8:	4623      	mov	r3, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7ae      	b.n	8007f1c <_malloc_r+0x34>
 8007fbe:	463c      	mov	r4, r7
 8007fc0:	687f      	ldr	r7, [r7, #4]
 8007fc2:	e7b6      	b.n	8007f32 <_malloc_r+0x4a>
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d1fb      	bne.n	8007fc4 <_malloc_r+0xdc>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	e7de      	b.n	8007f90 <_malloc_r+0xa8>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f80c 	bl	8007ff4 <__malloc_unlock>
 8007fdc:	e794      	b.n	8007f08 <_malloc_r+0x20>
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	e7d6      	b.n	8007f90 <_malloc_r+0xa8>
 8007fe2:	bf00      	nop
 8007fe4:	20001724 	.word	0x20001724

08007fe8 <__malloc_lock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_lock+0x8>)
 8007fea:	f7ff bf0e 	b.w	8007e0a <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	2000171c 	.word	0x2000171c

08007ff4 <__malloc_unlock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__malloc_unlock+0x8>)
 8007ff6:	f7ff bf09 	b.w	8007e0c <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	2000171c 	.word	0x2000171c

08008000 <__sfputc_r>:
 8008000:	6893      	ldr	r3, [r2, #8]
 8008002:	3b01      	subs	r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	b410      	push	{r4}
 8008008:	6093      	str	r3, [r2, #8]
 800800a:	da08      	bge.n	800801e <__sfputc_r+0x1e>
 800800c:	6994      	ldr	r4, [r2, #24]
 800800e:	42a3      	cmp	r3, r4
 8008010:	db01      	blt.n	8008016 <__sfputc_r+0x16>
 8008012:	290a      	cmp	r1, #10
 8008014:	d103      	bne.n	800801e <__sfputc_r+0x1e>
 8008016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801a:	f7ff bde8 	b.w	8007bee <__swbuf_r>
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	1c58      	adds	r0, r3, #1
 8008022:	6010      	str	r0, [r2, #0]
 8008024:	7019      	strb	r1, [r3, #0]
 8008026:	4608      	mov	r0, r1
 8008028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802c:	4770      	bx	lr

0800802e <__sfputs_r>:
 800802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	4614      	mov	r4, r2
 8008036:	18d5      	adds	r5, r2, r3
 8008038:	42ac      	cmp	r4, r5
 800803a:	d101      	bne.n	8008040 <__sfputs_r+0x12>
 800803c:	2000      	movs	r0, #0
 800803e:	e007      	b.n	8008050 <__sfputs_r+0x22>
 8008040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008044:	463a      	mov	r2, r7
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ffda 	bl	8008000 <__sfputc_r>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d1f3      	bne.n	8008038 <__sfputs_r+0xa>
 8008050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008054 <_vfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	460d      	mov	r5, r1
 800805a:	b09d      	sub	sp, #116	@ 0x74
 800805c:	4614      	mov	r4, r2
 800805e:	4698      	mov	r8, r3
 8008060:	4606      	mov	r6, r0
 8008062:	b118      	cbz	r0, 800806c <_vfiprintf_r+0x18>
 8008064:	6a03      	ldr	r3, [r0, #32]
 8008066:	b90b      	cbnz	r3, 800806c <_vfiprintf_r+0x18>
 8008068:	f7ff fcd0 	bl	8007a0c <__sinit>
 800806c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800806e:	07d9      	lsls	r1, r3, #31
 8008070:	d405      	bmi.n	800807e <_vfiprintf_r+0x2a>
 8008072:	89ab      	ldrh	r3, [r5, #12]
 8008074:	059a      	lsls	r2, r3, #22
 8008076:	d402      	bmi.n	800807e <_vfiprintf_r+0x2a>
 8008078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800807a:	f7ff fec6 	bl	8007e0a <__retarget_lock_acquire_recursive>
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	071b      	lsls	r3, r3, #28
 8008082:	d501      	bpl.n	8008088 <_vfiprintf_r+0x34>
 8008084:	692b      	ldr	r3, [r5, #16]
 8008086:	b99b      	cbnz	r3, 80080b0 <_vfiprintf_r+0x5c>
 8008088:	4629      	mov	r1, r5
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff fdee 	bl	8007c6c <__swsetup_r>
 8008090:	b170      	cbz	r0, 80080b0 <_vfiprintf_r+0x5c>
 8008092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008094:	07dc      	lsls	r4, r3, #31
 8008096:	d504      	bpl.n	80080a2 <_vfiprintf_r+0x4e>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	b01d      	add	sp, #116	@ 0x74
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	89ab      	ldrh	r3, [r5, #12]
 80080a4:	0598      	lsls	r0, r3, #22
 80080a6:	d4f7      	bmi.n	8008098 <_vfiprintf_r+0x44>
 80080a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080aa:	f7ff feaf 	bl	8007e0c <__retarget_lock_release_recursive>
 80080ae:	e7f3      	b.n	8008098 <_vfiprintf_r+0x44>
 80080b0:	2300      	movs	r3, #0
 80080b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b4:	2320      	movs	r3, #32
 80080b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80080be:	2330      	movs	r3, #48	@ 0x30
 80080c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008270 <_vfiprintf_r+0x21c>
 80080c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c8:	f04f 0901 	mov.w	r9, #1
 80080cc:	4623      	mov	r3, r4
 80080ce:	469a      	mov	sl, r3
 80080d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d4:	b10a      	cbz	r2, 80080da <_vfiprintf_r+0x86>
 80080d6:	2a25      	cmp	r2, #37	@ 0x25
 80080d8:	d1f9      	bne.n	80080ce <_vfiprintf_r+0x7a>
 80080da:	ebba 0b04 	subs.w	fp, sl, r4
 80080de:	d00b      	beq.n	80080f8 <_vfiprintf_r+0xa4>
 80080e0:	465b      	mov	r3, fp
 80080e2:	4622      	mov	r2, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7ff ffa1 	bl	800802e <__sfputs_r>
 80080ec:	3001      	adds	r0, #1
 80080ee:	f000 80a7 	beq.w	8008240 <_vfiprintf_r+0x1ec>
 80080f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f4:	445a      	add	r2, fp
 80080f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80080f8:	f89a 3000 	ldrb.w	r3, [sl]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 809f 	beq.w	8008240 <_vfiprintf_r+0x1ec>
 8008102:	2300      	movs	r3, #0
 8008104:	f04f 32ff 	mov.w	r2, #4294967295
 8008108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800810c:	f10a 0a01 	add.w	sl, sl, #1
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008118:	931a      	str	r3, [sp, #104]	@ 0x68
 800811a:	4654      	mov	r4, sl
 800811c:	2205      	movs	r2, #5
 800811e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008122:	4853      	ldr	r0, [pc, #332]	@ (8008270 <_vfiprintf_r+0x21c>)
 8008124:	f7f8 f864 	bl	80001f0 <memchr>
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	b9d8      	cbnz	r0, 8008164 <_vfiprintf_r+0x110>
 800812c:	06d1      	lsls	r1, r2, #27
 800812e:	bf44      	itt	mi
 8008130:	2320      	movmi	r3, #32
 8008132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008136:	0713      	lsls	r3, r2, #28
 8008138:	bf44      	itt	mi
 800813a:	232b      	movmi	r3, #43	@ 0x2b
 800813c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008140:	f89a 3000 	ldrb.w	r3, [sl]
 8008144:	2b2a      	cmp	r3, #42	@ 0x2a
 8008146:	d015      	beq.n	8008174 <_vfiprintf_r+0x120>
 8008148:	9a07      	ldr	r2, [sp, #28]
 800814a:	4654      	mov	r4, sl
 800814c:	2000      	movs	r0, #0
 800814e:	f04f 0c0a 	mov.w	ip, #10
 8008152:	4621      	mov	r1, r4
 8008154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008158:	3b30      	subs	r3, #48	@ 0x30
 800815a:	2b09      	cmp	r3, #9
 800815c:	d94b      	bls.n	80081f6 <_vfiprintf_r+0x1a2>
 800815e:	b1b0      	cbz	r0, 800818e <_vfiprintf_r+0x13a>
 8008160:	9207      	str	r2, [sp, #28]
 8008162:	e014      	b.n	800818e <_vfiprintf_r+0x13a>
 8008164:	eba0 0308 	sub.w	r3, r0, r8
 8008168:	fa09 f303 	lsl.w	r3, r9, r3
 800816c:	4313      	orrs	r3, r2
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	46a2      	mov	sl, r4
 8008172:	e7d2      	b.n	800811a <_vfiprintf_r+0xc6>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	1d19      	adds	r1, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	9103      	str	r1, [sp, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfbb      	ittet	lt
 8008180:	425b      	neglt	r3, r3
 8008182:	f042 0202 	orrlt.w	r2, r2, #2
 8008186:	9307      	strge	r3, [sp, #28]
 8008188:	9307      	strlt	r3, [sp, #28]
 800818a:	bfb8      	it	lt
 800818c:	9204      	strlt	r2, [sp, #16]
 800818e:	7823      	ldrb	r3, [r4, #0]
 8008190:	2b2e      	cmp	r3, #46	@ 0x2e
 8008192:	d10a      	bne.n	80081aa <_vfiprintf_r+0x156>
 8008194:	7863      	ldrb	r3, [r4, #1]
 8008196:	2b2a      	cmp	r3, #42	@ 0x2a
 8008198:	d132      	bne.n	8008200 <_vfiprintf_r+0x1ac>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	9203      	str	r2, [sp, #12]
 80081a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081a6:	3402      	adds	r4, #2
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008280 <_vfiprintf_r+0x22c>
 80081ae:	7821      	ldrb	r1, [r4, #0]
 80081b0:	2203      	movs	r2, #3
 80081b2:	4650      	mov	r0, sl
 80081b4:	f7f8 f81c 	bl	80001f0 <memchr>
 80081b8:	b138      	cbz	r0, 80081ca <_vfiprintf_r+0x176>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	eba0 000a 	sub.w	r0, r0, sl
 80081c0:	2240      	movs	r2, #64	@ 0x40
 80081c2:	4082      	lsls	r2, r0
 80081c4:	4313      	orrs	r3, r2
 80081c6:	3401      	adds	r4, #1
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ce:	4829      	ldr	r0, [pc, #164]	@ (8008274 <_vfiprintf_r+0x220>)
 80081d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081d4:	2206      	movs	r2, #6
 80081d6:	f7f8 f80b 	bl	80001f0 <memchr>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d03f      	beq.n	800825e <_vfiprintf_r+0x20a>
 80081de:	4b26      	ldr	r3, [pc, #152]	@ (8008278 <_vfiprintf_r+0x224>)
 80081e0:	bb1b      	cbnz	r3, 800822a <_vfiprintf_r+0x1d6>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	3307      	adds	r3, #7
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	3308      	adds	r3, #8
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f0:	443b      	add	r3, r7
 80081f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f4:	e76a      	b.n	80080cc <_vfiprintf_r+0x78>
 80081f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081fa:	460c      	mov	r4, r1
 80081fc:	2001      	movs	r0, #1
 80081fe:	e7a8      	b.n	8008152 <_vfiprintf_r+0xfe>
 8008200:	2300      	movs	r3, #0
 8008202:	3401      	adds	r4, #1
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	4619      	mov	r1, r3
 8008208:	f04f 0c0a 	mov.w	ip, #10
 800820c:	4620      	mov	r0, r4
 800820e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008212:	3a30      	subs	r2, #48	@ 0x30
 8008214:	2a09      	cmp	r2, #9
 8008216:	d903      	bls.n	8008220 <_vfiprintf_r+0x1cc>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0c6      	beq.n	80081aa <_vfiprintf_r+0x156>
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	e7c4      	b.n	80081aa <_vfiprintf_r+0x156>
 8008220:	fb0c 2101 	mla	r1, ip, r1, r2
 8008224:	4604      	mov	r4, r0
 8008226:	2301      	movs	r3, #1
 8008228:	e7f0      	b.n	800820c <_vfiprintf_r+0x1b8>
 800822a:	ab03      	add	r3, sp, #12
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	462a      	mov	r2, r5
 8008230:	4b12      	ldr	r3, [pc, #72]	@ (800827c <_vfiprintf_r+0x228>)
 8008232:	a904      	add	r1, sp, #16
 8008234:	4630      	mov	r0, r6
 8008236:	f3af 8000 	nop.w
 800823a:	4607      	mov	r7, r0
 800823c:	1c78      	adds	r0, r7, #1
 800823e:	d1d6      	bne.n	80081ee <_vfiprintf_r+0x19a>
 8008240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008242:	07d9      	lsls	r1, r3, #31
 8008244:	d405      	bmi.n	8008252 <_vfiprintf_r+0x1fe>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	059a      	lsls	r2, r3, #22
 800824a:	d402      	bmi.n	8008252 <_vfiprintf_r+0x1fe>
 800824c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800824e:	f7ff fddd 	bl	8007e0c <__retarget_lock_release_recursive>
 8008252:	89ab      	ldrh	r3, [r5, #12]
 8008254:	065b      	lsls	r3, r3, #25
 8008256:	f53f af1f 	bmi.w	8008098 <_vfiprintf_r+0x44>
 800825a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800825c:	e71e      	b.n	800809c <_vfiprintf_r+0x48>
 800825e:	ab03      	add	r3, sp, #12
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	462a      	mov	r2, r5
 8008264:	4b05      	ldr	r3, [pc, #20]	@ (800827c <_vfiprintf_r+0x228>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f879 	bl	8008360 <_printf_i>
 800826e:	e7e4      	b.n	800823a <_vfiprintf_r+0x1e6>
 8008270:	08009760 	.word	0x08009760
 8008274:	0800976a 	.word	0x0800976a
 8008278:	00000000 	.word	0x00000000
 800827c:	0800802f 	.word	0x0800802f
 8008280:	08009766 	.word	0x08009766

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4616      	mov	r6, r2
 800828a:	4698      	mov	r8, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008294:	4293      	cmp	r3, r2
 8008296:	bfb8      	it	lt
 8008298:	4613      	movlt	r3, r2
 800829a:	6033      	str	r3, [r6, #0]
 800829c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082a0:	4607      	mov	r7, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b10a      	cbz	r2, 80082aa <_printf_common+0x26>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	6833      	ldrmi	r3, [r6, #0]
 80082b2:	3302      	addmi	r3, #2
 80082b4:	6033      	strmi	r3, [r6, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	f015 0506 	ands.w	r5, r5, #6
 80082bc:	d106      	bne.n	80082cc <_printf_common+0x48>
 80082be:	f104 0a19 	add.w	sl, r4, #25
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6832      	ldr	r2, [r6, #0]
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc26      	bgt.n	800831a <_printf_common+0x96>
 80082cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082d0:	6822      	ldr	r2, [r4, #0]
 80082d2:	3b00      	subs	r3, #0
 80082d4:	bf18      	it	ne
 80082d6:	2301      	movne	r3, #1
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d42b      	bmi.n	8008334 <_printf_common+0xb0>
 80082dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082e0:	4641      	mov	r1, r8
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c8      	blx	r9
 80082e6:	3001      	adds	r0, #1
 80082e8:	d01e      	beq.n	8008328 <_printf_common+0xa4>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	6922      	ldr	r2, [r4, #16]
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	bf02      	ittt	eq
 80082f6:	68e5      	ldreq	r5, [r4, #12]
 80082f8:	6833      	ldreq	r3, [r6, #0]
 80082fa:	1aed      	subeq	r5, r5, r3
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	bf0c      	ite	eq
 8008300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008304:	2500      	movne	r5, #0
 8008306:	4293      	cmp	r3, r2
 8008308:	bfc4      	itt	gt
 800830a:	1a9b      	subgt	r3, r3, r2
 800830c:	18ed      	addgt	r5, r5, r3
 800830e:	2600      	movs	r6, #0
 8008310:	341a      	adds	r4, #26
 8008312:	42b5      	cmp	r5, r6
 8008314:	d11a      	bne.n	800834c <_printf_common+0xc8>
 8008316:	2000      	movs	r0, #0
 8008318:	e008      	b.n	800832c <_printf_common+0xa8>
 800831a:	2301      	movs	r3, #1
 800831c:	4652      	mov	r2, sl
 800831e:	4641      	mov	r1, r8
 8008320:	4638      	mov	r0, r7
 8008322:	47c8      	blx	r9
 8008324:	3001      	adds	r0, #1
 8008326:	d103      	bne.n	8008330 <_printf_common+0xac>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	3501      	adds	r5, #1
 8008332:	e7c6      	b.n	80082c2 <_printf_common+0x3e>
 8008334:	18e1      	adds	r1, r4, r3
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	2030      	movs	r0, #48	@ 0x30
 800833a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800833e:	4422      	add	r2, r4
 8008340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008348:	3302      	adds	r3, #2
 800834a:	e7c7      	b.n	80082dc <_printf_common+0x58>
 800834c:	2301      	movs	r3, #1
 800834e:	4622      	mov	r2, r4
 8008350:	4641      	mov	r1, r8
 8008352:	4638      	mov	r0, r7
 8008354:	47c8      	blx	r9
 8008356:	3001      	adds	r0, #1
 8008358:	d0e6      	beq.n	8008328 <_printf_common+0xa4>
 800835a:	3601      	adds	r6, #1
 800835c:	e7d9      	b.n	8008312 <_printf_common+0x8e>
	...

08008360 <_printf_i>:
 8008360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	7e0f      	ldrb	r7, [r1, #24]
 8008366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008368:	2f78      	cmp	r7, #120	@ 0x78
 800836a:	4691      	mov	r9, r2
 800836c:	4680      	mov	r8, r0
 800836e:	460c      	mov	r4, r1
 8008370:	469a      	mov	sl, r3
 8008372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008376:	d807      	bhi.n	8008388 <_printf_i+0x28>
 8008378:	2f62      	cmp	r7, #98	@ 0x62
 800837a:	d80a      	bhi.n	8008392 <_printf_i+0x32>
 800837c:	2f00      	cmp	r7, #0
 800837e:	f000 80d1 	beq.w	8008524 <_printf_i+0x1c4>
 8008382:	2f58      	cmp	r7, #88	@ 0x58
 8008384:	f000 80b8 	beq.w	80084f8 <_printf_i+0x198>
 8008388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800838c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008390:	e03a      	b.n	8008408 <_printf_i+0xa8>
 8008392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008396:	2b15      	cmp	r3, #21
 8008398:	d8f6      	bhi.n	8008388 <_printf_i+0x28>
 800839a:	a101      	add	r1, pc, #4	@ (adr r1, 80083a0 <_printf_i+0x40>)
 800839c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083a0:	080083f9 	.word	0x080083f9
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	08008389 	.word	0x08008389
 80083ac:	08008389 	.word	0x08008389
 80083b0:	08008389 	.word	0x08008389
 80083b4:	08008389 	.word	0x08008389
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008389 	.word	0x08008389
 80083c0:	08008389 	.word	0x08008389
 80083c4:	08008389 	.word	0x08008389
 80083c8:	08008389 	.word	0x08008389
 80083cc:	0800850b 	.word	0x0800850b
 80083d0:	08008437 	.word	0x08008437
 80083d4:	080084c5 	.word	0x080084c5
 80083d8:	08008389 	.word	0x08008389
 80083dc:	08008389 	.word	0x08008389
 80083e0:	0800852d 	.word	0x0800852d
 80083e4:	08008389 	.word	0x08008389
 80083e8:	08008437 	.word	0x08008437
 80083ec:	08008389 	.word	0x08008389
 80083f0:	08008389 	.word	0x08008389
 80083f4:	080084cd 	.word	0x080084cd
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6032      	str	r2, [r6, #0]
 8008400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008408:	2301      	movs	r3, #1
 800840a:	e09c      	b.n	8008546 <_printf_i+0x1e6>
 800840c:	6833      	ldr	r3, [r6, #0]
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	1d19      	adds	r1, r3, #4
 8008412:	6031      	str	r1, [r6, #0]
 8008414:	0606      	lsls	r6, r0, #24
 8008416:	d501      	bpl.n	800841c <_printf_i+0xbc>
 8008418:	681d      	ldr	r5, [r3, #0]
 800841a:	e003      	b.n	8008424 <_printf_i+0xc4>
 800841c:	0645      	lsls	r5, r0, #25
 800841e:	d5fb      	bpl.n	8008418 <_printf_i+0xb8>
 8008420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008424:	2d00      	cmp	r5, #0
 8008426:	da03      	bge.n	8008430 <_printf_i+0xd0>
 8008428:	232d      	movs	r3, #45	@ 0x2d
 800842a:	426d      	negs	r5, r5
 800842c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008430:	4858      	ldr	r0, [pc, #352]	@ (8008594 <_printf_i+0x234>)
 8008432:	230a      	movs	r3, #10
 8008434:	e011      	b.n	800845a <_printf_i+0xfa>
 8008436:	6821      	ldr	r1, [r4, #0]
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	0608      	lsls	r0, r1, #24
 800843c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008440:	d402      	bmi.n	8008448 <_printf_i+0xe8>
 8008442:	0649      	lsls	r1, r1, #25
 8008444:	bf48      	it	mi
 8008446:	b2ad      	uxthmi	r5, r5
 8008448:	2f6f      	cmp	r7, #111	@ 0x6f
 800844a:	4852      	ldr	r0, [pc, #328]	@ (8008594 <_printf_i+0x234>)
 800844c:	6033      	str	r3, [r6, #0]
 800844e:	bf14      	ite	ne
 8008450:	230a      	movne	r3, #10
 8008452:	2308      	moveq	r3, #8
 8008454:	2100      	movs	r1, #0
 8008456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800845a:	6866      	ldr	r6, [r4, #4]
 800845c:	60a6      	str	r6, [r4, #8]
 800845e:	2e00      	cmp	r6, #0
 8008460:	db05      	blt.n	800846e <_printf_i+0x10e>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	432e      	orrs	r6, r5
 8008466:	f021 0104 	bic.w	r1, r1, #4
 800846a:	6021      	str	r1, [r4, #0]
 800846c:	d04b      	beq.n	8008506 <_printf_i+0x1a6>
 800846e:	4616      	mov	r6, r2
 8008470:	fbb5 f1f3 	udiv	r1, r5, r3
 8008474:	fb03 5711 	mls	r7, r3, r1, r5
 8008478:	5dc7      	ldrb	r7, [r0, r7]
 800847a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800847e:	462f      	mov	r7, r5
 8008480:	42bb      	cmp	r3, r7
 8008482:	460d      	mov	r5, r1
 8008484:	d9f4      	bls.n	8008470 <_printf_i+0x110>
 8008486:	2b08      	cmp	r3, #8
 8008488:	d10b      	bne.n	80084a2 <_printf_i+0x142>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	07df      	lsls	r7, r3, #31
 800848e:	d508      	bpl.n	80084a2 <_printf_i+0x142>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	6861      	ldr	r1, [r4, #4]
 8008494:	4299      	cmp	r1, r3
 8008496:	bfde      	ittt	le
 8008498:	2330      	movle	r3, #48	@ 0x30
 800849a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800849e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084a2:	1b92      	subs	r2, r2, r6
 80084a4:	6122      	str	r2, [r4, #16]
 80084a6:	f8cd a000 	str.w	sl, [sp]
 80084aa:	464b      	mov	r3, r9
 80084ac:	aa03      	add	r2, sp, #12
 80084ae:	4621      	mov	r1, r4
 80084b0:	4640      	mov	r0, r8
 80084b2:	f7ff fee7 	bl	8008284 <_printf_common>
 80084b6:	3001      	adds	r0, #1
 80084b8:	d14a      	bne.n	8008550 <_printf_i+0x1f0>
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295
 80084be:	b004      	add	sp, #16
 80084c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	f043 0320 	orr.w	r3, r3, #32
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	4832      	ldr	r0, [pc, #200]	@ (8008598 <_printf_i+0x238>)
 80084ce:	2778      	movs	r7, #120	@ 0x78
 80084d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	6831      	ldr	r1, [r6, #0]
 80084d8:	061f      	lsls	r7, r3, #24
 80084da:	f851 5b04 	ldr.w	r5, [r1], #4
 80084de:	d402      	bmi.n	80084e6 <_printf_i+0x186>
 80084e0:	065f      	lsls	r7, r3, #25
 80084e2:	bf48      	it	mi
 80084e4:	b2ad      	uxthmi	r5, r5
 80084e6:	6031      	str	r1, [r6, #0]
 80084e8:	07d9      	lsls	r1, r3, #31
 80084ea:	bf44      	itt	mi
 80084ec:	f043 0320 	orrmi.w	r3, r3, #32
 80084f0:	6023      	strmi	r3, [r4, #0]
 80084f2:	b11d      	cbz	r5, 80084fc <_printf_i+0x19c>
 80084f4:	2310      	movs	r3, #16
 80084f6:	e7ad      	b.n	8008454 <_printf_i+0xf4>
 80084f8:	4826      	ldr	r0, [pc, #152]	@ (8008594 <_printf_i+0x234>)
 80084fa:	e7e9      	b.n	80084d0 <_printf_i+0x170>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	f023 0320 	bic.w	r3, r3, #32
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	e7f6      	b.n	80084f4 <_printf_i+0x194>
 8008506:	4616      	mov	r6, r2
 8008508:	e7bd      	b.n	8008486 <_printf_i+0x126>
 800850a:	6833      	ldr	r3, [r6, #0]
 800850c:	6825      	ldr	r5, [r4, #0]
 800850e:	6961      	ldr	r1, [r4, #20]
 8008510:	1d18      	adds	r0, r3, #4
 8008512:	6030      	str	r0, [r6, #0]
 8008514:	062e      	lsls	r6, r5, #24
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	d501      	bpl.n	800851e <_printf_i+0x1be>
 800851a:	6019      	str	r1, [r3, #0]
 800851c:	e002      	b.n	8008524 <_printf_i+0x1c4>
 800851e:	0668      	lsls	r0, r5, #25
 8008520:	d5fb      	bpl.n	800851a <_printf_i+0x1ba>
 8008522:	8019      	strh	r1, [r3, #0]
 8008524:	2300      	movs	r3, #0
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	4616      	mov	r6, r2
 800852a:	e7bc      	b.n	80084a6 <_printf_i+0x146>
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	6032      	str	r2, [r6, #0]
 8008532:	681e      	ldr	r6, [r3, #0]
 8008534:	6862      	ldr	r2, [r4, #4]
 8008536:	2100      	movs	r1, #0
 8008538:	4630      	mov	r0, r6
 800853a:	f7f7 fe59 	bl	80001f0 <memchr>
 800853e:	b108      	cbz	r0, 8008544 <_printf_i+0x1e4>
 8008540:	1b80      	subs	r0, r0, r6
 8008542:	6060      	str	r0, [r4, #4]
 8008544:	6863      	ldr	r3, [r4, #4]
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	2300      	movs	r3, #0
 800854a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800854e:	e7aa      	b.n	80084a6 <_printf_i+0x146>
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	4632      	mov	r2, r6
 8008554:	4649      	mov	r1, r9
 8008556:	4640      	mov	r0, r8
 8008558:	47d0      	blx	sl
 800855a:	3001      	adds	r0, #1
 800855c:	d0ad      	beq.n	80084ba <_printf_i+0x15a>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	079b      	lsls	r3, r3, #30
 8008562:	d413      	bmi.n	800858c <_printf_i+0x22c>
 8008564:	68e0      	ldr	r0, [r4, #12]
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	4298      	cmp	r0, r3
 800856a:	bfb8      	it	lt
 800856c:	4618      	movlt	r0, r3
 800856e:	e7a6      	b.n	80084be <_printf_i+0x15e>
 8008570:	2301      	movs	r3, #1
 8008572:	4632      	mov	r2, r6
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	47d0      	blx	sl
 800857a:	3001      	adds	r0, #1
 800857c:	d09d      	beq.n	80084ba <_printf_i+0x15a>
 800857e:	3501      	adds	r5, #1
 8008580:	68e3      	ldr	r3, [r4, #12]
 8008582:	9903      	ldr	r1, [sp, #12]
 8008584:	1a5b      	subs	r3, r3, r1
 8008586:	42ab      	cmp	r3, r5
 8008588:	dcf2      	bgt.n	8008570 <_printf_i+0x210>
 800858a:	e7eb      	b.n	8008564 <_printf_i+0x204>
 800858c:	2500      	movs	r5, #0
 800858e:	f104 0619 	add.w	r6, r4, #25
 8008592:	e7f5      	b.n	8008580 <_printf_i+0x220>
 8008594:	08009771 	.word	0x08009771
 8008598:	08009782 	.word	0x08009782

0800859c <__sflush_r>:
 800859c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	0716      	lsls	r6, r2, #28
 80085a6:	4605      	mov	r5, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	d454      	bmi.n	8008656 <__sflush_r+0xba>
 80085ac:	684b      	ldr	r3, [r1, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc02      	bgt.n	80085b8 <__sflush_r+0x1c>
 80085b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd48      	ble.n	800864a <__sflush_r+0xae>
 80085b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d045      	beq.n	800864a <__sflush_r+0xae>
 80085be:	2300      	movs	r3, #0
 80085c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085c4:	682f      	ldr	r7, [r5, #0]
 80085c6:	6a21      	ldr	r1, [r4, #32]
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	d030      	beq.n	800862e <__sflush_r+0x92>
 80085cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	0759      	lsls	r1, r3, #29
 80085d2:	d505      	bpl.n	80085e0 <__sflush_r+0x44>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085da:	b10b      	cbz	r3, 80085e0 <__sflush_r+0x44>
 80085dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	2300      	movs	r3, #0
 80085e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085e4:	6a21      	ldr	r1, [r4, #32]
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b0      	blx	r6
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	d106      	bne.n	80085fe <__sflush_r+0x62>
 80085f0:	6829      	ldr	r1, [r5, #0]
 80085f2:	291d      	cmp	r1, #29
 80085f4:	d82b      	bhi.n	800864e <__sflush_r+0xb2>
 80085f6:	4a2a      	ldr	r2, [pc, #168]	@ (80086a0 <__sflush_r+0x104>)
 80085f8:	40ca      	lsrs	r2, r1
 80085fa:	07d6      	lsls	r6, r2, #31
 80085fc:	d527      	bpl.n	800864e <__sflush_r+0xb2>
 80085fe:	2200      	movs	r2, #0
 8008600:	6062      	str	r2, [r4, #4]
 8008602:	04d9      	lsls	r1, r3, #19
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	6022      	str	r2, [r4, #0]
 8008608:	d504      	bpl.n	8008614 <__sflush_r+0x78>
 800860a:	1c42      	adds	r2, r0, #1
 800860c:	d101      	bne.n	8008612 <__sflush_r+0x76>
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	b903      	cbnz	r3, 8008614 <__sflush_r+0x78>
 8008612:	6560      	str	r0, [r4, #84]	@ 0x54
 8008614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008616:	602f      	str	r7, [r5, #0]
 8008618:	b1b9      	cbz	r1, 800864a <__sflush_r+0xae>
 800861a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800861e:	4299      	cmp	r1, r3
 8008620:	d002      	beq.n	8008628 <__sflush_r+0x8c>
 8008622:	4628      	mov	r0, r5
 8008624:	f7ff fbf4 	bl	8007e10 <_free_r>
 8008628:	2300      	movs	r3, #0
 800862a:	6363      	str	r3, [r4, #52]	@ 0x34
 800862c:	e00d      	b.n	800864a <__sflush_r+0xae>
 800862e:	2301      	movs	r3, #1
 8008630:	4628      	mov	r0, r5
 8008632:	47b0      	blx	r6
 8008634:	4602      	mov	r2, r0
 8008636:	1c50      	adds	r0, r2, #1
 8008638:	d1c9      	bne.n	80085ce <__sflush_r+0x32>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0c6      	beq.n	80085ce <__sflush_r+0x32>
 8008640:	2b1d      	cmp	r3, #29
 8008642:	d001      	beq.n	8008648 <__sflush_r+0xac>
 8008644:	2b16      	cmp	r3, #22
 8008646:	d11e      	bne.n	8008686 <__sflush_r+0xea>
 8008648:	602f      	str	r7, [r5, #0]
 800864a:	2000      	movs	r0, #0
 800864c:	e022      	b.n	8008694 <__sflush_r+0xf8>
 800864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008652:	b21b      	sxth	r3, r3
 8008654:	e01b      	b.n	800868e <__sflush_r+0xf2>
 8008656:	690f      	ldr	r7, [r1, #16]
 8008658:	2f00      	cmp	r7, #0
 800865a:	d0f6      	beq.n	800864a <__sflush_r+0xae>
 800865c:	0793      	lsls	r3, r2, #30
 800865e:	680e      	ldr	r6, [r1, #0]
 8008660:	bf08      	it	eq
 8008662:	694b      	ldreq	r3, [r1, #20]
 8008664:	600f      	str	r7, [r1, #0]
 8008666:	bf18      	it	ne
 8008668:	2300      	movne	r3, #0
 800866a:	eba6 0807 	sub.w	r8, r6, r7
 800866e:	608b      	str	r3, [r1, #8]
 8008670:	f1b8 0f00 	cmp.w	r8, #0
 8008674:	dde9      	ble.n	800864a <__sflush_r+0xae>
 8008676:	6a21      	ldr	r1, [r4, #32]
 8008678:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800867a:	4643      	mov	r3, r8
 800867c:	463a      	mov	r2, r7
 800867e:	4628      	mov	r0, r5
 8008680:	47b0      	blx	r6
 8008682:	2800      	cmp	r0, #0
 8008684:	dc08      	bgt.n	8008698 <__sflush_r+0xfc>
 8008686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	4407      	add	r7, r0
 800869a:	eba8 0800 	sub.w	r8, r8, r0
 800869e:	e7e7      	b.n	8008670 <__sflush_r+0xd4>
 80086a0:	20400001 	.word	0x20400001

080086a4 <_fflush_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	4605      	mov	r5, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	b913      	cbnz	r3, 80086b4 <_fflush_r+0x10>
 80086ae:	2500      	movs	r5, #0
 80086b0:	4628      	mov	r0, r5
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	b118      	cbz	r0, 80086be <_fflush_r+0x1a>
 80086b6:	6a03      	ldr	r3, [r0, #32]
 80086b8:	b90b      	cbnz	r3, 80086be <_fflush_r+0x1a>
 80086ba:	f7ff f9a7 	bl	8007a0c <__sinit>
 80086be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0f3      	beq.n	80086ae <_fflush_r+0xa>
 80086c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d404      	bmi.n	80086d6 <_fflush_r+0x32>
 80086cc:	0599      	lsls	r1, r3, #22
 80086ce:	d402      	bmi.n	80086d6 <_fflush_r+0x32>
 80086d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086d2:	f7ff fb9a 	bl	8007e0a <__retarget_lock_acquire_recursive>
 80086d6:	4628      	mov	r0, r5
 80086d8:	4621      	mov	r1, r4
 80086da:	f7ff ff5f 	bl	800859c <__sflush_r>
 80086de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086e0:	07da      	lsls	r2, r3, #31
 80086e2:	4605      	mov	r5, r0
 80086e4:	d4e4      	bmi.n	80086b0 <_fflush_r+0xc>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	059b      	lsls	r3, r3, #22
 80086ea:	d4e1      	bmi.n	80086b0 <_fflush_r+0xc>
 80086ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ee:	f7ff fb8d 	bl	8007e0c <__retarget_lock_release_recursive>
 80086f2:	e7dd      	b.n	80086b0 <_fflush_r+0xc>

080086f4 <__swhatbuf_r>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	460c      	mov	r4, r1
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	2900      	cmp	r1, #0
 80086fe:	b096      	sub	sp, #88	@ 0x58
 8008700:	4615      	mov	r5, r2
 8008702:	461e      	mov	r6, r3
 8008704:	da0d      	bge.n	8008722 <__swhatbuf_r+0x2e>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800870c:	f04f 0100 	mov.w	r1, #0
 8008710:	bf14      	ite	ne
 8008712:	2340      	movne	r3, #64	@ 0x40
 8008714:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008718:	2000      	movs	r0, #0
 800871a:	6031      	str	r1, [r6, #0]
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	b016      	add	sp, #88	@ 0x58
 8008720:	bd70      	pop	{r4, r5, r6, pc}
 8008722:	466a      	mov	r2, sp
 8008724:	f000 f87c 	bl	8008820 <_fstat_r>
 8008728:	2800      	cmp	r0, #0
 800872a:	dbec      	blt.n	8008706 <__swhatbuf_r+0x12>
 800872c:	9901      	ldr	r1, [sp, #4]
 800872e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008732:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008736:	4259      	negs	r1, r3
 8008738:	4159      	adcs	r1, r3
 800873a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800873e:	e7eb      	b.n	8008718 <__swhatbuf_r+0x24>

08008740 <__smakebuf_r>:
 8008740:	898b      	ldrh	r3, [r1, #12]
 8008742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008744:	079d      	lsls	r5, r3, #30
 8008746:	4606      	mov	r6, r0
 8008748:	460c      	mov	r4, r1
 800874a:	d507      	bpl.n	800875c <__smakebuf_r+0x1c>
 800874c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	6123      	str	r3, [r4, #16]
 8008754:	2301      	movs	r3, #1
 8008756:	6163      	str	r3, [r4, #20]
 8008758:	b003      	add	sp, #12
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875c:	ab01      	add	r3, sp, #4
 800875e:	466a      	mov	r2, sp
 8008760:	f7ff ffc8 	bl	80086f4 <__swhatbuf_r>
 8008764:	9f00      	ldr	r7, [sp, #0]
 8008766:	4605      	mov	r5, r0
 8008768:	4639      	mov	r1, r7
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff fbbc 	bl	8007ee8 <_malloc_r>
 8008770:	b948      	cbnz	r0, 8008786 <__smakebuf_r+0x46>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	059a      	lsls	r2, r3, #22
 8008778:	d4ee      	bmi.n	8008758 <__smakebuf_r+0x18>
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	f043 0302 	orr.w	r3, r3, #2
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	e7e2      	b.n	800874c <__smakebuf_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	6020      	str	r0, [r4, #0]
 800878a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008796:	b15b      	cbz	r3, 80087b0 <__smakebuf_r+0x70>
 8008798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800879c:	4630      	mov	r0, r6
 800879e:	f000 f851 	bl	8008844 <_isatty_r>
 80087a2:	b128      	cbz	r0, 80087b0 <__smakebuf_r+0x70>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	431d      	orrs	r5, r3
 80087b4:	81a5      	strh	r5, [r4, #12]
 80087b6:	e7cf      	b.n	8008758 <__smakebuf_r+0x18>

080087b8 <_putc_r>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	460d      	mov	r5, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	4606      	mov	r6, r0
 80087c0:	b118      	cbz	r0, 80087ca <_putc_r+0x12>
 80087c2:	6a03      	ldr	r3, [r0, #32]
 80087c4:	b90b      	cbnz	r3, 80087ca <_putc_r+0x12>
 80087c6:	f7ff f921 	bl	8007a0c <__sinit>
 80087ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087cc:	07d8      	lsls	r0, r3, #31
 80087ce:	d405      	bmi.n	80087dc <_putc_r+0x24>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	0599      	lsls	r1, r3, #22
 80087d4:	d402      	bmi.n	80087dc <_putc_r+0x24>
 80087d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087d8:	f7ff fb17 	bl	8007e0a <__retarget_lock_acquire_recursive>
 80087dc:	68a3      	ldr	r3, [r4, #8]
 80087de:	3b01      	subs	r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	60a3      	str	r3, [r4, #8]
 80087e4:	da05      	bge.n	80087f2 <_putc_r+0x3a>
 80087e6:	69a2      	ldr	r2, [r4, #24]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	db12      	blt.n	8008812 <_putc_r+0x5a>
 80087ec:	b2eb      	uxtb	r3, r5
 80087ee:	2b0a      	cmp	r3, #10
 80087f0:	d00f      	beq.n	8008812 <_putc_r+0x5a>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	6022      	str	r2, [r4, #0]
 80087f8:	701d      	strb	r5, [r3, #0]
 80087fa:	b2ed      	uxtb	r5, r5
 80087fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087fe:	07da      	lsls	r2, r3, #31
 8008800:	d405      	bmi.n	800880e <_putc_r+0x56>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	059b      	lsls	r3, r3, #22
 8008806:	d402      	bmi.n	800880e <_putc_r+0x56>
 8008808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800880a:	f7ff faff 	bl	8007e0c <__retarget_lock_release_recursive>
 800880e:	4628      	mov	r0, r5
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	4629      	mov	r1, r5
 8008814:	4622      	mov	r2, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff f9e9 	bl	8007bee <__swbuf_r>
 800881c:	4605      	mov	r5, r0
 800881e:	e7ed      	b.n	80087fc <_putc_r+0x44>

08008820 <_fstat_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d07      	ldr	r5, [pc, #28]	@ (8008840 <_fstat_r+0x20>)
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	4611      	mov	r1, r2
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	f7f9 f95e 	bl	8001aee <_fstat>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	d102      	bne.n	800883c <_fstat_r+0x1c>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	b103      	cbz	r3, 800883c <_fstat_r+0x1c>
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	bd38      	pop	{r3, r4, r5, pc}
 800883e:	bf00      	nop
 8008840:	20001718 	.word	0x20001718

08008844 <_isatty_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	@ (8008860 <_isatty_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f9 f95d 	bl	8001b0e <_isatty>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_isatty_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_isatty_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20001718 	.word	0x20001718

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	@ (8008880 <_sbrk_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f9 f966 	bl	8001b40 <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	20001718 	.word	0x20001718

08008884 <_init>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr

08008890 <_fini>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr
