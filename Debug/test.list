
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08009cb4  08009cb4  0000acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abc8  0800abc8  0000c078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abc8  0800abc8  0000bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd0  0800abd0  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abd4  0800abd4  0000bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800abd8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b8  20000078  0800ac50  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800ac50  0000c730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c876  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d3  00000000  00000000  0002891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001481  00000000  00000000  0002e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ff  00000000  00000000  0002f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec6f  00000000  00000000  000542d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f4d  00000000  00000000  00072f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ae8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007728  00000000  00000000  0014aed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001525f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c9c 	.word	0x08009c9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009c9c 	.word	0x08009c9c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094
 80005ec:	200000e8 	.word	0x200000e8

080005f0 <servo1>:
void keypadTask(void const * argument);
void i2cTask03(void const * argument);

/* USER CODE BEGIN PFP */

void servo1(int d){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR2 = d;
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <servo1+0x1c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000384 	.word	0x20000384

08000610 <open>:

void open(){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	servo1(25);
 8000614:	2019      	movs	r0, #25
 8000616:	f7ff ffeb 	bl	80005f0 <servo1>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}

0800061e <close>:

void close(){
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
	servo1(125);
 8000622:	207d      	movs	r0, #125	@ 0x7d
 8000624:	f7ff ffe4 	bl	80005f0 <servo1>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f005 fa0b 	bl	8005a58 <HAL_UART_Transmit>

  return ch;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200003d0 	.word	0x200003d0

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b09c      	sub	sp, #112	@ 0x70
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 fb8c 	bl	8001d72 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f89d 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fa0d 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000662:	f000 f9ed 	bl	8000a40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f9bb 	bl	80009e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800066a:	f000 f8f7 	bl	800085c <MX_I2C1_Init>
  MX_TIM2_Init();
 800066e:	f000 f935 	bl	80008dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello \n");
 8000672:	483b      	ldr	r0, [pc, #236]	@ (8000760 <main+0x110>)
 8000674:	f008 fc6e 	bl	8008f54 <puts>

  SSD1306_Init (); // initialise the display
 8000678:	f000 fda0 	bl	80011bc <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 800067c:	210a      	movs	r1, #10
 800067e:	200a      	movs	r0, #10
 8000680:	f000 ff06 	bl	8001490 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000684:	2201      	movs	r2, #1
 8000686:	4937      	ldr	r1, [pc, #220]	@ (8000764 <main+0x114>)
 8000688:	4837      	ldr	r0, [pc, #220]	@ (8000768 <main+0x118>)
 800068a:	f000 ff95 	bl	80015b8 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800068e:	211e      	movs	r1, #30
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fefd 	bl	8001490 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	4932      	ldr	r1, [pc, #200]	@ (8000764 <main+0x114>)
 800069a:	4834      	ldr	r0, [pc, #208]	@ (800076c <main+0x11c>)
 800069c:	f000 ff8c 	bl	80015b8 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 80006a0:	f000 fe50 	bl	8001344 <SSD1306_UpdateScreen>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4832      	ldr	r0, [pc, #200]	@ (8000770 <main+0x120>)
 80006a8:	f004 f96a 	bl	8004980 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  osMutexDef(i2cMutex);
 80006ac:	2300      	movs	r3, #0
 80006ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80006b0:	2300      	movs	r3, #0
 80006b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 80006b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 ff2f 	bl	800651c <osMutexCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <main+0x124>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of i2cQ */
  osMessageQDef(i2cQ, 16, uint16_t);
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <main+0x128>)
 80006c6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80006ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQHandle = osMessageCreate(osMessageQ(i2cQ), NULL);
 80006d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 ffbc 	bl	8006654 <osMessageCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a27      	ldr	r2, [pc, #156]	@ (800077c <main+0x12c>)
 80006e0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006e2:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <main+0x130>)
 80006e4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fead 	bl	800645c <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <main+0x134>)
 8000706:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad */
  osThreadDef(keypad, keypadTask, osPriorityIdle, 0, 128);
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <main+0x138>)
 800070a:	f107 0420 	add.w	r4, r7, #32
 800070e:	461d      	mov	r5, r3
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadHandle = osThreadCreate(osThread(keypad), NULL);
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fe9a 	bl	800645c <osThreadCreate>
 8000728:	4603      	mov	r3, r0
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <main+0x13c>)
 800072c:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2c */
  osThreadDef(i2c, i2cTask03, osPriorityIdle, 0, 128);
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <main+0x140>)
 8000730:	1d3c      	adds	r4, r7, #4
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cHandle = osThreadCreate(osThread(i2c), NULL);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fe89 	bl	800645c <osThreadCreate>
 800074a:	4603      	mov	r3, r0
 800074c:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <main+0x144>)
 800074e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000750:	f005 fe7d 	bl	800644e <osKernelStart>
 8000754:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


}
 8000756:	4618      	mov	r0, r3
 8000758:	3770      	adds	r7, #112	@ 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bdb0      	pop	{r4, r5, r7, pc}
 800075e:	bf00      	nop
 8000760:	08009cb4 	.word	0x08009cb4
 8000764:	20000000 	.word	0x20000000
 8000768:	08009cbc 	.word	0x08009cbc
 800076c:	08009cc4 	.word	0x08009cc4
 8000770:	20000384 	.word	0x20000384
 8000774:	2000046c 	.word	0x2000046c
 8000778:	08009cd0 	.word	0x08009cd0
 800077c:	20000464 	.word	0x20000464
 8000780:	08009cec 	.word	0x08009cec
 8000784:	20000458 	.word	0x20000458
 8000788:	08009d10 	.word	0x08009d10
 800078c:	2000045c 	.word	0x2000045c
 8000790:	08009d30 	.word	0x08009d30
 8000794:	20000460 	.word	0x20000460

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	@ 0x58
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2244      	movs	r2, #68	@ 0x44
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fcb4 	bl	8009114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007be:	f002 fe19 	bl	80033f4 <HAL_PWREx_ControlVoltageScaling>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c8:	f000 fc70 	bl	80010ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007cc:	f002 fdf4 	bl	80033b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <SystemClock_Config+0xc0>)
 80007d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007d6:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xc0>)
 80007d8:	f023 0318 	bic.w	r3, r3, #24
 80007dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007e0:	2314      	movs	r3, #20
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f0:	2360      	movs	r3, #96	@ 0x60
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000800:	2318      	movs	r3, #24
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000804:	2307      	movs	r3, #7
 8000806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fe43 	bl	80034a0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000820:	f000 fc44 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2303      	movs	r3, #3
 800082a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fa43 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000848:	f000 fc30 	bl	80010ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800084c:	f003 fe88 	bl	8004560 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000850:	bf00      	nop
 8000852:	3758      	adds	r7, #88	@ 0x58
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000

0800085c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_I2C1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <MX_I2C1_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <MX_I2C1_Init+0x74>)
 8000898:	f001 fea0 	bl	80025dc <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 fc03 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <MX_I2C1_Init+0x74>)
 80008aa:	f002 fced 	bl	8003288 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fbfa 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_I2C1_Init+0x74>)
 80008bc:	f002 fd2f 	bl	800331e <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fbf1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002e8 	.word	0x200002e8
 80008d4:	40005400 	.word	0x40005400
 80008d8:	0090194b 	.word	0x0090194b

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8000916:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000918:	f240 3283 	movw	r2, #899	@ 0x383
 800091c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000924:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000926:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_TIM2_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000938:	4828      	ldr	r0, [pc, #160]	@ (80009dc <MX_TIM2_Init+0x100>)
 800093a:	f003 ff13 	bl	8004764 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000944:	f000 fbb2 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000956:	f004 fb0d 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000960:	f000 fba4 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000964:	481d      	ldr	r0, [pc, #116]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000966:	f003 ffa9 	bl	80048bc <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000970:	f000 fb9c 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4816      	ldr	r0, [pc, #88]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000984:	f004 ff96 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800098e:	f000 fb8d 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	@ 0x60
 8000994:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009aa:	f004 f9cf 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009b4:	f000 fb7a 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009c0:	f004 f9c4 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80009ca:	f000 fb6f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009d0:	f000 ff8e 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000384 	.word	0x20000384

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <MX_USART2_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a24:	f004 ffca 	bl	80059bc <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 fb3d 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200003d0 	.word	0x200003d0
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_DMA_Init+0x38>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <MX_DMA_Init+0x38>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_DMA_Init+0x38>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2105      	movs	r1, #5
 8000a62:	2011      	movs	r0, #17
 8000a64:	f001 fa76 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a68:	2011      	movs	r0, #17
 8000a6a:	f001 fa8f 	bl	8001f8c <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a3f      	ldr	r2, [pc, #252]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a39      	ldr	r2, [pc, #228]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a33      	ldr	r2, [pc, #204]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <MX_GPIO_Init+0x118>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f001 fd4a 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	210a      	movs	r1, #10
 8000aec:	482a      	ldr	r0, [pc, #168]	@ (8000b98 <MX_GPIO_Init+0x11c>)
 8000aee:	f001 fd45 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R1_Pin|R2_Pin;
 8000af2:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0e:	f001 fbb3 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481c      	ldr	r0, [pc, #112]	@ (8000b98 <MX_GPIO_Init+0x11c>)
 8000b28:	f001 fba6 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin LD3_Pin */
  GPIO_InitStruct.Pin = R3_Pin|LD3_Pin;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <MX_GPIO_Init+0x11c>)
 8000b44:	f001 fb98 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000b48:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b60:	f001 fb8a 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000b64:	2330      	movs	r3, #48	@ 0x30
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <MX_GPIO_Init+0x11c>)
 8000b78:	f001 fb7e 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2006      	movs	r0, #6
 8000b82:	f001 f9e7 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b86:	2006      	movs	r0, #6
 8000b88:	f001 fa00 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f005 fca5 	bl	80064f4 <osDelay>
 8000baa:	e7fb      	b.n	8000ba4 <StartDefaultTask+0x8>

08000bac <read_keypad>:
* @brief Function implementing the keypad thread.
* @param argument: Not used
* @retval None
*/
char read_keypad(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    // --- Scan Row 1 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  // Set Row 1 low
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f001 fcdf 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);      // Set Row 2 high
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f001 fcd8 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);      // Set Row 3 high
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	48c3      	ldr	r0, [pc, #780]	@ (8000ee0 <read_keypad+0x334>)
 8000bd2:	f001 fcd3 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);      // Set Row 4 high
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f001 fccd 	bl	800257c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f001 fcaf 	bl	800254c <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10b      	bne.n	8000c0c <read_keypad+0x60>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000bf4:	bf00      	nop
 8000bf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfe:	f001 fca5 	bl	800254c <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f6      	beq.n	8000bf6 <read_keypad+0x4a>
        return '1';
 8000c08:	2331      	movs	r3, #49	@ 0x31
 8000c0a:	e166      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f001 fc9a 	bl	800254c <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10b      	bne.n	8000c36 <read_keypad+0x8a>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000c1e:	bf00      	nop
 8000c20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c28:	f001 fc90 	bl	800254c <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f6      	beq.n	8000c20 <read_keypad+0x74>
        return '2';
 8000c32:	2332      	movs	r3, #50	@ 0x32
 8000c34:	e151      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000c36:	2120      	movs	r1, #32
 8000c38:	48a9      	ldr	r0, [pc, #676]	@ (8000ee0 <read_keypad+0x334>)
 8000c3a:	f001 fc87 	bl	800254c <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <read_keypad+0xac>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000c44:	bf00      	nop
 8000c46:	2120      	movs	r1, #32
 8000c48:	48a5      	ldr	r0, [pc, #660]	@ (8000ee0 <read_keypad+0x334>)
 8000c4a:	f001 fc7f 	bl	800254c <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f8      	beq.n	8000c46 <read_keypad+0x9a>
        return '3';
 8000c54:	2333      	movs	r3, #51	@ 0x33
 8000c56:	e140      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000c58:	2110      	movs	r1, #16
 8000c5a:	48a1      	ldr	r0, [pc, #644]	@ (8000ee0 <read_keypad+0x334>)
 8000c5c:	f001 fc76 	bl	800254c <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <read_keypad+0xce>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000c66:	bf00      	nop
 8000c68:	2110      	movs	r1, #16
 8000c6a:	489d      	ldr	r0, [pc, #628]	@ (8000ee0 <read_keypad+0x334>)
 8000c6c:	f001 fc6e 	bl	800254c <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f8      	beq.n	8000c68 <read_keypad+0xbc>
        return 'A';
 8000c76:	2341      	movs	r3, #65	@ 0x41
 8000c78:	e12f      	b.n	8000eda <read_keypad+0x32e>
    }

    // --- Scan Row 2 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f001 fc7a 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Set Row 2 low
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f001 fc73 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4891      	ldr	r0, [pc, #580]	@ (8000ee0 <read_keypad+0x334>)
 8000c9c:	f001 fc6e 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f001 fc68 	bl	800257c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f001 fc4a 	bl	800254c <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10b      	bne.n	8000cd6 <read_keypad+0x12a>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000cbe:	bf00      	nop
 8000cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f001 fc40 	bl	800254c <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f6      	beq.n	8000cc0 <read_keypad+0x114>
        return '4';
 8000cd2:	2334      	movs	r3, #52	@ 0x34
 8000cd4:	e101      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f001 fc35 	bl	800254c <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10b      	bne.n	8000d00 <read_keypad+0x154>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000ce8:	bf00      	nop
 8000cea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f001 fc2b 	bl	800254c <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f6      	beq.n	8000cea <read_keypad+0x13e>
        return '5';
 8000cfc:	2335      	movs	r3, #53	@ 0x35
 8000cfe:	e0ec      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000d00:	2120      	movs	r1, #32
 8000d02:	4877      	ldr	r0, [pc, #476]	@ (8000ee0 <read_keypad+0x334>)
 8000d04:	f001 fc22 	bl	800254c <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <read_keypad+0x176>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000d0e:	bf00      	nop
 8000d10:	2120      	movs	r1, #32
 8000d12:	4873      	ldr	r0, [pc, #460]	@ (8000ee0 <read_keypad+0x334>)
 8000d14:	f001 fc1a 	bl	800254c <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f8      	beq.n	8000d10 <read_keypad+0x164>
        return '6';
 8000d1e:	2336      	movs	r3, #54	@ 0x36
 8000d20:	e0db      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000d22:	2110      	movs	r1, #16
 8000d24:	486e      	ldr	r0, [pc, #440]	@ (8000ee0 <read_keypad+0x334>)
 8000d26:	f001 fc11 	bl	800254c <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d109      	bne.n	8000d44 <read_keypad+0x198>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000d30:	bf00      	nop
 8000d32:	2110      	movs	r1, #16
 8000d34:	486a      	ldr	r0, [pc, #424]	@ (8000ee0 <read_keypad+0x334>)
 8000d36:	f001 fc09 	bl	800254c <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f8      	beq.n	8000d32 <read_keypad+0x186>
        return 'B';
 8000d40:	2342      	movs	r3, #66	@ 0x42
 8000d42:	e0ca      	b.n	8000eda <read_keypad+0x32e>
    }

    // --- Scan Row 3 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f001 fc15 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f001 fc0e 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Set Row 3 low
 8000d60:	2200      	movs	r2, #0
 8000d62:	2102      	movs	r1, #2
 8000d64:	485e      	ldr	r0, [pc, #376]	@ (8000ee0 <read_keypad+0x334>)
 8000d66:	f001 fc09 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d72:	f001 fc03 	bl	800257c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f001 fbe5 	bl	800254c <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <read_keypad+0x1f4>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000d88:	bf00      	nop
 8000d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f001 fbdb 	bl	800254c <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f6      	beq.n	8000d8a <read_keypad+0x1de>
        return '7';
 8000d9c:	2337      	movs	r3, #55	@ 0x37
 8000d9e:	e09c      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000da0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da8:	f001 fbd0 	bl	800254c <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <read_keypad+0x21e>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000db2:	bf00      	nop
 8000db4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbc:	f001 fbc6 	bl	800254c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f6      	beq.n	8000db4 <read_keypad+0x208>
        return '8';
 8000dc6:	2338      	movs	r3, #56	@ 0x38
 8000dc8:	e087      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000dca:	2120      	movs	r1, #32
 8000dcc:	4844      	ldr	r0, [pc, #272]	@ (8000ee0 <read_keypad+0x334>)
 8000dce:	f001 fbbd 	bl	800254c <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <read_keypad+0x240>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000dd8:	bf00      	nop
 8000dda:	2120      	movs	r1, #32
 8000ddc:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <read_keypad+0x334>)
 8000dde:	f001 fbb5 	bl	800254c <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f8      	beq.n	8000dda <read_keypad+0x22e>
        return '9';
 8000de8:	2339      	movs	r3, #57	@ 0x39
 8000dea:	e076      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000dec:	2110      	movs	r1, #16
 8000dee:	483c      	ldr	r0, [pc, #240]	@ (8000ee0 <read_keypad+0x334>)
 8000df0:	f001 fbac 	bl	800254c <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d109      	bne.n	8000e0e <read_keypad+0x262>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000dfa:	bf00      	nop
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4838      	ldr	r0, [pc, #224]	@ (8000ee0 <read_keypad+0x334>)
 8000e00:	f001 fba4 	bl	800254c <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f8      	beq.n	8000dfc <read_keypad+0x250>
        return 'C';
 8000e0a:	2343      	movs	r3, #67	@ 0x43
 8000e0c:	e065      	b.n	8000eda <read_keypad+0x32e>
    }

    // --- Scan Row 4 ---
    HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f001 fbb0 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e26:	f001 fba9 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	482c      	ldr	r0, [pc, #176]	@ (8000ee0 <read_keypad+0x334>)
 8000e30:	f001 fba4 	bl	800257c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Set Row 4 low
 8000e34:	2200      	movs	r2, #0
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f001 fb9e 	bl	800257c <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET)
 8000e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f001 fb80 	bl	800254c <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10b      	bne.n	8000e6a <read_keypad+0x2be>
    {
        while(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin) == GPIO_PIN_RESET);
 8000e52:	bf00      	nop
 8000e54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 fb76 	bl	800254c <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f6      	beq.n	8000e54 <read_keypad+0x2a8>
        return '*';
 8000e66:	232a      	movs	r3, #42	@ 0x2a
 8000e68:	e037      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET)
 8000e6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f001 fb6b 	bl	800254c <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10b      	bne.n	8000e94 <read_keypad+0x2e8>
    {
        while(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin) == GPIO_PIN_RESET);
 8000e7c:	bf00      	nop
 8000e7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 fb61 	bl	800254c <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f6      	beq.n	8000e7e <read_keypad+0x2d2>
        return '0';
 8000e90:	2330      	movs	r3, #48	@ 0x30
 8000e92:	e022      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET)
 8000e94:	2120      	movs	r1, #32
 8000e96:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <read_keypad+0x334>)
 8000e98:	f001 fb58 	bl	800254c <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <read_keypad+0x30a>
    {
        while(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin) == GPIO_PIN_RESET);
 8000ea2:	bf00      	nop
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	480e      	ldr	r0, [pc, #56]	@ (8000ee0 <read_keypad+0x334>)
 8000ea8:	f001 fb50 	bl	800254c <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f8      	beq.n	8000ea4 <read_keypad+0x2f8>
        return '#';
 8000eb2:	2323      	movs	r3, #35	@ 0x23
 8000eb4:	e011      	b.n	8000eda <read_keypad+0x32e>
    }
    if(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET)
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <read_keypad+0x334>)
 8000eba:	f001 fb47 	bl	800254c <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d109      	bne.n	8000ed8 <read_keypad+0x32c>
    {
        while(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin) == GPIO_PIN_RESET);
 8000ec4:	bf00      	nop
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <read_keypad+0x334>)
 8000eca:	f001 fb3f 	bl	800254c <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f8      	beq.n	8000ec6 <read_keypad+0x31a>
        return 'D';
 8000ed4:	2344      	movs	r3, #68	@ 0x44
 8000ed6:	e000      	b.n	8000eda <read_keypad+0x32e>
    }

    // If no key is pressed, return null character.
    return '\0';
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <keypadTask>:

/* USER CODE END Header_keypadTask */
void keypadTask(void const * argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	  // Index for current position in the PIN buffer.
	  static uint8_t pin_index = 0;

	  for(;;)
	  {
	    key = read_keypad();  // Scan the keypad
 8000eec:	f7ff fe5e 	bl	8000bac <read_keypad>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73bb      	strb	r3, [r7, #14]
	    if(key != '\0')
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8099 	beq.w	800102e <keypadTask+0x14a>
	    {
	      // If a numeric key (0-9) is pressed, append it if there is space.
	      if(key >= '0' && key <= '9')
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f00:	d917      	bls.n	8000f32 <keypadTask+0x4e>
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2b39      	cmp	r3, #57	@ 0x39
 8000f06:	d814      	bhi.n	8000f32 <keypadTask+0x4e>
	      {
	        if(pin_index < 4)
 8000f08:	4b4b      	ldr	r3, [pc, #300]	@ (8001038 <keypadTask+0x154>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d85c      	bhi.n	8000fca <keypadTask+0xe6>
	        {
	          pin[pin_index++] = key;
 8000f10:	4b49      	ldr	r3, [pc, #292]	@ (8001038 <keypadTask+0x154>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	b2d1      	uxtb	r1, r2
 8000f18:	4a47      	ldr	r2, [pc, #284]	@ (8001038 <keypadTask+0x154>)
 8000f1a:	7011      	strb	r1, [r2, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4a47      	ldr	r2, [pc, #284]	@ (800103c <keypadTask+0x158>)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	5453      	strb	r3, [r2, r1]
	          pin[pin_index] = '\0';
 8000f24:	4b44      	ldr	r3, [pc, #272]	@ (8001038 <keypadTask+0x154>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b44      	ldr	r3, [pc, #272]	@ (800103c <keypadTask+0x158>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	5499      	strb	r1, [r3, r2]
	        if(pin_index < 4)
 8000f30:	e04b      	b.n	8000fca <keypadTask+0xe6>
	        }
	      }
	      // If '*' is pressed, clear the current PIN entry.
	      else if(key == '*')
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f36:	d106      	bne.n	8000f46 <keypadTask+0x62>
	      {
	        pin_index = 0;
 8000f38:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <keypadTask+0x154>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800103c <keypadTask+0x158>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e041      	b.n	8000fca <keypadTask+0xe6>
	      }
	      // If '#' is pressed, assume it's a submit.
	      // (For example, check if the PIN is correct, then clear the buffer.)
	      else if(key == '#')
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	2b23      	cmp	r3, #35	@ 0x23
 8000f4a:	d133      	bne.n	8000fb4 <keypadTask+0xd0>
	      {
	        // Example PIN check (replace "1234" with your desired PIN)
          if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <keypadTask+0x15c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 faf9 	bl	800654c <osMutexWait>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11e      	bne.n	8000f9e <keypadTask+0xba>
          {
            SSD1306_Clear();
 8000f60:	f000 fb4f 	bl	8001602 <SSD1306_Clear>
            SSD1306_GotoXY(0, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 fa92 	bl	8001490 <SSD1306_GotoXY>
            if(strcmp(pin, password) == 0)
 8000f6c:	4935      	ldr	r1, [pc, #212]	@ (8001044 <keypadTask+0x160>)
 8000f6e:	4833      	ldr	r0, [pc, #204]	@ (800103c <keypadTask+0x158>)
 8000f70:	f7ff f92e 	bl	80001d0 <strcmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d105      	bne.n	8000f86 <keypadTask+0xa2>
            {
              SSD1306_Puts("PIN OK", &Font_11x18, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4932      	ldr	r1, [pc, #200]	@ (8001048 <keypadTask+0x164>)
 8000f7e:	4833      	ldr	r0, [pc, #204]	@ (800104c <keypadTask+0x168>)
 8000f80:	f000 fb1a 	bl	80015b8 <SSD1306_Puts>
 8000f84:	e004      	b.n	8000f90 <keypadTask+0xac>
            }
            else
            {
              SSD1306_Puts("PIN ERR", &Font_11x18, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	492f      	ldr	r1, [pc, #188]	@ (8001048 <keypadTask+0x164>)
 8000f8a:	4831      	ldr	r0, [pc, #196]	@ (8001050 <keypadTask+0x16c>)
 8000f8c:	f000 fb14 	bl	80015b8 <SSD1306_Puts>
            }
            SSD1306_UpdateScreen();
 8000f90:	f000 f9d8 	bl	8001344 <SSD1306_UpdateScreen>
            osMutexRelease(i2cMutexHandle);
 8000f94:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <keypadTask+0x15c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fb25 	bl	80065e8 <osMutexRelease>
          }
	        osDelay(1000);  // Show the result for a second
 8000f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa2:	f005 faa7 	bl	80064f4 <osDelay>

	        // Clear the PIN buffer after submission.
	        pin_index = 0;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <keypadTask+0x154>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	        pin[0] = '\0';
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <keypadTask+0x158>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e00a      	b.n	8000fca <keypadTask+0xe6>
	      }
	      else if(key == 'A'){
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b41      	cmp	r3, #65	@ 0x41
 8000fb8:	d102      	bne.n	8000fc0 <keypadTask+0xdc>
	    	  open();
 8000fba:	f7ff fb29 	bl	8000610 <open>
 8000fbe:	e004      	b.n	8000fca <keypadTask+0xe6>
	      }
	      else if(key == 'B'){
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b42      	cmp	r3, #66	@ 0x42
 8000fc4:	d101      	bne.n	8000fca <keypadTask+0xe6>
	      	  close();
 8000fc6:	f7ff fb2a 	bl	800061e <close>
	      }

	      // After any key action update the display with the masked PIN.
        if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <keypadTask+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 faba 	bl	800654c <osMutexWait>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d121      	bne.n	8001022 <keypadTask+0x13e>
        {
          SSD1306_Clear();
 8000fde:	f000 fb10 	bl	8001602 <SSD1306_Clear>
          SSD1306_GotoXY(0, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fa53 	bl	8001490 <SSD1306_GotoXY>
          SSD1306_Puts("PIN: ", &Font_11x18, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4916      	ldr	r1, [pc, #88]	@ (8001048 <keypadTask+0x164>)
 8000fee:	4819      	ldr	r0, [pc, #100]	@ (8001054 <keypadTask+0x170>)
 8000ff0:	f000 fae2 	bl	80015b8 <SSD1306_Puts>
          // Print an asterisk for each digit entered.
          for(uint8_t i = 0; i < pin_index; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e007      	b.n	800100a <keypadTask+0x126>
          {
            SSD1306_Puts("x", &Font_11x18, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4912      	ldr	r1, [pc, #72]	@ (8001048 <keypadTask+0x164>)
 8000ffe:	4816      	ldr	r0, [pc, #88]	@ (8001058 <keypadTask+0x174>)
 8001000:	f000 fada 	bl	80015b8 <SSD1306_Puts>
          for(uint8_t i = 0; i < pin_index; i++)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <keypadTask+0x154>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f2      	bcc.n	8000ffa <keypadTask+0x116>
          }
          SSD1306_UpdateScreen();
 8001014:	f000 f996 	bl	8001344 <SSD1306_UpdateScreen>
          osMutexRelease(i2cMutexHandle);
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <keypadTask+0x15c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fae3 	bl	80065e8 <osMutexRelease>
        }

	      // (Optional) Debug print to UART.
	      printf("Key pressed: %c, current PIN: %s\r\n", key, pin);
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	4a05      	ldr	r2, [pc, #20]	@ (800103c <keypadTask+0x158>)
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <keypadTask+0x178>)
 800102a:	f007 ff23 	bl	8008e74 <iprintf>
	    }
	    osDelay(50); // Delay to help with debouncing and reduce CPU load.
 800102e:	2032      	movs	r0, #50	@ 0x32
 8001030:	f005 fa60 	bl	80064f4 <osDelay>
	    key = read_keypad();  // Scan the keypad
 8001034:	e75a      	b.n	8000eec <keypadTask+0x8>
 8001036:	bf00      	nop
 8001038:	20000470 	.word	0x20000470
 800103c:	20000474 	.word	0x20000474
 8001040:	2000046c 	.word	0x2000046c
 8001044:	20000008 	.word	0x20000008
 8001048:	20000000 	.word	0x20000000
 800104c:	08009d4c 	.word	0x08009d4c
 8001050:	08009d54 	.word	0x08009d54
 8001054:	08009d5c 	.word	0x08009d5c
 8001058:	08009d64 	.word	0x08009d64
 800105c:	08009d68 	.word	0x08009d68

08001060 <i2cTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask03 */
void i2cTask03(void const * argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	      /* USER CODE END WHILE */

	      /* USER CODE BEGIN 3 */
	      if (esp32_data_ready)
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <i2cTask03+0x24>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <i2cTask03+0x1a>
	  	      {
	  	          esp32_data_ready = 0;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <i2cTask03+0x24>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	  	          // do the read
	  	          SlaveDataReady_Callback();
 8001076:	f000 f81f 	bl	80010b8 <SlaveDataReady_Callback>
	  	      }
	    /* USER CODE END 3 */
    osDelay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f005 fa3a 	bl	80064f4 <osDelay>
	      if (esp32_data_ready)
 8001080:	e7f2      	b.n	8001068 <i2cTask03+0x8>
 8001082:	bf00      	nop
 8001084:	20000468 	.word	0x20000468

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800109a:	f000 fe83 	bl	8001da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40012c00 	.word	0x40012c00

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
    if (osMutexWait(i2cMutexHandle, osWaitForever) == osOK)
 80010c8:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <SlaveDataReady_Callback+0xec>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fa3b 	bl	800654c <osMutexWait>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d15e      	bne.n	800119a <SlaveDataReady_Callback+0xe2>
    {
      if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 8, 100) == HAL_OK)
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	2364      	movs	r3, #100	@ 0x64
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2308      	movs	r3, #8
 80010e6:	21c0      	movs	r1, #192	@ 0xc0
 80010e8:	482f      	ldr	r0, [pc, #188]	@ (80011a8 <SlaveDataReady_Callback+0xf0>)
 80010ea:	f001 fc2b 	bl	8002944 <HAL_I2C_Master_Receive>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d14a      	bne.n	800118a <SlaveDataReady_Callback+0xd2>
      {
          printf("Received from ESP32 1:");
 80010f4:	482d      	ldr	r0, [pc, #180]	@ (80011ac <SlaveDataReady_Callback+0xf4>)
 80010f6:	f007 febd 	bl	8008e74 <iprintf>
          for(int i=0; i<8; i++){
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e00b      	b.n	8001118 <SlaveDataReady_Callback+0x60>
            printf("0x%02X ", rxBuffer[i]);
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <SlaveDataReady_Callback+0xf8>)
 800110e:	f007 feb1 	bl	8008e74 <iprintf>
          for(int i=0; i<8; i++){
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b07      	cmp	r3, #7
 800111c:	ddf0      	ble.n	8001100 <SlaveDataReady_Callback+0x48>
          }
          printf("\n");
 800111e:	200a      	movs	r0, #10
 8001120:	f007 feba 	bl	8008e98 <putchar>

          char topic = rxBuffer[0];
 8001124:	7a3b      	ldrb	r3, [r7, #8]
 8001126:	75fb      	strb	r3, [r7, #23]
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	061a      	lsls	r2, r3, #24
                           ((uint32_t)rxBuffer[3] << 16) |
 800112c:	7afb      	ldrb	r3, [r7, #11]
 800112e:	041b      	lsls	r3, r3, #16
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 8001130:	431a      	orrs	r2, r3
                           ((uint32_t)rxBuffer[2] <<  8) |
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	021b      	lsls	r3, r3, #8
                           ((uint32_t)rxBuffer[3] << 16) |
 8001136:	4313      	orrs	r3, r2
                           ((uint32_t)rxBuffer[1]      );
 8001138:	7a7a      	ldrb	r2, [r7, #9]
          uint32_t value = ((uint32_t)rxBuffer[4] << 24) |
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
          if(topic == 'o'){
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	2b6f      	cmp	r3, #111	@ 0x6f
 8001142:	d101      	bne.n	8001148 <SlaveDataReady_Callback+0x90>
        	  open();
 8001144:	f7ff fa64 	bl	8000610 <open>
          }
          if(topic == 'c'){
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b63      	cmp	r3, #99	@ 0x63
 800114c:	d101      	bne.n	8001152 <SlaveDataReady_Callback+0x9a>
        	  close();
 800114e:	f7ff fa66 	bl	800061e <close>
          }
          if(topic == 'p'){
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b70      	cmp	r3, #112	@ 0x70
 8001156:	d11b      	bne.n	8001190 <SlaveDataReady_Callback+0xd8>
        	  char snum[4];
        	  itoa(value, snum, 10);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1d39      	adds	r1, r7, #4
 800115c:	220a      	movs	r2, #10
 800115e:	4618      	mov	r0, r3
 8001160:	f007 fd82 	bl	8008c68 <itoa>
        	  for(int i=0; i<4; i++){
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	e00b      	b.n	8001182 <SlaveDataReady_Callback+0xca>
        		  password[i] = snum[i];
 800116a:	1d3a      	adds	r2, r7, #4
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4413      	add	r3, r2
 8001170:	7819      	ldrb	r1, [r3, #0]
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <SlaveDataReady_Callback+0xfc>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	4413      	add	r3, r2
 8001178:	460a      	mov	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]
        	  for(int i=0; i<4; i++){
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	3301      	adds	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b03      	cmp	r3, #3
 8001186:	ddf0      	ble.n	800116a <SlaveDataReady_Callback+0xb2>
 8001188:	e002      	b.n	8001190 <SlaveDataReady_Callback+0xd8>
        	  }
          }
      }
      else
      {
          printf("I2C read error ESP 1\n");
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <SlaveDataReady_Callback+0x100>)
 800118c:	f007 fee2 	bl	8008f54 <puts>
      }
      osMutexRelease(i2cMutexHandle);
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <SlaveDataReady_Callback+0xec>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f005 fa27 	bl	80065e8 <osMutexRelease>
    }
}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000046c 	.word	0x2000046c
 80011a8:	200002e8 	.word	0x200002e8
 80011ac:	08009d8c 	.word	0x08009d8c
 80011b0:	08009da4 	.word	0x08009da4
 80011b4:	20000008 	.word	0x20000008
 80011b8:	08009dac 	.word	0x08009dac

080011bc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011c2:	f000 fa27 	bl	8001614 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80011ca:	2201      	movs	r2, #1
 80011cc:	2178      	movs	r1, #120	@ 0x78
 80011ce:	485b      	ldr	r0, [pc, #364]	@ (800133c <SSD1306_Init+0x180>)
 80011d0:	f001 fcae 	bl	8002b30 <HAL_I2C_IsDeviceReady>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e0a9      	b.n	8001332 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80011de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80011e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e4:	e002      	b.n	80011ec <SSD1306_Init+0x30>
		p--;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011f2:	22ae      	movs	r2, #174	@ 0xae
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	@ 0x78
 80011f8:	f000 fa88 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	@ 0x78
 8001202:	f000 fa83 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001206:	2210      	movs	r2, #16
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	@ 0x78
 800120c:	f000 fa7e 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001210:	22b0      	movs	r2, #176	@ 0xb0
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 fa79 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800121a:	22c8      	movs	r2, #200	@ 0xc8
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	@ 0x78
 8001220:	f000 fa74 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	@ 0x78
 800122a:	f000 fa6f 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800122e:	2210      	movs	r2, #16
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	@ 0x78
 8001234:	f000 fa6a 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001238:	2240      	movs	r2, #64	@ 0x40
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	@ 0x78
 800123e:	f000 fa65 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001242:	2281      	movs	r2, #129	@ 0x81
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f000 fa60 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800124c:	22ff      	movs	r2, #255	@ 0xff
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	@ 0x78
 8001252:	f000 fa5b 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001256:	22a1      	movs	r2, #161	@ 0xa1
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	@ 0x78
 800125c:	f000 fa56 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001260:	22a6      	movs	r2, #166	@ 0xa6
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	@ 0x78
 8001266:	f000 fa51 	bl	800170c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800126a:	22a8      	movs	r2, #168	@ 0xa8
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	@ 0x78
 8001270:	f000 fa4c 	bl	800170c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001274:	223f      	movs	r2, #63	@ 0x3f
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	@ 0x78
 800127a:	f000 fa47 	bl	800170c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800127e:	22a4      	movs	r2, #164	@ 0xa4
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	@ 0x78
 8001284:	f000 fa42 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001288:	22d3      	movs	r2, #211	@ 0xd3
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	@ 0x78
 800128e:	f000 fa3d 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	@ 0x78
 8001298:	f000 fa38 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800129c:	22d5      	movs	r2, #213	@ 0xd5
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	@ 0x78
 80012a2:	f000 fa33 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012a6:	22f0      	movs	r2, #240	@ 0xf0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	@ 0x78
 80012ac:	f000 fa2e 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012b0:	22d9      	movs	r2, #217	@ 0xd9
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	@ 0x78
 80012b6:	f000 fa29 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012ba:	2222      	movs	r2, #34	@ 0x22
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	@ 0x78
 80012c0:	f000 fa24 	bl	800170c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012c4:	22da      	movs	r2, #218	@ 0xda
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f000 fa1f 	bl	800170c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80012ce:	2212      	movs	r2, #18
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	@ 0x78
 80012d4:	f000 fa1a 	bl	800170c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012d8:	22db      	movs	r2, #219	@ 0xdb
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	@ 0x78
 80012de:	f000 fa15 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012e2:	2220      	movs	r2, #32
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	@ 0x78
 80012e8:	f000 fa10 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012ec:	228d      	movs	r2, #141	@ 0x8d
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	@ 0x78
 80012f2:	f000 fa0b 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012f6:	2214      	movs	r2, #20
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	@ 0x78
 80012fc:	f000 fa06 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001300:	22af      	movs	r2, #175	@ 0xaf
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f000 fa01 	bl	800170c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800130a:	222e      	movs	r2, #46	@ 0x2e
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	@ 0x78
 8001310:	f000 f9fc 	bl	800170c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f843 	bl	80013a0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800131a:	f000 f813 	bl	8001344 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <SSD1306_Init+0x184>)
 8001320:	2200      	movs	r2, #0
 8001322:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SSD1306_Init+0x184>)
 8001326:	2200      	movs	r2, #0
 8001328:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SSD1306_Init+0x184>)
 800132c:	2201      	movs	r2, #1
 800132e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001330:	2301      	movs	r3, #1
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002e8 	.word	0x200002e8
 8001340:	2000087c 	.word	0x2000087c

08001344 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	e01d      	b.n	800138c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	3b50      	subs	r3, #80	@ 0x50
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	@ 0x78
 800135c:	f000 f9d6 	bl	800170c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2078      	movs	r0, #120	@ 0x78
 8001366:	f000 f9d1 	bl	800170c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800136a:	2210      	movs	r2, #16
 800136c:	2100      	movs	r1, #0
 800136e:	2078      	movs	r0, #120	@ 0x78
 8001370:	f000 f9cc 	bl	800170c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4a08      	ldr	r2, [pc, #32]	@ (800139c <SSD1306_UpdateScreen+0x58>)
 800137a:	441a      	add	r2, r3
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	2140      	movs	r1, #64	@ 0x40
 8001380:	2078      	movs	r0, #120	@ 0x78
 8001382:	f000 f95d 	bl	8001640 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	3301      	adds	r3, #1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b07      	cmp	r3, #7
 8001390:	d9de      	bls.n	8001350 <SSD1306_UpdateScreen+0xc>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000047c 	.word	0x2000047c

080013a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <SSD1306_Fill+0x14>
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <SSD1306_Fill+0x16>
 80013b4:	23ff      	movs	r3, #255	@ 0xff
 80013b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ba:	4619      	mov	r1, r3
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <SSD1306_Fill+0x2c>)
 80013be:	f007 fea9 	bl	8009114 <memset>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000047c 	.word	0x2000047c

080013d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
 80013da:	460b      	mov	r3, r1
 80013dc:	80bb      	strh	r3, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	70fb      	strb	r3, [r7, #3]
	if (
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e6:	d848      	bhi.n	800147a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80013ec:	d845      	bhi.n	800147a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <SSD1306_DrawPixel+0xb8>)
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d11a      	bne.n	8001440 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	b298      	uxth	r0, r3
 8001412:	4603      	mov	r3, r0
 8001414:	01db      	lsls	r3, r3, #7
 8001416:	4413      	add	r3, r2
 8001418:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <SSD1306_DrawPixel+0xbc>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	b25a      	sxtb	r2, r3
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b259      	sxtb	r1, r3
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	4603      	mov	r3, r0
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	b2c9      	uxtb	r1, r1
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <SSD1306_DrawPixel+0xbc>)
 800143c:	54d1      	strb	r1, [r2, r3]
 800143e:	e01d      	b.n	800147c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001440:	88fa      	ldrh	r2, [r7, #6]
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	b298      	uxth	r0, r3
 8001448:	4603      	mov	r3, r0
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4413      	add	r3, r2
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <SSD1306_DrawPixel+0xbc>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	b25a      	sxtb	r2, r3
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4013      	ands	r3, r2
 8001468:	b259      	sxtb	r1, r3
 800146a:	88fa      	ldrh	r2, [r7, #6]
 800146c:	4603      	mov	r3, r0
 800146e:	01db      	lsls	r3, r3, #7
 8001470:	4413      	add	r3, r2
 8001472:	b2c9      	uxtb	r1, r1
 8001474:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SSD1306_DrawPixel+0xbc>)
 8001476:	54d1      	strb	r1, [r2, r3]
 8001478:	e000      	b.n	800147c <SSD1306_DrawPixel+0xac>
		return;
 800147a:	bf00      	nop
	}
}
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000087c 	.word	0x2000087c
 800148c:	2000047c 	.word	0x2000047c

08001490 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <SSD1306_GotoXY+0x28>)
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <SSD1306_GotoXY+0x28>)
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	8053      	strh	r3, [r2, #2]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	2000087c 	.word	0x2000087c

080014bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <SSD1306_Putc+0xf8>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
	if (
 80014d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014da:	dc07      	bgt.n	80014ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014dc:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <SSD1306_Putc+0xf8>)
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	461a      	mov	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80014ea:	dd01      	ble.n	80014f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e05d      	b.n	80015ac <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e04b      	b.n	800158e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3b20      	subs	r3, #32
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	7849      	ldrb	r1, [r1, #1]
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4619      	mov	r1, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	440b      	add	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	e030      	b.n	800157c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800152a:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <SSD1306_Putc+0xf8>)
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b298      	uxth	r0, r3
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <SSD1306_Putc+0xf8>)
 8001538:	885a      	ldrh	r2, [r3, #2]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	79ba      	ldrb	r2, [r7, #6]
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff ff43 	bl	80013d0 <SSD1306_DrawPixel>
 800154a:	e014      	b.n	8001576 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <SSD1306_Putc+0xf8>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b298      	uxth	r0, r3
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <SSD1306_Putc+0xf8>)
 800155a:	885a      	ldrh	r2, [r3, #2]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b299      	uxth	r1, r3
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	f7ff ff2d 	bl	80013d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4293      	cmp	r3, r2
 8001586:	d3c8      	bcc.n	800151a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	461a      	mov	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4293      	cmp	r3, r2
 8001598:	d3ad      	bcc.n	80014f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SSD1306_Putc+0xf8>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <SSD1306_Putc+0xf8>)
 80015a8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000087c 	.word	0x2000087c

080015b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015c6:	e012      	b.n	80015ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff73 	bl	80014bc <SSD1306_Putc>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d002      	beq.n	80015e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	e008      	b.n	80015fa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e8      	bne.n	80015c8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	781b      	ldrb	r3, [r3, #0]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff feca 	bl	80013a0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800160c:	f7ff fe9a 	bl	8001344 <SSD1306_UpdateScreen>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <ssd1306_I2C_Init+0x28>)
 800161c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800161e:	e002      	b.n	8001626 <ssd1306_I2C_Init+0x12>
		p--;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f9      	bne.n	8001620 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0003d090 	.word	0x0003d090

08001640 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b0c7      	sub	sp, #284	@ 0x11c
 8001644:	af02      	add	r7, sp, #8
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800164e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001652:	600a      	str	r2, [r1, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800165e:	4622      	mov	r2, r4
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001666:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800166a:	4602      	mov	r2, r0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001676:	460a      	mov	r2, r1
 8001678:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800167a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800167e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001682:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001686:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001694:	e015      	b.n	80016c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001696:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800169a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800169e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	441a      	add	r2, r3
 80016a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016aa:	3301      	adds	r3, #1
 80016ac:	7811      	ldrb	r1, [r2, #0]
 80016ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016b2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016b8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016bc:	3301      	adds	r3, #1
 80016be:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016cc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016d0:	8812      	ldrh	r2, [r2, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d8df      	bhi.n	8001696 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80016d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f107 020c 	add.w	r2, r7, #12
 80016f4:	200a      	movs	r0, #10
 80016f6:	9000      	str	r0, [sp, #0]
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <ssd1306_I2C_WriteMulti+0xc8>)
 80016fa:	f001 f80b 	bl	8002714 <HAL_I2C_Master_Transmit>
}
 80016fe:	bf00      	nop
 8001700:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	200002e8 	.word	0x200002e8

0800170c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	460b      	mov	r3, r1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	4613      	mov	r3, r2
 800171c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	b299      	uxth	r1, r3
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	230a      	movs	r3, #10
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2302      	movs	r3, #2
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <ssd1306_I2C_Write+0x38>)
 8001736:	f000 ffed 	bl	8002714 <HAL_I2C_Master_Transmit>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002e8 	.word	0x200002e8

08001748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_MspInit+0x4c>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_MspInit+0x4c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	@ 0x60
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_MspInit+0x4c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_MspInit+0x4c>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_MspInit+0x4c>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	210f      	movs	r1, #15
 8001782:	f06f 0001 	mvn.w	r0, #1
 8001786:	f000 fbe5 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09e      	sub	sp, #120	@ 0x78
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2254      	movs	r2, #84	@ 0x54
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 fcab 	bl	8009114 <memset>
  if(hi2c->Instance==I2C1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a37      	ldr	r2, [pc, #220]	@ (80018a0 <HAL_I2C_MspInit+0x108>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d166      	bne.n	8001896 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c8:	2340      	movs	r3, #64	@ 0x40
 80017ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fccd 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017e0:	f7ff fc64 	bl	80010ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a2e      	ldr	r2, [pc, #184]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f0:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fc:	23c0      	movs	r3, #192	@ 0xc0
 80017fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180c:	2304      	movs	r3, #4
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001814:	4619      	mov	r1, r3
 8001816:	4824      	ldr	r0, [pc, #144]	@ (80018a8 <HAL_I2C_MspInit+0x110>)
 8001818:	f000 fd2e 	bl	8002278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181c:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a20      	ldr	r2, [pc, #128]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 8001822:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
 8001828:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <HAL_I2C_MspInit+0x10c>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001836:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <HAL_I2C_MspInit+0x118>)
 8001838:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 800183c:	2203      	movs	r2, #3
 800183e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800186a:	4810      	ldr	r0, [pc, #64]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 800186c:	f000 fb9c 	bl	8001fa8 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 8001876:	f7ff fc19 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 800187e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_I2C_MspInit+0x114>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	201f      	movs	r0, #31
 800188c:	f000 fb62 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001890:	201f      	movs	r0, #31
 8001892:	f000 fb7b 	bl	8001f8c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3778      	adds	r7, #120	@ 0x78
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	48000400 	.word	0x48000400
 80018ac:	2000033c 	.word	0x2000033c
 80018b0:	40020080 	.word	0x40020080

080018b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c4:	d10b      	bne.n	80018de <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_TIM_Base_MspInit+0x38>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_TIM_Base_MspInit+0x38>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_TIM_Base_MspInit+0x38>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001910:	d11c      	bne.n	800194c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_TIM_MspPostInit+0x64>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <HAL_TIM_MspPostInit+0x64>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_TIM_MspPostInit+0x64>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 800192a:	2322      	movs	r3, #34	@ 0x22
 800192c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800193a:	2301      	movs	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f000 fc96 	bl	8002278 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b09e      	sub	sp, #120	@ 0x78
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2254      	movs	r2, #84	@ 0x54
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f007 fbcb 	bl	8009114 <memset>
  if(huart->Instance==USART2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a28      	ldr	r2, [pc, #160]	@ (8001a24 <HAL_UART_MspInit+0xcc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d148      	bne.n	8001a1a <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001988:	2302      	movs	r3, #2
 800198a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fbed 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a0:	f7ff fb84 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	4a19      	ldr	r2, [pc, #100]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_UART_MspInit+0xd0>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e4:	2307      	movs	r3, #7
 80019e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f2:	f000 fc41 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a16:	f000 fc2f 	bl	8002278 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3778      	adds	r7, #120	@ 0x78
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40004400 	.word	0x40004400
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <HAL_InitTick+0xc8>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001af4 <HAL_InitTick+0xc8>)
 8001a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_InitTick+0xc8>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a52:	f107 020c 	add.w	r2, r7, #12
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 faf7 	bl	8004050 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a62:	f002 fadf 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8001a66:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <HAL_InitTick+0xcc>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	3b01      	subs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a78:	4a21      	ldr	r2, [pc, #132]	@ (8001b00 <HAL_InitTick+0xd4>)
 8001a7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a82:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a84:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a9c:	4817      	ldr	r0, [pc, #92]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a9e:	f002 fe61 	bl	8004764 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d11b      	bne.n	8001ae8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ab0:	4812      	ldr	r0, [pc, #72]	@ (8001afc <HAL_InitTick+0xd0>)
 8001ab2:	f002 feaf 	bl	8004814 <HAL_TIM_Base_Start_IT>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ac4:	2019      	movs	r0, #25
 8001ac6:	f000 fa61 	bl	8001f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d808      	bhi.n	8001ae2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	2019      	movs	r0, #25
 8001ad6:	f000 fa3d 	bl	8001f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e002      	b.n	8001ae8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3730      	adds	r7, #48	@ 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	20000884 	.word	0x20000884
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	20000010 	.word	0x20000010

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <NMI_Handler+0x4>

08001b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <MemManage_Handler+0x4>

08001b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <DMA1_Channel7_IRQHandler+0x10>)
 8001b46:	f000 fae7 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000033c 	.word	0x2000033c

08001b54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b5a:	f002 ffef 	bl	8004b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000884 	.word	0x20000884

08001b68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <I2C1_EV_IRQHandler+0x10>)
 8001b6e:	f001 f8cb 	bl	8002d08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002e8 	.word	0x200002e8

08001b7c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f000 fd13 	bl	80025ac <HAL_GPIO_EXTI_IRQHandler>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000468 	.word	0x20000468

08001bb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc6:	f3af 8000 	nop.w
 8001bca:	4601      	mov	r1, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf0      	blt.n	8001bc6 <_read+0x12>
  }

  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e009      	b.n	8001c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fd0f 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf1      	blt.n	8001c00 <_write+0x12>
  }
  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_close>:

int _close(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_isatty>:

int _isatty(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f007 fa76 	bl	80091b0 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000c000 	.word	0x2000c000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200008d0 	.word	0x200008d0
 8001cf8:	20001730 	.word	0x20001730

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d24:	f7ff ffea 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	@ (8001d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <LoopForever+0xe>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	@ (8001d6c <LoopForever+0x16>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f007 fa35 	bl	80091bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d52:	f7fe fc7d 	bl	8000650 <main>

08001d56 <LoopForever>:

LoopForever:
    b LoopForever
 8001d56:	e7fe      	b.n	8001d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d64:	0800abd8 	.word	0x0800abd8
  ldr r2, =_sbss
 8001d68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d6c:	20001730 	.word	0x20001730

08001d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_IRQHandler>

08001d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f8de 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	200f      	movs	r0, #15
 8001d84:	f7ff fe52 	bl	8001a2c <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e001      	b.n	8001d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d94:	f7ff fcd8 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000014 	.word	0x20000014
 8001dc8:	200008d4 	.word	0x200008d4

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200008d4 	.word	0x200008d4

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4c 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f66:	f7ff ff61 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7ff ffb1 	bl	8001ed8 <NVIC_EncodePriority>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff80 	bl	8001e84 <__NVIC_SetPriority>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff54 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e098      	b.n	80020ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80020f8 <HAL_DMA_Init+0x150>)
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d80f      	bhi.n	8001fe6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_DMA_Init+0x154>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002100 <HAL_DMA_Init+0x158>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	009a      	lsls	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <HAL_DMA_Init+0x15c>)
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe4:	e00e      	b.n	8002004 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b46      	ldr	r3, [pc, #280]	@ (8002108 <HAL_DMA_Init+0x160>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a43      	ldr	r2, [pc, #268]	@ (8002100 <HAL_DMA_Init+0x158>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_DMA_Init+0x164>)
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800201a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800201e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800205e:	d039      	beq.n	80020d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a27      	ldr	r2, [pc, #156]	@ (8002104 <HAL_DMA_Init+0x15c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d11a      	bne.n	80020a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <HAL_DMA_Init+0x168>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f003 031c 	and.w	r3, r3, #28
 8002076:	210f      	movs	r1, #15
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4924      	ldr	r1, [pc, #144]	@ (8002110 <HAL_DMA_Init+0x168>)
 8002080:	4013      	ands	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002084:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_DMA_Init+0x168>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	f003 031c 	and.w	r3, r3, #28
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	491d      	ldr	r1, [pc, #116]	@ (8002110 <HAL_DMA_Init+0x168>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
 800209e:	e019      	b.n	80020d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <HAL_DMA_Init+0x16c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	f003 031c 	and.w	r3, r3, #28
 80020ac:	210f      	movs	r1, #15
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4917      	ldr	r1, [pc, #92]	@ (8002114 <HAL_DMA_Init+0x16c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_DMA_Init+0x16c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f003 031c 	and.w	r3, r3, #28
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	4911      	ldr	r1, [pc, #68]	@ (8002114 <HAL_DMA_Init+0x16c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40020407 	.word	0x40020407
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	cccccccd 	.word	0xcccccccd
 8002104:	40020000 	.word	0x40020000
 8002108:	bffdfbf8 	.word	0xbffdfbf8
 800210c:	40020400 	.word	0x40020400
 8002110:	400200a8 	.word	0x400200a8
 8002114:	400204a8 	.word	0x400204a8

08002118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	f003 031c 	and.w	r3, r3, #28
 8002138:	2204      	movs	r2, #4
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d026      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d021      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	f003 021c 	and.w	r2, r3, #28
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	2104      	movs	r1, #4
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	2b00      	cmp	r3, #0
 8002186:	d071      	beq.n	800226c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002190:	e06c      	b.n	800226c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f003 031c 	and.w	r3, r3, #28
 800219a:	2202      	movs	r2, #2
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d02e      	beq.n	8002204 <HAL_DMA_IRQHandler+0xec>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d029      	beq.n	8002204 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020a 	bic.w	r2, r2, #10
 80021cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f003 021c 	and.w	r2, r3, #28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2102      	movs	r1, #2
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d038      	beq.n	800226c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002202:	e033      	b.n	800226c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	f003 031c 	and.w	r3, r3, #28
 800220c:	2208      	movs	r2, #8
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02a      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d025      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020e 	bic.w	r2, r2, #14
 8002230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f003 021c 	and.w	r2, r3, #28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800226c:	bf00      	nop
 800226e:	bf00      	nop
}
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002286:	e148      	b.n	800251a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 813a 	beq.w	8002514 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d005      	beq.n	80022b8 <HAL_GPIO_Init+0x40>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d130      	bne.n	800231a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ee:	2201      	movs	r2, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 0201 	and.w	r2, r3, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b03      	cmp	r3, #3
 8002324:	d017      	beq.n	8002356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d123      	bne.n	80023aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	6939      	ldr	r1, [r7, #16]
 80023a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8094 	beq.w	8002514 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ec:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_GPIO_Init+0x2c0>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f0:	4a51      	ldr	r2, [pc, #324]	@ (8002538 <HAL_GPIO_Init+0x2c0>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80023f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002538 <HAL_GPIO_Init+0x2c0>)
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002404:	4a4d      	ldr	r2, [pc, #308]	@ (800253c <HAL_GPIO_Init+0x2c4>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800242e:	d00d      	beq.n	800244c <HAL_GPIO_Init+0x1d4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a43      	ldr	r2, [pc, #268]	@ (8002540 <HAL_GPIO_Init+0x2c8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <HAL_GPIO_Init+0x1d0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a42      	ldr	r2, [pc, #264]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_GPIO_Init+0x1cc>
 8002440:	2302      	movs	r3, #2
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1d6>
 8002444:	2307      	movs	r3, #7
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1d6>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1d6>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	@ (800253c <HAL_GPIO_Init+0x2c4>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246c:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002490:	4a2d      	ldr	r2, [pc, #180]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002496:	4b2c      	ldr	r3, [pc, #176]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ba:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024c0:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e4:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250e:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <HAL_GPIO_Init+0x2d0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aeaf 	bne.w	8002288 <HAL_GPIO_Init+0x10>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fade 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08d      	b.n	800270a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f8c8 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800262c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800263c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e006      	b.n	8002664 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002662:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d108      	bne.n	800267e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	e007      	b.n	800268e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800269c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	817b      	strh	r3, [r7, #10]
 8002724:	4613      	mov	r3, r2
 8002726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b20      	cmp	r3, #32
 8002732:	f040 80fd 	bne.w	8002930 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x30>
 8002740:	2302      	movs	r3, #2
 8002742:	e0f6      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800274c:	f7ff fb3e 	bl	8001dcc <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2319      	movs	r3, #25
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fb10 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e1      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	@ 0x21
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2210      	movs	r2, #16
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	2bff      	cmp	r3, #255	@ 0xff
 800279e:	d906      	bls.n	80027ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	22ff      	movs	r2, #255	@ 0xff
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80027a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e007      	b.n	80027be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d024      	beq.n	8002810 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_I2C_Master_Transmit+0x228>)
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fd0b 	bl	8003224 <I2C_TransferConfig>
 800280e:	e066      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	b2da      	uxtb	r2, r3
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	4b48      	ldr	r3, [pc, #288]	@ (800293c <HAL_I2C_Master_Transmit+0x228>)
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fd00 	bl	8003224 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002824:	e05b      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	6a39      	ldr	r1, [r7, #32]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb03 	bl	8002e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07b      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d034      	beq.n	80028de <HAL_I2C_Master_Transmit+0x1ca>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d130      	bne.n	80028de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2200      	movs	r2, #0
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa7c 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e04d      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2bff      	cmp	r3, #255	@ 0xff
 800289e:	d90e      	bls.n	80028be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	22ff      	movs	r2, #255	@ 0xff
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	8979      	ldrh	r1, [r7, #10]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fcb4 	bl	8003224 <I2C_TransferConfig>
 80028bc:	e00f      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fca3 	bl	8003224 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d19e      	bne.n	8002826 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	6a39      	ldr	r1, [r7, #32]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fae9 	bl	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e01a      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2220      	movs	r2, #32
 8002902:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_I2C_Master_Transmit+0x22c>)
 8002910:	400b      	ands	r3, r1
 8002912:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	80002000 	.word	0x80002000
 8002940:	fe00e800 	.word	0xfe00e800

08002944 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b20      	cmp	r3, #32
 8002962:	f040 80db 	bne.w	8002b1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2C_Master_Receive+0x30>
 8002970:	2302      	movs	r3, #2
 8002972:	e0d4      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297c:	f7ff fa26 	bl	8001dcc <HAL_GetTick>
 8002980:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f9f8 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0bf      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2222      	movs	r2, #34	@ 0x22
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2210      	movs	r2, #16
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2bff      	cmp	r3, #255	@ 0xff
 80029ce:	d90e      	bls.n	80029ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	4b52      	ldr	r3, [pc, #328]	@ (8002b28 <HAL_I2C_Master_Receive+0x1e4>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fc1c 	bl	8003224 <I2C_TransferConfig>
 80029ec:	e06d      	b.n	8002aca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_I2C_Master_Receive+0x1e4>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fc0b 	bl	8003224 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a0e:	e05c      	b.n	8002aca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fa99 	bl	8002f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e07c      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_I2C_Master_Receive+0x186>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d130      	bne.n	8002aca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f986 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e04d      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2bff      	cmp	r3, #255	@ 0xff
 8002a8a:	d90e      	bls.n	8002aaa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fbbe 	bl	8003224 <I2C_TransferConfig>
 8002aa8:	e00f      	b.n	8002aca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fbad 	bl	8003224 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d19d      	bne.n	8002a10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	6a39      	ldr	r1, [r7, #32]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f9f3 	bl	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_I2C_Master_Receive+0x1e8>)
 8002afc:	400b      	ands	r3, r1
 8002afe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	80002400 	.word	0x80002400
 8002b2c:	fe00e800 	.word	0xfe00e800

08002b30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	f040 80d6 	bne.w	8002cfe <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0cc      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2C_IsDeviceReady+0x44>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0c5      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2224      	movs	r2, #36	@ 0x24
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_IsDeviceReady+0x72>
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ba0:	e006      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x80>
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bac:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f909 	bl	8001dcc <HAL_GetTick>
 8002bba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002be8:	e034      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d01a      	beq.n	8002c28 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7ff f8eb 	bl	8001dcc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <HAL_I2C_IsDeviceReady+0xd8>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e06b      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_I2C_IsDeviceReady+0x130>
 8002c5a:	7fbb      	ldrb	r3, [r7, #30]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0c4      	beq.n	8002bea <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2120      	movs	r1, #32
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f883 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e03b      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e02d      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2120      	movs	r1, #32
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f868 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e020      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f63f af56 	bhi.w	8002b8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
  }
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	619a      	str	r2, [r3, #24]
  }
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e03b      	b.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f962 	bl	8003064 <I2C_IsErrorOccurred>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e041      	b.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d02d      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7ff f80b 	bl	8001dcc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d122      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d113      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d0b4      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e42:	e033      	b.n	8002eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f90b 	bl	8003064 <I2C_IsErrorOccurred>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e031      	b.n	8002ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d025      	beq.n	8002eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fe ffb4 	bl	8001dcc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11a      	bne.n	8002eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d013      	beq.n	8002eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d1c4      	bne.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed0:	e02f      	b.n	8002f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8c4 	bl	8003064 <I2C_IsErrorOccurred>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02d      	b.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe ff71 	bl	8001dcc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11a      	bne.n	8002f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d013      	beq.n	8002f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d1c8      	bne.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f5c:	e071      	b.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f87e 	bl	8003064 <I2C_IsErrorOccurred>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d13b      	bne.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d138      	bne.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d105      	bne.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d121      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
 8002ff0:	e002      	b.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ff8:	f7fe fee8 	bl	8001dcc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d119      	bne.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d00f      	beq.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d002      	beq.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d083      	beq.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	fe00e800 	.word	0xfe00e800

08003064 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d068      	beq.n	8003162 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2210      	movs	r2, #16
 8003096:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003098:	e049      	b.n	800312e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d045      	beq.n	800312e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7fe fe93 	bl	8001dcc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <I2C_IsErrorOccurred+0x54>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d13a      	bne.n	800312e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030da:	d121      	bne.n	8003120 <I2C_IsErrorOccurred+0xbc>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030e2:	d01d      	beq.n	8003120 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d01a      	beq.n	8003120 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030fa:	f7fe fe67 	bl	8001dcc <HAL_GetTick>
 80030fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003100:	e00e      	b.n	8003120 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003102:	f7fe fe63 	bl	8001dcc <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b19      	cmp	r3, #25
 800310e:	d907      	bls.n	8003120 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f043 0320 	orr.w	r3, r3, #32
 8003116:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800311e:	e006      	b.n	800312e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d1e9      	bne.n	8003102 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d003      	beq.n	8003144 <I2C_IsErrorOccurred+0xe0>
 800313c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0aa      	beq.n	800309a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2220      	movs	r2, #32
 8003152:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fdaf 	bl	8002d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <I2C_IsErrorOccurred+0x1bc>)
 80031ea:	400b      	ands	r3, r1
 80031ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003216:	4618      	mov	r0, r3
 8003218:	3728      	adds	r7, #40	@ 0x28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	fe00e800 	.word	0xfe00e800

08003224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	4613      	mov	r3, r2
 8003234:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800323c:	7a7b      	ldrb	r3, [r7, #9]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003244:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	4313      	orrs	r3, r2
 800324e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003252:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	0d5b      	lsrs	r3, r3, #21
 800325e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <I2C_TransferConfig+0x60>)
 8003264:	430b      	orrs	r3, r1
 8003266:	43db      	mvns	r3, r3
 8003268:	ea02 0103 	and.w	r1, r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	03ff63ff 	.word	0x03ff63ff

08003288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d138      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e032      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	@ 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d139      	bne.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333e:	2302      	movs	r3, #2
 8003340:	e033      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2224      	movs	r2, #36	@ 0x24
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033bc:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a04      	ldr	r2, [pc, #16]	@ (80033d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40007000 	.word	0x40007000

080033d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40007000 	.word	0x40007000

080033f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003402:	d130      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003404:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800340c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003410:	d038      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003412:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341a:	4a1e      	ldr	r2, [pc, #120]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003422:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2232      	movs	r2, #50	@ 0x32
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	0c9b      	lsrs	r3, r3, #18
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003438:	e002      	b.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344c:	d102      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f2      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003460:	d110      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003472:	d007      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800347c:	4a05      	ldr	r2, [pc, #20]	@ (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40007000 	.word	0x40007000
 8003498:	2000000c 	.word	0x2000000c
 800349c:	431bde83 	.word	0x431bde83

080034a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f000 bc02 	b.w	8003cb8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b4:	4b96      	ldr	r3, [pc, #600]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034be:	4b94      	ldr	r3, [pc, #592]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80e4 	beq.w	800369e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_RCC_OscConfig+0x4c>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	f040 808b 	bne.w	80035fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 8087 	bne.w	80035fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ec:	4b88      	ldr	r3, [pc, #544]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_OscConfig+0x64>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e3d9      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	4b81      	ldr	r3, [pc, #516]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_RCC_OscConfig+0x7e>
 8003514:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800351c:	e005      	b.n	800352a <HAL_RCC_OscConfig+0x8a>
 800351e:	4b7c      	ldr	r3, [pc, #496]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800352a:	4293      	cmp	r3, r2
 800352c:	d223      	bcs.n	8003576 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fdbe 	bl	80040b4 <RCC_SetFlashLatencyFromMSIRange>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e3ba      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003542:	4b73      	ldr	r3, [pc, #460]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a72      	ldr	r2, [pc, #456]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b70      	ldr	r3, [pc, #448]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	496d      	ldr	r1, [pc, #436]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003560:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	4968      	ldr	r1, [pc, #416]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
 8003574:	e025      	b.n	80035c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003576:	4b66      	ldr	r3, [pc, #408]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a65      	ldr	r2, [pc, #404]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4960      	ldr	r1, [pc, #384]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003594:	4b5e      	ldr	r3, [pc, #376]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	495b      	ldr	r1, [pc, #364]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fd7e 	bl	80040b4 <RCC_SetFlashLatencyFromMSIRange>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e37a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c2:	f000 fc81 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b51      	ldr	r3, [pc, #324]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	4950      	ldr	r1, [pc, #320]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d4:	5ccb      	ldrb	r3, [r1, r3]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a4e      	ldr	r2, [pc, #312]	@ (8003718 <HAL_RCC_OscConfig+0x278>)
 80035e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e2:	4b4e      	ldr	r3, [pc, #312]	@ (800371c <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fa20 	bl	8001a2c <HAL_InitTick>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d052      	beq.n	800369c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	e35e      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d032      	beq.n	8003668 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a42      	ldr	r2, [pc, #264]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800360e:	f7fe fbdd 	bl	8001dcc <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003616:	f7fe fbd9 	bl	8001dcc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e347      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003628:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003634:	4b36      	ldr	r3, [pc, #216]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a35      	ldr	r2, [pc, #212]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b33      	ldr	r3, [pc, #204]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4930      	ldr	r1, [pc, #192]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003652:	4b2f      	ldr	r3, [pc, #188]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	492b      	ldr	r1, [pc, #172]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
 8003666:	e01a      	b.n	800369e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003668:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a28      	ldr	r2, [pc, #160]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003674:	f7fe fbaa 	bl	8001dcc <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367c:	f7fe fba6 	bl	8001dcc <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e314      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x1dc>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d073      	beq.n	8003792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x21c>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d10e      	bne.n	80036d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d063      	beq.n	8003790 <HAL_RCC_OscConfig+0x2f0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d15f      	bne.n	8003790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e2f1      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036dc:	d106      	bne.n	80036ec <HAL_RCC_OscConfig+0x24c>
 80036de:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e025      	b.n	8003738 <HAL_RCC_OscConfig+0x298>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f4:	d114      	bne.n	8003720 <HAL_RCC_OscConfig+0x280>
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a05      	ldr	r2, [pc, #20]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <HAL_RCC_OscConfig+0x270>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e013      	b.n	8003738 <HAL_RCC_OscConfig+0x298>
 8003710:	40021000 	.word	0x40021000
 8003714:	0800ab28 	.word	0x0800ab28
 8003718:	2000000c 	.word	0x2000000c
 800371c:	20000010 	.word	0x20000010
 8003720:	4ba0      	ldr	r3, [pc, #640]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a9f      	ldr	r2, [pc, #636]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b9d      	ldr	r3, [pc, #628]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a9c      	ldr	r2, [pc, #624]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fb44 	bl	8001dcc <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fe fb40 	bl	8001dcc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	@ 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e2ae      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	4b92      	ldr	r3, [pc, #584]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x2a8>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fb30 	bl	8001dcc <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe fb2c 	bl	8001dcc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	@ 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e29a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x2d0>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d060      	beq.n	8003860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x310>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d119      	bne.n	80037de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d116      	bne.n	80037de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	4b7c      	ldr	r3, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x328>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e277      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	4973      	ldr	r1, [pc, #460]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	e040      	b.n	8003860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d023      	beq.n	800382e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e6:	4b6f      	ldr	r3, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6e      	ldr	r2, [pc, #440]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe faeb 	bl	8001dcc <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe fae7 	bl	8001dcc <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e255      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380c:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b62      	ldr	r3, [pc, #392]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	495f      	ldr	r1, [pc, #380]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e018      	b.n	8003860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b5d      	ldr	r3, [pc, #372]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe fac7 	bl	8001dcc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe fac3 	bl	8001dcc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e231      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003854:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01c      	beq.n	80038ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003874:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387a:	4a4a      	ldr	r2, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe faa2 	bl	8001dcc <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe fa9e 	bl	8001dcc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e20c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ef      	beq.n	800388c <HAL_RCC_OscConfig+0x3ec>
 80038ac:	e01b      	b.n	80038e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ae:	4b3d      	ldr	r3, [pc, #244]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b4:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe fa85 	bl	8001dcc <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe fa81 	bl	8001dcc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1ef      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d8:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ef      	bne.n	80038c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80a6 	beq.w	8003a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f4:	2300      	movs	r3, #0
 80038f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038f8:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10d      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003910:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391c:	2301      	movs	r3, #1
 800391e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d118      	bne.n	800395e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003938:	f7fe fa48 	bl	8001dcc <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fe fa44 	bl	8001dcc <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1b2      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCC_OscConfig+0x508>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0x4d8>
 8003966:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396c:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003976:	e029      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d115      	bne.n	80039ac <HAL_RCC_OscConfig+0x50c>
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003990:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	4a03      	ldr	r2, [pc, #12]	@ (80039a4 <HAL_RCC_OscConfig+0x504>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40007000 	.word	0x40007000
 80039ac:	4b9a      	ldr	r3, [pc, #616]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	4a99      	ldr	r2, [pc, #612]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039bc:	4b96      	ldr	r3, [pc, #600]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a95      	ldr	r2, [pc, #596]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe f9fa 	bl	8001dcc <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe f9f6 	bl	8001dcc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e162      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b89      	ldr	r3, [pc, #548]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ed      	beq.n	80039dc <HAL_RCC_OscConfig+0x53c>
 8003a00:	e015      	b.n	8003a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe f9e3 	bl	8001dcc <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe f9df 	bl	8001dcc <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e14b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a20:	4b7d      	ldr	r3, [pc, #500]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ed      	bne.n	8003a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2e:	7ffb      	ldrb	r3, [r7, #31]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b78      	ldr	r3, [pc, #480]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	4a77      	ldr	r2, [pc, #476]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a54:	4b70      	ldr	r3, [pc, #448]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe f9b2 	bl	8001dcc <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a6c:	f7fe f9ae 	bl	8001dcc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e11c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a7e:	4b66      	ldr	r3, [pc, #408]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ef      	beq.n	8003a6c <HAL_RCC_OscConfig+0x5cc>
 8003a8c:	e01b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a8e:	4b62      	ldr	r3, [pc, #392]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a94:	4a60      	ldr	r2, [pc, #384]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe f995 	bl	8001dcc <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa6:	f7fe f991 	bl	8001dcc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0ff      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ab8:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ef      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80f3 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	f040 80c9 	bne.w	8003c6c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ada:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0203 	and.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d12c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	3b01      	subs	r3, #1
 8003afa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d123      	bne.n	8003b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d11b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d113      	bne.n	8003b48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d109      	bne.n	8003b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d06b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d062      	beq.n	8003c14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b4e:	4b32      	ldr	r3, [pc, #200]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0ac      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2d      	ldr	r2, [pc, #180]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003b64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b6a:	f7fe f92f 	bl	8001dcc <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe f92b 	bl	8001dcc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e099      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b90:	4b21      	ldr	r3, [pc, #132]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <HAL_RCC_OscConfig+0x77c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003baa:	0212      	lsls	r2, r2, #8
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bb2:	0852      	lsrs	r2, r2, #1
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	0552      	lsls	r2, r2, #21
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bbe:	0852      	lsrs	r2, r2, #1
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	0652      	lsls	r2, r2, #25
 8003bc4:	4311      	orrs	r1, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bca:	06d2      	lsls	r2, r2, #27
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	4912      	ldr	r1, [pc, #72]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bec:	f7fe f8ee 	bl	8001dcc <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe f8ea 	bl	8001dcc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e058      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <HAL_RCC_OscConfig+0x778>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c12:	e050      	b.n	8003cb6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e04f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d144      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a23      	ldr	r2, [pc, #140]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c44:	f7fe f8c2 	bl	8001dcc <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe f8be 	bl	8001dcc <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e02c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	4b18      	ldr	r3, [pc, #96]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x7ac>
 8003c6a:	e024      	b.n	8003cb6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d01f      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f8a5 	bl	8001dcc <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe f8a1 	bl	8001dcc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c98:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4905      	ldr	r1, [pc, #20]	@ (8003cc0 <HAL_RCC_OscConfig+0x820>)
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_OscConfig+0x824>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]
 8003cb0:	e001      	b.n	8003cb6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	feeefffc 	.word	0xfeeefffc

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0e7      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b75      	ldr	r3, [pc, #468]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b72      	ldr	r3, [pc, #456]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4970      	ldr	r1, [pc, #448]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0cf      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d010      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b66      	ldr	r3, [pc, #408]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d908      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b63      	ldr	r3, [pc, #396]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4960      	ldr	r1, [pc, #384]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04c      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0a6      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d66:	4b54      	ldr	r3, [pc, #336]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e09a      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e08e      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e086      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b46      	ldr	r3, [pc, #280]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4943      	ldr	r1, [pc, #268]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fe f80c 	bl	8001dcc <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f7fe f808 	bl	8001dcc <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e06e      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 020c 	and.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1eb      	bne.n	8003db8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d208      	bcs.n	8003e0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	492b      	ldr	r1, [pc, #172]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d210      	bcs.n	8003e3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 0207 	bic.w	r2, r3, #7
 8003e24:	4923      	ldr	r1, [pc, #140]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e036      	b.n	8003eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4918      	ldr	r1, [pc, #96]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d009      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e68:	4b13      	ldr	r3, [pc, #76]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4910      	ldr	r1, [pc, #64]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e7c:	f000 f824 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	490b      	ldr	r1, [pc, #44]	@ (8003ebc <HAL_RCC_ClockConfig+0x1f4>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
 8003e98:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd fdc3 	bl	8001a2c <HAL_InitTick>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800ab28 	.word	0x0800ab28
 8003ec0:	2000000c 	.word	0x2000000c
 8003ec4:	20000010 	.word	0x20000010

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d121      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d11e      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003efc:	4b34      	ldr	r3, [pc, #208]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f08:	4b31      	ldr	r3, [pc, #196]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f18:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f24:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f40:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e004      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f4c:	4b23      	ldr	r3, [pc, #140]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d134      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f56:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0xac>
 8003f6c:	e005      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f70:	617b      	str	r3, [r7, #20]
      break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f74:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f76:	617b      	str	r3, [r7, #20]
      break;
 8003f78:	e002      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	617b      	str	r3, [r7, #20]
      break;
 8003f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f80:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	fb03 f202 	mul.w	r2, r3, r2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	0e5b      	lsrs	r3, r3, #25
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	0800ab40 	.word	0x0800ab40
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4904      	ldr	r1, [pc, #16]	@ (8004020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	0800ab38 	.word	0x0800ab38

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004028:	f7ff ffda 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4904      	ldr	r1, [pc, #16]	@ (800404c <HAL_RCC_GetPCLK2Freq+0x28>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	0800ab38 	.word	0x0800ab38

08004050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	220f      	movs	r2, #15
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004060:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0203 	and.w	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800406c:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004078:	4b0c      	ldr	r3, [pc, #48]	@ (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004092:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <HAL_RCC_GetClockConfig+0x60>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0207 	and.w	r2, r3, #7
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	601a      	str	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40022000 	.word	0x40022000

080040b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040c0:	4b2a      	ldr	r3, [pc, #168]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040cc:	f7ff f984 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 80040d0:	6178      	str	r0, [r7, #20]
 80040d2:	e014      	b.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	4b25      	ldr	r3, [pc, #148]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	4a24      	ldr	r2, [pc, #144]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040de:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040ec:	f7ff f974 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 80040f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f6:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004104:	d10b      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d919      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004110:	d902      	bls.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004112:	2302      	movs	r3, #2
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e013      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004118:	2301      	movs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e010      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b80      	cmp	r3, #128	@ 0x80
 8004122:	d902      	bls.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004124:	2303      	movs	r3, #3
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e00a      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b80      	cmp	r3, #128	@ 0x80
 800412e:	d102      	bne.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004130:	2302      	movs	r3, #2
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e004      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b70      	cmp	r3, #112	@ 0x70
 800413a:	d101      	bne.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800413c:	2301      	movs	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 0207 	bic.w	r2, r3, #7
 8004148:	4909      	ldr	r1, [pc, #36]	@ (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	40022000 	.word	0x40022000

08004174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800417c:	2300      	movs	r3, #0
 800417e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004180:	2300      	movs	r3, #0
 8004182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418c:	2b00      	cmp	r3, #0
 800418e:	d031      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004198:	d01a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800419a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800419e:	d814      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041a8:	d10f      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b6:	e00c      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f9de 	bl	8004580 <RCCEx_PLLSAI1_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	74fb      	strb	r3, [r7, #19]
      break;
 80041ce:	e000      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041d8:	4b51      	ldr	r3, [pc, #324]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	494e      	ldr	r1, [pc, #312]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041ee:	e001      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 809e 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004206:	4b46      	ldr	r3, [pc, #280]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421c:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	4a3f      	ldr	r2, [pc, #252]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004226:	6593      	str	r3, [r2, #88]	@ 0x58
 8004228:	4b3d      	ldr	r3, [pc, #244]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004234:	2301      	movs	r3, #1
 8004236:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004238:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a39      	ldr	r2, [pc, #228]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004244:	f7fd fdc2 	bl	8001dcc <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800424a:	e009      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424c:	f7fd fdbe 	bl	8001dcc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	74fb      	strb	r3, [r7, #19]
        break;
 800425e:	e005      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004260:	4b30      	ldr	r3, [pc, #192]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ef      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d15a      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004272:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	d019      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428e:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800429a:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ba:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d016      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fd7e 	bl	8001dcc <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	e00b      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd fd7a 	bl	8001dcc <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d902      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	74fb      	strb	r3, [r7, #19]
            break;
 80042ea:	e006      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ec      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430e:	4904      	ldr	r1, [pc, #16]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004316:	e009      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432c:	7c7b      	ldrb	r3, [r7, #17]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b8a      	ldr	r3, [pc, #552]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	4a89      	ldr	r2, [pc, #548]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800434a:	4b84      	ldr	r3, [pc, #528]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 0203 	bic.w	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4980      	ldr	r1, [pc, #512]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800436c:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 020c 	bic.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	4978      	ldr	r1, [pc, #480]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800438e:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004394:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	496f      	ldr	r1, [pc, #444]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b0:	4b6a      	ldr	r3, [pc, #424]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043be:	4967      	ldr	r1, [pc, #412]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043d2:	4b62      	ldr	r3, [pc, #392]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	495e      	ldr	r1, [pc, #376]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f4:	4b59      	ldr	r3, [pc, #356]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	4956      	ldr	r1, [pc, #344]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004416:	4b51      	ldr	r3, [pc, #324]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	494d      	ldr	r1, [pc, #308]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d028      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004438:	4b48      	ldr	r3, [pc, #288]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	4945      	ldr	r1, [pc, #276]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004456:	d106      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004458:	4b40      	ldr	r3, [pc, #256]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a3f      	ldr	r2, [pc, #252]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004462:	60d3      	str	r3, [r2, #12]
 8004464:	e011      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800446e:	d10c      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f882 	bl	8004580 <RCCEx_PLLSAI1_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d028      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	492d      	ldr	r1, [pc, #180]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b4:	d106      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b6:	4b29      	ldr	r3, [pc, #164]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a28      	ldr	r2, [pc, #160]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c0:	60d3      	str	r3, [r2, #12]
 80044c2:	e011      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2101      	movs	r1, #1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f853 	bl	8004580 <RCCEx_PLLSAI1_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01c      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004502:	4916      	ldr	r1, [pc, #88]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004512:	d10c      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f830 	bl	8004580 <RCCEx_PLLSAI1_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800453a:	4b08      	ldr	r3, [pc, #32]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004548:	4904      	ldr	r1, [pc, #16]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004550:	7cbb      	ldrb	r3, [r7, #18]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000

08004580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800458e:	4b74      	ldr	r3, [pc, #464]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800459a:	4b71      	ldr	r3, [pc, #452]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0203 	and.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d10d      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
       ||
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
       ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d047      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	e044      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d018      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0x86>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d825      	bhi.n	8004624 <RCCEx_PLLSAI1_Config+0xa4>
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d002      	beq.n	80045e2 <RCCEx_PLLSAI1_Config+0x62>
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d009      	beq.n	80045f4 <RCCEx_PLLSAI1_Config+0x74>
 80045e0:	e020      	b.n	8004624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f2:	e01a      	b.n	800462a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d116      	bne.n	800462e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004604:	e013      	b.n	800462e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004606:	4b56      	ldr	r3, [pc, #344]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004612:	4b53      	ldr	r3, [pc, #332]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004622:	e006      	b.n	8004632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	e004      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004632:	bf00      	nop
    }

    if(status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800463a:	4b49      	ldr	r3, [pc, #292]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	430b      	orrs	r3, r1
 8004650:	4943      	ldr	r1, [pc, #268]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d17c      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800465c:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3f      	ldr	r2, [pc, #252]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004662:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd fbb0 	bl	8001dcc <HAL_GetTick>
 800466c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800466e:	e009      	b.n	8004684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004670:	f7fd fbac 	bl	8001dcc <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d902      	bls.n	8004684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	73fb      	strb	r3, [r7, #15]
        break;
 8004682:	e005      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004684:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ef      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d15f      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469c:	4b30      	ldr	r3, [pc, #192]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80046a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	0211      	lsls	r1, r2, #8
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68d2      	ldr	r2, [r2, #12]
 80046b2:	06d2      	lsls	r2, r2, #27
 80046b4:	430a      	orrs	r2, r1
 80046b6:	492a      	ldr	r1, [pc, #168]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	610b      	str	r3, [r1, #16]
 80046bc:	e027      	b.n	800470e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d112      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c4:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	0211      	lsls	r1, r2, #8
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6912      	ldr	r2, [r2, #16]
 80046da:	0852      	lsrs	r2, r2, #1
 80046dc:	3a01      	subs	r2, #1
 80046de:	0552      	lsls	r2, r2, #21
 80046e0:	430a      	orrs	r2, r1
 80046e2:	491f      	ldr	r1, [pc, #124]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
 80046e8:	e011      	b.n	800470e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	0211      	lsls	r1, r2, #8
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6952      	ldr	r2, [r2, #20]
 8004700:	0852      	lsrs	r2, r2, #1
 8004702:	3a01      	subs	r2, #1
 8004704:	0652      	lsls	r2, r2, #25
 8004706:	430a      	orrs	r2, r1
 8004708:	4915      	ldr	r1, [pc, #84]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800470e:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a13      	ldr	r2, [pc, #76]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004718:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fb57 	bl	8001dcc <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004720:	e009      	b.n	8004736 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004722:	f7fd fb53 	bl	8001dcc <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d902      	bls.n	8004736 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	73fb      	strb	r3, [r7, #15]
          break;
 8004734:	e005      	b.n	8004742 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ef      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	4903      	ldr	r1, [pc, #12]	@ (8004760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000

08004764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e049      	b.n	800480a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f892 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 fcd8 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d001      	beq.n	800482c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e03b      	b.n	80048a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIM_Base_Start_IT+0x4e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d004      	beq.n	8004862 <HAL_TIM_Base_Start_IT+0x4e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d015      	beq.n	80048a0 <HAL_TIM_Base_Start_IT+0x8c>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487a:	d011      	beq.n	80048a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e008      	b.n	80048a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40014000 	.word	0x40014000
 80048b8:	00010007 	.word	0x00010007

080048bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e049      	b.n	8004962 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f841 	bl	800496a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f000 fc2c 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x24>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e03c      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02f      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x58>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e022      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d109      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x72>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e015      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x8c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e008      	b.n	8004a1e <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07e      	b.n	8004b24 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xb6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a34:	e023      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xc6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a44:	e01b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xd6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	e013      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xe6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a64:	e00b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xf6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a74:	e003      	b.n	8004a7e <HAL_TIM_PWM_Start+0xfe>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 feee 	bl	8005868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a26      	ldr	r2, [pc, #152]	@ (8004b2c <HAL_TIM_PWM_Start+0x1ac>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x12a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <HAL_TIM_PWM_Start+0x1b0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x12a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <HAL_TIM_PWM_Start+0x1b4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_PWM_Start+0x12e>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_PWM_Start+0x130>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <HAL_TIM_PWM_Start+0x1ac>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x162>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x162>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a14      	ldr	r2, [pc, #80]	@ (8004b30 <HAL_TIM_PWM_Start+0x1b0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d115      	bne.n	8004b0e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <HAL_TIM_PWM_Start+0x1b8>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d015      	beq.n	8004b20 <HAL_TIM_PWM_Start+0x1a0>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afa:	d011      	beq.n	8004b20 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	e008      	b.n	8004b20 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e000      	b.n	8004b22 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	00010007 	.word	0x00010007

08004b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d020      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0202 	mvn.w	r2, #2
 8004b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fac7 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fab9 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 faca 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0204 	mvn.w	r2, #4
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 faa1 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa93 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 faa4 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa7b 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa6d 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa7e 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0210 	mvn.w	r2, #16
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa55 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa47 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa58 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0201 	mvn.w	r2, #1
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc f9f0 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fe5f 	bl	8005994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fe57 	bl	80059a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa12 	bl	8005142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00c      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0220 	mvn.w	r2, #32
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fe1f 	bl	8005980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0ff      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b14      	cmp	r3, #20
 8004d76:	f200 80f0 	bhi.w	8004f5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004f5b 	.word	0x08004f5b
 8004d88:	08004f5b 	.word	0x08004f5b
 8004d8c:	08004f5b 	.word	0x08004f5b
 8004d90:	08004e15 	.word	0x08004e15
 8004d94:	08004f5b 	.word	0x08004f5b
 8004d98:	08004f5b 	.word	0x08004f5b
 8004d9c:	08004f5b 	.word	0x08004f5b
 8004da0:	08004e57 	.word	0x08004e57
 8004da4:	08004f5b 	.word	0x08004f5b
 8004da8:	08004f5b 	.word	0x08004f5b
 8004dac:	08004f5b 	.word	0x08004f5b
 8004db0:	08004e97 	.word	0x08004e97
 8004db4:	08004f5b 	.word	0x08004f5b
 8004db8:	08004f5b 	.word	0x08004f5b
 8004dbc:	08004f5b 	.word	0x08004f5b
 8004dc0:	08004ed9 	.word	0x08004ed9
 8004dc4:	08004f5b 	.word	0x08004f5b
 8004dc8:	08004f5b 	.word	0x08004f5b
 8004dcc:	08004f5b 	.word	0x08004f5b
 8004dd0:	08004f19 	.word	0x08004f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa2c 	bl	8005238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	619a      	str	r2, [r3, #24]
      break;
 8004e12:	e0a5      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fa88 	bl	8005330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      break;
 8004e54:	e084      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fae1 	bl	8005424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0208 	orr.w	r2, r2, #8
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0204 	bic.w	r2, r2, #4
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	61da      	str	r2, [r3, #28]
      break;
 8004e94:	e064      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fb39 	bl	8005514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	61da      	str	r2, [r3, #28]
      break;
 8004ed6:	e043      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb76 	bl	80055d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f16:	e023      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fbae 	bl	8005680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_ConfigClockSource+0x1c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0b6      	b.n	80050fe <HAL_TIM_ConfigClockSource+0x18a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fcc:	d03e      	beq.n	800504c <HAL_TIM_ConfigClockSource+0xd8>
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd2:	f200 8087 	bhi.w	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fda:	f000 8086 	beq.w	80050ea <HAL_TIM_ConfigClockSource+0x176>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe2:	d87f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8004fe4:	2b70      	cmp	r3, #112	@ 0x70
 8004fe6:	d01a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xaa>
 8004fe8:	2b70      	cmp	r3, #112	@ 0x70
 8004fea:	d87b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8004fec:	2b60      	cmp	r3, #96	@ 0x60
 8004fee:	d050      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x11e>
 8004ff0:	2b60      	cmp	r3, #96	@ 0x60
 8004ff2:	d877      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8004ff4:	2b50      	cmp	r3, #80	@ 0x50
 8004ff6:	d03c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xfe>
 8004ff8:	2b50      	cmp	r3, #80	@ 0x50
 8004ffa:	d873      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8004ffc:	2b40      	cmp	r3, #64	@ 0x40
 8004ffe:	d058      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x13e>
 8005000:	2b40      	cmp	r3, #64	@ 0x40
 8005002:	d86f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8005004:	2b30      	cmp	r3, #48	@ 0x30
 8005006:	d064      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005008:	2b30      	cmp	r3, #48	@ 0x30
 800500a:	d86b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d060      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d867      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d05a      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x15e>
 800501c:	e062      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800502e:	f000 fbfb 	bl	8005828 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	609a      	str	r2, [r3, #8]
      break;
 800504a:	e04f      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	f000 fbe4 	bl	8005828 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800506e:	609a      	str	r2, [r3, #8]
      break;
 8005070:	e03c      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	461a      	mov	r2, r3
 8005080:	f000 fb58 	bl	8005734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2150      	movs	r1, #80	@ 0x50
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fbb1 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8005090:	e02c      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 fb77 	bl	8005792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2160      	movs	r1, #96	@ 0x60
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fba1 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 80050b0:	e01c      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fb38 	bl	8005734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2140      	movs	r1, #64	@ 0x40
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb91 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 80050d0:	e00c      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fb88 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 80050e2:	e003      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      break;
 80050e8:	e000      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a30      	ldr	r2, [pc, #192]	@ (800522c <TIM_Base_SetConfig+0xd4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x20>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a27      	ldr	r2, [pc, #156]	@ (800522c <TIM_Base_SetConfig+0xd4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00b      	beq.n	80051aa <TIM_Base_SetConfig+0x52>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0x52>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a24      	ldr	r2, [pc, #144]	@ (8005230 <TIM_Base_SetConfig+0xd8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0x52>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <TIM_Base_SetConfig+0xdc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a12      	ldr	r2, [pc, #72]	@ (800522c <TIM_Base_SetConfig+0xd4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0xa0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <TIM_Base_SetConfig+0xd8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0xa0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a10      	ldr	r2, [pc, #64]	@ (8005234 <TIM_Base_SetConfig+0xdc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d105      	bne.n	800521e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]
  }
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400

08005238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 0201 	bic.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0302 	bic.w	r3, r3, #2
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a24      	ldr	r2, [pc, #144]	@ (8005324 <TIM_OC1_SetConfig+0xec>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC1_SetConfig+0x70>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a23      	ldr	r2, [pc, #140]	@ (8005328 <TIM_OC1_SetConfig+0xf0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC1_SetConfig+0x70>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a22      	ldr	r2, [pc, #136]	@ (800532c <TIM_OC1_SetConfig+0xf4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d10c      	bne.n	80052c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 0308 	bic.w	r3, r3, #8
 80052ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0304 	bic.w	r3, r3, #4
 80052c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a17      	ldr	r2, [pc, #92]	@ (8005324 <TIM_OC1_SetConfig+0xec>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_OC1_SetConfig+0xa2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <TIM_OC1_SetConfig+0xf0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC1_SetConfig+0xa2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a15      	ldr	r2, [pc, #84]	@ (800532c <TIM_OC1_SetConfig+0xf4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d111      	bne.n	80052fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400

08005330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0320 	bic.w	r3, r3, #32
 800537e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a22      	ldr	r2, [pc, #136]	@ (8005418 <TIM_OC2_SetConfig+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10d      	bne.n	80053b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <TIM_OC2_SetConfig+0xe8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_OC2_SetConfig+0x98>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a18      	ldr	r2, [pc, #96]	@ (800541c <TIM_OC2_SetConfig+0xec>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC2_SetConfig+0x98>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <TIM_OC2_SetConfig+0xf0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d113      	bne.n	80053f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400

08005424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <TIM_OC3_SetConfig+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10d      	bne.n	80054a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC3_SetConfig+0xe4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_OC3_SetConfig+0x96>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC3_SetConfig+0xe8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x96>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <TIM_OC3_SetConfig+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400

08005514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a14      	ldr	r2, [pc, #80]	@ (80055c4 <TIM_OC4_SetConfig+0xb0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC4_SetConfig+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a13      	ldr	r2, [pc, #76]	@ (80055c8 <TIM_OC4_SetConfig+0xb4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC4_SetConfig+0x74>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <TIM_OC4_SetConfig+0xb8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d109      	bne.n	800559c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800558e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	019b      	lsls	r3, r3, #6
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400

080055d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005614:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <TIM_OC5_SetConfig+0xa4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_OC5_SetConfig+0x6a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <TIM_OC5_SetConfig+0xa8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC5_SetConfig+0x6a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a11      	ldr	r2, [pc, #68]	@ (800567c <TIM_OC5_SetConfig+0xac>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d109      	bne.n	800564e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	621a      	str	r2, [r3, #32]
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400

08005680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a14      	ldr	r2, [pc, #80]	@ (8005728 <TIM_OC6_SetConfig+0xa8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC6_SetConfig+0x6c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a13      	ldr	r2, [pc, #76]	@ (800572c <TIM_OC6_SetConfig+0xac>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC6_SetConfig+0x6c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a12      	ldr	r2, [pc, #72]	@ (8005730 <TIM_OC6_SetConfig+0xb0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	029b      	lsls	r3, r3, #10
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400

08005734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800575e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 030a 	bic.w	r3, r3, #10
 8005770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005792:	b480      	push	{r7}
 8005794:	b087      	sub	sp, #28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f023 0210 	bic.w	r2, r3, #16
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	f043 0307 	orr.w	r3, r3, #7
 8005814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	431a      	orrs	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2201      	movs	r2, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e04f      	b.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a21      	ldr	r2, [pc, #132]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d004      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a10      	ldr	r2, [pc, #64]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10c      	bne.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005946:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	4313      	orrs	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40014000 	.word	0x40014000

08005980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e040      	b.n	8005a50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb ffba 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	@ 0x24
 80059e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fade 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f8af 	bl	8005b6c <UART_SetConfig>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e01b      	b.n	8005a50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fb5d 	bl	8006108 <UART_CheckIdleState>
 8005a4e:	4603      	mov	r3, r0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d177      	bne.n	8005b60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Transmit+0x24>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e070      	b.n	8005b62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2221      	movs	r2, #33	@ 0x21
 8005a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8e:	f7fc f99d 	bl	8001dcc <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x68>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac8:	e02f      	b.n	8005b2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	@ 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fbbf 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e03b      	b.n	8005b62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005afc:	b292      	uxth	r2, r2
 8005afe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	3302      	adds	r3, #2
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e007      	b.n	8005b18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1c9      	bne.n	8005aca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2140      	movs	r1, #64	@ 0x40
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fb89 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d004      	beq.n	8005b56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e005      	b.n	8005b62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b08a      	sub	sp, #40	@ 0x28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4bb4      	ldr	r3, [pc, #720]	@ (8005e6c <UART_SetConfig+0x300>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4aa9      	ldr	r2, [pc, #676]	@ (8005e70 <UART_SetConfig+0x304>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4aa0      	ldr	r2, [pc, #640]	@ (8005e74 <UART_SetConfig+0x308>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d126      	bne.n	8005c44 <UART_SetConfig+0xd8>
 8005bf6:	4ba0      	ldr	r3, [pc, #640]	@ (8005e78 <UART_SetConfig+0x30c>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d81b      	bhi.n	8005c3c <UART_SetConfig+0xd0>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0xa0>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c2d 	.word	0x08005c2d
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c22:	e080      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2a:	e07c      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c32:	e078      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3a:	e074      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e070      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a8c      	ldr	r2, [pc, #560]	@ (8005e7c <UART_SetConfig+0x310>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d138      	bne.n	8005cc0 <UART_SetConfig+0x154>
 8005c4e:	4b8a      	ldr	r3, [pc, #552]	@ (8005e78 <UART_SetConfig+0x30c>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	d82d      	bhi.n	8005cb8 <UART_SetConfig+0x14c>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0xf8>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c99 	.word	0x08005c99
 8005c68:	08005cb9 	.word	0x08005cb9
 8005c6c:	08005cb9 	.word	0x08005cb9
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cb9 	.word	0x08005cb9
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cb1 	.word	0x08005cb1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9e:	e042      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ca6:	e03e      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cae:	e03a      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb6:	e036      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e032      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e70 <UART_SetConfig+0x304>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d12a      	bne.n	8005d20 <UART_SetConfig+0x1b4>
 8005cca:	4b6b      	ldr	r3, [pc, #428]	@ (8005e78 <UART_SetConfig+0x30c>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cd8:	d01a      	beq.n	8005d10 <UART_SetConfig+0x1a4>
 8005cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cde:	d81b      	bhi.n	8005d18 <UART_SetConfig+0x1ac>
 8005ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce4:	d00c      	beq.n	8005d00 <UART_SetConfig+0x194>
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cea:	d815      	bhi.n	8005d18 <UART_SetConfig+0x1ac>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <UART_SetConfig+0x18c>
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf4:	d008      	beq.n	8005d08 <UART_SetConfig+0x19c>
 8005cf6:	e00f      	b.n	8005d18 <UART_SetConfig+0x1ac>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e012      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d00:	2302      	movs	r3, #2
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e00e      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e00a      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d10:	2308      	movs	r3, #8
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e006      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e002      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a51      	ldr	r2, [pc, #324]	@ (8005e70 <UART_SetConfig+0x304>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d17a      	bne.n	8005e26 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d824      	bhi.n	8005d82 <UART_SetConfig+0x216>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x1d4>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d83 	.word	0x08005d83
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d83 	.word	0x08005d83
 8005d50:	08005d73 	.word	0x08005d73
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d83 	.word	0x08005d83
 8005d5c:	08005d83 	.word	0x08005d83
 8005d60:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fe f948 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005d68:	61f8      	str	r0, [r7, #28]
        break;
 8005d6a:	e010      	b.n	8005d8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b44      	ldr	r3, [pc, #272]	@ (8005e80 <UART_SetConfig+0x314>)
 8005d6e:	61fb      	str	r3, [r7, #28]
        break;
 8005d70:	e00d      	b.n	8005d8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fe f8a9 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005d76:	61f8      	str	r0, [r7, #28]
        break;
 8005d78:	e009      	b.n	8005d8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d7e:	61fb      	str	r3, [r7, #28]
        break;
 8005d80:	e005      	b.n	8005d8e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8107 	beq.w	8005fa4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d305      	bcc.n	8005db2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d903      	bls.n	8005dba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005db8:	e0f4      	b.n	8005fa4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	022b      	lsls	r3, r5, #8
 8005dcc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005dd0:	0222      	lsls	r2, r4, #8
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	6849      	ldr	r1, [r1, #4]
 8005dd6:	0849      	lsrs	r1, r1, #1
 8005dd8:	2000      	movs	r0, #0
 8005dda:	4688      	mov	r8, r1
 8005ddc:	4681      	mov	r9, r0
 8005dde:	eb12 0a08 	adds.w	sl, r2, r8
 8005de2:	eb43 0b09 	adc.w	fp, r3, r9
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	4650      	mov	r0, sl
 8005df6:	4659      	mov	r1, fp
 8005df8:	f7fa fa4a 	bl	8000290 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e0a:	d308      	bcc.n	8005e1e <UART_SetConfig+0x2b2>
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e12:	d204      	bcs.n	8005e1e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	e0c2      	b.n	8005fa4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e24:	e0be      	b.n	8005fa4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e2e:	d16a      	bne.n	8005f06 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005e30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d834      	bhi.n	8005ea2 <UART_SetConfig+0x336>
 8005e38:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <UART_SetConfig+0x2d4>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e8d 	.word	0x08005e8d
 8005e4c:	08005ea3 	.word	0x08005ea3
 8005e50:	08005e93 	.word	0x08005e93
 8005e54:	08005ea3 	.word	0x08005ea3
 8005e58:	08005ea3 	.word	0x08005ea3
 8005e5c:	08005ea3 	.word	0x08005ea3
 8005e60:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe f8c8 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e020      	b.n	8005eae <UART_SetConfig+0x342>
 8005e6c:	efff69f3 	.word	0xefff69f3
 8005e70:	40008000 	.word	0x40008000
 8005e74:	40013800 	.word	0x40013800
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	40004400 	.word	0x40004400
 8005e80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fe f8ce 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8005e88:	61f8      	str	r0, [r7, #28]
        break;
 8005e8a:	e010      	b.n	8005eae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc0 <UART_SetConfig+0x454>)
 8005e8e:	61fb      	str	r3, [r7, #28]
        break;
 8005e90:	e00d      	b.n	8005eae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fe f819 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005e96:	61f8      	str	r0, [r7, #28]
        break;
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ea0:	e005      	b.n	8005eae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d077      	beq.n	8005fa4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005a      	lsls	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b0f      	cmp	r3, #15
 8005ece:	d916      	bls.n	8005efe <UART_SetConfig+0x392>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed6:	d212      	bcs.n	8005efe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f023 030f 	bic.w	r3, r3, #15
 8005ee0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	8afb      	ldrh	r3, [r7, #22]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	8afa      	ldrh	r2, [r7, #22]
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	e052      	b.n	8005fa4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f04:	e04e      	b.n	8005fa4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d827      	bhi.n	8005f5e <UART_SetConfig+0x3f2>
 8005f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x3a8>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f49 	.word	0x08005f49
 8005f20:	08005f5f 	.word	0x08005f5f
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f5f 	.word	0x08005f5f
 8005f30:	08005f5f 	.word	0x08005f5f
 8005f34:	08005f57 	.word	0x08005f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fe f85e 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	61f8      	str	r0, [r7, #28]
        break;
 8005f3e:	e014      	b.n	8005f6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7fe f870 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8005f44:	61f8      	str	r0, [r7, #28]
        break;
 8005f46:	e010      	b.n	8005f6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f48:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc0 <UART_SetConfig+0x454>)
 8005f4a:	61fb      	str	r3, [r7, #28]
        break;
 8005f4c:	e00d      	b.n	8005f6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4e:	f7fd ffbb 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005f52:	61f8      	str	r0, [r7, #28]
        break;
 8005f54:	e009      	b.n	8005f6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e005      	b.n	8005f6a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f68:	bf00      	nop
    }

    if (pclk != 0U)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d019      	beq.n	8005fa4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	085a      	lsrs	r2, r3, #1
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	441a      	add	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d909      	bls.n	8005f9e <UART_SetConfig+0x432>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d205      	bcs.n	8005f9e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	e002      	b.n	8005fa4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005fb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fbe:	bf00      	nop
 8005fc0:	00f42400 	.word	0x00f42400

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b098      	sub	sp, #96	@ 0x60
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006118:	f7fb fe58 	bl	8001dcc <HAL_GetTick>
 800611c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d12e      	bne.n	800618a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f88c 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d021      	beq.n	800618a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615a:	653b      	str	r3, [r7, #80]	@ 0x50
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006164:	647b      	str	r3, [r7, #68]	@ 0x44
 8006166:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800616a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e062      	b.n	8006250 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b04      	cmp	r3, #4
 8006196:	d149      	bne.n	800622c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f856 	bl	8006258 <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d03c      	beq.n	800622c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	623b      	str	r3, [r7, #32]
   return(result);
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006204:	61fa      	str	r2, [r7, #28]
 8006206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	617b      	str	r3, [r7, #20]
   return(result);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e5      	bne.n	80061e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e011      	b.n	8006250 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3758      	adds	r7, #88	@ 0x58
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006268:	e04f      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d04b      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7fb fdab 	bl	8001dcc <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <UART_WaitOnFlagUntilTimeout+0x30>
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e04e      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d037      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d034      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d031      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d110      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f838 	bl	8006332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2208      	movs	r2, #8
 80062c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e029      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e4:	d111      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f81e 	bl	8006332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e00f      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d0a0      	beq.n	800626a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006332:	b480      	push	{r7}
 8006334:	b095      	sub	sp, #84	@ 0x54
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006358:	643b      	str	r3, [r7, #64]	@ 0x40
 800635a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800635e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	61fb      	str	r3, [r7, #28]
   return(result);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d118      	bne.n	80063da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f023 0310 	bic.w	r3, r3, #16
 80063bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063ee:	bf00      	nop
 80063f0:	3754      	adds	r7, #84	@ 0x54
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	4603      	mov	r3, r0
 8006402:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800640c:	2b84      	cmp	r3, #132	@ 0x84
 800640e:	d005      	beq.n	800641c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006410:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	3303      	adds	r3, #3
 800641a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006430:	f3ef 8305 	mrs	r3, IPSR
 8006434:	607b      	str	r3, [r7, #4]
  return(result);
 8006436:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006452:	f001 f983 	bl	800775c <vTaskStartScheduler>
  
  return osOK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	bd80      	pop	{r7, pc}

0800645c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b089      	sub	sp, #36	@ 0x24
 8006460:	af04      	add	r7, sp, #16
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d020      	beq.n	80064b0 <osThreadCreate+0x54>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685c      	ldr	r4, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691e      	ldr	r6, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ffb6 	bl	80063fa <makeFreeRtosPriority>
 800648e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006498:	9202      	str	r2, [sp, #8]
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	9100      	str	r1, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	4632      	mov	r2, r6
 80064a2:	4629      	mov	r1, r5
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 ff8b 	bl	80073c0 <xTaskCreateStatic>
 80064aa:	4603      	mov	r3, r0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e01c      	b.n	80064ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685c      	ldr	r4, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064bc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff ff98 	bl	80063fa <makeFreeRtosPriority>
 80064ca:	4602      	mov	r2, r0
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	9200      	str	r2, [sp, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	4632      	mov	r2, r6
 80064d8:	4629      	mov	r1, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 ffd0 	bl	8007480 <xTaskCreate>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <osDelay+0x16>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	e000      	b.n	800650c <osDelay+0x18>
 800650a:	2301      	movs	r3, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f8ef 	bl	80076f0 <vTaskDelay>
  
  return osOK;
 8006512:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	2001      	movs	r0, #1
 8006534:	f000 fadd 	bl	8006af2 <xQueueCreateMutexStatic>
 8006538:	4603      	mov	r3, r0
 800653a:	e003      	b.n	8006544 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800653c:	2001      	movs	r0, #1
 800653e:	f000 fac0 	bl	8006ac2 <xQueueCreateMutex>
 8006542:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <osMutexWait+0x18>
    return osErrorParameter;
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	e03a      	b.n	80065da <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d103      	bne.n	8006578 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006570:	f04f 33ff 	mov.w	r3, #4294967295
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e009      	b.n	800658c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d006      	beq.n	800658c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <osMutexWait+0x40>
      ticks = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800658c:	f7ff ff4d 	bl	800642a <inHandlerMode>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d017      	beq.n	80065c6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006596:	f107 0308 	add.w	r3, r7, #8
 800659a:	461a      	mov	r2, r3
 800659c:	2100      	movs	r1, #0
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fd64 	bl	800706c <xQueueReceiveFromISR>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d001      	beq.n	80065ae <osMutexWait+0x62>
      return osErrorOS;
 80065aa:	23ff      	movs	r3, #255	@ 0xff
 80065ac:	e015      	b.n	80065da <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <osMutexWait+0x8c>
 80065b4:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <osMutexWait+0x98>)
 80065b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	e008      	b.n	80065d8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc3f 	bl	8006e4c <xQueueSemaphoreTake>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <osMutexWait+0x8c>
    return osErrorOS;
 80065d4:	23ff      	movs	r3, #255	@ 0xff
 80065d6:	e000      	b.n	80065da <osMutexWait+0x8e>
  }
  
  return osOK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80065f8:	f7ff ff17 	bl	800642a <inHandlerMode>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fb8f 	bl	8006d2c <xQueueGiveFromISR>
 800660e:	4603      	mov	r3, r0
 8006610:	2b01      	cmp	r3, #1
 8006612:	d001      	beq.n	8006618 <osMutexRelease+0x30>
      return osErrorOS;
 8006614:	23ff      	movs	r3, #255	@ 0xff
 8006616:	e017      	b.n	8006648 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <osMutexRelease+0x5e>
 800661e:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <osMutexRelease+0x68>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	e00a      	b.n	8006646 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa76 	bl	8006b28 <xQueueGenericSend>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d001      	beq.n	8006646 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006642:	23ff      	movs	r3, #255	@ 0xff
 8006644:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b085      	sub	sp, #20
 8006658:	af02      	add	r7, sp, #8
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <osMessageCreate+0x36>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6859      	ldr	r1, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2400      	movs	r4, #0
 8006680:	9400      	str	r4, [sp, #0]
 8006682:	f000 f92d 	bl	80068e0 <xQueueGenericCreateStatic>
 8006686:	4603      	mov	r3, r0
 8006688:	e008      	b.n	800669c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	4619      	mov	r1, r3
 8006696:	f000 f9a0 	bl	80069da <xQueueGenericCreate>
 800669a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f103 0208 	add.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0208 	add.w	r2, r3, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d103      	bne.n	8006766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e00c      	b.n	8006780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3308      	adds	r3, #8
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e002      	b.n	8006774 <vListInsert+0x2e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	d2f6      	bcs.n	800676e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6852      	ldr	r2, [r2, #4]
 80067d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d103      	bne.n	80067ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1e5a      	subs	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006838:	f001 feee 	bl	8008618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	68f9      	ldr	r1, [r7, #12]
 8006846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006848:	fb01 f303 	mul.w	r3, r1, r3
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	3b01      	subs	r3, #1
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	22ff      	movs	r2, #255	@ 0xff
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	22ff      	movs	r2, #255	@ 0xff
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d114      	bne.n	80068b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01a      	beq.n	80068cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3310      	adds	r3, #16
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f9a8 	bl	8007bf0 <xTaskRemoveFromEventList>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d012      	beq.n	80068cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068a6:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <xQueueGenericReset+0xd0>)
 80068a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	e009      	b.n	80068cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3310      	adds	r3, #16
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fef1 	bl	80066a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3324      	adds	r3, #36	@ 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff feec 	bl	80066a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068cc:	f001 fed6 	bl	800867c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068d0:	2301      	movs	r3, #1
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	@ 0x38
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <xQueueGenericCreateStatic+0x56>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <xQueueGenericCreateStatic+0x5a>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueGenericCreateStatic+0x5c>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	623b      	str	r3, [r7, #32]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <xQueueGenericCreateStatic+0x84>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xQueueGenericCreateStatic+0x88>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xQueueGenericCreateStatic+0x8a>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006986:	2348      	movs	r3, #72	@ 0x48
 8006988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b48      	cmp	r3, #72	@ 0x48
 800698e:	d00b      	beq.n	80069a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61bb      	str	r3, [r7, #24]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00d      	beq.n	80069d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f840 	bl	8006a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3730      	adds	r7, #48	@ 0x30
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b08a      	sub	sp, #40	@ 0x28
 80069de:	af02      	add	r7, sp, #8
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <xQueueGenericCreate+0x2c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	613b      	str	r3, [r7, #16]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	3348      	adds	r3, #72	@ 0x48
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 ff21 	bl	800885c <pvPortMalloc>
 8006a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d011      	beq.n	8006a46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	3348      	adds	r3, #72	@ 0x48
 8006a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a34:	79fa      	ldrb	r2, [r7, #7]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f805 	bl	8006a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a46:	69bb      	ldr	r3, [r7, #24]
	}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3720      	adds	r7, #32
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a7e:	2101      	movs	r1, #1
 8006a80:	69b8      	ldr	r0, [r7, #24]
 8006a82:	f7ff fec3 	bl	800680c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f837 	bl	8006b28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	4603      	mov	r3, r0
 8006aca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6939      	ldr	r1, [r7, #16]
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f7ff ff7d 	bl	80069da <xQueueGenericCreate>
 8006ae0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff ffd3 	bl	8006a8e <prvInitialiseMutex>

		return xNewQueue;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b088      	sub	sp, #32
 8006af6:	af02      	add	r7, sp, #8
 8006af8:	4603      	mov	r3, r0
 8006afa:	6039      	str	r1, [r7, #0]
 8006afc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006afe:	2301      	movs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	2300      	movs	r3, #0
 8006b04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	6939      	ldr	r1, [r7, #16]
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f7ff fee5 	bl	80068e0 <xQueueGenericCreateStatic>
 8006b16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff ffb8 	bl	8006a8e <prvInitialiseMutex>

		return xNewQueue;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	@ 0x38
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b36:	2300      	movs	r3, #0
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <xQueueGenericSend+0x34>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <xQueueGenericSend+0x42>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <xQueueGenericSend+0x46>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <xQueueGenericSend+0x48>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xQueueGenericSend+0x64>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d103      	bne.n	8006b9a <xQueueGenericSend+0x72>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <xQueueGenericSend+0x76>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <xQueueGenericSend+0x78>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xQueueGenericSend+0x94>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	623b      	str	r3, [r7, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bbc:	f001 f9d8 	bl	8007f70 <xTaskGetSchedulerState>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <xQueueGenericSend+0xa4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <xQueueGenericSend+0xa8>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <xQueueGenericSend+0xaa>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <xQueueGenericSend+0xc6>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	61fb      	str	r3, [r7, #28]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bee:	f001 fd13 	bl	8008618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d302      	bcc.n	8006c04 <xQueueGenericSend+0xdc>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d129      	bne.n	8006c58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c0a:	f000 fac9 	bl	80071a0 <prvCopyDataToQueue>
 8006c0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d010      	beq.n	8006c3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	3324      	adds	r3, #36	@ 0x24
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 ffe7 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d013      	beq.n	8006c50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c28:	4b3f      	ldr	r3, [pc, #252]	@ (8006d28 <xQueueGenericSend+0x200>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	e00a      	b.n	8006c50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c40:	4b39      	ldr	r3, [pc, #228]	@ (8006d28 <xQueueGenericSend+0x200>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c50:	f001 fd14 	bl	800867c <vPortExitCritical>
				return pdPASS;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e063      	b.n	8006d20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c5e:	f001 fd0d 	bl	800867c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e05c      	b.n	8006d20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f821 	bl	8007cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c76:	2301      	movs	r3, #1
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c7a:	f001 fcff 	bl	800867c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c7e:	f000 fdcf 	bl	8007820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c82:	f001 fcc9 	bl	8008618 <vPortEnterCritical>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c8c:	b25b      	sxtb	r3, r3
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d103      	bne.n	8006c9c <xQueueGenericSend+0x174>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d103      	bne.n	8006cb2 <xQueueGenericSend+0x18a>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cb2:	f001 fce3 	bl	800867c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb6:	1d3a      	adds	r2, r7, #4
 8006cb8:	f107 0314 	add.w	r3, r7, #20
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 f810 	bl	8007ce4 <xTaskCheckForTimeOut>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d124      	bne.n	8006d14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ccc:	f000 fb60 	bl	8007390 <prvIsQueueFull>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d018      	beq.n	8006d08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	3310      	adds	r3, #16
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 ff60 	bl	8007ba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ce6:	f000 faeb 	bl	80072c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cea:	f000 fda7 	bl	800783c <xTaskResumeAll>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f af7c 	bne.w	8006bee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d28 <xQueueGenericSend+0x200>)
 8006cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	e772      	b.n	8006bee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d0a:	f000 fad9 	bl	80072c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d0e:	f000 fd95 	bl	800783c <xTaskResumeAll>
 8006d12:	e76c      	b.n	8006bee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d16:	f000 fad3 	bl	80072c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d1a:	f000 fd8f 	bl	800783c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3738      	adds	r7, #56	@ 0x38
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08e      	sub	sp, #56	@ 0x38
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	623b      	str	r3, [r7, #32]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	61fb      	str	r3, [r7, #28]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <xQueueGiveFromISR+0x5c>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <xQueueGiveFromISR+0x60>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <xQueueGiveFromISR+0x62>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61bb      	str	r3, [r7, #24]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006daa:	f001 fd15 	bl	80087d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dae:	f3ef 8211 	mrs	r2, BASEPRI
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	617a      	str	r2, [r7, #20]
 8006dc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d22b      	bcs.n	8006e32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d112      	bne.n	8006e1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	3324      	adds	r3, #36	@ 0x24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fef4 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e007      	b.n	8006e2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	b25a      	sxtb	r2, r3
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e30:	e001      	b.n	8006e36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3738      	adds	r7, #56	@ 0x38
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	@ 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	623b      	str	r3, [r7, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61fb      	str	r3, [r7, #28]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea0:	f001 f866 	bl	8007f70 <xTaskGetSchedulerState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <xQueueSemaphoreTake+0x64>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <xQueueSemaphoreTake+0x68>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <xQueueSemaphoreTake+0x6a>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	61bb      	str	r3, [r7, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed2:	f001 fba1 	bl	8008618 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d024      	beq.n	8006f2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ef2:	f001 f9e9 	bl	80082c8 <pvTaskIncrementMutexHeldCount>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00f      	beq.n	8006f24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	3310      	adds	r3, #16
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fe71 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f14:	4b54      	ldr	r3, [pc, #336]	@ (8007068 <xQueueSemaphoreTake+0x21c>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f24:	f001 fbaa 	bl	800867c <vPortExitCritical>
				return pdPASS;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e098      	b.n	800705e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d112      	bne.n	8006f58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	617b      	str	r3, [r7, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f50:	f001 fb94 	bl	800867c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e082      	b.n	800705e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f5e:	f107 030c 	add.w	r3, r7, #12
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fea8 	bl	8007cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f6c:	f001 fb86 	bl	800867c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f70:	f000 fc56 	bl	8007820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f74:	f001 fb50 	bl	8008618 <vPortEnterCritical>
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f7e:	b25b      	sxtb	r3, r3
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d103      	bne.n	8006f8e <xQueueSemaphoreTake+0x142>
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f94:	b25b      	sxtb	r3, r3
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d103      	bne.n	8006fa4 <xQueueSemaphoreTake+0x158>
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa4:	f001 fb6a 	bl	800867c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa8:	463a      	mov	r2, r7
 8006faa:	f107 030c 	add.w	r3, r7, #12
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fe97 	bl	8007ce4 <xTaskCheckForTimeOut>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d132      	bne.n	8007022 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fbe:	f000 f9d1 	bl	8007364 <prvIsQueueEmpty>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d026      	beq.n	8007016 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006fd0:	f001 fb22 	bl	8008618 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 ffe7 	bl	8007fac <xTaskPriorityInherit>
 8006fde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006fe0:	f001 fb4c 	bl	800867c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	3324      	adds	r3, #36	@ 0x24
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fdd9 	bl	8007ba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ff4:	f000 f964 	bl	80072c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ff8:	f000 fc20 	bl	800783c <xTaskResumeAll>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f af67 	bne.w	8006ed2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <xQueueSemaphoreTake+0x21c>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	e75d      	b.n	8006ed2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007016:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007018:	f000 f952 	bl	80072c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800701c:	f000 fc0e 	bl	800783c <xTaskResumeAll>
 8007020:	e757      	b.n	8006ed2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007024:	f000 f94c 	bl	80072c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007028:	f000 fc08 	bl	800783c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800702c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800702e:	f000 f999 	bl	8007364 <prvIsQueueEmpty>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f43f af4c 	beq.w	8006ed2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007040:	f001 faea 	bl	8008618 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007044:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007046:	f000 f893 	bl	8007170 <prvGetDisinheritPriorityAfterTimeout>
 800704a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f8a8 	bl	80081a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007058:	f001 fb10 	bl	800867c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800705c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800705e:	4618      	mov	r0, r3
 8007060:	3738      	adds	r7, #56	@ 0x38
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08e      	sub	sp, #56	@ 0x38
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10b      	bne.n	800709a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	623b      	str	r3, [r7, #32]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <xQueueReceiveFromISR+0x3c>
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <xQueueReceiveFromISR+0x40>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <xQueueReceiveFromISR+0x42>
 80070ac:	2300      	movs	r3, #0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	61fb      	str	r3, [r7, #28]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ca:	f001 fb85 	bl	80087d8 <vPortValidateInterruptPriority>
	__asm volatile
 80070ce:	f3ef 8211 	mrs	r2, BASEPRI
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61ba      	str	r2, [r7, #24]
 80070e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80070e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d02f      	beq.n	8007156 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007104:	f000 f8b6 	bl	8007274 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007110:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d112      	bne.n	8007140 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	3310      	adds	r3, #16
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fd62 	bl	8007bf0 <xTaskRemoveFromEventList>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e007      	b.n	8007150 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007144:	3301      	adds	r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	b25a      	sxtb	r2, r3
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007150:	2301      	movs	r3, #1
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
 8007154:	e001      	b.n	800715a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007156:	2300      	movs	r3, #0
 8007158:	637b      	str	r3, [r7, #52]	@ 0x34
 800715a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f383 8811 	msr	BASEPRI, r3
}
 8007164:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007168:	4618      	mov	r0, r3
 800716a:	3738      	adds	r7, #56	@ 0x38
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d006      	beq.n	800718e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1c3 0307 	rsb	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e001      	b.n	8007192 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007192:	68fb      	ldr	r3, [r7, #12]
	}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10d      	bne.n	80071da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d14d      	bne.n	8007262 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 ff64 	bl	8008098 <xTaskPriorityDisinherit>
 80071d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e043      	b.n	8007262 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d119      	bne.n	8007214 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6858      	ldr	r0, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	461a      	mov	r2, r3
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	f002 f80d 	bl	800920a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	d32b      	bcc.n	8007262 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e026      	b.n	8007262 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68d8      	ldr	r0, [r3, #12]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721c:	461a      	mov	r2, r3
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	f001 fff3 	bl	800920a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722c:	425b      	negs	r3, r3
 800722e:	441a      	add	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d207      	bcs.n	8007250 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	425b      	negs	r3, r3
 800724a:	441a      	add	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d105      	bne.n	8007262 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	3b01      	subs	r3, #1
 8007260:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800726a:	697b      	ldr	r3, [r7, #20]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d018      	beq.n	80072b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	441a      	add	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d303      	bcc.n	80072a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68d9      	ldr	r1, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	461a      	mov	r2, r3
 80072b2:	6838      	ldr	r0, [r7, #0]
 80072b4:	f001 ffa9 	bl	800920a <memcpy>
	}
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072c8:	f001 f9a6 	bl	8008618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d4:	e011      	b.n	80072fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d012      	beq.n	8007304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3324      	adds	r3, #36	@ 0x24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fc84 	bl	8007bf0 <xTaskRemoveFromEventList>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072ee:	f000 fd5d 	bl	8007dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dce9      	bgt.n	80072d6 <prvUnlockQueue+0x16>
 8007302:	e000      	b.n	8007306 <prvUnlockQueue+0x46>
					break;
 8007304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	22ff      	movs	r2, #255	@ 0xff
 800730a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800730e:	f001 f9b5 	bl	800867c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007312:	f001 f981 	bl	8008618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800731c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800731e:	e011      	b.n	8007344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d012      	beq.n	800734e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3310      	adds	r3, #16
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fc5f 	bl	8007bf0 <xTaskRemoveFromEventList>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007338:	f000 fd38 	bl	8007dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	3b01      	subs	r3, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	dce9      	bgt.n	8007320 <prvUnlockQueue+0x60>
 800734c:	e000      	b.n	8007350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800734e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	22ff      	movs	r2, #255	@ 0xff
 8007354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007358:	f001 f990 	bl	800867c <vPortExitCritical>
}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800736c:	f001 f954 	bl	8008618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e001      	b.n	8007382 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007382:	f001 f97b 	bl	800867c <vPortExitCritical>

	return xReturn;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007398:	f001 f93e 	bl	8008618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d102      	bne.n	80073ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e001      	b.n	80073b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b2:	f001 f963 	bl	800867c <vPortExitCritical>

	return xReturn;
 80073b6:	68fb      	ldr	r3, [r7, #12]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	@ 0x38
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10b      	bne.n	80073ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	623b      	str	r3, [r7, #32]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <xTaskCreateStatic+0x4a>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	61fb      	str	r3, [r7, #28]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800740a:	2354      	movs	r3, #84	@ 0x54
 800740c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b54      	cmp	r3, #84	@ 0x54
 8007412:	d00b      	beq.n	800742c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	61bb      	str	r3, [r7, #24]
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800742c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800742e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01e      	beq.n	8007472 <xTaskCreateStatic+0xb2>
 8007434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800744c:	2300      	movs	r3, #0
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	9302      	str	r3, [sp, #8]
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f850 	bl	800750a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800746a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800746c:	f000 f8d6 	bl	800761c <prvAddNewTaskToReadyList>
 8007470:	e001      	b.n	8007476 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007476:	697b      	ldr	r3, [r7, #20]
	}
 8007478:	4618      	mov	r0, r3
 800747a:	3728      	adds	r7, #40	@ 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08c      	sub	sp, #48	@ 0x30
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f001 f9e1 	bl	800885c <pvPortMalloc>
 800749a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00e      	beq.n	80074c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074a2:	2054      	movs	r0, #84	@ 0x54
 80074a4:	f001 f9da 	bl	800885c <pvPortMalloc>
 80074a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80074b6:	e005      	b.n	80074c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074b8:	6978      	ldr	r0, [r7, #20]
 80074ba:	f001 fa9d 	bl	80089f8 <vPortFree>
 80074be:	e001      	b.n	80074c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d017      	beq.n	80074fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	9302      	str	r3, [sp, #8]
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f80e 	bl	800750a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074ee:	69f8      	ldr	r0, [r7, #28]
 80074f0:	f000 f894 	bl	800761c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074f4:	2301      	movs	r3, #1
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e002      	b.n	8007500 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295
 80074fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007500:	69bb      	ldr	r3, [r7, #24]
	}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b088      	sub	sp, #32
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007522:	3b01      	subs	r3, #1
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f023 0307 	bic.w	r3, r3, #7
 8007530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	617b      	str	r3, [r7, #20]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01f      	beq.n	800759a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e012      	b.n	8007586 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	7819      	ldrb	r1, [r3, #0]
 8007568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	3334      	adds	r3, #52	@ 0x34
 8007570:	460a      	mov	r2, r1
 8007572:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	3301      	adds	r3, #1
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d9e9      	bls.n	8007560 <prvInitialiseNewTask+0x56>
 800758c:	e000      	b.n	8007590 <prvInitialiseNewTask+0x86>
			{
				break;
 800758e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007598:	e003      	b.n	80075a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	d901      	bls.n	80075ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075a8:	2306      	movs	r3, #6
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff f88e 	bl	80066e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f889 	bl	80066e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	f1c3 0207 	rsb	r2, r3, #7
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	2200      	movs	r2, #0
 80075ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	f000 fede 	bl	80083bc <pxPortInitialiseStack>
 8007600:	4602      	mov	r2, r0
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007612:	bf00      	nop
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007624:	f000 fff8 	bl	8008618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007628:	4b2a      	ldr	r3, [pc, #168]	@ (80076d4 <prvAddNewTaskToReadyList+0xb8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	4a29      	ldr	r2, [pc, #164]	@ (80076d4 <prvAddNewTaskToReadyList+0xb8>)
 8007630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007632:	4b29      	ldr	r3, [pc, #164]	@ (80076d8 <prvAddNewTaskToReadyList+0xbc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800763a:	4a27      	ldr	r2, [pc, #156]	@ (80076d8 <prvAddNewTaskToReadyList+0xbc>)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007640:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <prvAddNewTaskToReadyList+0xb8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d110      	bne.n	800766a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007648:	f000 fbd4 	bl	8007df4 <prvInitialiseTaskLists>
 800764c:	e00d      	b.n	800766a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800764e:	4b23      	ldr	r3, [pc, #140]	@ (80076dc <prvAddNewTaskToReadyList+0xc0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007656:	4b20      	ldr	r3, [pc, #128]	@ (80076d8 <prvAddNewTaskToReadyList+0xbc>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	429a      	cmp	r2, r3
 8007662:	d802      	bhi.n	800766a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007664:	4a1c      	ldr	r2, [pc, #112]	@ (80076d8 <prvAddNewTaskToReadyList+0xbc>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800766a:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <prvAddNewTaskToReadyList+0xc4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a1b      	ldr	r2, [pc, #108]	@ (80076e0 <prvAddNewTaskToReadyList+0xc4>)
 8007672:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	4b19      	ldr	r3, [pc, #100]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	4a18      	ldr	r2, [pc, #96]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a15      	ldr	r2, [pc, #84]	@ (80076e8 <prvAddNewTaskToReadyList+0xcc>)
 8007694:	441a      	add	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7ff f82e 	bl	80066fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076a2:	f000 ffeb 	bl	800867c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <prvAddNewTaskToReadyList+0xc0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076ae:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <prvAddNewTaskToReadyList+0xbc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d207      	bcs.n	80076cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076bc:	4b0b      	ldr	r3, [pc, #44]	@ (80076ec <prvAddNewTaskToReadyList+0xd0>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200009d8 	.word	0x200009d8
 80076d8:	200008d8 	.word	0x200008d8
 80076dc:	200009e4 	.word	0x200009e4
 80076e0:	200009f4 	.word	0x200009f4
 80076e4:	200009e0 	.word	0x200009e0
 80076e8:	200008dc 	.word	0x200008dc
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d018      	beq.n	8007734 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007702:	4b14      	ldr	r3, [pc, #80]	@ (8007754 <vTaskDelay+0x64>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <vTaskDelay+0x32>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	60bb      	str	r3, [r7, #8]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007722:	f000 f87d 	bl	8007820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fde1 	bl	80082f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800772e:	f000 f885 	bl	800783c <xTaskResumeAll>
 8007732:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800773a:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <vTaskDelay+0x68>)
 800773c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000a00 	.word	0x20000a00
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	@ 0x28
 8007760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800776a:	463a      	mov	r2, r7
 800776c:	1d39      	adds	r1, r7, #4
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f7f8 ff22 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	9202      	str	r2, [sp, #8]
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	2300      	movs	r3, #0
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2300      	movs	r3, #0
 8007788:	460a      	mov	r2, r1
 800778a:	491f      	ldr	r1, [pc, #124]	@ (8007808 <vTaskStartScheduler+0xac>)
 800778c:	481f      	ldr	r0, [pc, #124]	@ (800780c <vTaskStartScheduler+0xb0>)
 800778e:	f7ff fe17 	bl	80073c0 <xTaskCreateStatic>
 8007792:	4603      	mov	r3, r0
 8007794:	4a1e      	ldr	r2, [pc, #120]	@ (8007810 <vTaskStartScheduler+0xb4>)
 8007796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007798:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <vTaskStartScheduler+0xb4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077a0:	2301      	movs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e001      	b.n	80077aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d116      	bne.n	80077de <vTaskStartScheduler+0x82>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	613b      	str	r3, [r7, #16]
}
 80077c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077c4:	4b13      	ldr	r3, [pc, #76]	@ (8007814 <vTaskStartScheduler+0xb8>)
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077cc:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <vTaskStartScheduler+0xbc>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077d2:	4b12      	ldr	r3, [pc, #72]	@ (800781c <vTaskStartScheduler+0xc0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077d8:	f000 fe7a 	bl	80084d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077dc:	e00f      	b.n	80077fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d10b      	bne.n	80077fe <vTaskStartScheduler+0xa2>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <vTaskStartScheduler+0x9e>
}
 80077fe:	bf00      	nop
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	08009dc4 	.word	0x08009dc4
 800780c:	08007dc5 	.word	0x08007dc5
 8007810:	200009fc 	.word	0x200009fc
 8007814:	200009f8 	.word	0x200009f8
 8007818:	200009e4 	.word	0x200009e4
 800781c:	200009dc 	.word	0x200009dc

08007820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007824:	4b04      	ldr	r3, [pc, #16]	@ (8007838 <vTaskSuspendAll+0x18>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	4a03      	ldr	r2, [pc, #12]	@ (8007838 <vTaskSuspendAll+0x18>)
 800782c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	20000a00 	.word	0x20000a00

0800783c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800784a:	4b42      	ldr	r3, [pc, #264]	@ (8007954 <xTaskResumeAll+0x118>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <xTaskResumeAll+0x2e>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	603b      	str	r3, [r7, #0]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800786a:	f000 fed5 	bl	8008618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800786e:	4b39      	ldr	r3, [pc, #228]	@ (8007954 <xTaskResumeAll+0x118>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3b01      	subs	r3, #1
 8007874:	4a37      	ldr	r2, [pc, #220]	@ (8007954 <xTaskResumeAll+0x118>)
 8007876:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007878:	4b36      	ldr	r3, [pc, #216]	@ (8007954 <xTaskResumeAll+0x118>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d161      	bne.n	8007944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007880:	4b35      	ldr	r3, [pc, #212]	@ (8007958 <xTaskResumeAll+0x11c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05d      	beq.n	8007944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007888:	e02e      	b.n	80078e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788a:	4b34      	ldr	r3, [pc, #208]	@ (800795c <xTaskResumeAll+0x120>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3318      	adds	r3, #24
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe ff8e 	bl	80067b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3304      	adds	r3, #4
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe ff89 	bl	80067b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	2201      	movs	r2, #1
 80078ac:	409a      	lsls	r2, r3
 80078ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <xTaskResumeAll+0x124>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007960 <xTaskResumeAll+0x124>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a27      	ldr	r2, [pc, #156]	@ (8007964 <xTaskResumeAll+0x128>)
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe ff15 	bl	80066fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	4b23      	ldr	r3, [pc, #140]	@ (8007968 <xTaskResumeAll+0x12c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078e2:	4b22      	ldr	r3, [pc, #136]	@ (800796c <xTaskResumeAll+0x130>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078e8:	4b1c      	ldr	r3, [pc, #112]	@ (800795c <xTaskResumeAll+0x120>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1cc      	bne.n	800788a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078f6:	f000 fb1b 	bl	8007f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007970 <xTaskResumeAll+0x134>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d010      	beq.n	8007928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007906:	f000 f837 	bl	8007978 <xTaskIncrementTick>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007910:	4b16      	ldr	r3, [pc, #88]	@ (800796c <xTaskResumeAll+0x130>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3b01      	subs	r3, #1
 800791a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007922:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <xTaskResumeAll+0x134>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007928:	4b10      	ldr	r3, [pc, #64]	@ (800796c <xTaskResumeAll+0x130>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007934:	4b0f      	ldr	r3, [pc, #60]	@ (8007974 <xTaskResumeAll+0x138>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007944:	f000 fe9a 	bl	800867c <vPortExitCritical>

	return xAlreadyYielded;
 8007948:	68bb      	ldr	r3, [r7, #8]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000a00 	.word	0x20000a00
 8007958:	200009d8 	.word	0x200009d8
 800795c:	20000998 	.word	0x20000998
 8007960:	200009e0 	.word	0x200009e0
 8007964:	200008dc 	.word	0x200008dc
 8007968:	200008d8 	.word	0x200008d8
 800796c:	200009ec 	.word	0x200009ec
 8007970:	200009e8 	.word	0x200009e8
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007982:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac0 <xTaskIncrementTick+0x148>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 808f 	bne.w	8007aaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800798c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac4 <xTaskIncrementTick+0x14c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007994:	4a4b      	ldr	r2, [pc, #300]	@ (8007ac4 <xTaskIncrementTick+0x14c>)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d121      	bne.n	80079e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a0:	4b49      	ldr	r3, [pc, #292]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xTaskIncrementTick+0x46>
 80079c2:	4b41      	ldr	r3, [pc, #260]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	4b40      	ldr	r3, [pc, #256]	@ (8007acc <xTaskIncrementTick+0x154>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a3e      	ldr	r2, [pc, #248]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <xTaskIncrementTick+0x154>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad0 <xTaskIncrementTick+0x158>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad0 <xTaskIncrementTick+0x158>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	f000 faa6 	bl	8007f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079e4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d348      	bcc.n	8007a80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ee:	4b36      	ldr	r3, [pc, #216]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	4b36      	ldr	r3, [pc, #216]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	601a      	str	r2, [r3, #0]
					break;
 8007a00:	e03e      	b.n	8007a80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a02:	4b31      	ldr	r3, [pc, #196]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d203      	bcs.n	8007a22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a20:	e02e      	b.n	8007a80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fec6 	bl	80067b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	3318      	adds	r3, #24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe febd 	bl	80067b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	2201      	movs	r2, #1
 8007a44:	409a      	lsls	r2, r3
 8007a46:	4b24      	ldr	r3, [pc, #144]	@ (8007ad8 <xTaskIncrementTick+0x160>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <xTaskIncrementTick+0x160>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <xTaskIncrementTick+0x164>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7fe fe49 	bl	80066fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <xTaskIncrementTick+0x168>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d3b9      	bcc.n	80079ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a7e:	e7b6      	b.n	80079ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a80:	4b17      	ldr	r3, [pc, #92]	@ (8007ae0 <xTaskIncrementTick+0x168>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a86:	4915      	ldr	r1, [pc, #84]	@ (8007adc <xTaskIncrementTick+0x164>)
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d901      	bls.n	8007a9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ae4 <xTaskIncrementTick+0x16c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e004      	b.n	8007ab4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <xTaskIncrementTick+0x170>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae8 <xTaskIncrementTick+0x170>)
 8007ab2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ab4:	697b      	ldr	r3, [r7, #20]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000a00 	.word	0x20000a00
 8007ac4:	200009dc 	.word	0x200009dc
 8007ac8:	20000990 	.word	0x20000990
 8007acc:	20000994 	.word	0x20000994
 8007ad0:	200009f0 	.word	0x200009f0
 8007ad4:	200009f8 	.word	0x200009f8
 8007ad8:	200009e0 	.word	0x200009e0
 8007adc:	200008dc 	.word	0x200008dc
 8007ae0:	200008d8 	.word	0x200008d8
 8007ae4:	200009ec 	.word	0x200009ec
 8007ae8:	200009e8 	.word	0x200009e8

08007aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007af2:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <vTaskSwitchContext+0xa4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007afa:	4b26      	ldr	r3, [pc, #152]	@ (8007b94 <vTaskSwitchContext+0xa8>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b00:	e040      	b.n	8007b84 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b02:	4b24      	ldr	r3, [pc, #144]	@ (8007b94 <vTaskSwitchContext+0xa8>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b23      	ldr	r3, [pc, #140]	@ (8007b98 <vTaskSwitchContext+0xac>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	fab3 f383 	clz	r3, r3
 8007b14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	f1c3 031f 	rsb	r3, r3, #31
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	491f      	ldr	r1, [pc, #124]	@ (8007b9c <vTaskSwitchContext+0xb0>)
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	607b      	str	r3, [r7, #4]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <vTaskSwitchContext+0x5a>
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a11      	ldr	r2, [pc, #68]	@ (8007b9c <vTaskSwitchContext+0xb0>)
 8007b56:	4413      	add	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	605a      	str	r2, [r3, #4]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d104      	bne.n	8007b7a <vTaskSwitchContext+0x8e>
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	4a07      	ldr	r2, [pc, #28]	@ (8007ba0 <vTaskSwitchContext+0xb4>)
 8007b82:	6013      	str	r3, [r2, #0]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000a00 	.word	0x20000a00
 8007b94:	200009ec 	.word	0x200009ec
 8007b98:	200009e0 	.word	0x200009e0
 8007b9c:	200008dc 	.word	0x200008dc
 8007ba0:	200008d8 	.word	0x200008d8

08007ba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	60fb      	str	r3, [r7, #12]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bcc:	4b07      	ldr	r3, [pc, #28]	@ (8007bec <vTaskPlaceOnEventList+0x48>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3318      	adds	r3, #24
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe fdb6 	bl	8006746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bda:	2101      	movs	r1, #1
 8007bdc:	6838      	ldr	r0, [r7, #0]
 8007bde:	f000 fb87 	bl	80082f0 <prvAddCurrentTaskToDelayedList>
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200008d8 	.word	0x200008d8

08007bf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10b      	bne.n	8007c1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60fb      	str	r3, [r7, #12]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	3318      	adds	r3, #24
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fdc8 	bl	80067b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca0 <xTaskRemoveFromEventList+0xb0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d11c      	bne.n	8007c6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fdbf 	bl	80067b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	2201      	movs	r2, #1
 8007c40:	409a      	lsls	r2, r3
 8007c42:	4b18      	ldr	r3, [pc, #96]	@ (8007ca4 <xTaskRemoveFromEventList+0xb4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	4a16      	ldr	r2, [pc, #88]	@ (8007ca4 <xTaskRemoveFromEventList+0xb4>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a13      	ldr	r2, [pc, #76]	@ (8007ca8 <xTaskRemoveFromEventList+0xb8>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe fd4b 	bl	80066fe <vListInsertEnd>
 8007c68:	e005      	b.n	8007c76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3318      	adds	r3, #24
 8007c6e:	4619      	mov	r1, r3
 8007c70:	480e      	ldr	r0, [pc, #56]	@ (8007cac <xTaskRemoveFromEventList+0xbc>)
 8007c72:	f7fe fd44 	bl	80066fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <xTaskRemoveFromEventList+0xc0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d905      	bls.n	8007c90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c88:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <xTaskRemoveFromEventList+0xc4>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e001      	b.n	8007c94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c94:	697b      	ldr	r3, [r7, #20]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000a00 	.word	0x20000a00
 8007ca4:	200009e0 	.word	0x200009e0
 8007ca8:	200008dc 	.word	0x200008dc
 8007cac:	20000998 	.word	0x20000998
 8007cb0:	200008d8 	.word	0x200008d8
 8007cb4:	200009ec 	.word	0x200009ec

08007cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <vTaskInternalSetTimeOutState+0x24>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <vTaskInternalSetTimeOutState+0x28>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	200009f0 	.word	0x200009f0
 8007ce0:	200009dc 	.word	0x200009dc

08007ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d2a:	f000 fc75 	bl	8008618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007da4 <xTaskCheckForTimeOut+0xc0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d102      	bne.n	8007d4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	e023      	b.n	8007d96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <xTaskCheckForTimeOut+0xc4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d007      	beq.n	8007d6a <xTaskCheckForTimeOut+0x86>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	e015      	b.n	8007d96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d20b      	bcs.n	8007d8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff99 	bl	8007cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e004      	b.n	8007d96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d96:	f000 fc71 	bl	800867c <vPortExitCritical>

	return xReturn;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200009dc 	.word	0x200009dc
 8007da8:	200009f0 	.word	0x200009f0

08007dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007db0:	4b03      	ldr	r3, [pc, #12]	@ (8007dc0 <vTaskMissedYield+0x14>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	200009ec 	.word	0x200009ec

08007dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dcc:	f000 f852 	bl	8007e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dd0:	4b06      	ldr	r3, [pc, #24]	@ (8007dec <prvIdleTask+0x28>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d9f9      	bls.n	8007dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dd8:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <prvIdleTask+0x2c>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007de8:	e7f0      	b.n	8007dcc <prvIdleTask+0x8>
 8007dea:	bf00      	nop
 8007dec:	200008dc 	.word	0x200008dc
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	e00c      	b.n	8007e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4a12      	ldr	r2, [pc, #72]	@ (8007e54 <prvInitialiseTaskLists+0x60>)
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fc48 	bl	80066a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3301      	adds	r3, #1
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b06      	cmp	r3, #6
 8007e1e:	d9ef      	bls.n	8007e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e20:	480d      	ldr	r0, [pc, #52]	@ (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e22:	f7fe fc3f 	bl	80066a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e26:	480d      	ldr	r0, [pc, #52]	@ (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e28:	f7fe fc3c 	bl	80066a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e2c:	480c      	ldr	r0, [pc, #48]	@ (8007e60 <prvInitialiseTaskLists+0x6c>)
 8007e2e:	f7fe fc39 	bl	80066a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e32:	480c      	ldr	r0, [pc, #48]	@ (8007e64 <prvInitialiseTaskLists+0x70>)
 8007e34:	f7fe fc36 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e38:	480b      	ldr	r0, [pc, #44]	@ (8007e68 <prvInitialiseTaskLists+0x74>)
 8007e3a:	f7fe fc33 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <prvInitialiseTaskLists+0x78>)
 8007e40:	4a05      	ldr	r2, [pc, #20]	@ (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	@ (8007e70 <prvInitialiseTaskLists+0x7c>)
 8007e46:	4a05      	ldr	r2, [pc, #20]	@ (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	200008dc 	.word	0x200008dc
 8007e58:	20000968 	.word	0x20000968
 8007e5c:	2000097c 	.word	0x2000097c
 8007e60:	20000998 	.word	0x20000998
 8007e64:	200009ac 	.word	0x200009ac
 8007e68:	200009c4 	.word	0x200009c4
 8007e6c:	20000990 	.word	0x20000990
 8007e70:	20000994 	.word	0x20000994

08007e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7a:	e019      	b.n	8007eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e7c:	f000 fbcc 	bl	8008618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e80:	4b10      	ldr	r3, [pc, #64]	@ (8007ec4 <prvCheckTasksWaitingTermination+0x50>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fc93 	bl	80067b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	4a0b      	ldr	r2, [pc, #44]	@ (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ea6:	f000 fbe9 	bl	800867c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f810 	bl	8007ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e1      	bne.n	8007e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200009ac 	.word	0x200009ac
 8007ec8:	200009d8 	.word	0x200009d8
 8007ecc:	200009c0 	.word	0x200009c0

08007ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fd86 	bl	80089f8 <vPortFree>
				vPortFree( pxTCB );
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fd83 	bl	80089f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ef2:	e019      	b.n	8007f28 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fd7a 	bl	80089f8 <vPortFree>
	}
 8007f04:	e010      	b.n	8007f28 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d00b      	beq.n	8007f28 <prvDeleteTCB+0x58>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <prvDeleteTCB+0x54>
	}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f36:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <prvResetNextTaskUnblockTime+0x38>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f40:	4b0a      	ldr	r3, [pc, #40]	@ (8007f6c <prvResetNextTaskUnblockTime+0x3c>)
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f48:	e008      	b.n	8007f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4a:	4b07      	ldr	r3, [pc, #28]	@ (8007f68 <prvResetNextTaskUnblockTime+0x38>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a04      	ldr	r2, [pc, #16]	@ (8007f6c <prvResetNextTaskUnblockTime+0x3c>)
 8007f5a:	6013      	str	r3, [r2, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000990 	.word	0x20000990
 8007f6c:	200009f8 	.word	0x200009f8

08007f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f76:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <xTaskGetSchedulerState+0x34>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	e008      	b.n	8007f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f84:	4b08      	ldr	r3, [pc, #32]	@ (8007fa8 <xTaskGetSchedulerState+0x38>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	607b      	str	r3, [r7, #4]
 8007f90:	e001      	b.n	8007f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f96:	687b      	ldr	r3, [r7, #4]
	}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	200009e4 	.word	0x200009e4
 8007fa8:	20000a00 	.word	0x20000a00

08007fac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d05e      	beq.n	8008080 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc6:	4b31      	ldr	r3, [pc, #196]	@ (800808c <xTaskPriorityInherit+0xe0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d24e      	bcs.n	800806e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	db06      	blt.n	8007fe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800808c <xTaskPriorityInherit+0xe0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	f1c3 0207 	rsb	r2, r3, #7
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6959      	ldr	r1, [r3, #20]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a26      	ldr	r2, [pc, #152]	@ (8008090 <xTaskPriorityInherit+0xe4>)
 8007ff8:	4413      	add	r3, r2
 8007ffa:	4299      	cmp	r1, r3
 8007ffc:	d12f      	bne.n	800805e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3304      	adds	r3, #4
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fbd8 	bl	80067b8 <uxListRemove>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	2201      	movs	r2, #1
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	43da      	mvns	r2, r3
 800801a:	4b1e      	ldr	r3, [pc, #120]	@ (8008094 <xTaskPriorityInherit+0xe8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4013      	ands	r3, r2
 8008020:	4a1c      	ldr	r2, [pc, #112]	@ (8008094 <xTaskPriorityInherit+0xe8>)
 8008022:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008024:	4b19      	ldr	r3, [pc, #100]	@ (800808c <xTaskPriorityInherit+0xe0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	2201      	movs	r2, #1
 8008034:	409a      	lsls	r2, r3
 8008036:	4b17      	ldr	r3, [pc, #92]	@ (8008094 <xTaskPriorityInherit+0xe8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4313      	orrs	r3, r2
 800803c:	4a15      	ldr	r2, [pc, #84]	@ (8008094 <xTaskPriorityInherit+0xe8>)
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4a10      	ldr	r2, [pc, #64]	@ (8008090 <xTaskPriorityInherit+0xe4>)
 800804e:	441a      	add	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	3304      	adds	r3, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe fb51 	bl	80066fe <vListInsertEnd>
 800805c:	e004      	b.n	8008068 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <xTaskPriorityInherit+0xe0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	e008      	b.n	8008080 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008072:	4b06      	ldr	r3, [pc, #24]	@ (800808c <xTaskPriorityInherit+0xe0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d201      	bcs.n	8008080 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008080:	68fb      	ldr	r3, [r7, #12]
	}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200008d8 	.word	0x200008d8
 8008090:	200008dc 	.word	0x200008dc
 8008094:	200009e0 	.word	0x200009e0

08008098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d070      	beq.n	8008190 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080ae:	4b3b      	ldr	r3, [pc, #236]	@ (800819c <xTaskPriorityDisinherit+0x104>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d00b      	beq.n	80080d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	60fb      	str	r3, [r7, #12]
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	60bb      	str	r3, [r7, #8]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f4:	1e5a      	subs	r2, r3, #1
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008102:	429a      	cmp	r2, r3
 8008104:	d044      	beq.n	8008190 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810a:	2b00      	cmp	r3, #0
 800810c:	d140      	bne.n	8008190 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	3304      	adds	r3, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fb50 	bl	80067b8 <uxListRemove>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d115      	bne.n	800814a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008122:	491f      	ldr	r1, [pc, #124]	@ (80081a0 <xTaskPriorityDisinherit+0x108>)
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xTaskPriorityDisinherit+0xb2>
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	2201      	movs	r2, #1
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	43da      	mvns	r2, r3
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <xTaskPriorityDisinherit+0x10c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4013      	ands	r3, r2
 8008146:	4a17      	ldr	r2, [pc, #92]	@ (80081a4 <xTaskPriorityDisinherit+0x10c>)
 8008148:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	f1c3 0207 	rsb	r2, r3, #7
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	2201      	movs	r2, #1
 8008164:	409a      	lsls	r2, r3
 8008166:	4b0f      	ldr	r3, [pc, #60]	@ (80081a4 <xTaskPriorityDisinherit+0x10c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4313      	orrs	r3, r2
 800816c:	4a0d      	ldr	r2, [pc, #52]	@ (80081a4 <xTaskPriorityDisinherit+0x10c>)
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <xTaskPriorityDisinherit+0x108>)
 800817e:	441a      	add	r2, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7fe fab9 	bl	80066fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008190:	697b      	ldr	r3, [r7, #20]
	}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200008d8 	.word	0x200008d8
 80081a0:	200008dc 	.word	0x200008dc
 80081a4:	200009e0 	.word	0x200009e0

080081a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d079      	beq.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d902      	bls.n	80081f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	e002      	b.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d059      	beq.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	429a      	cmp	r2, r3
 8008208:	d154      	bne.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800820a:	4b2c      	ldr	r3, [pc, #176]	@ (80082bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	429a      	cmp	r2, r3
 8008212:	d10b      	bne.n	800822c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60bb      	str	r3, [r7, #8]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	db04      	blt.n	800824a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f1c3 0207 	rsb	r2, r3, #7
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	6959      	ldr	r1, [r3, #20]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4a19      	ldr	r2, [pc, #100]	@ (80082c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800825a:	4413      	add	r3, r2
 800825c:	4299      	cmp	r1, r3
 800825e:	d129      	bne.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	3304      	adds	r3, #4
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe faa7 	bl	80067b8 <uxListRemove>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	2201      	movs	r2, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	43da      	mvns	r2, r3
 800827c:	4b11      	ldr	r3, [pc, #68]	@ (80082c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4013      	ands	r3, r2
 8008282:	4a10      	ldr	r2, [pc, #64]	@ (80082c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008284:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828a:	2201      	movs	r2, #1
 800828c:	409a      	lsls	r2, r3
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4313      	orrs	r3, r2
 8008294:	4a0b      	ldr	r2, [pc, #44]	@ (80082c4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4a06      	ldr	r2, [pc, #24]	@ (80082c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082a6:	441a      	add	r2, r3
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fe fa25 	bl	80066fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b4:	bf00      	nop
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200008d8 	.word	0x200008d8
 80082c0:	200008dc 	.word	0x200008dc
 80082c4:	200009e0 	.word	0x200009e0

080082c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082cc:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <pvTaskIncrementMutexHeldCount+0x24>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082d4:	4b05      	ldr	r3, [pc, #20]	@ (80082ec <pvTaskIncrementMutexHeldCount+0x24>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082da:	3201      	adds	r2, #1
 80082dc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80082de:	4b03      	ldr	r3, [pc, #12]	@ (80082ec <pvTaskIncrementMutexHeldCount+0x24>)
 80082e0:	681b      	ldr	r3, [r3, #0]
	}
 80082e2:	4618      	mov	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	200008d8 	.word	0x200008d8

080082f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082fa:	4b29      	ldr	r3, [pc, #164]	@ (80083a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008300:	4b28      	ldr	r3, [pc, #160]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3304      	adds	r3, #4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fa56 	bl	80067b8 <uxListRemove>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008312:	4b24      	ldr	r3, [pc, #144]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	2201      	movs	r2, #1
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	43da      	mvns	r2, r3
 8008320:	4b21      	ldr	r3, [pc, #132]	@ (80083a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4013      	ands	r3, r2
 8008326:	4a20      	ldr	r2, [pc, #128]	@ (80083a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008330:	d10a      	bne.n	8008348 <prvAddCurrentTaskToDelayedList+0x58>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008338:	4b1a      	ldr	r3, [pc, #104]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3304      	adds	r3, #4
 800833e:	4619      	mov	r1, r3
 8008340:	481a      	ldr	r0, [pc, #104]	@ (80083ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008342:	f7fe f9dc 	bl	80066fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008346:	e026      	b.n	8008396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008350:	4b14      	ldr	r3, [pc, #80]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	429a      	cmp	r2, r3
 800835e:	d209      	bcs.n	8008374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008360:	4b13      	ldr	r3, [pc, #76]	@ (80083b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3304      	adds	r3, #4
 800836a:	4619      	mov	r1, r3
 800836c:	4610      	mov	r0, r2
 800836e:	f7fe f9ea 	bl	8006746 <vListInsert>
}
 8008372:	e010      	b.n	8008396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008374:	4b0f      	ldr	r3, [pc, #60]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fe f9e0 	bl	8006746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008386:	4b0c      	ldr	r3, [pc, #48]	@ (80083b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	429a      	cmp	r2, r3
 800838e:	d202      	bcs.n	8008396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008390:	4a09      	ldr	r2, [pc, #36]	@ (80083b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6013      	str	r3, [r2, #0]
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	200009dc 	.word	0x200009dc
 80083a4:	200008d8 	.word	0x200008d8
 80083a8:	200009e0 	.word	0x200009e0
 80083ac:	200009c4 	.word	0x200009c4
 80083b0:	20000994 	.word	0x20000994
 80083b4:	20000990 	.word	0x20000990
 80083b8:	200009f8 	.word	0x200009f8

080083bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3b04      	subs	r3, #4
 80083cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3b04      	subs	r3, #4
 80083da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3b04      	subs	r3, #4
 80083ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008420 <pxPortInitialiseStack+0x64>)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3b14      	subs	r3, #20
 80083f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3b04      	subs	r3, #4
 8008402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f06f 0202 	mvn.w	r2, #2
 800840a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3b20      	subs	r3, #32
 8008410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	08008425 	.word	0x08008425

08008424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800842e:	4b13      	ldr	r3, [pc, #76]	@ (800847c <prvTaskExitError+0x58>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d00b      	beq.n	8008450 <prvTaskExitError+0x2c>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	60fb      	str	r3, [r7, #12]
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	e7fd      	b.n	800844c <prvTaskExitError+0x28>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60bb      	str	r3, [r7, #8]
}
 8008462:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008464:	bf00      	nop
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0fc      	beq.n	8008466 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000018 	.word	0x20000018

08008480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008480:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <pxCurrentTCBConst2>)
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	6808      	ldr	r0, [r1, #0]
 8008486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	f380 8809 	msr	PSP, r0
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	4770      	bx	lr
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst2>:
 80084a0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084a8:	4808      	ldr	r0, [pc, #32]	@ (80084cc <prvPortStartFirstTask+0x24>)
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	6800      	ldr	r0, [r0, #0]
 80084ae:	f380 8808 	msr	MSP, r0
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8814 	msr	CONTROL, r0
 80084ba:	b662      	cpsie	i
 80084bc:	b661      	cpsie	f
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	df00      	svc	0
 80084c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ca:	bf00      	nop
 80084cc:	e000ed08 	.word	0xe000ed08

080084d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084d6:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <xPortStartScheduler+0x124>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a47      	ldr	r2, [pc, #284]	@ (80085f8 <xPortStartScheduler+0x128>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10b      	bne.n	80084f8 <xPortStartScheduler+0x28>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	60fb      	str	r3, [r7, #12]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084f8:	4b3e      	ldr	r3, [pc, #248]	@ (80085f4 <xPortStartScheduler+0x124>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a3f      	ldr	r2, [pc, #252]	@ (80085fc <xPortStartScheduler+0x12c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d10b      	bne.n	800851a <xPortStartScheduler+0x4a>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	613b      	str	r3, [r7, #16]
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800851a:	4b39      	ldr	r3, [pc, #228]	@ (8008600 <xPortStartScheduler+0x130>)
 800851c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	22ff      	movs	r2, #255	@ 0xff
 800852a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800853c:	b2da      	uxtb	r2, r3
 800853e:	4b31      	ldr	r3, [pc, #196]	@ (8008604 <xPortStartScheduler+0x134>)
 8008540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008542:	4b31      	ldr	r3, [pc, #196]	@ (8008608 <xPortStartScheduler+0x138>)
 8008544:	2207      	movs	r2, #7
 8008546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008548:	e009      	b.n	800855e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800854a:	4b2f      	ldr	r3, [pc, #188]	@ (8008608 <xPortStartScheduler+0x138>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3b01      	subs	r3, #1
 8008550:	4a2d      	ldr	r2, [pc, #180]	@ (8008608 <xPortStartScheduler+0x138>)
 8008552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	b2db      	uxtb	r3, r3
 800855c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008566:	2b80      	cmp	r3, #128	@ 0x80
 8008568:	d0ef      	beq.n	800854a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800856a:	4b27      	ldr	r3, [pc, #156]	@ (8008608 <xPortStartScheduler+0x138>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1c3 0307 	rsb	r3, r3, #7
 8008572:	2b04      	cmp	r3, #4
 8008574:	d00b      	beq.n	800858e <xPortStartScheduler+0xbe>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60bb      	str	r3, [r7, #8]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800858e:	4b1e      	ldr	r3, [pc, #120]	@ (8008608 <xPortStartScheduler+0x138>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	4a1c      	ldr	r2, [pc, #112]	@ (8008608 <xPortStartScheduler+0x138>)
 8008596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008598:	4b1b      	ldr	r3, [pc, #108]	@ (8008608 <xPortStartScheduler+0x138>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085a0:	4a19      	ldr	r2, [pc, #100]	@ (8008608 <xPortStartScheduler+0x138>)
 80085a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085ac:	4b17      	ldr	r3, [pc, #92]	@ (800860c <xPortStartScheduler+0x13c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a16      	ldr	r2, [pc, #88]	@ (800860c <xPortStartScheduler+0x13c>)
 80085b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085b8:	4b14      	ldr	r3, [pc, #80]	@ (800860c <xPortStartScheduler+0x13c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a13      	ldr	r2, [pc, #76]	@ (800860c <xPortStartScheduler+0x13c>)
 80085be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085c4:	f000 f8da 	bl	800877c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085c8:	4b11      	ldr	r3, [pc, #68]	@ (8008610 <xPortStartScheduler+0x140>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085ce:	f000 f8f9 	bl	80087c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085d2:	4b10      	ldr	r3, [pc, #64]	@ (8008614 <xPortStartScheduler+0x144>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008614 <xPortStartScheduler+0x144>)
 80085d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085de:	f7ff ff63 	bl	80084a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085e2:	f7ff fa83 	bl	8007aec <vTaskSwitchContext>
	prvTaskExitError();
 80085e6:	f7ff ff1d 	bl	8008424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	e000ed00 	.word	0xe000ed00
 80085f8:	410fc271 	.word	0x410fc271
 80085fc:	410fc270 	.word	0x410fc270
 8008600:	e000e400 	.word	0xe000e400
 8008604:	20000a04 	.word	0x20000a04
 8008608:	20000a08 	.word	0x20000a08
 800860c:	e000ed20 	.word	0xe000ed20
 8008610:	20000018 	.word	0x20000018
 8008614:	e000ef34 	.word	0xe000ef34

08008618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
}
 8008630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008632:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <vPortEnterCritical+0x5c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3301      	adds	r3, #1
 8008638:	4a0e      	ldr	r2, [pc, #56]	@ (8008674 <vPortEnterCritical+0x5c>)
 800863a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800863c:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <vPortEnterCritical+0x5c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d110      	bne.n	8008666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008644:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <vPortEnterCritical+0x60>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <vPortEnterCritical+0x4e>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	603b      	str	r3, [r7, #0]
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <vPortEnterCritical+0x4a>
	}
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20000018 	.word	0x20000018
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008682:	4b12      	ldr	r3, [pc, #72]	@ (80086cc <vPortExitCritical+0x50>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <vPortExitCritical+0x26>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	607b      	str	r3, [r7, #4]
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	e7fd      	b.n	800869e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <vPortExitCritical+0x50>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	4a08      	ldr	r2, [pc, #32]	@ (80086cc <vPortExitCritical+0x50>)
 80086aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086ac:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <vPortExitCritical+0x50>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d105      	bne.n	80086c0 <vPortExitCritical+0x44>
 80086b4:	2300      	movs	r3, #0
 80086b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f383 8811 	msr	BASEPRI, r3
}
 80086be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20000018 	.word	0x20000018

080086d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086d0:	f3ef 8009 	mrs	r0, PSP
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <pxCurrentTCBConst>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f01e 0f10 	tst.w	lr, #16
 80086e0:	bf08      	it	eq
 80086e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	6010      	str	r0, [r2, #0]
 80086ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086f4:	f380 8811 	msr	BASEPRI, r0
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f7ff f9f4 	bl	8007aec <vTaskSwitchContext>
 8008704:	f04f 0000 	mov.w	r0, #0
 8008708:	f380 8811 	msr	BASEPRI, r0
 800870c:	bc09      	pop	{r0, r3}
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	6808      	ldr	r0, [r1, #0]
 8008712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008716:	f01e 0f10 	tst.w	lr, #16
 800871a:	bf08      	it	eq
 800871c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008720:	f380 8809 	msr	PSP, r0
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w

08008730 <pxCurrentTCBConst>:
 8008730:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop

08008738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
}
 8008750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008752:	f7ff f911 	bl	8007978 <xTaskIncrementTick>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800875c:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <SysTick_Handler+0x40>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f383 8811 	msr	BASEPRI, r3
}
 800876e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008780:	4b0b      	ldr	r3, [pc, #44]	@ (80087b0 <vPortSetupTimerInterrupt+0x34>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008786:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <vPortSetupTimerInterrupt+0x38>)
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <vPortSetupTimerInterrupt+0x3c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a0a      	ldr	r2, [pc, #40]	@ (80087bc <vPortSetupTimerInterrupt+0x40>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	099b      	lsrs	r3, r3, #6
 8008798:	4a09      	ldr	r2, [pc, #36]	@ (80087c0 <vPortSetupTimerInterrupt+0x44>)
 800879a:	3b01      	subs	r3, #1
 800879c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800879e:	4b04      	ldr	r3, [pc, #16]	@ (80087b0 <vPortSetupTimerInterrupt+0x34>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	e000e010 	.word	0xe000e010
 80087b4:	e000e018 	.word	0xe000e018
 80087b8:	2000000c 	.word	0x2000000c
 80087bc:	10624dd3 	.word	0x10624dd3
 80087c0:	e000e014 	.word	0xe000e014

080087c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087d4 <vPortEnableVFP+0x10>
 80087c8:	6801      	ldr	r1, [r0, #0]
 80087ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087ce:	6001      	str	r1, [r0, #0]
 80087d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087d2:	bf00      	nop
 80087d4:	e000ed88 	.word	0xe000ed88

080087d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d915      	bls.n	8008816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ea:	4a18      	ldr	r2, [pc, #96]	@ (800884c <vPortValidateInterruptPriority+0x74>)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087f4:	4b16      	ldr	r3, [pc, #88]	@ (8008850 <vPortValidateInterruptPriority+0x78>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	7afa      	ldrb	r2, [r7, #11]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d20b      	bcs.n	8008816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008816:	4b0f      	ldr	r3, [pc, #60]	@ (8008854 <vPortValidateInterruptPriority+0x7c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800881e:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <vPortValidateInterruptPriority+0x80>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d90b      	bls.n	800883e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	603b      	str	r3, [r7, #0]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <vPortValidateInterruptPriority+0x62>
	}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	e000e3f0 	.word	0xe000e3f0
 8008850:	20000a04 	.word	0x20000a04
 8008854:	e000ed0c 	.word	0xe000ed0c
 8008858:	20000a08 	.word	0x20000a08

0800885c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	@ 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008868:	f7fe ffda 	bl	8007820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800886c:	4b5c      	ldr	r3, [pc, #368]	@ (80089e0 <pvPortMalloc+0x184>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008874:	f000 f924 	bl	8008ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008878:	4b5a      	ldr	r3, [pc, #360]	@ (80089e4 <pvPortMalloc+0x188>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4013      	ands	r3, r2
 8008880:	2b00      	cmp	r3, #0
 8008882:	f040 8095 	bne.w	80089b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01e      	beq.n	80088ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800888c:	2208      	movs	r2, #8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d015      	beq.n	80088ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f023 0307 	bic.w	r3, r3, #7
 80088a4:	3308      	adds	r3, #8
 80088a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <pvPortMalloc+0x6e>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	617b      	str	r3, [r7, #20]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d06f      	beq.n	80089b0 <pvPortMalloc+0x154>
 80088d0:	4b45      	ldr	r3, [pc, #276]	@ (80089e8 <pvPortMalloc+0x18c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d86a      	bhi.n	80089b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088da:	4b44      	ldr	r3, [pc, #272]	@ (80089ec <pvPortMalloc+0x190>)
 80088dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088de:	4b43      	ldr	r3, [pc, #268]	@ (80089ec <pvPortMalloc+0x190>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088e4:	e004      	b.n	80088f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d903      	bls.n	8008902 <pvPortMalloc+0xa6>
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f1      	bne.n	80088e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008902:	4b37      	ldr	r3, [pc, #220]	@ (80089e0 <pvPortMalloc+0x184>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008908:	429a      	cmp	r2, r3
 800890a:	d051      	beq.n	80089b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2208      	movs	r2, #8
 8008912:	4413      	add	r3, r2
 8008914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	1ad2      	subs	r2, r2, r3
 8008926:	2308      	movs	r3, #8
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	429a      	cmp	r2, r3
 800892c:	d920      	bls.n	8008970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800892e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <pvPortMalloc+0xfc>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800896a:	69b8      	ldr	r0, [r7, #24]
 800896c:	f000 f90a 	bl	8008b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008970:	4b1d      	ldr	r3, [pc, #116]	@ (80089e8 <pvPortMalloc+0x18c>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	4a1b      	ldr	r2, [pc, #108]	@ (80089e8 <pvPortMalloc+0x18c>)
 800897c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800897e:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <pvPortMalloc+0x18c>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <pvPortMalloc+0x194>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d203      	bcs.n	8008992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800898a:	4b17      	ldr	r3, [pc, #92]	@ (80089e8 <pvPortMalloc+0x18c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <pvPortMalloc+0x194>)
 8008990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	4b13      	ldr	r3, [pc, #76]	@ (80089e4 <pvPortMalloc+0x188>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	431a      	orrs	r2, r3
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089a6:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <pvPortMalloc+0x198>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	4a11      	ldr	r2, [pc, #68]	@ (80089f4 <pvPortMalloc+0x198>)
 80089ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089b0:	f7fe ff44 	bl	800783c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <pvPortMalloc+0x17a>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60fb      	str	r3, [r7, #12]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <pvPortMalloc+0x176>
	return pvReturn;
 80089d6:	69fb      	ldr	r3, [r7, #28]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3728      	adds	r7, #40	@ 0x28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	200015cc 	.word	0x200015cc
 80089e4:	200015e0 	.word	0x200015e0
 80089e8:	200015d0 	.word	0x200015d0
 80089ec:	200015c4 	.word	0x200015c4
 80089f0:	200015d4 	.word	0x200015d4
 80089f4:	200015d8 	.word	0x200015d8

080089f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d04f      	beq.n	8008aaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a0a:	2308      	movs	r3, #8
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4413      	add	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	4b25      	ldr	r3, [pc, #148]	@ (8008ab4 <vPortFree+0xbc>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <vPortFree+0x46>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	60fb      	str	r3, [r7, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <vPortFree+0x66>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	4b14      	ldr	r3, [pc, #80]	@ (8008ab4 <vPortFree+0xbc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01e      	beq.n	8008aaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11a      	bne.n	8008aaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab4 <vPortFree+0xbc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	401a      	ands	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a84:	f7fe fecc 	bl	8007820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <vPortFree+0xc0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4413      	add	r3, r2
 8008a92:	4a09      	ldr	r2, [pc, #36]	@ (8008ab8 <vPortFree+0xc0>)
 8008a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a96:	6938      	ldr	r0, [r7, #16]
 8008a98:	f000 f874 	bl	8008b84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a9c:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <vPortFree+0xc4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	4a06      	ldr	r2, [pc, #24]	@ (8008abc <vPortFree+0xc4>)
 8008aa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008aa6:	f7fe fec9 	bl	800783c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aaa:	bf00      	nop
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200015e0 	.word	0x200015e0
 8008ab8:	200015d0 	.word	0x200015d0
 8008abc:	200015dc 	.word	0x200015dc

08008ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ac6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008acc:	4b27      	ldr	r3, [pc, #156]	@ (8008b6c <prvHeapInit+0xac>)
 8008ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00c      	beq.n	8008af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3307      	adds	r3, #7
 8008ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	4a1f      	ldr	r2, [pc, #124]	@ (8008b6c <prvHeapInit+0xac>)
 8008af0:	4413      	add	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008af8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <prvHeapInit+0xb0>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008afe:	4b1c      	ldr	r3, [pc, #112]	@ (8008b70 <prvHeapInit+0xb0>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	4413      	add	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0307 	bic.w	r3, r3, #7
 8008b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4a15      	ldr	r2, [pc, #84]	@ (8008b74 <prvHeapInit+0xb4>)
 8008b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b22:	4b14      	ldr	r3, [pc, #80]	@ (8008b74 <prvHeapInit+0xb4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2200      	movs	r2, #0
 8008b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b2a:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <prvHeapInit+0xb4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	1ad2      	subs	r2, r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b40:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <prvHeapInit+0xb4>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b78 <prvHeapInit+0xb8>)
 8008b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4a09      	ldr	r2, [pc, #36]	@ (8008b7c <prvHeapInit+0xbc>)
 8008b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b58:	4b09      	ldr	r3, [pc, #36]	@ (8008b80 <prvHeapInit+0xc0>)
 8008b5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000a0c 	.word	0x20000a0c
 8008b70:	200015c4 	.word	0x200015c4
 8008b74:	200015cc 	.word	0x200015cc
 8008b78:	200015d4 	.word	0x200015d4
 8008b7c:	200015d0 	.word	0x200015d0
 8008b80:	200015e0 	.word	0x200015e0

08008b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b8c:	4b28      	ldr	r3, [pc, #160]	@ (8008c30 <prvInsertBlockIntoFreeList+0xac>)
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	e002      	b.n	8008b98 <prvInsertBlockIntoFreeList+0x14>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d8f7      	bhi.n	8008b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d108      	bne.n	8008bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	441a      	add	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d118      	bne.n	8008c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b15      	ldr	r3, [pc, #84]	@ (8008c34 <prvInsertBlockIntoFreeList+0xb0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d00d      	beq.n	8008c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	441a      	add	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e008      	b.n	8008c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c02:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <prvInsertBlockIntoFreeList+0xb0>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e003      	b.n	8008c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d002      	beq.n	8008c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	200015c4 	.word	0x200015c4
 8008c34:	200015cc 	.word	0x200015cc

08008c38 <__itoa>:
 8008c38:	1e93      	subs	r3, r2, #2
 8008c3a:	2b22      	cmp	r3, #34	@ 0x22
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	d904      	bls.n	8008c4c <__itoa+0x14>
 8008c42:	2300      	movs	r3, #0
 8008c44:	700b      	strb	r3, [r1, #0]
 8008c46:	461c      	mov	r4, r3
 8008c48:	4620      	mov	r0, r4
 8008c4a:	bd10      	pop	{r4, pc}
 8008c4c:	2a0a      	cmp	r2, #10
 8008c4e:	d109      	bne.n	8008c64 <__itoa+0x2c>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	da07      	bge.n	8008c64 <__itoa+0x2c>
 8008c54:	232d      	movs	r3, #45	@ 0x2d
 8008c56:	700b      	strb	r3, [r1, #0]
 8008c58:	4240      	negs	r0, r0
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	4421      	add	r1, r4
 8008c5e:	f000 f805 	bl	8008c6c <__utoa>
 8008c62:	e7f1      	b.n	8008c48 <__itoa+0x10>
 8008c64:	2100      	movs	r1, #0
 8008c66:	e7f9      	b.n	8008c5c <__itoa+0x24>

08008c68 <itoa>:
 8008c68:	f7ff bfe6 	b.w	8008c38 <__itoa>

08008c6c <__utoa>:
 8008c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6e:	4c1f      	ldr	r4, [pc, #124]	@ (8008cec <__utoa+0x80>)
 8008c70:	b08b      	sub	sp, #44	@ 0x2c
 8008c72:	4605      	mov	r5, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	466e      	mov	r6, sp
 8008c78:	f104 0c20 	add.w	ip, r4, #32
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	6861      	ldr	r1, [r4, #4]
 8008c80:	4637      	mov	r7, r6
 8008c82:	c703      	stmia	r7!, {r0, r1}
 8008c84:	3408      	adds	r4, #8
 8008c86:	4564      	cmp	r4, ip
 8008c88:	463e      	mov	r6, r7
 8008c8a:	d1f7      	bne.n	8008c7c <__utoa+0x10>
 8008c8c:	7921      	ldrb	r1, [r4, #4]
 8008c8e:	7139      	strb	r1, [r7, #4]
 8008c90:	1e91      	subs	r1, r2, #2
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	6038      	str	r0, [r7, #0]
 8008c96:	2922      	cmp	r1, #34	@ 0x22
 8008c98:	f04f 0100 	mov.w	r1, #0
 8008c9c:	d904      	bls.n	8008ca8 <__utoa+0x3c>
 8008c9e:	7019      	strb	r1, [r3, #0]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	b00b      	add	sp, #44	@ 0x2c
 8008ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca8:	1e58      	subs	r0, r3, #1
 8008caa:	4684      	mov	ip, r0
 8008cac:	fbb5 f7f2 	udiv	r7, r5, r2
 8008cb0:	fb02 5617 	mls	r6, r2, r7, r5
 8008cb4:	3628      	adds	r6, #40	@ 0x28
 8008cb6:	446e      	add	r6, sp
 8008cb8:	460c      	mov	r4, r1
 8008cba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008cbe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008cc2:	462e      	mov	r6, r5
 8008cc4:	42b2      	cmp	r2, r6
 8008cc6:	f101 0101 	add.w	r1, r1, #1
 8008cca:	463d      	mov	r5, r7
 8008ccc:	d9ee      	bls.n	8008cac <__utoa+0x40>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	545a      	strb	r2, [r3, r1]
 8008cd2:	1919      	adds	r1, r3, r4
 8008cd4:	1aa5      	subs	r5, r4, r2
 8008cd6:	42aa      	cmp	r2, r5
 8008cd8:	dae3      	bge.n	8008ca2 <__utoa+0x36>
 8008cda:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008cde:	780e      	ldrb	r6, [r1, #0]
 8008ce0:	7006      	strb	r6, [r0, #0]
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	f801 5901 	strb.w	r5, [r1], #-1
 8008ce8:	e7f4      	b.n	8008cd4 <__utoa+0x68>
 8008cea:	bf00      	nop
 8008cec:	0800ab70 	.word	0x0800ab70

08008cf0 <std>:
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cfe:	6083      	str	r3, [r0, #8]
 8008d00:	8181      	strh	r1, [r0, #12]
 8008d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d04:	81c2      	strh	r2, [r0, #14]
 8008d06:	6183      	str	r3, [r0, #24]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	305c      	adds	r0, #92	@ 0x5c
 8008d0e:	f000 fa01 	bl	8009114 <memset>
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <std+0x58>)
 8008d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <std+0x5c>)
 8008d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <std+0x60>)
 8008d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <std+0x64>)
 8008d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d22:	4b0d      	ldr	r3, [pc, #52]	@ (8008d58 <std+0x68>)
 8008d24:	6224      	str	r4, [r4, #32]
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d006      	beq.n	8008d38 <std+0x48>
 8008d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d2e:	4294      	cmp	r4, r2
 8008d30:	d002      	beq.n	8008d38 <std+0x48>
 8008d32:	33d0      	adds	r3, #208	@ 0xd0
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d105      	bne.n	8008d44 <std+0x54>
 8008d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d40:	f000 ba60 	b.w	8009204 <__retarget_lock_init_recursive>
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	bf00      	nop
 8008d48:	08008f65 	.word	0x08008f65
 8008d4c:	08008f87 	.word	0x08008f87
 8008d50:	08008fbf 	.word	0x08008fbf
 8008d54:	08008fe3 	.word	0x08008fe3
 8008d58:	200015e4 	.word	0x200015e4

08008d5c <stdio_exit_handler>:
 8008d5c:	4a02      	ldr	r2, [pc, #8]	@ (8008d68 <stdio_exit_handler+0xc>)
 8008d5e:	4903      	ldr	r1, [pc, #12]	@ (8008d6c <stdio_exit_handler+0x10>)
 8008d60:	4803      	ldr	r0, [pc, #12]	@ (8008d70 <stdio_exit_handler+0x14>)
 8008d62:	f000 b869 	b.w	8008e38 <_fwalk_sglue>
 8008d66:	bf00      	nop
 8008d68:	2000001c 	.word	0x2000001c
 8008d6c:	08009abd 	.word	0x08009abd
 8008d70:	2000002c 	.word	0x2000002c

08008d74 <cleanup_stdio>:
 8008d74:	6841      	ldr	r1, [r0, #4]
 8008d76:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <cleanup_stdio+0x34>)
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	d001      	beq.n	8008d84 <cleanup_stdio+0x10>
 8008d80:	f000 fe9c 	bl	8009abc <_fflush_r>
 8008d84:	68a1      	ldr	r1, [r4, #8]
 8008d86:	4b09      	ldr	r3, [pc, #36]	@ (8008dac <cleanup_stdio+0x38>)
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d002      	beq.n	8008d92 <cleanup_stdio+0x1e>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fe95 	bl	8009abc <_fflush_r>
 8008d92:	68e1      	ldr	r1, [r4, #12]
 8008d94:	4b06      	ldr	r3, [pc, #24]	@ (8008db0 <cleanup_stdio+0x3c>)
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d004      	beq.n	8008da4 <cleanup_stdio+0x30>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da0:	f000 be8c 	b.w	8009abc <_fflush_r>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	bf00      	nop
 8008da8:	200015e4 	.word	0x200015e4
 8008dac:	2000164c 	.word	0x2000164c
 8008db0:	200016b4 	.word	0x200016b4

08008db4 <global_stdio_init.part.0>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4b0b      	ldr	r3, [pc, #44]	@ (8008de4 <global_stdio_init.part.0+0x30>)
 8008db8:	4c0b      	ldr	r4, [pc, #44]	@ (8008de8 <global_stdio_init.part.0+0x34>)
 8008dba:	4a0c      	ldr	r2, [pc, #48]	@ (8008dec <global_stdio_init.part.0+0x38>)
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2104      	movs	r1, #4
 8008dc4:	f7ff ff94 	bl	8008cf0 <std>
 8008dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008dcc:	2201      	movs	r2, #1
 8008dce:	2109      	movs	r1, #9
 8008dd0:	f7ff ff8e 	bl	8008cf0 <std>
 8008dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008dd8:	2202      	movs	r2, #2
 8008dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dde:	2112      	movs	r1, #18
 8008de0:	f7ff bf86 	b.w	8008cf0 <std>
 8008de4:	2000171c 	.word	0x2000171c
 8008de8:	200015e4 	.word	0x200015e4
 8008dec:	08008d5d 	.word	0x08008d5d

08008df0 <__sfp_lock_acquire>:
 8008df0:	4801      	ldr	r0, [pc, #4]	@ (8008df8 <__sfp_lock_acquire+0x8>)
 8008df2:	f000 ba08 	b.w	8009206 <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	20001725 	.word	0x20001725

08008dfc <__sfp_lock_release>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	@ (8008e04 <__sfp_lock_release+0x8>)
 8008dfe:	f000 ba03 	b.w	8009208 <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	20001725 	.word	0x20001725

08008e08 <__sinit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	f7ff fff0 	bl	8008df0 <__sfp_lock_acquire>
 8008e10:	6a23      	ldr	r3, [r4, #32]
 8008e12:	b11b      	cbz	r3, 8008e1c <__sinit+0x14>
 8008e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e18:	f7ff bff0 	b.w	8008dfc <__sfp_lock_release>
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <__sinit+0x28>)
 8008e1e:	6223      	str	r3, [r4, #32]
 8008e20:	4b04      	ldr	r3, [pc, #16]	@ (8008e34 <__sinit+0x2c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f5      	bne.n	8008e14 <__sinit+0xc>
 8008e28:	f7ff ffc4 	bl	8008db4 <global_stdio_init.part.0>
 8008e2c:	e7f2      	b.n	8008e14 <__sinit+0xc>
 8008e2e:	bf00      	nop
 8008e30:	08008d75 	.word	0x08008d75
 8008e34:	2000171c 	.word	0x2000171c

08008e38 <_fwalk_sglue>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	4688      	mov	r8, r1
 8008e40:	4614      	mov	r4, r2
 8008e42:	2600      	movs	r6, #0
 8008e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e48:	f1b9 0901 	subs.w	r9, r9, #1
 8008e4c:	d505      	bpl.n	8008e5a <_fwalk_sglue+0x22>
 8008e4e:	6824      	ldr	r4, [r4, #0]
 8008e50:	2c00      	cmp	r4, #0
 8008e52:	d1f7      	bne.n	8008e44 <_fwalk_sglue+0xc>
 8008e54:	4630      	mov	r0, r6
 8008e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d907      	bls.n	8008e70 <_fwalk_sglue+0x38>
 8008e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e64:	3301      	adds	r3, #1
 8008e66:	d003      	beq.n	8008e70 <_fwalk_sglue+0x38>
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	47c0      	blx	r8
 8008e6e:	4306      	orrs	r6, r0
 8008e70:	3568      	adds	r5, #104	@ 0x68
 8008e72:	e7e9      	b.n	8008e48 <_fwalk_sglue+0x10>

08008e74 <iprintf>:
 8008e74:	b40f      	push	{r0, r1, r2, r3}
 8008e76:	b507      	push	{r0, r1, r2, lr}
 8008e78:	4906      	ldr	r1, [pc, #24]	@ (8008e94 <iprintf+0x20>)
 8008e7a:	ab04      	add	r3, sp, #16
 8008e7c:	6808      	ldr	r0, [r1, #0]
 8008e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e82:	6881      	ldr	r1, [r0, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	f000 faf1 	bl	800946c <_vfiprintf_r>
 8008e8a:	b003      	add	sp, #12
 8008e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e90:	b004      	add	sp, #16
 8008e92:	4770      	bx	lr
 8008e94:	20000028 	.word	0x20000028

08008e98 <putchar>:
 8008e98:	4b02      	ldr	r3, [pc, #8]	@ (8008ea4 <putchar+0xc>)
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	6882      	ldr	r2, [r0, #8]
 8008ea0:	f000 be96 	b.w	8009bd0 <_putc_r>
 8008ea4:	20000028 	.word	0x20000028

08008ea8 <_puts_r>:
 8008ea8:	6a03      	ldr	r3, [r0, #32]
 8008eaa:	b570      	push	{r4, r5, r6, lr}
 8008eac:	6884      	ldr	r4, [r0, #8]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <_puts_r+0x10>
 8008eb4:	f7ff ffa8 	bl	8008e08 <__sinit>
 8008eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eba:	07db      	lsls	r3, r3, #31
 8008ebc:	d405      	bmi.n	8008eca <_puts_r+0x22>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	0598      	lsls	r0, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_puts_r+0x22>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ec6:	f000 f99e 	bl	8009206 <__retarget_lock_acquire_recursive>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	0719      	lsls	r1, r3, #28
 8008ece:	d502      	bpl.n	8008ed6 <_puts_r+0x2e>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d135      	bne.n	8008f42 <_puts_r+0x9a>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 f8c5 	bl	8009068 <__swsetup_r>
 8008ede:	b380      	cbz	r0, 8008f42 <_puts_r+0x9a>
 8008ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ee6:	07da      	lsls	r2, r3, #31
 8008ee8:	d405      	bmi.n	8008ef6 <_puts_r+0x4e>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	059b      	lsls	r3, r3, #22
 8008eee:	d402      	bmi.n	8008ef6 <_puts_r+0x4e>
 8008ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ef2:	f000 f989 	bl	8009208 <__retarget_lock_release_recursive>
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	da04      	bge.n	8008f08 <_puts_r+0x60>
 8008efe:	69a2      	ldr	r2, [r4, #24]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	dc17      	bgt.n	8008f34 <_puts_r+0x8c>
 8008f04:	290a      	cmp	r1, #10
 8008f06:	d015      	beq.n	8008f34 <_puts_r+0x8c>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	6022      	str	r2, [r4, #0]
 8008f0e:	7019      	strb	r1, [r3, #0]
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f16:	3b01      	subs	r3, #1
 8008f18:	60a3      	str	r3, [r4, #8]
 8008f1a:	2900      	cmp	r1, #0
 8008f1c:	d1ed      	bne.n	8008efa <_puts_r+0x52>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da11      	bge.n	8008f46 <_puts_r+0x9e>
 8008f22:	4622      	mov	r2, r4
 8008f24:	210a      	movs	r1, #10
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f85f 	bl	8008fea <__swbuf_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0d7      	beq.n	8008ee0 <_puts_r+0x38>
 8008f30:	250a      	movs	r5, #10
 8008f32:	e7d7      	b.n	8008ee4 <_puts_r+0x3c>
 8008f34:	4622      	mov	r2, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f857 	bl	8008fea <__swbuf_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d1e7      	bne.n	8008f10 <_puts_r+0x68>
 8008f40:	e7ce      	b.n	8008ee0 <_puts_r+0x38>
 8008f42:	3e01      	subs	r6, #1
 8008f44:	e7e4      	b.n	8008f10 <_puts_r+0x68>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	6022      	str	r2, [r4, #0]
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e7ee      	b.n	8008f30 <_puts_r+0x88>
	...

08008f54 <puts>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <puts+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f7ff bfa5 	b.w	8008ea8 <_puts_r>
 8008f5e:	bf00      	nop
 8008f60:	20000028 	.word	0x20000028

08008f64 <__sread>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	460c      	mov	r4, r1
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	f000 f8fc 	bl	8009168 <_read_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	bfab      	itete	ge
 8008f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f76:	89a3      	ldrhlt	r3, [r4, #12]
 8008f78:	181b      	addge	r3, r3, r0
 8008f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f7e:	bfac      	ite	ge
 8008f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f82:	81a3      	strhlt	r3, [r4, #12]
 8008f84:	bd10      	pop	{r4, pc}

08008f86 <__swrite>:
 8008f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8a:	461f      	mov	r7, r3
 8008f8c:	898b      	ldrh	r3, [r1, #12]
 8008f8e:	05db      	lsls	r3, r3, #23
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	4616      	mov	r6, r2
 8008f96:	d505      	bpl.n	8008fa4 <__swrite+0x1e>
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f000 f8d0 	bl	8009144 <_lseek_r>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	f000 b8e7 	b.w	800918c <_write_r>

08008fbe <__sseek>:
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc6:	f000 f8bd 	bl	8009144 <_lseek_r>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	bf15      	itete	ne
 8008fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fda:	81a3      	strheq	r3, [r4, #12]
 8008fdc:	bf18      	it	ne
 8008fde:	81a3      	strhne	r3, [r4, #12]
 8008fe0:	bd10      	pop	{r4, pc}

08008fe2 <__sclose>:
 8008fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe6:	f000 b89d 	b.w	8009124 <_close_r>

08008fea <__swbuf_r>:
 8008fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fec:	460e      	mov	r6, r1
 8008fee:	4614      	mov	r4, r2
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	b118      	cbz	r0, 8008ffc <__swbuf_r+0x12>
 8008ff4:	6a03      	ldr	r3, [r0, #32]
 8008ff6:	b90b      	cbnz	r3, 8008ffc <__swbuf_r+0x12>
 8008ff8:	f7ff ff06 	bl	8008e08 <__sinit>
 8008ffc:	69a3      	ldr	r3, [r4, #24]
 8008ffe:	60a3      	str	r3, [r4, #8]
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	071a      	lsls	r2, r3, #28
 8009004:	d501      	bpl.n	800900a <__swbuf_r+0x20>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	b943      	cbnz	r3, 800901c <__swbuf_r+0x32>
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f000 f82b 	bl	8009068 <__swsetup_r>
 8009012:	b118      	cbz	r0, 800901c <__swbuf_r+0x32>
 8009014:	f04f 37ff 	mov.w	r7, #4294967295
 8009018:	4638      	mov	r0, r7
 800901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	6922      	ldr	r2, [r4, #16]
 8009020:	1a98      	subs	r0, r3, r2
 8009022:	6963      	ldr	r3, [r4, #20]
 8009024:	b2f6      	uxtb	r6, r6
 8009026:	4283      	cmp	r3, r0
 8009028:	4637      	mov	r7, r6
 800902a:	dc05      	bgt.n	8009038 <__swbuf_r+0x4e>
 800902c:	4621      	mov	r1, r4
 800902e:	4628      	mov	r0, r5
 8009030:	f000 fd44 	bl	8009abc <_fflush_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	d1ed      	bne.n	8009014 <__swbuf_r+0x2a>
 8009038:	68a3      	ldr	r3, [r4, #8]
 800903a:	3b01      	subs	r3, #1
 800903c:	60a3      	str	r3, [r4, #8]
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	701e      	strb	r6, [r3, #0]
 8009046:	6962      	ldr	r2, [r4, #20]
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	429a      	cmp	r2, r3
 800904c:	d004      	beq.n	8009058 <__swbuf_r+0x6e>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	07db      	lsls	r3, r3, #31
 8009052:	d5e1      	bpl.n	8009018 <__swbuf_r+0x2e>
 8009054:	2e0a      	cmp	r6, #10
 8009056:	d1df      	bne.n	8009018 <__swbuf_r+0x2e>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fd2e 	bl	8009abc <_fflush_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	d0d9      	beq.n	8009018 <__swbuf_r+0x2e>
 8009064:	e7d6      	b.n	8009014 <__swbuf_r+0x2a>
	...

08009068 <__swsetup_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4b29      	ldr	r3, [pc, #164]	@ (8009110 <__swsetup_r+0xa8>)
 800906c:	4605      	mov	r5, r0
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	460c      	mov	r4, r1
 8009072:	b118      	cbz	r0, 800907c <__swsetup_r+0x14>
 8009074:	6a03      	ldr	r3, [r0, #32]
 8009076:	b90b      	cbnz	r3, 800907c <__swsetup_r+0x14>
 8009078:	f7ff fec6 	bl	8008e08 <__sinit>
 800907c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009080:	0719      	lsls	r1, r3, #28
 8009082:	d422      	bmi.n	80090ca <__swsetup_r+0x62>
 8009084:	06da      	lsls	r2, r3, #27
 8009086:	d407      	bmi.n	8009098 <__swsetup_r+0x30>
 8009088:	2209      	movs	r2, #9
 800908a:	602a      	str	r2, [r5, #0]
 800908c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	f04f 30ff 	mov.w	r0, #4294967295
 8009096:	e033      	b.n	8009100 <__swsetup_r+0x98>
 8009098:	0758      	lsls	r0, r3, #29
 800909a:	d512      	bpl.n	80090c2 <__swsetup_r+0x5a>
 800909c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800909e:	b141      	cbz	r1, 80090b2 <__swsetup_r+0x4a>
 80090a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d002      	beq.n	80090ae <__swsetup_r+0x46>
 80090a8:	4628      	mov	r0, r5
 80090aa:	f000 f8bd 	bl	8009228 <_free_r>
 80090ae:	2300      	movs	r3, #0
 80090b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	2300      	movs	r3, #0
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	b94b      	cbnz	r3, 80090e2 <__swsetup_r+0x7a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d8:	d003      	beq.n	80090e2 <__swsetup_r+0x7a>
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 fd3b 	bl	8009b58 <__smakebuf_r>
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	f013 0201 	ands.w	r2, r3, #1
 80090ea:	d00a      	beq.n	8009102 <__swsetup_r+0x9a>
 80090ec:	2200      	movs	r2, #0
 80090ee:	60a2      	str	r2, [r4, #8]
 80090f0:	6962      	ldr	r2, [r4, #20]
 80090f2:	4252      	negs	r2, r2
 80090f4:	61a2      	str	r2, [r4, #24]
 80090f6:	6922      	ldr	r2, [r4, #16]
 80090f8:	b942      	cbnz	r2, 800910c <__swsetup_r+0xa4>
 80090fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090fe:	d1c5      	bne.n	800908c <__swsetup_r+0x24>
 8009100:	bd38      	pop	{r3, r4, r5, pc}
 8009102:	0799      	lsls	r1, r3, #30
 8009104:	bf58      	it	pl
 8009106:	6962      	ldrpl	r2, [r4, #20]
 8009108:	60a2      	str	r2, [r4, #8]
 800910a:	e7f4      	b.n	80090f6 <__swsetup_r+0x8e>
 800910c:	2000      	movs	r0, #0
 800910e:	e7f7      	b.n	8009100 <__swsetup_r+0x98>
 8009110:	20000028 	.word	0x20000028

08009114 <memset>:
 8009114:	4402      	add	r2, r0
 8009116:	4603      	mov	r3, r0
 8009118:	4293      	cmp	r3, r2
 800911a:	d100      	bne.n	800911e <memset+0xa>
 800911c:	4770      	bx	lr
 800911e:	f803 1b01 	strb.w	r1, [r3], #1
 8009122:	e7f9      	b.n	8009118 <memset+0x4>

08009124 <_close_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_close_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f8 fd79 	bl	8001c26 <_close>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_close_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_close_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20001720 	.word	0x20001720

08009144 <_lseek_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	@ (8009164 <_lseek_r+0x20>)
 8009148:	4604      	mov	r4, r0
 800914a:	4608      	mov	r0, r1
 800914c:	4611      	mov	r1, r2
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f7f8 fd8e 	bl	8001c74 <_lseek>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_lseek_r+0x1e>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_lseek_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	20001720 	.word	0x20001720

08009168 <_read_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	@ (8009188 <_read_r+0x20>)
 800916c:	4604      	mov	r4, r0
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	2200      	movs	r2, #0
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f7f8 fd1c 	bl	8001bb4 <_read>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_read_r+0x1e>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_read_r+0x1e>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	20001720 	.word	0x20001720

0800918c <_write_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	@ (80091ac <_write_r+0x20>)
 8009190:	4604      	mov	r4, r0
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	2200      	movs	r2, #0
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7f8 fd27 	bl	8001bee <_write>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_write_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_write_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20001720 	.word	0x20001720

080091b0 <__errno>:
 80091b0:	4b01      	ldr	r3, [pc, #4]	@ (80091b8 <__errno+0x8>)
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20000028 	.word	0x20000028

080091bc <__libc_init_array>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	4d0d      	ldr	r5, [pc, #52]	@ (80091f4 <__libc_init_array+0x38>)
 80091c0:	4c0d      	ldr	r4, [pc, #52]	@ (80091f8 <__libc_init_array+0x3c>)
 80091c2:	1b64      	subs	r4, r4, r5
 80091c4:	10a4      	asrs	r4, r4, #2
 80091c6:	2600      	movs	r6, #0
 80091c8:	42a6      	cmp	r6, r4
 80091ca:	d109      	bne.n	80091e0 <__libc_init_array+0x24>
 80091cc:	4d0b      	ldr	r5, [pc, #44]	@ (80091fc <__libc_init_array+0x40>)
 80091ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009200 <__libc_init_array+0x44>)
 80091d0:	f000 fd64 	bl	8009c9c <_init>
 80091d4:	1b64      	subs	r4, r4, r5
 80091d6:	10a4      	asrs	r4, r4, #2
 80091d8:	2600      	movs	r6, #0
 80091da:	42a6      	cmp	r6, r4
 80091dc:	d105      	bne.n	80091ea <__libc_init_array+0x2e>
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e4:	4798      	blx	r3
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7ee      	b.n	80091c8 <__libc_init_array+0xc>
 80091ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ee:	4798      	blx	r3
 80091f0:	3601      	adds	r6, #1
 80091f2:	e7f2      	b.n	80091da <__libc_init_array+0x1e>
 80091f4:	0800abd0 	.word	0x0800abd0
 80091f8:	0800abd0 	.word	0x0800abd0
 80091fc:	0800abd0 	.word	0x0800abd0
 8009200:	0800abd4 	.word	0x0800abd4

08009204 <__retarget_lock_init_recursive>:
 8009204:	4770      	bx	lr

08009206 <__retarget_lock_acquire_recursive>:
 8009206:	4770      	bx	lr

08009208 <__retarget_lock_release_recursive>:
 8009208:	4770      	bx	lr

0800920a <memcpy>:
 800920a:	440a      	add	r2, r1
 800920c:	4291      	cmp	r1, r2
 800920e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009212:	d100      	bne.n	8009216 <memcpy+0xc>
 8009214:	4770      	bx	lr
 8009216:	b510      	push	{r4, lr}
 8009218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800921c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009220:	4291      	cmp	r1, r2
 8009222:	d1f9      	bne.n	8009218 <memcpy+0xe>
 8009224:	bd10      	pop	{r4, pc}
	...

08009228 <_free_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4605      	mov	r5, r0
 800922c:	2900      	cmp	r1, #0
 800922e:	d041      	beq.n	80092b4 <_free_r+0x8c>
 8009230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009234:	1f0c      	subs	r4, r1, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfb8      	it	lt
 800923a:	18e4      	addlt	r4, r4, r3
 800923c:	f000 f8e0 	bl	8009400 <__malloc_lock>
 8009240:	4a1d      	ldr	r2, [pc, #116]	@ (80092b8 <_free_r+0x90>)
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	b933      	cbnz	r3, 8009254 <_free_r+0x2c>
 8009246:	6063      	str	r3, [r4, #4]
 8009248:	6014      	str	r4, [r2, #0]
 800924a:	4628      	mov	r0, r5
 800924c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009250:	f000 b8dc 	b.w	800940c <__malloc_unlock>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d908      	bls.n	800926a <_free_r+0x42>
 8009258:	6820      	ldr	r0, [r4, #0]
 800925a:	1821      	adds	r1, r4, r0
 800925c:	428b      	cmp	r3, r1
 800925e:	bf01      	itttt	eq
 8009260:	6819      	ldreq	r1, [r3, #0]
 8009262:	685b      	ldreq	r3, [r3, #4]
 8009264:	1809      	addeq	r1, r1, r0
 8009266:	6021      	streq	r1, [r4, #0]
 8009268:	e7ed      	b.n	8009246 <_free_r+0x1e>
 800926a:	461a      	mov	r2, r3
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	b10b      	cbz	r3, 8009274 <_free_r+0x4c>
 8009270:	42a3      	cmp	r3, r4
 8009272:	d9fa      	bls.n	800926a <_free_r+0x42>
 8009274:	6811      	ldr	r1, [r2, #0]
 8009276:	1850      	adds	r0, r2, r1
 8009278:	42a0      	cmp	r0, r4
 800927a:	d10b      	bne.n	8009294 <_free_r+0x6c>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	4401      	add	r1, r0
 8009280:	1850      	adds	r0, r2, r1
 8009282:	4283      	cmp	r3, r0
 8009284:	6011      	str	r1, [r2, #0]
 8009286:	d1e0      	bne.n	800924a <_free_r+0x22>
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	6053      	str	r3, [r2, #4]
 800928e:	4408      	add	r0, r1
 8009290:	6010      	str	r0, [r2, #0]
 8009292:	e7da      	b.n	800924a <_free_r+0x22>
 8009294:	d902      	bls.n	800929c <_free_r+0x74>
 8009296:	230c      	movs	r3, #12
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	e7d6      	b.n	800924a <_free_r+0x22>
 800929c:	6820      	ldr	r0, [r4, #0]
 800929e:	1821      	adds	r1, r4, r0
 80092a0:	428b      	cmp	r3, r1
 80092a2:	bf04      	itt	eq
 80092a4:	6819      	ldreq	r1, [r3, #0]
 80092a6:	685b      	ldreq	r3, [r3, #4]
 80092a8:	6063      	str	r3, [r4, #4]
 80092aa:	bf04      	itt	eq
 80092ac:	1809      	addeq	r1, r1, r0
 80092ae:	6021      	streq	r1, [r4, #0]
 80092b0:	6054      	str	r4, [r2, #4]
 80092b2:	e7ca      	b.n	800924a <_free_r+0x22>
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	2000172c 	.word	0x2000172c

080092bc <sbrk_aligned>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	4e0f      	ldr	r6, [pc, #60]	@ (80092fc <sbrk_aligned+0x40>)
 80092c0:	460c      	mov	r4, r1
 80092c2:	6831      	ldr	r1, [r6, #0]
 80092c4:	4605      	mov	r5, r0
 80092c6:	b911      	cbnz	r1, 80092ce <sbrk_aligned+0x12>
 80092c8:	f000 fcd8 	bl	8009c7c <_sbrk_r>
 80092cc:	6030      	str	r0, [r6, #0]
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f000 fcd3 	bl	8009c7c <_sbrk_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d103      	bne.n	80092e2 <sbrk_aligned+0x26>
 80092da:	f04f 34ff 	mov.w	r4, #4294967295
 80092de:	4620      	mov	r0, r4
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	1cc4      	adds	r4, r0, #3
 80092e4:	f024 0403 	bic.w	r4, r4, #3
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d0f8      	beq.n	80092de <sbrk_aligned+0x22>
 80092ec:	1a21      	subs	r1, r4, r0
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 fcc4 	bl	8009c7c <_sbrk_r>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d1f2      	bne.n	80092de <sbrk_aligned+0x22>
 80092f8:	e7ef      	b.n	80092da <sbrk_aligned+0x1e>
 80092fa:	bf00      	nop
 80092fc:	20001728 	.word	0x20001728

08009300 <_malloc_r>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	1ccd      	adds	r5, r1, #3
 8009306:	f025 0503 	bic.w	r5, r5, #3
 800930a:	3508      	adds	r5, #8
 800930c:	2d0c      	cmp	r5, #12
 800930e:	bf38      	it	cc
 8009310:	250c      	movcc	r5, #12
 8009312:	2d00      	cmp	r5, #0
 8009314:	4606      	mov	r6, r0
 8009316:	db01      	blt.n	800931c <_malloc_r+0x1c>
 8009318:	42a9      	cmp	r1, r5
 800931a:	d904      	bls.n	8009326 <_malloc_r+0x26>
 800931c:	230c      	movs	r3, #12
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	2000      	movs	r0, #0
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093fc <_malloc_r+0xfc>
 800932a:	f000 f869 	bl	8009400 <__malloc_lock>
 800932e:	f8d8 3000 	ldr.w	r3, [r8]
 8009332:	461c      	mov	r4, r3
 8009334:	bb44      	cbnz	r4, 8009388 <_malloc_r+0x88>
 8009336:	4629      	mov	r1, r5
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff ffbf 	bl	80092bc <sbrk_aligned>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	4604      	mov	r4, r0
 8009342:	d158      	bne.n	80093f6 <_malloc_r+0xf6>
 8009344:	f8d8 4000 	ldr.w	r4, [r8]
 8009348:	4627      	mov	r7, r4
 800934a:	2f00      	cmp	r7, #0
 800934c:	d143      	bne.n	80093d6 <_malloc_r+0xd6>
 800934e:	2c00      	cmp	r4, #0
 8009350:	d04b      	beq.n	80093ea <_malloc_r+0xea>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	4639      	mov	r1, r7
 8009356:	4630      	mov	r0, r6
 8009358:	eb04 0903 	add.w	r9, r4, r3
 800935c:	f000 fc8e 	bl	8009c7c <_sbrk_r>
 8009360:	4581      	cmp	r9, r0
 8009362:	d142      	bne.n	80093ea <_malloc_r+0xea>
 8009364:	6821      	ldr	r1, [r4, #0]
 8009366:	1a6d      	subs	r5, r5, r1
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ffa6 	bl	80092bc <sbrk_aligned>
 8009370:	3001      	adds	r0, #1
 8009372:	d03a      	beq.n	80093ea <_malloc_r+0xea>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	442b      	add	r3, r5
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	f8d8 3000 	ldr.w	r3, [r8]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	bb62      	cbnz	r2, 80093dc <_malloc_r+0xdc>
 8009382:	f8c8 7000 	str.w	r7, [r8]
 8009386:	e00f      	b.n	80093a8 <_malloc_r+0xa8>
 8009388:	6822      	ldr	r2, [r4, #0]
 800938a:	1b52      	subs	r2, r2, r5
 800938c:	d420      	bmi.n	80093d0 <_malloc_r+0xd0>
 800938e:	2a0b      	cmp	r2, #11
 8009390:	d917      	bls.n	80093c2 <_malloc_r+0xc2>
 8009392:	1961      	adds	r1, r4, r5
 8009394:	42a3      	cmp	r3, r4
 8009396:	6025      	str	r5, [r4, #0]
 8009398:	bf18      	it	ne
 800939a:	6059      	strne	r1, [r3, #4]
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	bf08      	it	eq
 80093a0:	f8c8 1000 	streq.w	r1, [r8]
 80093a4:	5162      	str	r2, [r4, r5]
 80093a6:	604b      	str	r3, [r1, #4]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f82f 	bl	800940c <__malloc_unlock>
 80093ae:	f104 000b 	add.w	r0, r4, #11
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	f020 0007 	bic.w	r0, r0, #7
 80093b8:	1ac2      	subs	r2, r0, r3
 80093ba:	bf1c      	itt	ne
 80093bc:	1a1b      	subne	r3, r3, r0
 80093be:	50a3      	strne	r3, [r4, r2]
 80093c0:	e7af      	b.n	8009322 <_malloc_r+0x22>
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	bf0c      	ite	eq
 80093c8:	f8c8 2000 	streq.w	r2, [r8]
 80093cc:	605a      	strne	r2, [r3, #4]
 80093ce:	e7eb      	b.n	80093a8 <_malloc_r+0xa8>
 80093d0:	4623      	mov	r3, r4
 80093d2:	6864      	ldr	r4, [r4, #4]
 80093d4:	e7ae      	b.n	8009334 <_malloc_r+0x34>
 80093d6:	463c      	mov	r4, r7
 80093d8:	687f      	ldr	r7, [r7, #4]
 80093da:	e7b6      	b.n	800934a <_malloc_r+0x4a>
 80093dc:	461a      	mov	r2, r3
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d1fb      	bne.n	80093dc <_malloc_r+0xdc>
 80093e4:	2300      	movs	r3, #0
 80093e6:	6053      	str	r3, [r2, #4]
 80093e8:	e7de      	b.n	80093a8 <_malloc_r+0xa8>
 80093ea:	230c      	movs	r3, #12
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f80c 	bl	800940c <__malloc_unlock>
 80093f4:	e794      	b.n	8009320 <_malloc_r+0x20>
 80093f6:	6005      	str	r5, [r0, #0]
 80093f8:	e7d6      	b.n	80093a8 <_malloc_r+0xa8>
 80093fa:	bf00      	nop
 80093fc:	2000172c 	.word	0x2000172c

08009400 <__malloc_lock>:
 8009400:	4801      	ldr	r0, [pc, #4]	@ (8009408 <__malloc_lock+0x8>)
 8009402:	f7ff bf00 	b.w	8009206 <__retarget_lock_acquire_recursive>
 8009406:	bf00      	nop
 8009408:	20001724 	.word	0x20001724

0800940c <__malloc_unlock>:
 800940c:	4801      	ldr	r0, [pc, #4]	@ (8009414 <__malloc_unlock+0x8>)
 800940e:	f7ff befb 	b.w	8009208 <__retarget_lock_release_recursive>
 8009412:	bf00      	nop
 8009414:	20001724 	.word	0x20001724

08009418 <__sfputc_r>:
 8009418:	6893      	ldr	r3, [r2, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	b410      	push	{r4}
 8009420:	6093      	str	r3, [r2, #8]
 8009422:	da08      	bge.n	8009436 <__sfputc_r+0x1e>
 8009424:	6994      	ldr	r4, [r2, #24]
 8009426:	42a3      	cmp	r3, r4
 8009428:	db01      	blt.n	800942e <__sfputc_r+0x16>
 800942a:	290a      	cmp	r1, #10
 800942c:	d103      	bne.n	8009436 <__sfputc_r+0x1e>
 800942e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009432:	f7ff bdda 	b.w	8008fea <__swbuf_r>
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	1c58      	adds	r0, r3, #1
 800943a:	6010      	str	r0, [r2, #0]
 800943c:	7019      	strb	r1, [r3, #0]
 800943e:	4608      	mov	r0, r1
 8009440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009444:	4770      	bx	lr

08009446 <__sfputs_r>:
 8009446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009448:	4606      	mov	r6, r0
 800944a:	460f      	mov	r7, r1
 800944c:	4614      	mov	r4, r2
 800944e:	18d5      	adds	r5, r2, r3
 8009450:	42ac      	cmp	r4, r5
 8009452:	d101      	bne.n	8009458 <__sfputs_r+0x12>
 8009454:	2000      	movs	r0, #0
 8009456:	e007      	b.n	8009468 <__sfputs_r+0x22>
 8009458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945c:	463a      	mov	r2, r7
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ffda 	bl	8009418 <__sfputc_r>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d1f3      	bne.n	8009450 <__sfputs_r+0xa>
 8009468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800946c <_vfiprintf_r>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	460d      	mov	r5, r1
 8009472:	b09d      	sub	sp, #116	@ 0x74
 8009474:	4614      	mov	r4, r2
 8009476:	4698      	mov	r8, r3
 8009478:	4606      	mov	r6, r0
 800947a:	b118      	cbz	r0, 8009484 <_vfiprintf_r+0x18>
 800947c:	6a03      	ldr	r3, [r0, #32]
 800947e:	b90b      	cbnz	r3, 8009484 <_vfiprintf_r+0x18>
 8009480:	f7ff fcc2 	bl	8008e08 <__sinit>
 8009484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009486:	07d9      	lsls	r1, r3, #31
 8009488:	d405      	bmi.n	8009496 <_vfiprintf_r+0x2a>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	059a      	lsls	r2, r3, #22
 800948e:	d402      	bmi.n	8009496 <_vfiprintf_r+0x2a>
 8009490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009492:	f7ff feb8 	bl	8009206 <__retarget_lock_acquire_recursive>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	071b      	lsls	r3, r3, #28
 800949a:	d501      	bpl.n	80094a0 <_vfiprintf_r+0x34>
 800949c:	692b      	ldr	r3, [r5, #16]
 800949e:	b99b      	cbnz	r3, 80094c8 <_vfiprintf_r+0x5c>
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff fde0 	bl	8009068 <__swsetup_r>
 80094a8:	b170      	cbz	r0, 80094c8 <_vfiprintf_r+0x5c>
 80094aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094ac:	07dc      	lsls	r4, r3, #31
 80094ae:	d504      	bpl.n	80094ba <_vfiprintf_r+0x4e>
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	b01d      	add	sp, #116	@ 0x74
 80094b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	0598      	lsls	r0, r3, #22
 80094be:	d4f7      	bmi.n	80094b0 <_vfiprintf_r+0x44>
 80094c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094c2:	f7ff fea1 	bl	8009208 <__retarget_lock_release_recursive>
 80094c6:	e7f3      	b.n	80094b0 <_vfiprintf_r+0x44>
 80094c8:	2300      	movs	r3, #0
 80094ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80094cc:	2320      	movs	r3, #32
 80094ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d6:	2330      	movs	r3, #48	@ 0x30
 80094d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009688 <_vfiprintf_r+0x21c>
 80094dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094e0:	f04f 0901 	mov.w	r9, #1
 80094e4:	4623      	mov	r3, r4
 80094e6:	469a      	mov	sl, r3
 80094e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ec:	b10a      	cbz	r2, 80094f2 <_vfiprintf_r+0x86>
 80094ee:	2a25      	cmp	r2, #37	@ 0x25
 80094f0:	d1f9      	bne.n	80094e6 <_vfiprintf_r+0x7a>
 80094f2:	ebba 0b04 	subs.w	fp, sl, r4
 80094f6:	d00b      	beq.n	8009510 <_vfiprintf_r+0xa4>
 80094f8:	465b      	mov	r3, fp
 80094fa:	4622      	mov	r2, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	4630      	mov	r0, r6
 8009500:	f7ff ffa1 	bl	8009446 <__sfputs_r>
 8009504:	3001      	adds	r0, #1
 8009506:	f000 80a7 	beq.w	8009658 <_vfiprintf_r+0x1ec>
 800950a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800950c:	445a      	add	r2, fp
 800950e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009510:	f89a 3000 	ldrb.w	r3, [sl]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 809f 	beq.w	8009658 <_vfiprintf_r+0x1ec>
 800951a:	2300      	movs	r3, #0
 800951c:	f04f 32ff 	mov.w	r2, #4294967295
 8009520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009524:	f10a 0a01 	add.w	sl, sl, #1
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009530:	931a      	str	r3, [sp, #104]	@ 0x68
 8009532:	4654      	mov	r4, sl
 8009534:	2205      	movs	r2, #5
 8009536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953a:	4853      	ldr	r0, [pc, #332]	@ (8009688 <_vfiprintf_r+0x21c>)
 800953c:	f7f6 fe58 	bl	80001f0 <memchr>
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	b9d8      	cbnz	r0, 800957c <_vfiprintf_r+0x110>
 8009544:	06d1      	lsls	r1, r2, #27
 8009546:	bf44      	itt	mi
 8009548:	2320      	movmi	r3, #32
 800954a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800954e:	0713      	lsls	r3, r2, #28
 8009550:	bf44      	itt	mi
 8009552:	232b      	movmi	r3, #43	@ 0x2b
 8009554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009558:	f89a 3000 	ldrb.w	r3, [sl]
 800955c:	2b2a      	cmp	r3, #42	@ 0x2a
 800955e:	d015      	beq.n	800958c <_vfiprintf_r+0x120>
 8009560:	9a07      	ldr	r2, [sp, #28]
 8009562:	4654      	mov	r4, sl
 8009564:	2000      	movs	r0, #0
 8009566:	f04f 0c0a 	mov.w	ip, #10
 800956a:	4621      	mov	r1, r4
 800956c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009570:	3b30      	subs	r3, #48	@ 0x30
 8009572:	2b09      	cmp	r3, #9
 8009574:	d94b      	bls.n	800960e <_vfiprintf_r+0x1a2>
 8009576:	b1b0      	cbz	r0, 80095a6 <_vfiprintf_r+0x13a>
 8009578:	9207      	str	r2, [sp, #28]
 800957a:	e014      	b.n	80095a6 <_vfiprintf_r+0x13a>
 800957c:	eba0 0308 	sub.w	r3, r0, r8
 8009580:	fa09 f303 	lsl.w	r3, r9, r3
 8009584:	4313      	orrs	r3, r2
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	46a2      	mov	sl, r4
 800958a:	e7d2      	b.n	8009532 <_vfiprintf_r+0xc6>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d19      	adds	r1, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9103      	str	r1, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfbb      	ittet	lt
 8009598:	425b      	neglt	r3, r3
 800959a:	f042 0202 	orrlt.w	r2, r2, #2
 800959e:	9307      	strge	r3, [sp, #28]
 80095a0:	9307      	strlt	r3, [sp, #28]
 80095a2:	bfb8      	it	lt
 80095a4:	9204      	strlt	r2, [sp, #16]
 80095a6:	7823      	ldrb	r3, [r4, #0]
 80095a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80095aa:	d10a      	bne.n	80095c2 <_vfiprintf_r+0x156>
 80095ac:	7863      	ldrb	r3, [r4, #1]
 80095ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80095b0:	d132      	bne.n	8009618 <_vfiprintf_r+0x1ac>
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	1d1a      	adds	r2, r3, #4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	9203      	str	r2, [sp, #12]
 80095ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095be:	3402      	adds	r4, #2
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009698 <_vfiprintf_r+0x22c>
 80095c6:	7821      	ldrb	r1, [r4, #0]
 80095c8:	2203      	movs	r2, #3
 80095ca:	4650      	mov	r0, sl
 80095cc:	f7f6 fe10 	bl	80001f0 <memchr>
 80095d0:	b138      	cbz	r0, 80095e2 <_vfiprintf_r+0x176>
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	eba0 000a 	sub.w	r0, r0, sl
 80095d8:	2240      	movs	r2, #64	@ 0x40
 80095da:	4082      	lsls	r2, r0
 80095dc:	4313      	orrs	r3, r2
 80095de:	3401      	adds	r4, #1
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e6:	4829      	ldr	r0, [pc, #164]	@ (800968c <_vfiprintf_r+0x220>)
 80095e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095ec:	2206      	movs	r2, #6
 80095ee:	f7f6 fdff 	bl	80001f0 <memchr>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d03f      	beq.n	8009676 <_vfiprintf_r+0x20a>
 80095f6:	4b26      	ldr	r3, [pc, #152]	@ (8009690 <_vfiprintf_r+0x224>)
 80095f8:	bb1b      	cbnz	r3, 8009642 <_vfiprintf_r+0x1d6>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	3307      	adds	r3, #7
 80095fe:	f023 0307 	bic.w	r3, r3, #7
 8009602:	3308      	adds	r3, #8
 8009604:	9303      	str	r3, [sp, #12]
 8009606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009608:	443b      	add	r3, r7
 800960a:	9309      	str	r3, [sp, #36]	@ 0x24
 800960c:	e76a      	b.n	80094e4 <_vfiprintf_r+0x78>
 800960e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009612:	460c      	mov	r4, r1
 8009614:	2001      	movs	r0, #1
 8009616:	e7a8      	b.n	800956a <_vfiprintf_r+0xfe>
 8009618:	2300      	movs	r3, #0
 800961a:	3401      	adds	r4, #1
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	4619      	mov	r1, r3
 8009620:	f04f 0c0a 	mov.w	ip, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800962a:	3a30      	subs	r2, #48	@ 0x30
 800962c:	2a09      	cmp	r2, #9
 800962e:	d903      	bls.n	8009638 <_vfiprintf_r+0x1cc>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0c6      	beq.n	80095c2 <_vfiprintf_r+0x156>
 8009634:	9105      	str	r1, [sp, #20]
 8009636:	e7c4      	b.n	80095c2 <_vfiprintf_r+0x156>
 8009638:	fb0c 2101 	mla	r1, ip, r1, r2
 800963c:	4604      	mov	r4, r0
 800963e:	2301      	movs	r3, #1
 8009640:	e7f0      	b.n	8009624 <_vfiprintf_r+0x1b8>
 8009642:	ab03      	add	r3, sp, #12
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	462a      	mov	r2, r5
 8009648:	4b12      	ldr	r3, [pc, #72]	@ (8009694 <_vfiprintf_r+0x228>)
 800964a:	a904      	add	r1, sp, #16
 800964c:	4630      	mov	r0, r6
 800964e:	f3af 8000 	nop.w
 8009652:	4607      	mov	r7, r0
 8009654:	1c78      	adds	r0, r7, #1
 8009656:	d1d6      	bne.n	8009606 <_vfiprintf_r+0x19a>
 8009658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800965a:	07d9      	lsls	r1, r3, #31
 800965c:	d405      	bmi.n	800966a <_vfiprintf_r+0x1fe>
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	059a      	lsls	r2, r3, #22
 8009662:	d402      	bmi.n	800966a <_vfiprintf_r+0x1fe>
 8009664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009666:	f7ff fdcf 	bl	8009208 <__retarget_lock_release_recursive>
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	065b      	lsls	r3, r3, #25
 800966e:	f53f af1f 	bmi.w	80094b0 <_vfiprintf_r+0x44>
 8009672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009674:	e71e      	b.n	80094b4 <_vfiprintf_r+0x48>
 8009676:	ab03      	add	r3, sp, #12
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	462a      	mov	r2, r5
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <_vfiprintf_r+0x228>)
 800967e:	a904      	add	r1, sp, #16
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f879 	bl	8009778 <_printf_i>
 8009686:	e7e4      	b.n	8009652 <_vfiprintf_r+0x1e6>
 8009688:	0800ab95 	.word	0x0800ab95
 800968c:	0800ab9f 	.word	0x0800ab9f
 8009690:	00000000 	.word	0x00000000
 8009694:	08009447 	.word	0x08009447
 8009698:	0800ab9b 	.word	0x0800ab9b

0800969c <_printf_common>:
 800969c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a0:	4616      	mov	r6, r2
 80096a2:	4698      	mov	r8, r3
 80096a4:	688a      	ldr	r2, [r1, #8]
 80096a6:	690b      	ldr	r3, [r1, #16]
 80096a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	bfb8      	it	lt
 80096b0:	4613      	movlt	r3, r2
 80096b2:	6033      	str	r3, [r6, #0]
 80096b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096b8:	4607      	mov	r7, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	b10a      	cbz	r2, 80096c2 <_printf_common+0x26>
 80096be:	3301      	adds	r3, #1
 80096c0:	6033      	str	r3, [r6, #0]
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	0699      	lsls	r1, r3, #26
 80096c6:	bf42      	ittt	mi
 80096c8:	6833      	ldrmi	r3, [r6, #0]
 80096ca:	3302      	addmi	r3, #2
 80096cc:	6033      	strmi	r3, [r6, #0]
 80096ce:	6825      	ldr	r5, [r4, #0]
 80096d0:	f015 0506 	ands.w	r5, r5, #6
 80096d4:	d106      	bne.n	80096e4 <_printf_common+0x48>
 80096d6:	f104 0a19 	add.w	sl, r4, #25
 80096da:	68e3      	ldr	r3, [r4, #12]
 80096dc:	6832      	ldr	r2, [r6, #0]
 80096de:	1a9b      	subs	r3, r3, r2
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	dc26      	bgt.n	8009732 <_printf_common+0x96>
 80096e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096e8:	6822      	ldr	r2, [r4, #0]
 80096ea:	3b00      	subs	r3, #0
 80096ec:	bf18      	it	ne
 80096ee:	2301      	movne	r3, #1
 80096f0:	0692      	lsls	r2, r2, #26
 80096f2:	d42b      	bmi.n	800974c <_printf_common+0xb0>
 80096f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096f8:	4641      	mov	r1, r8
 80096fa:	4638      	mov	r0, r7
 80096fc:	47c8      	blx	r9
 80096fe:	3001      	adds	r0, #1
 8009700:	d01e      	beq.n	8009740 <_printf_common+0xa4>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	6922      	ldr	r2, [r4, #16]
 8009706:	f003 0306 	and.w	r3, r3, #6
 800970a:	2b04      	cmp	r3, #4
 800970c:	bf02      	ittt	eq
 800970e:	68e5      	ldreq	r5, [r4, #12]
 8009710:	6833      	ldreq	r3, [r6, #0]
 8009712:	1aed      	subeq	r5, r5, r3
 8009714:	68a3      	ldr	r3, [r4, #8]
 8009716:	bf0c      	ite	eq
 8009718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800971c:	2500      	movne	r5, #0
 800971e:	4293      	cmp	r3, r2
 8009720:	bfc4      	itt	gt
 8009722:	1a9b      	subgt	r3, r3, r2
 8009724:	18ed      	addgt	r5, r5, r3
 8009726:	2600      	movs	r6, #0
 8009728:	341a      	adds	r4, #26
 800972a:	42b5      	cmp	r5, r6
 800972c:	d11a      	bne.n	8009764 <_printf_common+0xc8>
 800972e:	2000      	movs	r0, #0
 8009730:	e008      	b.n	8009744 <_printf_common+0xa8>
 8009732:	2301      	movs	r3, #1
 8009734:	4652      	mov	r2, sl
 8009736:	4641      	mov	r1, r8
 8009738:	4638      	mov	r0, r7
 800973a:	47c8      	blx	r9
 800973c:	3001      	adds	r0, #1
 800973e:	d103      	bne.n	8009748 <_printf_common+0xac>
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009748:	3501      	adds	r5, #1
 800974a:	e7c6      	b.n	80096da <_printf_common+0x3e>
 800974c:	18e1      	adds	r1, r4, r3
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	2030      	movs	r0, #48	@ 0x30
 8009752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009756:	4422      	add	r2, r4
 8009758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800975c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009760:	3302      	adds	r3, #2
 8009762:	e7c7      	b.n	80096f4 <_printf_common+0x58>
 8009764:	2301      	movs	r3, #1
 8009766:	4622      	mov	r2, r4
 8009768:	4641      	mov	r1, r8
 800976a:	4638      	mov	r0, r7
 800976c:	47c8      	blx	r9
 800976e:	3001      	adds	r0, #1
 8009770:	d0e6      	beq.n	8009740 <_printf_common+0xa4>
 8009772:	3601      	adds	r6, #1
 8009774:	e7d9      	b.n	800972a <_printf_common+0x8e>
	...

08009778 <_printf_i>:
 8009778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800977c:	7e0f      	ldrb	r7, [r1, #24]
 800977e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009780:	2f78      	cmp	r7, #120	@ 0x78
 8009782:	4691      	mov	r9, r2
 8009784:	4680      	mov	r8, r0
 8009786:	460c      	mov	r4, r1
 8009788:	469a      	mov	sl, r3
 800978a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800978e:	d807      	bhi.n	80097a0 <_printf_i+0x28>
 8009790:	2f62      	cmp	r7, #98	@ 0x62
 8009792:	d80a      	bhi.n	80097aa <_printf_i+0x32>
 8009794:	2f00      	cmp	r7, #0
 8009796:	f000 80d1 	beq.w	800993c <_printf_i+0x1c4>
 800979a:	2f58      	cmp	r7, #88	@ 0x58
 800979c:	f000 80b8 	beq.w	8009910 <_printf_i+0x198>
 80097a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097a8:	e03a      	b.n	8009820 <_printf_i+0xa8>
 80097aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097ae:	2b15      	cmp	r3, #21
 80097b0:	d8f6      	bhi.n	80097a0 <_printf_i+0x28>
 80097b2:	a101      	add	r1, pc, #4	@ (adr r1, 80097b8 <_printf_i+0x40>)
 80097b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b8:	08009811 	.word	0x08009811
 80097bc:	08009825 	.word	0x08009825
 80097c0:	080097a1 	.word	0x080097a1
 80097c4:	080097a1 	.word	0x080097a1
 80097c8:	080097a1 	.word	0x080097a1
 80097cc:	080097a1 	.word	0x080097a1
 80097d0:	08009825 	.word	0x08009825
 80097d4:	080097a1 	.word	0x080097a1
 80097d8:	080097a1 	.word	0x080097a1
 80097dc:	080097a1 	.word	0x080097a1
 80097e0:	080097a1 	.word	0x080097a1
 80097e4:	08009923 	.word	0x08009923
 80097e8:	0800984f 	.word	0x0800984f
 80097ec:	080098dd 	.word	0x080098dd
 80097f0:	080097a1 	.word	0x080097a1
 80097f4:	080097a1 	.word	0x080097a1
 80097f8:	08009945 	.word	0x08009945
 80097fc:	080097a1 	.word	0x080097a1
 8009800:	0800984f 	.word	0x0800984f
 8009804:	080097a1 	.word	0x080097a1
 8009808:	080097a1 	.word	0x080097a1
 800980c:	080098e5 	.word	0x080098e5
 8009810:	6833      	ldr	r3, [r6, #0]
 8009812:	1d1a      	adds	r2, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6032      	str	r2, [r6, #0]
 8009818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800981c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009820:	2301      	movs	r3, #1
 8009822:	e09c      	b.n	800995e <_printf_i+0x1e6>
 8009824:	6833      	ldr	r3, [r6, #0]
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	1d19      	adds	r1, r3, #4
 800982a:	6031      	str	r1, [r6, #0]
 800982c:	0606      	lsls	r6, r0, #24
 800982e:	d501      	bpl.n	8009834 <_printf_i+0xbc>
 8009830:	681d      	ldr	r5, [r3, #0]
 8009832:	e003      	b.n	800983c <_printf_i+0xc4>
 8009834:	0645      	lsls	r5, r0, #25
 8009836:	d5fb      	bpl.n	8009830 <_printf_i+0xb8>
 8009838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800983c:	2d00      	cmp	r5, #0
 800983e:	da03      	bge.n	8009848 <_printf_i+0xd0>
 8009840:	232d      	movs	r3, #45	@ 0x2d
 8009842:	426d      	negs	r5, r5
 8009844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009848:	4858      	ldr	r0, [pc, #352]	@ (80099ac <_printf_i+0x234>)
 800984a:	230a      	movs	r3, #10
 800984c:	e011      	b.n	8009872 <_printf_i+0xfa>
 800984e:	6821      	ldr	r1, [r4, #0]
 8009850:	6833      	ldr	r3, [r6, #0]
 8009852:	0608      	lsls	r0, r1, #24
 8009854:	f853 5b04 	ldr.w	r5, [r3], #4
 8009858:	d402      	bmi.n	8009860 <_printf_i+0xe8>
 800985a:	0649      	lsls	r1, r1, #25
 800985c:	bf48      	it	mi
 800985e:	b2ad      	uxthmi	r5, r5
 8009860:	2f6f      	cmp	r7, #111	@ 0x6f
 8009862:	4852      	ldr	r0, [pc, #328]	@ (80099ac <_printf_i+0x234>)
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	bf14      	ite	ne
 8009868:	230a      	movne	r3, #10
 800986a:	2308      	moveq	r3, #8
 800986c:	2100      	movs	r1, #0
 800986e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009872:	6866      	ldr	r6, [r4, #4]
 8009874:	60a6      	str	r6, [r4, #8]
 8009876:	2e00      	cmp	r6, #0
 8009878:	db05      	blt.n	8009886 <_printf_i+0x10e>
 800987a:	6821      	ldr	r1, [r4, #0]
 800987c:	432e      	orrs	r6, r5
 800987e:	f021 0104 	bic.w	r1, r1, #4
 8009882:	6021      	str	r1, [r4, #0]
 8009884:	d04b      	beq.n	800991e <_printf_i+0x1a6>
 8009886:	4616      	mov	r6, r2
 8009888:	fbb5 f1f3 	udiv	r1, r5, r3
 800988c:	fb03 5711 	mls	r7, r3, r1, r5
 8009890:	5dc7      	ldrb	r7, [r0, r7]
 8009892:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009896:	462f      	mov	r7, r5
 8009898:	42bb      	cmp	r3, r7
 800989a:	460d      	mov	r5, r1
 800989c:	d9f4      	bls.n	8009888 <_printf_i+0x110>
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d10b      	bne.n	80098ba <_printf_i+0x142>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07df      	lsls	r7, r3, #31
 80098a6:	d508      	bpl.n	80098ba <_printf_i+0x142>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	4299      	cmp	r1, r3
 80098ae:	bfde      	ittt	le
 80098b0:	2330      	movle	r3, #48	@ 0x30
 80098b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098ba:	1b92      	subs	r2, r2, r6
 80098bc:	6122      	str	r2, [r4, #16]
 80098be:	f8cd a000 	str.w	sl, [sp]
 80098c2:	464b      	mov	r3, r9
 80098c4:	aa03      	add	r2, sp, #12
 80098c6:	4621      	mov	r1, r4
 80098c8:	4640      	mov	r0, r8
 80098ca:	f7ff fee7 	bl	800969c <_printf_common>
 80098ce:	3001      	adds	r0, #1
 80098d0:	d14a      	bne.n	8009968 <_printf_i+0x1f0>
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295
 80098d6:	b004      	add	sp, #16
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	f043 0320 	orr.w	r3, r3, #32
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	4832      	ldr	r0, [pc, #200]	@ (80099b0 <_printf_i+0x238>)
 80098e6:	2778      	movs	r7, #120	@ 0x78
 80098e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	6831      	ldr	r1, [r6, #0]
 80098f0:	061f      	lsls	r7, r3, #24
 80098f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80098f6:	d402      	bmi.n	80098fe <_printf_i+0x186>
 80098f8:	065f      	lsls	r7, r3, #25
 80098fa:	bf48      	it	mi
 80098fc:	b2ad      	uxthmi	r5, r5
 80098fe:	6031      	str	r1, [r6, #0]
 8009900:	07d9      	lsls	r1, r3, #31
 8009902:	bf44      	itt	mi
 8009904:	f043 0320 	orrmi.w	r3, r3, #32
 8009908:	6023      	strmi	r3, [r4, #0]
 800990a:	b11d      	cbz	r5, 8009914 <_printf_i+0x19c>
 800990c:	2310      	movs	r3, #16
 800990e:	e7ad      	b.n	800986c <_printf_i+0xf4>
 8009910:	4826      	ldr	r0, [pc, #152]	@ (80099ac <_printf_i+0x234>)
 8009912:	e7e9      	b.n	80098e8 <_printf_i+0x170>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	f023 0320 	bic.w	r3, r3, #32
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e7f6      	b.n	800990c <_printf_i+0x194>
 800991e:	4616      	mov	r6, r2
 8009920:	e7bd      	b.n	800989e <_printf_i+0x126>
 8009922:	6833      	ldr	r3, [r6, #0]
 8009924:	6825      	ldr	r5, [r4, #0]
 8009926:	6961      	ldr	r1, [r4, #20]
 8009928:	1d18      	adds	r0, r3, #4
 800992a:	6030      	str	r0, [r6, #0]
 800992c:	062e      	lsls	r6, r5, #24
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	d501      	bpl.n	8009936 <_printf_i+0x1be>
 8009932:	6019      	str	r1, [r3, #0]
 8009934:	e002      	b.n	800993c <_printf_i+0x1c4>
 8009936:	0668      	lsls	r0, r5, #25
 8009938:	d5fb      	bpl.n	8009932 <_printf_i+0x1ba>
 800993a:	8019      	strh	r1, [r3, #0]
 800993c:	2300      	movs	r3, #0
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	4616      	mov	r6, r2
 8009942:	e7bc      	b.n	80098be <_printf_i+0x146>
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	6032      	str	r2, [r6, #0]
 800994a:	681e      	ldr	r6, [r3, #0]
 800994c:	6862      	ldr	r2, [r4, #4]
 800994e:	2100      	movs	r1, #0
 8009950:	4630      	mov	r0, r6
 8009952:	f7f6 fc4d 	bl	80001f0 <memchr>
 8009956:	b108      	cbz	r0, 800995c <_printf_i+0x1e4>
 8009958:	1b80      	subs	r0, r0, r6
 800995a:	6060      	str	r0, [r4, #4]
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	6123      	str	r3, [r4, #16]
 8009960:	2300      	movs	r3, #0
 8009962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009966:	e7aa      	b.n	80098be <_printf_i+0x146>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	4632      	mov	r2, r6
 800996c:	4649      	mov	r1, r9
 800996e:	4640      	mov	r0, r8
 8009970:	47d0      	blx	sl
 8009972:	3001      	adds	r0, #1
 8009974:	d0ad      	beq.n	80098d2 <_printf_i+0x15a>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	079b      	lsls	r3, r3, #30
 800997a:	d413      	bmi.n	80099a4 <_printf_i+0x22c>
 800997c:	68e0      	ldr	r0, [r4, #12]
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	4298      	cmp	r0, r3
 8009982:	bfb8      	it	lt
 8009984:	4618      	movlt	r0, r3
 8009986:	e7a6      	b.n	80098d6 <_printf_i+0x15e>
 8009988:	2301      	movs	r3, #1
 800998a:	4632      	mov	r2, r6
 800998c:	4649      	mov	r1, r9
 800998e:	4640      	mov	r0, r8
 8009990:	47d0      	blx	sl
 8009992:	3001      	adds	r0, #1
 8009994:	d09d      	beq.n	80098d2 <_printf_i+0x15a>
 8009996:	3501      	adds	r5, #1
 8009998:	68e3      	ldr	r3, [r4, #12]
 800999a:	9903      	ldr	r1, [sp, #12]
 800999c:	1a5b      	subs	r3, r3, r1
 800999e:	42ab      	cmp	r3, r5
 80099a0:	dcf2      	bgt.n	8009988 <_printf_i+0x210>
 80099a2:	e7eb      	b.n	800997c <_printf_i+0x204>
 80099a4:	2500      	movs	r5, #0
 80099a6:	f104 0619 	add.w	r6, r4, #25
 80099aa:	e7f5      	b.n	8009998 <_printf_i+0x220>
 80099ac:	0800aba6 	.word	0x0800aba6
 80099b0:	0800abb7 	.word	0x0800abb7

080099b4 <__sflush_r>:
 80099b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	0716      	lsls	r6, r2, #28
 80099be:	4605      	mov	r5, r0
 80099c0:	460c      	mov	r4, r1
 80099c2:	d454      	bmi.n	8009a6e <__sflush_r+0xba>
 80099c4:	684b      	ldr	r3, [r1, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dc02      	bgt.n	80099d0 <__sflush_r+0x1c>
 80099ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dd48      	ble.n	8009a62 <__sflush_r+0xae>
 80099d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d045      	beq.n	8009a62 <__sflush_r+0xae>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	6a21      	ldr	r1, [r4, #32]
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	d030      	beq.n	8009a46 <__sflush_r+0x92>
 80099e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	0759      	lsls	r1, r3, #29
 80099ea:	d505      	bpl.n	80099f8 <__sflush_r+0x44>
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099f2:	b10b      	cbz	r3, 80099f8 <__sflush_r+0x44>
 80099f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x62>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d82b      	bhi.n	8009a66 <__sflush_r+0xb2>
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ab8 <__sflush_r+0x104>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d527      	bpl.n	8009a66 <__sflush_r+0xb2>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	04d9      	lsls	r1, r3, #19
 8009a1c:	6922      	ldr	r2, [r4, #16]
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x78>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x76>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x78>
 8009a2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	b1b9      	cbz	r1, 8009a62 <__sflush_r+0xae>
 8009a32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a36:	4299      	cmp	r1, r3
 8009a38:	d002      	beq.n	8009a40 <__sflush_r+0x8c>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7ff fbf4 	bl	8009228 <_free_r>
 8009a40:	2300      	movs	r3, #0
 8009a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a44:	e00d      	b.n	8009a62 <__sflush_r+0xae>
 8009a46:	2301      	movs	r3, #1
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b0      	blx	r6
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	1c50      	adds	r0, r2, #1
 8009a50:	d1c9      	bne.n	80099e6 <__sflush_r+0x32>
 8009a52:	682b      	ldr	r3, [r5, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0c6      	beq.n	80099e6 <__sflush_r+0x32>
 8009a58:	2b1d      	cmp	r3, #29
 8009a5a:	d001      	beq.n	8009a60 <__sflush_r+0xac>
 8009a5c:	2b16      	cmp	r3, #22
 8009a5e:	d11e      	bne.n	8009a9e <__sflush_r+0xea>
 8009a60:	602f      	str	r7, [r5, #0]
 8009a62:	2000      	movs	r0, #0
 8009a64:	e022      	b.n	8009aac <__sflush_r+0xf8>
 8009a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6a:	b21b      	sxth	r3, r3
 8009a6c:	e01b      	b.n	8009aa6 <__sflush_r+0xf2>
 8009a6e:	690f      	ldr	r7, [r1, #16]
 8009a70:	2f00      	cmp	r7, #0
 8009a72:	d0f6      	beq.n	8009a62 <__sflush_r+0xae>
 8009a74:	0793      	lsls	r3, r2, #30
 8009a76:	680e      	ldr	r6, [r1, #0]
 8009a78:	bf08      	it	eq
 8009a7a:	694b      	ldreq	r3, [r1, #20]
 8009a7c:	600f      	str	r7, [r1, #0]
 8009a7e:	bf18      	it	ne
 8009a80:	2300      	movne	r3, #0
 8009a82:	eba6 0807 	sub.w	r8, r6, r7
 8009a86:	608b      	str	r3, [r1, #8]
 8009a88:	f1b8 0f00 	cmp.w	r8, #0
 8009a8c:	dde9      	ble.n	8009a62 <__sflush_r+0xae>
 8009a8e:	6a21      	ldr	r1, [r4, #32]
 8009a90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a92:	4643      	mov	r3, r8
 8009a94:	463a      	mov	r2, r7
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b0      	blx	r6
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	dc08      	bgt.n	8009ab0 <__sflush_r+0xfc>
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	4407      	add	r7, r0
 8009ab2:	eba8 0800 	sub.w	r8, r8, r0
 8009ab6:	e7e7      	b.n	8009a88 <__sflush_r+0xd4>
 8009ab8:	20400001 	.word	0x20400001

08009abc <_fflush_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	b913      	cbnz	r3, 8009acc <_fflush_r+0x10>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	b118      	cbz	r0, 8009ad6 <_fflush_r+0x1a>
 8009ace:	6a03      	ldr	r3, [r0, #32]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <_fflush_r+0x1a>
 8009ad2:	f7ff f999 	bl	8008e08 <__sinit>
 8009ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f3      	beq.n	8009ac6 <_fflush_r+0xa>
 8009ade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ae0:	07d0      	lsls	r0, r2, #31
 8009ae2:	d404      	bmi.n	8009aee <_fflush_r+0x32>
 8009ae4:	0599      	lsls	r1, r3, #22
 8009ae6:	d402      	bmi.n	8009aee <_fflush_r+0x32>
 8009ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aea:	f7ff fb8c 	bl	8009206 <__retarget_lock_acquire_recursive>
 8009aee:	4628      	mov	r0, r5
 8009af0:	4621      	mov	r1, r4
 8009af2:	f7ff ff5f 	bl	80099b4 <__sflush_r>
 8009af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009af8:	07da      	lsls	r2, r3, #31
 8009afa:	4605      	mov	r5, r0
 8009afc:	d4e4      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	059b      	lsls	r3, r3, #22
 8009b02:	d4e1      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b06:	f7ff fb7f 	bl	8009208 <__retarget_lock_release_recursive>
 8009b0a:	e7dd      	b.n	8009ac8 <_fflush_r+0xc>

08009b0c <__swhatbuf_r>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	460c      	mov	r4, r1
 8009b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b14:	2900      	cmp	r1, #0
 8009b16:	b096      	sub	sp, #88	@ 0x58
 8009b18:	4615      	mov	r5, r2
 8009b1a:	461e      	mov	r6, r3
 8009b1c:	da0d      	bge.n	8009b3a <__swhatbuf_r+0x2e>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b24:	f04f 0100 	mov.w	r1, #0
 8009b28:	bf14      	ite	ne
 8009b2a:	2340      	movne	r3, #64	@ 0x40
 8009b2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b30:	2000      	movs	r0, #0
 8009b32:	6031      	str	r1, [r6, #0]
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	b016      	add	sp, #88	@ 0x58
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	466a      	mov	r2, sp
 8009b3c:	f000 f87c 	bl	8009c38 <_fstat_r>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	dbec      	blt.n	8009b1e <__swhatbuf_r+0x12>
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b4e:	4259      	negs	r1, r3
 8009b50:	4159      	adcs	r1, r3
 8009b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b56:	e7eb      	b.n	8009b30 <__swhatbuf_r+0x24>

08009b58 <__smakebuf_r>:
 8009b58:	898b      	ldrh	r3, [r1, #12]
 8009b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b5c:	079d      	lsls	r5, r3, #30
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	d507      	bpl.n	8009b74 <__smakebuf_r+0x1c>
 8009b64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	6163      	str	r3, [r4, #20]
 8009b70:	b003      	add	sp, #12
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b74:	ab01      	add	r3, sp, #4
 8009b76:	466a      	mov	r2, sp
 8009b78:	f7ff ffc8 	bl	8009b0c <__swhatbuf_r>
 8009b7c:	9f00      	ldr	r7, [sp, #0]
 8009b7e:	4605      	mov	r5, r0
 8009b80:	4639      	mov	r1, r7
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff fbbc 	bl	8009300 <_malloc_r>
 8009b88:	b948      	cbnz	r0, 8009b9e <__smakebuf_r+0x46>
 8009b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8e:	059a      	lsls	r2, r3, #22
 8009b90:	d4ee      	bmi.n	8009b70 <__smakebuf_r+0x18>
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	f043 0302 	orr.w	r3, r3, #2
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	e7e2      	b.n	8009b64 <__smakebuf_r+0xc>
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	6020      	str	r0, [r4, #0]
 8009ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bae:	b15b      	cbz	r3, 8009bc8 <__smakebuf_r+0x70>
 8009bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f000 f851 	bl	8009c5c <_isatty_r>
 8009bba:	b128      	cbz	r0, 8009bc8 <__smakebuf_r+0x70>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	431d      	orrs	r5, r3
 8009bcc:	81a5      	strh	r5, [r4, #12]
 8009bce:	e7cf      	b.n	8009b70 <__smakebuf_r+0x18>

08009bd0 <_putc_r>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	b118      	cbz	r0, 8009be2 <_putc_r+0x12>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <_putc_r+0x12>
 8009bde:	f7ff f913 	bl	8008e08 <__sinit>
 8009be2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009be4:	07d8      	lsls	r0, r3, #31
 8009be6:	d405      	bmi.n	8009bf4 <_putc_r+0x24>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	0599      	lsls	r1, r3, #22
 8009bec:	d402      	bmi.n	8009bf4 <_putc_r+0x24>
 8009bee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf0:	f7ff fb09 	bl	8009206 <__retarget_lock_acquire_recursive>
 8009bf4:	68a3      	ldr	r3, [r4, #8]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	60a3      	str	r3, [r4, #8]
 8009bfc:	da05      	bge.n	8009c0a <_putc_r+0x3a>
 8009bfe:	69a2      	ldr	r2, [r4, #24]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	db12      	blt.n	8009c2a <_putc_r+0x5a>
 8009c04:	b2eb      	uxtb	r3, r5
 8009c06:	2b0a      	cmp	r3, #10
 8009c08:	d00f      	beq.n	8009c2a <_putc_r+0x5a>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	701d      	strb	r5, [r3, #0]
 8009c12:	b2ed      	uxtb	r5, r5
 8009c14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c16:	07da      	lsls	r2, r3, #31
 8009c18:	d405      	bmi.n	8009c26 <_putc_r+0x56>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	059b      	lsls	r3, r3, #22
 8009c1e:	d402      	bmi.n	8009c26 <_putc_r+0x56>
 8009c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c22:	f7ff faf1 	bl	8009208 <__retarget_lock_release_recursive>
 8009c26:	4628      	mov	r0, r5
 8009c28:	bd70      	pop	{r4, r5, r6, pc}
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff f9db 	bl	8008fea <__swbuf_r>
 8009c34:	4605      	mov	r5, r0
 8009c36:	e7ed      	b.n	8009c14 <_putc_r+0x44>

08009c38 <_fstat_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d07      	ldr	r5, [pc, #28]	@ (8009c58 <_fstat_r+0x20>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	4611      	mov	r1, r2
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	f7f7 fffa 	bl	8001c3e <_fstat>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d102      	bne.n	8009c54 <_fstat_r+0x1c>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	b103      	cbz	r3, 8009c54 <_fstat_r+0x1c>
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	20001720 	.word	0x20001720

08009c5c <_isatty_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d06      	ldr	r5, [pc, #24]	@ (8009c78 <_isatty_r+0x1c>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	f7f7 fff9 	bl	8001c5e <_isatty>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_isatty_r+0x1a>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_isatty_r+0x1a>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	20001720 	.word	0x20001720

08009c7c <_sbrk_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	@ (8009c98 <_sbrk_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f8 f802 	bl	8001c90 <_sbrk>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_sbrk_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_sbrk_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20001720 	.word	0x20001720

08009c9c <_init>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr

08009ca8 <_fini>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr
