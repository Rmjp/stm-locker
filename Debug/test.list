
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e18  08004e18  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e20  08004e20  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e20  08004e20  00005e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e24  08004e24  00005e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  08004e90  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004e90  00006300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a7  00000000  00000000  00015360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00017708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a77  00000000  00000000  00018498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021189  00000000  00000000  00018f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106fb  00000000  00000000  0003a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f44  00000000  00000000  0004a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e6d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  0010e71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001126b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d44 	.word	0x08004d44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004d44 	.word	0x08004d44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f002 ff2f 	bl	8003410 <HAL_UART_Transmit>

  return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000120 	.word	0x20000120

080005c0 <main>:
  * @brief  The application entry point.
  * @retval int
  */
volatile int esp32_data_ready = 0;
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fc07 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f81a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f908 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f8e8 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8b6 	bl	8000744 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005d8:	f000 f874 	bl	80006c4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello \n");
 80005dc:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <main+0x38>)
 80005de:	f003 fd1b 	bl	8004018 <puts>

  while (1)
  {
    /* USER CODE END WHILE */

	  if (esp32_data_ready)
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <main+0x3c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0fb      	beq.n	80005e2 <main+0x22>
	      {
	          esp32_data_ready = 0;
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <main+0x3c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
	          // do the read
	          SlaveDataReady_Callback();
 80005f0:	f000 f95c 	bl	80008ac <SlaveDataReady_Callback>
	  if (esp32_data_ready)
 80005f4:	e7f5      	b.n	80005e2 <main+0x22>
 80005f6:	bf00      	nop
 80005f8:	08004d5c 	.word	0x08004d5c
 80005fc:	200001a8 	.word	0x200001a8

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	@ 0x58
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2244      	movs	r2, #68	@ 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fde2 	bl	80041d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000622:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000626:	f001 fd1f 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 f936 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fcfa 	bl	800202c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <SystemClock_Config+0xc0>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800063e:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <SystemClock_Config+0xc0>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000648:	2314      	movs	r3, #20
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000658:	2360      	movs	r3, #96	@ 0x60
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000668:	2318      	movs	r3, #24
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fd49 	bl	8002114 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000688:	f000 f90a 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f949 	bl	800293c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006b0:	f000 f8f6 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b4:	f002 fd5c 	bl	8003170 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b8:	bf00      	nop
 80006ba:	3758      	adds	r7, #88	@ 0x58
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	480e      	ldr	r0, [pc, #56]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000700:	f000 fff2 	bl	80016e8 <HAL_I2C_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 f8c9 	bl	80008a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000712:	f001 fbf3 	bl	8001efc <HAL_I2CEx_ConfigAnalogFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 f8c0 	bl	80008a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000724:	f001 fc35 	bl	8001f92 <HAL_I2CEx_ConfigDigitalFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 f8b7 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000084 	.word	0x20000084
 800073c:	40005400 	.word	0x40005400
 8000740:	10805d88 	.word	0x10805d88

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f002 fdf4 	bl	8003374 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f885 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000120 	.word	0x20000120
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_DMA_Init+0x38>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_DMA_Init+0x38>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2011      	movs	r0, #17
 80007c8:	f000 fc55 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007cc:	2011      	movs	r0, #17
 80007ce:	f000 fc6e 	bl	80010ae <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_GPIO_Init+0xb8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a27      	ldr	r2, [pc, #156]	@ (8000898 <MX_GPIO_Init+0xb8>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_GPIO_Init+0xb8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <MX_GPIO_Init+0xb8>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4816      	ldr	r0, [pc, #88]	@ (800089c <MX_GPIO_Init+0xbc>)
 8000844:	f000 ff20 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000848:	2301      	movs	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <MX_GPIO_Init+0xbc>)
 800085e:	f000 fda9 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <MX_GPIO_Init+0xbc>)
 800087a:	f000 fd9b 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2006      	movs	r0, #6
 8000884:	f000 fbf7 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000888:	2006      	movs	r0, #6
 800088a:	f000 fc10 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <SlaveDataReady_Callback>:
#define SLAVE1_ADDR_8BIT   (SLAVE1_ADDR_7BIT << 1)
#define SLAVE2_ADDR_7BIT   0x60
#define SLAVE2_ADDR_8BIT   (SLAVE2_ADDR_7BIT << 1)

void SlaveDataReady_Callback(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
    // Master reads 2 bytes from the slave, for example
    uint8_t rxBuffer[8] = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
    if (HAL_I2C_Master_Receive(&hi2c1, SLAVE1_ADDR_8BIT, rxBuffer, 4, 100) == HAL_OK)
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2304      	movs	r3, #4
 80008c2:	21c0      	movs	r1, #192	@ 0xc0
 80008c4:	4812      	ldr	r0, [pc, #72]	@ (8000910 <SlaveDataReady_Callback+0x64>)
 80008c6:	f000 ffab 	bl	8001820 <HAL_I2C_Master_Receive>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d117      	bne.n	8000900 <SlaveDataReady_Callback+0x54>
    {
        printf("Received from ESP32 1:");
 80008d0:	4810      	ldr	r0, [pc, #64]	@ (8000914 <SlaveDataReady_Callback+0x68>)
 80008d2:	f003 fb31 	bl	8003f38 <iprintf>
        for(int i=0; i<8; i++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e00a      	b.n	80008f2 <SlaveDataReady_Callback+0x46>
        	printf("0x%02X ", rxBuffer[i]);
 80008dc:	1d3a      	adds	r2, r7, #4
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	480c      	ldr	r0, [pc, #48]	@ (8000918 <SlaveDataReady_Callback+0x6c>)
 80008e8:	f003 fb26 	bl	8003f38 <iprintf>
        for(int i=0; i<8; i++){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	ddf1      	ble.n	80008dc <SlaveDataReady_Callback+0x30>
        }
        printf("\n");
 80008f8:	200a      	movs	r0, #10
 80008fa:	f003 fb2f 	bl	8003f5c <putchar>
    }
    else
    {
        printf("I2C read error ESP 1\n");
    }
}
 80008fe:	e002      	b.n	8000906 <SlaveDataReady_Callback+0x5a>
        printf("I2C read error ESP 1\n");
 8000900:	4806      	ldr	r0, [pc, #24]	@ (800091c <SlaveDataReady_Callback+0x70>)
 8000902:	f003 fb89 	bl	8004018 <puts>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000084 	.word	0x20000084
 8000914:	08004d64 	.word	0x08004d64
 8000918:	08004d7c 	.word	0x08004d7c
 800091c:	08004d84 	.word	0x08004d84

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	@ 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09e      	sub	sp, #120	@ 0x78
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2254      	movs	r2, #84	@ 0x54
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fc25 	bl	80041d8 <memset>
  if(hi2c->Instance==I2C1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a37      	ldr	r2, [pc, #220]	@ (8000a70 <HAL_I2C_MspInit+0x108>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d166      	bne.n	8000a66 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f9ed 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ff76 	bl	80008a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009cc:	23c0      	movs	r3, #192	@ 0xc0
 80009ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009e4:	4619      	mov	r1, r3
 80009e6:	4824      	ldr	r0, [pc, #144]	@ (8000a78 <HAL_I2C_MspInit+0x110>)
 80009e8:	f000 fce4 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <HAL_I2C_MspInit+0x10c>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a06:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <HAL_I2C_MspInit+0x118>)
 8000a08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a3a:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a3c:	f000 fb52 	bl	80010e4 <HAL_DMA_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 8000a46:	f7ff ff2b 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <HAL_I2C_MspInit+0x114>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	201f      	movs	r0, #31
 8000a5c:	f000 fb0b 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a60:	201f      	movs	r0, #31
 8000a62:	f000 fb24 	bl	80010ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3778      	adds	r7, #120	@ 0x78
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	200000d8 	.word	0x200000d8
 8000a80:	40020080 	.word	0x40020080

08000a84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09e      	sub	sp, #120	@ 0x78
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2254      	movs	r2, #84	@ 0x54
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fb97 	bl	80041d8 <memset>
  if(huart->Instance==USART2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a28      	ldr	r2, [pc, #160]	@ (8000b50 <HAL_UART_MspInit+0xcc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d148      	bne.n	8000b46 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 f95f 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f7ff fee8 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0xd0>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b00:	2304      	movs	r3, #4
 8000b02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f000 fc49 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b34:	2303      	movs	r3, #3
 8000b36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fc37 	bl	80013b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3778      	adds	r7, #120	@ 0x78
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f967 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <DMA1_Channel7_IRQHandler+0x10>)
 8000bbe:	f000 fb49 	bl	8001254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000d8 	.word	0x200000d8

08000bcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <I2C1_EV_IRQHandler+0x10>)
 8000bd2:	f000 ff1b 	bl	8001a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084

08000be0 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fd67 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d102      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	esp32_data_ready = 1;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
    }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200001a8 	.word	0x200001a8

08000c18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
  }

  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc95 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
  }
  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f003 faa6 	bl	8004274 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000c000 	.word	0x2000c000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200001ac 	.word	0x200001ac
 8000d5c:	20000300 	.word	0x20000300

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f003 fa65 	bl	8004280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fc03 	bl	80005c0 <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc8:	08004e28 	.word	0x08004e28
  ldr r2, =_sbss
 8000dcc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dd0:	20000300 	.word	0x20000300

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>

08000dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f93d 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f80e 	bl	8000e08 <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff fd92 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d023      	beq.n	8000e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_InitTick+0x70>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f949 	bl	80010ca <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f913 	bl	8001076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_InitTick+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e001      	b.n	8000e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200001b0 	.word	0x200001b0

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001b0 	.word	0x200001b0

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e098      	b.n	8001228 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001234 <HAL_DMA_Init+0x150>)
 80010fe:	429a      	cmp	r2, r3
 8001100:	d80f      	bhi.n	8001122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b4b      	ldr	r3, [pc, #300]	@ (8001238 <HAL_DMA_Init+0x154>)
 800110a:	4413      	add	r3, r2
 800110c:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <HAL_DMA_Init+0x158>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_DMA_Init+0x15c>)
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001120:	e00e      	b.n	8001140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b46      	ldr	r3, [pc, #280]	@ (8001244 <HAL_DMA_Init+0x160>)
 800112a:	4413      	add	r3, r2
 800112c:	4a43      	ldr	r2, [pc, #268]	@ (800123c <HAL_DMA_Init+0x158>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a42      	ldr	r2, [pc, #264]	@ (8001248 <HAL_DMA_Init+0x164>)
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800115a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800119a:	d039      	beq.n	8001210 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <HAL_DMA_Init+0x15c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d11a      	bne.n	80011dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011a6:	4b29      	ldr	r3, [pc, #164]	@ (800124c <HAL_DMA_Init+0x168>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f003 031c 	and.w	r3, r3, #28
 80011b2:	210f      	movs	r1, #15
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4924      	ldr	r1, [pc, #144]	@ (800124c <HAL_DMA_Init+0x168>)
 80011bc:	4013      	ands	r3, r2
 80011be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <HAL_DMA_Init+0x168>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011cc:	f003 031c 	and.w	r3, r3, #28
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	491d      	ldr	r1, [pc, #116]	@ (800124c <HAL_DMA_Init+0x168>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e019      	b.n	8001210 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_DMA_Init+0x16c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e4:	f003 031c 	and.w	r3, r3, #28
 80011e8:	210f      	movs	r1, #15
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4917      	ldr	r1, [pc, #92]	@ (8001250 <HAL_DMA_Init+0x16c>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_DMA_Init+0x16c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6859      	ldr	r1, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	4911      	ldr	r1, [pc, #68]	@ (8001250 <HAL_DMA_Init+0x16c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40020407 	.word	0x40020407
 8001238:	bffdfff8 	.word	0xbffdfff8
 800123c:	cccccccd 	.word	0xcccccccd
 8001240:	40020000 	.word	0x40020000
 8001244:	bffdfbf8 	.word	0xbffdfbf8
 8001248:	40020400 	.word	0x40020400
 800124c:	400200a8 	.word	0x400200a8
 8001250:	400204a8 	.word	0x400204a8

08001254 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001270:	f003 031c 	and.w	r3, r3, #28
 8001274:	2204      	movs	r2, #4
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d026      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	d021      	beq.n	80012ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f003 021c 	and.w	r2, r3, #28
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	2104      	movs	r1, #4
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d071      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012cc:	e06c      	b.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f003 031c 	and.w	r3, r3, #28
 80012d6:	2202      	movs	r2, #2
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d02e      	beq.n	8001340 <HAL_DMA_IRQHandler+0xec>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d029      	beq.n	8001340 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10b      	bne.n	8001312 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 020a 	bic.w	r2, r2, #10
 8001308:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f003 021c 	and.w	r2, r3, #28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	2102      	movs	r1, #2
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001332:	2b00      	cmp	r3, #0
 8001334:	d038      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800133e:	e033      	b.n	80013a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	f003 031c 	and.w	r3, r3, #28
 8001348:	2208      	movs	r2, #8
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d02a      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d025      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020e 	bic.w	r2, r2, #14
 800136c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
}
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e148      	b.n	8001656 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 813a 	beq.w	8001650 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x40>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8094 	beq.w	8001650 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b52      	ldr	r3, [pc, #328]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152c:	4a51      	ldr	r2, [pc, #324]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6613      	str	r3, [r2, #96]	@ 0x60
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001540:	4a4d      	ldr	r2, [pc, #308]	@ (8001678 <HAL_GPIO_Init+0x2c4>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800156a:	d00d      	beq.n	8001588 <HAL_GPIO_Init+0x1d4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a43      	ldr	r2, [pc, #268]	@ (800167c <HAL_GPIO_Init+0x2c8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d007      	beq.n	8001584 <HAL_GPIO_Init+0x1d0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a42      	ldr	r2, [pc, #264]	@ (8001680 <HAL_GPIO_Init+0x2cc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_GPIO_Init+0x1cc>
 800157c:	2302      	movs	r3, #2
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001580:	2307      	movs	r3, #7
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001588:	2300      	movs	r3, #0
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159a:	4937      	ldr	r1, [pc, #220]	@ (8001678 <HAL_GPIO_Init+0x2c4>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a8:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f6:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001620:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	f47f aeaf 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa8a 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08d      	b.n	8001816 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff f92a 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2224      	movs	r2, #36	@ 0x24
 8001718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	e006      	b.n	8001770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800176e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d108      	bne.n	800178a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	e007      	b.n	800179a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001798:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69d9      	ldr	r1, [r3, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	817b      	strh	r3, [r7, #10]
 8001830:	4613      	mov	r3, r2
 8001832:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b20      	cmp	r3, #32
 800183e:	f040 80db 	bne.w	80019f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2C_Master_Receive+0x30>
 800184c:	2302      	movs	r3, #2
 800184e:	e0d4      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001858:	f7ff fb26 	bl	8000ea8 <HAL_GetTick>
 800185c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2319      	movs	r3, #25
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f90c 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0bf      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2222      	movs	r2, #34	@ 0x22
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2210      	movs	r2, #16
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2bff      	cmp	r3, #255	@ 0xff
 80018aa:	d90e      	bls.n	80018ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	8979      	ldrh	r1, [r7, #10]
 80018ba:	4b52      	ldr	r3, [pc, #328]	@ (8001a04 <HAL_I2C_Master_Receive+0x1e4>)
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fae8 	bl	8001e98 <I2C_TransferConfig>
 80018c8:	e06d      	b.n	80019a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	8979      	ldrh	r1, [r7, #10]
 80018dc:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <HAL_I2C_Master_Receive+0x1e4>)
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fad7 	bl	8001e98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018ea:	e05c      	b.n	80019a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	6a39      	ldr	r1, [r7, #32]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f965 	bl	8001bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e07c      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d034      	beq.n	80019a6 <HAL_I2C_Master_Receive+0x186>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d130      	bne.n	80019a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2200      	movs	r2, #0
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f89a 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e04d      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	2bff      	cmp	r3, #255	@ 0xff
 8001966:	d90e      	bls.n	8001986 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	22ff      	movs	r2, #255	@ 0xff
 800196c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	b2da      	uxtb	r2, r3
 8001974:	8979      	ldrh	r1, [r7, #10]
 8001976:	2300      	movs	r3, #0
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fa8a 	bl	8001e98 <I2C_TransferConfig>
 8001984:	e00f      	b.n	80019a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001994:	b2da      	uxtb	r2, r3
 8001996:	8979      	ldrh	r1, [r7, #10]
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fa79 	bl	8001e98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d19d      	bne.n	80018ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	6a39      	ldr	r1, [r7, #32]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f8c0 	bl	8001b3a <I2C_WaitOnSTOPFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e01a      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2220      	movs	r2, #32
 80019ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_I2C_Master_Receive+0x1e8>)
 80019d8:	400b      	ands	r3, r1
 80019da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	80002400 	.word	0x80002400
 8001a08:	fe00e800 	.word	0xfe00e800

08001a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d007      	beq.n	8001a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	619a      	str	r2, [r3, #24]
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a98:	e03b      	b.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f91a 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e041      	b.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d02d      	beq.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab6:	f7ff f9f7 	bl	8000ea8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d122      	bne.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d113      	bne.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f043 0220 	orr.w	r2, r3, #32
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d0b4      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b46:	e02f      	b.n	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8c3 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e02d      	b.n	8001bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5c:	f7ff f9a4 	bl	8000ea8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d302      	bcc.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11a      	bne.n	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d013      	beq.n	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e007      	b.n	8001bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d1c8      	bne.n	8001b48 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001bd0:	e071      	b.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f87e 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d13b      	bne.n	8001c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d138      	bne.n	8001c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d105      	bne.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d121      	bne.n	8001c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2210      	movs	r2, #16
 8001c28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2220      	movs	r2, #32
 8001c36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001c44:	400b      	ands	r3, r1
 8001c46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
 8001c64:	e002      	b.n	8001c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001c6c:	f7ff f91c 	bl	8000ea8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d302      	bcc.n	8001c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d116      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00f      	beq.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d002      	beq.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d083      	beq.n	8001bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	fe00e800 	.word	0xfe00e800

08001cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d068      	beq.n	8001dd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d0c:	e049      	b.n	8001da2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d045      	beq.n	8001da2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f8c7 	bl	8000ea8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_IsErrorOccurred+0x54>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13a      	bne.n	8001da2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d4e:	d121      	bne.n	8001d94 <I2C_IsErrorOccurred+0xbc>
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d56:	d01d      	beq.n	8001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d58:	7cfb      	ldrb	r3, [r7, #19]
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d01a      	beq.n	8001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d6e:	f7ff f89b 	bl	8000ea8 <HAL_GetTick>
 8001d72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d74:	e00e      	b.n	8001d94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d76:	f7ff f897 	bl	8000ea8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b19      	cmp	r3, #25
 8001d82:	d907      	bls.n	8001d94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d92:	e006      	b.n	8001da2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d1e9      	bne.n	8001d76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d003      	beq.n	8001db8 <I2C_IsErrorOccurred+0xe0>
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0aa      	beq.n	8001d0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fdf7 	bl	8001a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <I2C_IsErrorOccurred+0x1bc>)
 8001e5e:	400b      	ands	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	fe00e800 	.word	0xfe00e800

08001e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	817b      	strh	r3, [r7, #10]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	0d5b      	lsrs	r3, r3, #21
 8001ed2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <I2C_TransferConfig+0x60>)
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	43db      	mvns	r3, r3
 8001edc:	ea02 0103 	and.w	r1, r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	03ff63ff 	.word	0x03ff63ff

08001efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d138      	bne.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e032      	b.n	8001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d139      	bne.n	800201c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e033      	b.n	800201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2224      	movs	r2, #36	@ 0x24
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fe4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000

0800204c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <HAL_PWREx_GetVoltageRange+0x18>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002076:	d130      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d038      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800208e:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002096:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2232      	movs	r2, #50	@ 0x32
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ac:	e002      	b.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c0:	d102      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f2      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d110      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e00f      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d007      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e8:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020f0:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f000 bc02 	b.w	800292c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002128:	4b96      	ldr	r3, [pc, #600]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002132:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80e4 	beq.w	8002312 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_RCC_OscConfig+0x4c>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	f040 808b 	bne.w	800226e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 8087 	bne.w	800226e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002160:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x64>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e3d9      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4b81      	ldr	r3, [pc, #516]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_RCC_OscConfig+0x7e>
 8002188:	4b7e      	ldr	r3, [pc, #504]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002190:	e005      	b.n	800219e <HAL_RCC_OscConfig+0x8a>
 8002192:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219e:	4293      	cmp	r3, r2
 80021a0:	d223      	bcs.n	80021ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fd8c 	bl	8002cc4 <RCC_SetFlashLatencyFromMSIRange>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e3ba      	b.n	800292c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a72      	ldr	r2, [pc, #456]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b70      	ldr	r3, [pc, #448]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	496d      	ldr	r1, [pc, #436]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	4968      	ldr	r1, [pc, #416]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e025      	b.n	8002236 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ea:	4b66      	ldr	r3, [pc, #408]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a65      	ldr	r2, [pc, #404]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b63      	ldr	r3, [pc, #396]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4960      	ldr	r1, [pc, #384]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002208:	4b5e      	ldr	r3, [pc, #376]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	495b      	ldr	r1, [pc, #364]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fd4c 	bl	8002cc4 <RCC_SetFlashLatencyFromMSIRange>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e37a      	b.n	800292c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002236:	f000 fc81 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b51      	ldr	r3, [pc, #324]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4950      	ldr	r1, [pc, #320]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a4e      	ldr	r2, [pc, #312]	@ (800238c <HAL_RCC_OscConfig+0x278>)
 8002254:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002256:	4b4e      	ldr	r3, [pc, #312]	@ (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fdd4 	bl	8000e08 <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d052      	beq.n	8002310 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	e35e      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d032      	beq.n	80022dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002276:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a42      	ldr	r2, [pc, #264]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002282:	f7fe fe11 	bl	8000ea8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228a:	f7fe fe0d 	bl	8000ea8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e347      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229c:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a35      	ldr	r2, [pc, #212]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4930      	ldr	r1, [pc, #192]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	492b      	ldr	r1, [pc, #172]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
 80022da:	e01a      	b.n	8002312 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022dc:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fdde 	bl	8000ea8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f0:	f7fe fdda 	bl	8000ea8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e314      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1dc>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d073      	beq.n	8002406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d005      	beq.n	8002330 <HAL_RCC_OscConfig+0x21c>
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d10e      	bne.n	8002348 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d063      	beq.n	8002404 <HAL_RCC_OscConfig+0x2f0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d15f      	bne.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e2f1      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x24c>
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0b      	ldr	r2, [pc, #44]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e025      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002368:	d114      	bne.n	8002394 <HAL_RCC_OscConfig+0x280>
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a02      	ldr	r2, [pc, #8]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e013      	b.n	80023ac <HAL_RCC_OscConfig+0x298>
 8002384:	40021000 	.word	0x40021000
 8002388:	08004d9c 	.word	0x08004d9c
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004
 8002394:	4ba0      	ldr	r3, [pc, #640]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a9f      	ldr	r2, [pc, #636]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd78 	bl	8000ea8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fd74 	bl	8000ea8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e2ae      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	4b92      	ldr	r3, [pc, #584]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x2a8>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd64 	bl	8000ea8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fd60 	bl	8000ea8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e29a      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f6:	4b88      	ldr	r3, [pc, #544]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2d0>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d060      	beq.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x310>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d119      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d116      	bne.n	8002452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	4b7c      	ldr	r3, [pc, #496]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x328>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e277      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b76      	ldr	r3, [pc, #472]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4973      	ldr	r1, [pc, #460]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	e040      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d023      	beq.n	80024a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245a:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe fd1f 	bl	8000ea8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fd1b 	bl	8000ea8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e255      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b65      	ldr	r3, [pc, #404]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b62      	ldr	r3, [pc, #392]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	495f      	ldr	r1, [pc, #380]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e018      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fcfb 	bl	8000ea8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fcf7 	bl	8000ea8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e231      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c8:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03c      	beq.n	800255a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fcd6 	bl	8000ea8 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fcd2 	bl	8000ea8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e20c      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCC_OscConfig+0x3ec>
 8002520:	e01b      	b.n	800255a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002528:	4a3b      	ldr	r2, [pc, #236]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fcb9 	bl	8000ea8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fcb5 	bl	8000ea8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1ef      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80a6 	beq.w	80026b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	4a26      	ldr	r2, [pc, #152]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002582:	6593      	str	r3, [r2, #88]	@ 0x58
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002590:	2301      	movs	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002594:	4b21      	ldr	r3, [pc, #132]	@ (800261c <HAL_RCC_OscConfig+0x508>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d118      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_RCC_OscConfig+0x508>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fc7c 	bl	8000ea8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b4:	f7fe fc78 	bl	8000ea8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1b2      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_RCC_OscConfig+0x508>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_RCC_OscConfig+0x4d8>
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ea:	e029      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_OscConfig+0x50c>
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a07      	ldr	r2, [pc, #28]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	4a03      	ldr	r2, [pc, #12]	@ (8002618 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x52c>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	4b9a      	ldr	r3, [pc, #616]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	4a99      	ldr	r2, [pc, #612]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002630:	4b96      	ldr	r3, [pc, #600]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a95      	ldr	r2, [pc, #596]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fc2e 	bl	8000ea8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe fc2a 	bl	8000ea8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e162      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4b89      	ldr	r3, [pc, #548]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ed      	beq.n	8002650 <HAL_RCC_OscConfig+0x53c>
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fc17 	bl	8000ea8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fc13 	bl	8000ea8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e14b      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002694:	4b7d      	ldr	r3, [pc, #500]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ed      	bne.n	800267e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b78      	ldr	r3, [pc, #480]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	4a77      	ldr	r2, [pc, #476]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80026ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03c      	beq.n	800273a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01c      	beq.n	8002702 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c8:	4b70      	ldr	r3, [pc, #448]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ce:	4a6f      	ldr	r2, [pc, #444]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fbe6 	bl	8000ea8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e0:	f7fe fbe2 	bl	8000ea8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e11c      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f2:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80026f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x5cc>
 8002700:	e01b      	b.n	800273a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002702:	4b62      	ldr	r3, [pc, #392]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002704:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002708:	4a60      	ldr	r2, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fbc9 	bl	8000ea8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271a:	f7fe fbc5 	bl	8000ea8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0ff      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800272c:	4b57      	ldr	r3, [pc, #348]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800272e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80f3 	beq.w	800292a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 80c9 	bne.w	80028e0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800274e:	4b4f      	ldr	r3, [pc, #316]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	429a      	cmp	r2, r3
 8002760:	d12c      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	3b01      	subs	r3, #1
 800276e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d123      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d11b      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d113      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d109      	bne.n	80027bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d06b      	beq.n	8002894 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d062      	beq.n	8002888 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c2:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0ac      	b.n	800292c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d2:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2d      	ldr	r2, [pc, #180]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80027d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027de:	f7fe fb63 	bl	8000ea8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fb5f 	bl	8000ea8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e099      	b.n	800292c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCC_OscConfig+0x77c>)
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002814:	3a01      	subs	r2, #1
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800281e:	0212      	lsls	r2, r2, #8
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002826:	0852      	lsrs	r2, r2, #1
 8002828:	3a01      	subs	r2, #1
 800282a:	0552      	lsls	r2, r2, #21
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002832:	0852      	lsrs	r2, r2, #1
 8002834:	3a01      	subs	r2, #1
 8002836:	0652      	lsls	r2, r2, #25
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800283e:	06d2      	lsls	r2, r2, #27
 8002840:	430a      	orrs	r2, r1
 8002842:	4912      	ldr	r1, [pc, #72]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002844:	4313      	orrs	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a0c      	ldr	r2, [pc, #48]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002860:	f7fe fb22 	bl	8000ea8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fb1e 	bl	8000ea8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e058      	b.n	800292c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_OscConfig+0x778>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002886:	e050      	b.n	800292a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04f      	b.n	800292c <HAL_RCC_OscConfig+0x818>
 800288c:	40021000 	.word	0x40021000
 8002890:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d144      	bne.n	800292a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a0:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ac:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a20      	ldr	r2, [pc, #128]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b8:	f7fe faf6 	bl	8000ea8 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe faf2 	bl	8000ea8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e02c      	b.n	800292c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x7ac>
 80028de:	e024      	b.n	800292a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d01f      	beq.n	8002926 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fad9 	bl	8000ea8 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fad5 	bl	8000ea8 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e00f      	b.n	800292c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290c:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4905      	ldr	r1, [pc, #20]	@ (8002934 <HAL_RCC_OscConfig+0x820>)
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x824>)
 8002920:	4013      	ands	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
 8002924:	e001      	b.n	800292a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	feeefffc 	.word	0xfeeefffc

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0e7      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d910      	bls.n	8002980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b72      	ldr	r3, [pc, #456]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	4970      	ldr	r1, [pc, #448]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cf      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b66      	ldr	r3, [pc, #408]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002998:	429a      	cmp	r2, r3
 800299a:	d908      	bls.n	80029ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4960      	ldr	r1, [pc, #384]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d04c      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d121      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a6      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b54      	ldr	r3, [pc, #336]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e09a      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e08e      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a02:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e086      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b46      	ldr	r3, [pc, #280]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4943      	ldr	r1, [pc, #268]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe fa40 	bl	8000ea8 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe fa3c 	bl	8000ea8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e06e      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b3a      	ldr	r3, [pc, #232]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d208      	bcs.n	8002a82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	492b      	ldr	r1, [pc, #172]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a82:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d210      	bcs.n	8002ab2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 0207 	bic.w	r2, r3, #7
 8002a98:	4923      	ldr	r1, [pc, #140]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa0:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e036      	b.n	8002b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4918      	ldr	r1, [pc, #96]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002adc:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4910      	ldr	r1, [pc, #64]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af0:	f000 f824 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	490b      	ldr	r1, [pc, #44]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f4>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b10:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1fc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f977 	bl	8000e08 <HAL_InitTick>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08004d9c 	.word	0x08004d9c
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	@ 0x24
 8002b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b54:	4b3b      	ldr	r3, [pc, #236]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d121      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d11e      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b70:	4b34      	ldr	r3, [pc, #208]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b7c:	4b31      	ldr	r3, [pc, #196]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b98:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d102      	bne.n	8002bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	e004      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d134      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d003      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0xac>
 8002be0:	e005      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002be4:	617b      	str	r3, [r7, #20]
      break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bea:	617b      	str	r3, [r7, #20]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	617b      	str	r3, [r7, #20]
      break;
 8002bf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	3301      	adds	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	fb03 f202 	mul.w	r2, r3, r2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	0e5b      	lsrs	r3, r3, #25
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	3301      	adds	r3, #1
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c34:	69bb      	ldr	r3, [r7, #24]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08004db4 	.word	0x08004db4
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4904      	ldr	r1, [pc, #16]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08004dac 	.word	0x08004dac

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c9c:	f7ff ffda 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4904      	ldr	r1, [pc, #16]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08004dac 	.word	0x08004dac

08002cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cdc:	f7ff f9b6 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002ce0:	6178      	str	r0, [r7, #20]
 8002ce2:	e014      	b.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf0:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cfc:	f7ff f9a6 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002d00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a1d      	ldr	r2, [pc, #116]	@ (8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d14:	d10b      	bne.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b80      	cmp	r3, #128	@ 0x80
 8002d1a:	d919      	bls.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d20:	d902      	bls.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d22:	2302      	movs	r3, #2
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e013      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d28:	2301      	movs	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e010      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b80      	cmp	r3, #128	@ 0x80
 8002d32:	d902      	bls.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d34:	2303      	movs	r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e00a      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d102      	bne.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d40:	2302      	movs	r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e004      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b70      	cmp	r3, #112	@ 0x70
 8002d4a:	d101      	bne.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 0207 	bic.w	r2, r3, #7
 8002d58:	4909      	ldr	r1, [pc, #36]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002da8:	d01a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002daa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dae:	d814      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002db8:	d10f      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dba:	4b5d      	ldr	r3, [pc, #372]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc6:	e00c      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f9de 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd8:	e003      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de8:	4b51      	ldr	r3, [pc, #324]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	494e      	ldr	r1, [pc, #312]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dfe:	e001      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 809e 	beq.w	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e16:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b40      	ldr	r3, [pc, #256]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	4a3f      	ldr	r2, [pc, #252]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a39      	ldr	r2, [pc, #228]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e54:	f7fe f828 	bl	8000ea8 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5a:	e009      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7fe f824 	bl	8000ea8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e6e:	e005      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e70:	4b30      	ldr	r3, [pc, #192]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d15a      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01e      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e9e:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eaa:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eba:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fd ffe4 	bl	8000ea8 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	e00b      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd ffe0 	bl	8000ea8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d902      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	74fb      	strb	r3, [r7, #19]
            break;
 8002efa:	e006      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ec      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f10:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1e:	4904      	ldr	r1, [pc, #16]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f26:	e009      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
 8002f2c:	e006      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3c:	7c7b      	ldrb	r3, [r7, #17]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b8a      	ldr	r3, [pc, #552]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	4a89      	ldr	r2, [pc, #548]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f5a:	4b84      	ldr	r3, [pc, #528]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	f023 0203 	bic.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4980      	ldr	r1, [pc, #512]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 020c 	bic.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	4978      	ldr	r1, [pc, #480]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f9e:	4b73      	ldr	r3, [pc, #460]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	496f      	ldr	r1, [pc, #444]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	4967      	ldr	r1, [pc, #412]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fe2:	4b62      	ldr	r3, [pc, #392]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	495e      	ldr	r1, [pc, #376]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003004:	4b59      	ldr	r3, [pc, #356]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	4956      	ldr	r1, [pc, #344]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003026:	4b51      	ldr	r3, [pc, #324]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	494d      	ldr	r1, [pc, #308]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d028      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003048:	4b48      	ldr	r3, [pc, #288]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4945      	ldr	r1, [pc, #276]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003066:	d106      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e011      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307e:	d10c      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f882 	bl	8003190 <RCCEx_PLLSAI1_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b4:	492d      	ldr	r1, [pc, #180]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c6:	4b29      	ldr	r3, [pc, #164]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a28      	ldr	r2, [pc, #160]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d0:	60d3      	str	r3, [r2, #12]
 80030d2:	e011      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f853 	bl	8003190 <RCCEx_PLLSAI1_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01c      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003112:	4916      	ldr	r1, [pc, #88]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003122:	d10c      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f830 	bl	8003190 <RCCEx_PLLSAI1_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	4904      	ldr	r1, [pc, #16]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003160:	7cbb      	ldrb	r3, [r7, #18]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a04      	ldr	r2, [pc, #16]	@ (800318c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000

08003190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319e:	4b74      	ldr	r3, [pc, #464]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031aa:	4b71      	ldr	r3, [pc, #452]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d10d      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
       ||
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
       ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d047      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	e044      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d018      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x86>
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d825      	bhi.n	8003234 <RCCEx_PLLSAI1_Config+0xa4>
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d002      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0x62>
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d009      	beq.n	8003204 <RCCEx_PLLSAI1_Config+0x74>
 80031f0:	e020      	b.n	8003234 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11d      	bne.n	800323a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003202:	e01a      	b.n	800323a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003204:	4b5a      	ldr	r3, [pc, #360]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003214:	e013      	b.n	800323e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003216:	4b56      	ldr	r3, [pc, #344]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003222:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003232:	e006      	b.n	8003242 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e004      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003242:	bf00      	nop
    }

    if(status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800324a:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	430b      	orrs	r3, r1
 8003260:	4943      	ldr	r1, [pc, #268]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d17c      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800326c:	4b40      	ldr	r3, [pc, #256]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3f      	ldr	r2, [pc, #252]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003272:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003278:	f7fd fe16 	bl	8000ea8 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327e:	e009      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003280:	f7fd fe12 	bl	8000ea8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	73fb      	strb	r3, [r7, #15]
        break;
 8003292:	e005      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003294:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ef      	bne.n	8003280 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d15f      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d110      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ac:	4b30      	ldr	r3, [pc, #192]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	0211      	lsls	r1, r2, #8
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	06d2      	lsls	r2, r2, #27
 80032c4:	430a      	orrs	r2, r1
 80032c6:	492a      	ldr	r1, [pc, #168]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	610b      	str	r3, [r1, #16]
 80032cc:	e027      	b.n	800331e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d112      	bne.n	80032fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d4:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6892      	ldr	r2, [r2, #8]
 80032e4:	0211      	lsls	r1, r2, #8
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6912      	ldr	r2, [r2, #16]
 80032ea:	0852      	lsrs	r2, r2, #1
 80032ec:	3a01      	subs	r2, #1
 80032ee:	0552      	lsls	r2, r2, #21
 80032f0:	430a      	orrs	r2, r1
 80032f2:	491f      	ldr	r1, [pc, #124]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	610b      	str	r3, [r1, #16]
 80032f8:	e011      	b.n	800331e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003302:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	0211      	lsls	r1, r2, #8
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6952      	ldr	r2, [r2, #20]
 8003310:	0852      	lsrs	r2, r2, #1
 8003312:	3a01      	subs	r2, #1
 8003314:	0652      	lsls	r2, r2, #25
 8003316:	430a      	orrs	r2, r1
 8003318:	4915      	ldr	r1, [pc, #84]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800331e:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003328:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fd fdbd 	bl	8000ea8 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003330:	e009      	b.n	8003346 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003332:	f7fd fdb9 	bl	8000ea8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d902      	bls.n	8003346 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	73fb      	strb	r3, [r7, #15]
          break;
 8003344:	e005      	b.n	8003352 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0ef      	beq.n	8003332 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	4903      	ldr	r1, [pc, #12]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e040      	b.n	8003408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fb74 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fade 	bl	800397c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8af 	bl	8003524 <UART_SetConfig>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01b      	b.n	8003408 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb5d 	bl	8003ac0 <UART_CheckIdleState>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003424:	2b20      	cmp	r3, #32
 8003426:	d177      	bne.n	8003518 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Transmit+0x24>
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e070      	b.n	800351a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2221      	movs	r2, #33	@ 0x21
 8003444:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003446:	f7fd fd2f 	bl	8000ea8 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003464:	d108      	bne.n	8003478 <HAL_UART_Transmit+0x68>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003480:	e02f      	b.n	80034e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fbbf 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e03b      	b.n	800351a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	b292      	uxth	r2, r2
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3302      	adds	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e007      	b.n	80034d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1c9      	bne.n	8003482 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2140      	movs	r1, #64	@ 0x40
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fb89 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e005      	b.n	800351a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003528:	b08a      	sub	sp, #40	@ 0x28
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4313      	orrs	r3, r2
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4bb4      	ldr	r3, [pc, #720]	@ (8003824 <UART_SetConfig+0x300>)
 8003554:	4013      	ands	r3, r2
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800355c:	430b      	orrs	r3, r1
 800355e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4aa9      	ldr	r2, [pc, #676]	@ (8003828 <UART_SetConfig+0x304>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358c:	4313      	orrs	r3, r2
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4aa0      	ldr	r2, [pc, #640]	@ (800382c <UART_SetConfig+0x308>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d126      	bne.n	80035fc <UART_SetConfig+0xd8>
 80035ae:	4ba0      	ldr	r3, [pc, #640]	@ (8003830 <UART_SetConfig+0x30c>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d81b      	bhi.n	80035f4 <UART_SetConfig+0xd0>
 80035bc:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <UART_SetConfig+0xa0>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035e5 	.word	0x080035e5
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035da:	e080      	b.n	80036de <UART_SetConfig+0x1ba>
 80035dc:	2302      	movs	r3, #2
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e2:	e07c      	b.n	80036de <UART_SetConfig+0x1ba>
 80035e4:	2304      	movs	r3, #4
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ea:	e078      	b.n	80036de <UART_SetConfig+0x1ba>
 80035ec:	2308      	movs	r3, #8
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f2:	e074      	b.n	80036de <UART_SetConfig+0x1ba>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e070      	b.n	80036de <UART_SetConfig+0x1ba>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8c      	ldr	r2, [pc, #560]	@ (8003834 <UART_SetConfig+0x310>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d138      	bne.n	8003678 <UART_SetConfig+0x154>
 8003606:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <UART_SetConfig+0x30c>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d82d      	bhi.n	8003670 <UART_SetConfig+0x14c>
 8003614:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <UART_SetConfig+0xf8>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003651 	.word	0x08003651
 8003620:	08003671 	.word	0x08003671
 8003624:	08003671 	.word	0x08003671
 8003628:	08003671 	.word	0x08003671
 800362c:	08003661 	.word	0x08003661
 8003630:	08003671 	.word	0x08003671
 8003634:	08003671 	.word	0x08003671
 8003638:	08003671 	.word	0x08003671
 800363c:	08003659 	.word	0x08003659
 8003640:	08003671 	.word	0x08003671
 8003644:	08003671 	.word	0x08003671
 8003648:	08003671 	.word	0x08003671
 800364c:	08003669 	.word	0x08003669
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003656:	e042      	b.n	80036de <UART_SetConfig+0x1ba>
 8003658:	2302      	movs	r3, #2
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365e:	e03e      	b.n	80036de <UART_SetConfig+0x1ba>
 8003660:	2304      	movs	r3, #4
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e03a      	b.n	80036de <UART_SetConfig+0x1ba>
 8003668:	2308      	movs	r3, #8
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e036      	b.n	80036de <UART_SetConfig+0x1ba>
 8003670:	2310      	movs	r3, #16
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e032      	b.n	80036de <UART_SetConfig+0x1ba>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6a      	ldr	r2, [pc, #424]	@ (8003828 <UART_SetConfig+0x304>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d12a      	bne.n	80036d8 <UART_SetConfig+0x1b4>
 8003682:	4b6b      	ldr	r3, [pc, #428]	@ (8003830 <UART_SetConfig+0x30c>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800368c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003690:	d01a      	beq.n	80036c8 <UART_SetConfig+0x1a4>
 8003692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003696:	d81b      	bhi.n	80036d0 <UART_SetConfig+0x1ac>
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800369c:	d00c      	beq.n	80036b8 <UART_SetConfig+0x194>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a2:	d815      	bhi.n	80036d0 <UART_SetConfig+0x1ac>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <UART_SetConfig+0x18c>
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ac:	d008      	beq.n	80036c0 <UART_SetConfig+0x19c>
 80036ae:	e00f      	b.n	80036d0 <UART_SetConfig+0x1ac>
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b6:	e012      	b.n	80036de <UART_SetConfig+0x1ba>
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036be:	e00e      	b.n	80036de <UART_SetConfig+0x1ba>
 80036c0:	2304      	movs	r3, #4
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c6:	e00a      	b.n	80036de <UART_SetConfig+0x1ba>
 80036c8:	2308      	movs	r3, #8
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ce:	e006      	b.n	80036de <UART_SetConfig+0x1ba>
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d6:	e002      	b.n	80036de <UART_SetConfig+0x1ba>
 80036d8:	2310      	movs	r3, #16
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a51      	ldr	r2, [pc, #324]	@ (8003828 <UART_SetConfig+0x304>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d17a      	bne.n	80037de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d824      	bhi.n	800373a <UART_SetConfig+0x216>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <UART_SetConfig+0x1d4>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	0800373b 	.word	0x0800373b
 8003700:	08003725 	.word	0x08003725
 8003704:	0800373b 	.word	0x0800373b
 8003708:	0800372b 	.word	0x0800372b
 800370c:	0800373b 	.word	0x0800373b
 8003710:	0800373b 	.word	0x0800373b
 8003714:	0800373b 	.word	0x0800373b
 8003718:	08003733 	.word	0x08003733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7ff faa6 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8003720:	61f8      	str	r0, [r7, #28]
        break;
 8003722:	e010      	b.n	8003746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003724:	4b44      	ldr	r3, [pc, #272]	@ (8003838 <UART_SetConfig+0x314>)
 8003726:	61fb      	str	r3, [r7, #28]
        break;
 8003728:	e00d      	b.n	8003746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372a:	f7ff fa07 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 800372e:	61f8      	str	r0, [r7, #28]
        break;
 8003730:	e009      	b.n	8003746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003736:	61fb      	str	r3, [r7, #28]
        break;
 8003738:	e005      	b.n	8003746 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8107 	beq.w	800395c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	429a      	cmp	r2, r3
 800375c:	d305      	bcc.n	800376a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	429a      	cmp	r2, r3
 8003768:	d903      	bls.n	8003772 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003770:	e0f4      	b.n	800395c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2200      	movs	r2, #0
 8003776:	461c      	mov	r4, r3
 8003778:	4615      	mov	r5, r2
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	022b      	lsls	r3, r5, #8
 8003784:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003788:	0222      	lsls	r2, r4, #8
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	6849      	ldr	r1, [r1, #4]
 800378e:	0849      	lsrs	r1, r1, #1
 8003790:	2000      	movs	r0, #0
 8003792:	4688      	mov	r8, r1
 8003794:	4681      	mov	r9, r0
 8003796:	eb12 0a08 	adds.w	sl, r2, r8
 800379a:	eb43 0b09 	adc.w	fp, r3, r9
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ac:	4650      	mov	r0, sl
 80037ae:	4659      	mov	r1, fp
 80037b0:	f7fc fd5e 	bl	8000270 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c2:	d308      	bcc.n	80037d6 <UART_SetConfig+0x2b2>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ca:	d204      	bcs.n	80037d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e0c2      	b.n	800395c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037dc:	e0be      	b.n	800395c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e6:	d16a      	bne.n	80038be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80037e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d834      	bhi.n	800385a <UART_SetConfig+0x336>
 80037f0:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <UART_SetConfig+0x2d4>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	08003845 	.word	0x08003845
 8003804:	0800385b 	.word	0x0800385b
 8003808:	0800384b 	.word	0x0800384b
 800380c:	0800385b 	.word	0x0800385b
 8003810:	0800385b 	.word	0x0800385b
 8003814:	0800385b 	.word	0x0800385b
 8003818:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7ff fa26 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8003820:	61f8      	str	r0, [r7, #28]
        break;
 8003822:	e020      	b.n	8003866 <UART_SetConfig+0x342>
 8003824:	efff69f3 	.word	0xefff69f3
 8003828:	40008000 	.word	0x40008000
 800382c:	40013800 	.word	0x40013800
 8003830:	40021000 	.word	0x40021000
 8003834:	40004400 	.word	0x40004400
 8003838:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7ff fa2c 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8003840:	61f8      	str	r0, [r7, #28]
        break;
 8003842:	e010      	b.n	8003866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b4c      	ldr	r3, [pc, #304]	@ (8003978 <UART_SetConfig+0x454>)
 8003846:	61fb      	str	r3, [r7, #28]
        break;
 8003848:	e00d      	b.n	8003866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7ff f977 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 800384e:	61f8      	str	r0, [r7, #28]
        break;
 8003850:	e009      	b.n	8003866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e005      	b.n	8003866 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d077      	beq.n	800395c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005a      	lsls	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d916      	bls.n	80038b6 <UART_SetConfig+0x392>
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388e:	d212      	bcs.n	80038b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f023 030f 	bic.w	r3, r3, #15
 8003898:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	8afb      	ldrh	r3, [r7, #22]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	8afa      	ldrh	r2, [r7, #22]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	e052      	b.n	800395c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038bc:	e04e      	b.n	800395c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d827      	bhi.n	8003916 <UART_SetConfig+0x3f2>
 80038c6:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <UART_SetConfig+0x3a8>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003917 	.word	0x08003917
 80038dc:	08003907 	.word	0x08003907
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800390f 	.word	0x0800390f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7ff f9bc 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 80038f4:	61f8      	str	r0, [r7, #28]
        break;
 80038f6:	e014      	b.n	8003922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7ff f9ce 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 80038fc:	61f8      	str	r0, [r7, #28]
        break;
 80038fe:	e010      	b.n	8003922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <UART_SetConfig+0x454>)
 8003902:	61fb      	str	r3, [r7, #28]
        break;
 8003904:	e00d      	b.n	8003922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7ff f919 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 800390a:	61f8      	str	r0, [r7, #28]
        break;
 800390c:	e009      	b.n	8003922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003912:	61fb      	str	r3, [r7, #28]
        break;
 8003914:	e005      	b.n	8003922 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003920:	bf00      	nop
    }

    if (pclk != 0U)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d019      	beq.n	800395c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	085a      	lsrs	r2, r3, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d909      	bls.n	8003956 <UART_SetConfig+0x432>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d205      	bcs.n	8003956 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e002      	b.n	800395c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003968:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	@ 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	00f42400 	.word	0x00f42400

0800397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7a:	d10a      	bne.n	8003a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b098      	sub	sp, #96	@ 0x60
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd f9ea 	bl	8000ea8 <HAL_GetTick>
 8003ad4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d12e      	bne.n	8003b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f88c 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d021      	beq.n	8003b42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e062      	b.n	8003c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d149      	bne.n	8003be4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f856 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d03c      	beq.n	8003be4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	623b      	str	r3, [r7, #32]
   return(result);
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e6      	bne.n	8003b6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bbc:	61fa      	str	r2, [r7, #28]
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	69b9      	ldr	r1, [r7, #24]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e011      	b.n	8003c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3758      	adds	r7, #88	@ 0x58
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	e04f      	b.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d04b      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fd f93d 	bl	8000ea8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e04e      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d037      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b80      	cmp	r3, #128	@ 0x80
 8003c56:	d034      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d031      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d110      	bne.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2208      	movs	r2, #8
 8003c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f838 	bl	8003cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e029      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c9c:	d111      	bne.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f81e 	bl	8003cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e00f      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d0a0      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b095      	sub	sp, #84	@ 0x54
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e6      	bne.n	8003cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d118      	bne.n	8003d92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0310 	bic.w	r3, r3, #16
 8003d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003da6:	bf00      	nop
 8003da8:	3754      	adds	r7, #84	@ 0x54
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <std>:
 8003db4:	2300      	movs	r3, #0
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	e9c0 3300 	strd	r3, r3, [r0]
 8003dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dc2:	6083      	str	r3, [r0, #8]
 8003dc4:	8181      	strh	r1, [r0, #12]
 8003dc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003dc8:	81c2      	strh	r2, [r0, #14]
 8003dca:	6183      	str	r3, [r0, #24]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2208      	movs	r2, #8
 8003dd0:	305c      	adds	r0, #92	@ 0x5c
 8003dd2:	f000 fa01 	bl	80041d8 <memset>
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <std+0x58>)
 8003dd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <std+0x5c>)
 8003ddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dde:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <std+0x60>)
 8003de0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003de2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <std+0x64>)
 8003de4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003de6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <std+0x68>)
 8003de8:	6224      	str	r4, [r4, #32]
 8003dea:	429c      	cmp	r4, r3
 8003dec:	d006      	beq.n	8003dfc <std+0x48>
 8003dee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003df2:	4294      	cmp	r4, r2
 8003df4:	d002      	beq.n	8003dfc <std+0x48>
 8003df6:	33d0      	adds	r3, #208	@ 0xd0
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d105      	bne.n	8003e08 <std+0x54>
 8003dfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e04:	f000 ba60 	b.w	80042c8 <__retarget_lock_init_recursive>
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08004029 	.word	0x08004029
 8003e10:	0800404b 	.word	0x0800404b
 8003e14:	08004083 	.word	0x08004083
 8003e18:	080040a7 	.word	0x080040a7
 8003e1c:	200001b4 	.word	0x200001b4

08003e20 <stdio_exit_handler>:
 8003e20:	4a02      	ldr	r2, [pc, #8]	@ (8003e2c <stdio_exit_handler+0xc>)
 8003e22:	4903      	ldr	r1, [pc, #12]	@ (8003e30 <stdio_exit_handler+0x10>)
 8003e24:	4803      	ldr	r0, [pc, #12]	@ (8003e34 <stdio_exit_handler+0x14>)
 8003e26:	f000 b869 	b.w	8003efc <_fwalk_sglue>
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	08004b65 	.word	0x08004b65
 8003e34:	2000001c 	.word	0x2000001c

08003e38 <cleanup_stdio>:
 8003e38:	6841      	ldr	r1, [r0, #4]
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <cleanup_stdio+0x34>)
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	4604      	mov	r4, r0
 8003e42:	d001      	beq.n	8003e48 <cleanup_stdio+0x10>
 8003e44:	f000 fe8e 	bl	8004b64 <_fflush_r>
 8003e48:	68a1      	ldr	r1, [r4, #8]
 8003e4a:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <cleanup_stdio+0x38>)
 8003e4c:	4299      	cmp	r1, r3
 8003e4e:	d002      	beq.n	8003e56 <cleanup_stdio+0x1e>
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 fe87 	bl	8004b64 <_fflush_r>
 8003e56:	68e1      	ldr	r1, [r4, #12]
 8003e58:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <cleanup_stdio+0x3c>)
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	d004      	beq.n	8003e68 <cleanup_stdio+0x30>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e64:	f000 be7e 	b.w	8004b64 <_fflush_r>
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200001b4 	.word	0x200001b4
 8003e70:	2000021c 	.word	0x2000021c
 8003e74:	20000284 	.word	0x20000284

08003e78 <global_stdio_init.part.0>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <global_stdio_init.part.0+0x30>)
 8003e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003eac <global_stdio_init.part.0+0x34>)
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb0 <global_stdio_init.part.0+0x38>)
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	4620      	mov	r0, r4
 8003e84:	2200      	movs	r2, #0
 8003e86:	2104      	movs	r1, #4
 8003e88:	f7ff ff94 	bl	8003db4 <std>
 8003e8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e90:	2201      	movs	r2, #1
 8003e92:	2109      	movs	r1, #9
 8003e94:	f7ff ff8e 	bl	8003db4 <std>
 8003e98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea2:	2112      	movs	r1, #18
 8003ea4:	f7ff bf86 	b.w	8003db4 <std>
 8003ea8:	200002ec 	.word	0x200002ec
 8003eac:	200001b4 	.word	0x200001b4
 8003eb0:	08003e21 	.word	0x08003e21

08003eb4 <__sfp_lock_acquire>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	@ (8003ebc <__sfp_lock_acquire+0x8>)
 8003eb6:	f000 ba08 	b.w	80042ca <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	200002f5 	.word	0x200002f5

08003ec0 <__sfp_lock_release>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	@ (8003ec8 <__sfp_lock_release+0x8>)
 8003ec2:	f000 ba03 	b.w	80042cc <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	200002f5 	.word	0x200002f5

08003ecc <__sinit>:
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	4604      	mov	r4, r0
 8003ed0:	f7ff fff0 	bl	8003eb4 <__sfp_lock_acquire>
 8003ed4:	6a23      	ldr	r3, [r4, #32]
 8003ed6:	b11b      	cbz	r3, 8003ee0 <__sinit+0x14>
 8003ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003edc:	f7ff bff0 	b.w	8003ec0 <__sfp_lock_release>
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <__sinit+0x28>)
 8003ee2:	6223      	str	r3, [r4, #32]
 8003ee4:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <__sinit+0x2c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f5      	bne.n	8003ed8 <__sinit+0xc>
 8003eec:	f7ff ffc4 	bl	8003e78 <global_stdio_init.part.0>
 8003ef0:	e7f2      	b.n	8003ed8 <__sinit+0xc>
 8003ef2:	bf00      	nop
 8003ef4:	08003e39 	.word	0x08003e39
 8003ef8:	200002ec 	.word	0x200002ec

08003efc <_fwalk_sglue>:
 8003efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f00:	4607      	mov	r7, r0
 8003f02:	4688      	mov	r8, r1
 8003f04:	4614      	mov	r4, r2
 8003f06:	2600      	movs	r6, #0
 8003f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f10:	d505      	bpl.n	8003f1e <_fwalk_sglue+0x22>
 8003f12:	6824      	ldr	r4, [r4, #0]
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	d1f7      	bne.n	8003f08 <_fwalk_sglue+0xc>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d907      	bls.n	8003f34 <_fwalk_sglue+0x38>
 8003f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	d003      	beq.n	8003f34 <_fwalk_sglue+0x38>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4638      	mov	r0, r7
 8003f30:	47c0      	blx	r8
 8003f32:	4306      	orrs	r6, r0
 8003f34:	3568      	adds	r5, #104	@ 0x68
 8003f36:	e7e9      	b.n	8003f0c <_fwalk_sglue+0x10>

08003f38 <iprintf>:
 8003f38:	b40f      	push	{r0, r1, r2, r3}
 8003f3a:	b507      	push	{r0, r1, r2, lr}
 8003f3c:	4906      	ldr	r1, [pc, #24]	@ (8003f58 <iprintf+0x20>)
 8003f3e:	ab04      	add	r3, sp, #16
 8003f40:	6808      	ldr	r0, [r1, #0]
 8003f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f46:	6881      	ldr	r1, [r0, #8]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f000 fae3 	bl	8004514 <_vfiprintf_r>
 8003f4e:	b003      	add	sp, #12
 8003f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f54:	b004      	add	sp, #16
 8003f56:	4770      	bx	lr
 8003f58:	20000018 	.word	0x20000018

08003f5c <putchar>:
 8003f5c:	4b02      	ldr	r3, [pc, #8]	@ (8003f68 <putchar+0xc>)
 8003f5e:	4601      	mov	r1, r0
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	6882      	ldr	r2, [r0, #8]
 8003f64:	f000 be88 	b.w	8004c78 <_putc_r>
 8003f68:	20000018 	.word	0x20000018

08003f6c <_puts_r>:
 8003f6c:	6a03      	ldr	r3, [r0, #32]
 8003f6e:	b570      	push	{r4, r5, r6, lr}
 8003f70:	6884      	ldr	r4, [r0, #8]
 8003f72:	4605      	mov	r5, r0
 8003f74:	460e      	mov	r6, r1
 8003f76:	b90b      	cbnz	r3, 8003f7c <_puts_r+0x10>
 8003f78:	f7ff ffa8 	bl	8003ecc <__sinit>
 8003f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f7e:	07db      	lsls	r3, r3, #31
 8003f80:	d405      	bmi.n	8003f8e <_puts_r+0x22>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	0598      	lsls	r0, r3, #22
 8003f86:	d402      	bmi.n	8003f8e <_puts_r+0x22>
 8003f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f8a:	f000 f99e 	bl	80042ca <__retarget_lock_acquire_recursive>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	0719      	lsls	r1, r3, #28
 8003f92:	d502      	bpl.n	8003f9a <_puts_r+0x2e>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d135      	bne.n	8004006 <_puts_r+0x9a>
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 f8c5 	bl	800412c <__swsetup_r>
 8003fa2:	b380      	cbz	r0, 8004006 <_puts_r+0x9a>
 8003fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003faa:	07da      	lsls	r2, r3, #31
 8003fac:	d405      	bmi.n	8003fba <_puts_r+0x4e>
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	059b      	lsls	r3, r3, #22
 8003fb2:	d402      	bmi.n	8003fba <_puts_r+0x4e>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fb6:	f000 f989 	bl	80042cc <__retarget_lock_release_recursive>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da04      	bge.n	8003fcc <_puts_r+0x60>
 8003fc2:	69a2      	ldr	r2, [r4, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	dc17      	bgt.n	8003ff8 <_puts_r+0x8c>
 8003fc8:	290a      	cmp	r1, #10
 8003fca:	d015      	beq.n	8003ff8 <_puts_r+0x8c>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	7019      	strb	r1, [r3, #0]
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	2900      	cmp	r1, #0
 8003fe0:	d1ed      	bne.n	8003fbe <_puts_r+0x52>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da11      	bge.n	800400a <_puts_r+0x9e>
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	210a      	movs	r1, #10
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f85f 	bl	80040ae <__swbuf_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d0d7      	beq.n	8003fa4 <_puts_r+0x38>
 8003ff4:	250a      	movs	r5, #10
 8003ff6:	e7d7      	b.n	8003fa8 <_puts_r+0x3c>
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 f857 	bl	80040ae <__swbuf_r>
 8004000:	3001      	adds	r0, #1
 8004002:	d1e7      	bne.n	8003fd4 <_puts_r+0x68>
 8004004:	e7ce      	b.n	8003fa4 <_puts_r+0x38>
 8004006:	3e01      	subs	r6, #1
 8004008:	e7e4      	b.n	8003fd4 <_puts_r+0x68>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	220a      	movs	r2, #10
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e7ee      	b.n	8003ff4 <_puts_r+0x88>
	...

08004018 <puts>:
 8004018:	4b02      	ldr	r3, [pc, #8]	@ (8004024 <puts+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f7ff bfa5 	b.w	8003f6c <_puts_r>
 8004022:	bf00      	nop
 8004024:	20000018 	.word	0x20000018

08004028 <__sread>:
 8004028:	b510      	push	{r4, lr}
 800402a:	460c      	mov	r4, r1
 800402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004030:	f000 f8fc 	bl	800422c <_read_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	bfab      	itete	ge
 8004038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800403a:	89a3      	ldrhlt	r3, [r4, #12]
 800403c:	181b      	addge	r3, r3, r0
 800403e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004042:	bfac      	ite	ge
 8004044:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004046:	81a3      	strhlt	r3, [r4, #12]
 8004048:	bd10      	pop	{r4, pc}

0800404a <__swrite>:
 800404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404e:	461f      	mov	r7, r3
 8004050:	898b      	ldrh	r3, [r1, #12]
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	4605      	mov	r5, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4616      	mov	r6, r2
 800405a:	d505      	bpl.n	8004068 <__swrite+0x1e>
 800405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004060:	2302      	movs	r3, #2
 8004062:	2200      	movs	r2, #0
 8004064:	f000 f8d0 	bl	8004208 <_lseek_r>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	4632      	mov	r2, r6
 8004076:	463b      	mov	r3, r7
 8004078:	4628      	mov	r0, r5
 800407a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407e:	f000 b8e7 	b.w	8004250 <_write_r>

08004082 <__sseek>:
 8004082:	b510      	push	{r4, lr}
 8004084:	460c      	mov	r4, r1
 8004086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408a:	f000 f8bd 	bl	8004208 <_lseek_r>
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	bf15      	itete	ne
 8004094:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800409a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800409e:	81a3      	strheq	r3, [r4, #12]
 80040a0:	bf18      	it	ne
 80040a2:	81a3      	strhne	r3, [r4, #12]
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <__sclose>:
 80040a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040aa:	f000 b89d 	b.w	80041e8 <_close_r>

080040ae <__swbuf_r>:
 80040ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b0:	460e      	mov	r6, r1
 80040b2:	4614      	mov	r4, r2
 80040b4:	4605      	mov	r5, r0
 80040b6:	b118      	cbz	r0, 80040c0 <__swbuf_r+0x12>
 80040b8:	6a03      	ldr	r3, [r0, #32]
 80040ba:	b90b      	cbnz	r3, 80040c0 <__swbuf_r+0x12>
 80040bc:	f7ff ff06 	bl	8003ecc <__sinit>
 80040c0:	69a3      	ldr	r3, [r4, #24]
 80040c2:	60a3      	str	r3, [r4, #8]
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	071a      	lsls	r2, r3, #28
 80040c8:	d501      	bpl.n	80040ce <__swbuf_r+0x20>
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	b943      	cbnz	r3, 80040e0 <__swbuf_r+0x32>
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 f82b 	bl	800412c <__swsetup_r>
 80040d6:	b118      	cbz	r0, 80040e0 <__swbuf_r+0x32>
 80040d8:	f04f 37ff 	mov.w	r7, #4294967295
 80040dc:	4638      	mov	r0, r7
 80040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	6922      	ldr	r2, [r4, #16]
 80040e4:	1a98      	subs	r0, r3, r2
 80040e6:	6963      	ldr	r3, [r4, #20]
 80040e8:	b2f6      	uxtb	r6, r6
 80040ea:	4283      	cmp	r3, r0
 80040ec:	4637      	mov	r7, r6
 80040ee:	dc05      	bgt.n	80040fc <__swbuf_r+0x4e>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fd36 	bl	8004b64 <_fflush_r>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d1ed      	bne.n	80040d8 <__swbuf_r+0x2a>
 80040fc:	68a3      	ldr	r3, [r4, #8]
 80040fe:	3b01      	subs	r3, #1
 8004100:	60a3      	str	r3, [r4, #8]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	6022      	str	r2, [r4, #0]
 8004108:	701e      	strb	r6, [r3, #0]
 800410a:	6962      	ldr	r2, [r4, #20]
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	429a      	cmp	r2, r3
 8004110:	d004      	beq.n	800411c <__swbuf_r+0x6e>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	07db      	lsls	r3, r3, #31
 8004116:	d5e1      	bpl.n	80040dc <__swbuf_r+0x2e>
 8004118:	2e0a      	cmp	r6, #10
 800411a:	d1df      	bne.n	80040dc <__swbuf_r+0x2e>
 800411c:	4621      	mov	r1, r4
 800411e:	4628      	mov	r0, r5
 8004120:	f000 fd20 	bl	8004b64 <_fflush_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	d0d9      	beq.n	80040dc <__swbuf_r+0x2e>
 8004128:	e7d6      	b.n	80040d8 <__swbuf_r+0x2a>
	...

0800412c <__swsetup_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <__swsetup_r+0xa8>)
 8004130:	4605      	mov	r5, r0
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	460c      	mov	r4, r1
 8004136:	b118      	cbz	r0, 8004140 <__swsetup_r+0x14>
 8004138:	6a03      	ldr	r3, [r0, #32]
 800413a:	b90b      	cbnz	r3, 8004140 <__swsetup_r+0x14>
 800413c:	f7ff fec6 	bl	8003ecc <__sinit>
 8004140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004144:	0719      	lsls	r1, r3, #28
 8004146:	d422      	bmi.n	800418e <__swsetup_r+0x62>
 8004148:	06da      	lsls	r2, r3, #27
 800414a:	d407      	bmi.n	800415c <__swsetup_r+0x30>
 800414c:	2209      	movs	r2, #9
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	e033      	b.n	80041c4 <__swsetup_r+0x98>
 800415c:	0758      	lsls	r0, r3, #29
 800415e:	d512      	bpl.n	8004186 <__swsetup_r+0x5a>
 8004160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004162:	b141      	cbz	r1, 8004176 <__swsetup_r+0x4a>
 8004164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004168:	4299      	cmp	r1, r3
 800416a:	d002      	beq.n	8004172 <__swsetup_r+0x46>
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f8af 	bl	80042d0 <_free_r>
 8004172:	2300      	movs	r3, #0
 8004174:	6363      	str	r3, [r4, #52]	@ 0x34
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	2300      	movs	r3, #0
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	b94b      	cbnz	r3, 80041a6 <__swsetup_r+0x7a>
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d003      	beq.n	80041a6 <__swsetup_r+0x7a>
 800419e:	4621      	mov	r1, r4
 80041a0:	4628      	mov	r0, r5
 80041a2:	f000 fd2d 	bl	8004c00 <__smakebuf_r>
 80041a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041aa:	f013 0201 	ands.w	r2, r3, #1
 80041ae:	d00a      	beq.n	80041c6 <__swsetup_r+0x9a>
 80041b0:	2200      	movs	r2, #0
 80041b2:	60a2      	str	r2, [r4, #8]
 80041b4:	6962      	ldr	r2, [r4, #20]
 80041b6:	4252      	negs	r2, r2
 80041b8:	61a2      	str	r2, [r4, #24]
 80041ba:	6922      	ldr	r2, [r4, #16]
 80041bc:	b942      	cbnz	r2, 80041d0 <__swsetup_r+0xa4>
 80041be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80041c2:	d1c5      	bne.n	8004150 <__swsetup_r+0x24>
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	0799      	lsls	r1, r3, #30
 80041c8:	bf58      	it	pl
 80041ca:	6962      	ldrpl	r2, [r4, #20]
 80041cc:	60a2      	str	r2, [r4, #8]
 80041ce:	e7f4      	b.n	80041ba <__swsetup_r+0x8e>
 80041d0:	2000      	movs	r0, #0
 80041d2:	e7f7      	b.n	80041c4 <__swsetup_r+0x98>
 80041d4:	20000018 	.word	0x20000018

080041d8 <memset>:
 80041d8:	4402      	add	r2, r0
 80041da:	4603      	mov	r3, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	d100      	bne.n	80041e2 <memset+0xa>
 80041e0:	4770      	bx	lr
 80041e2:	f803 1b01 	strb.w	r1, [r3], #1
 80041e6:	e7f9      	b.n	80041dc <memset+0x4>

080041e8 <_close_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d06      	ldr	r5, [pc, #24]	@ (8004204 <_close_r+0x1c>)
 80041ec:	2300      	movs	r3, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f7fc fd49 	bl	8000c8a <_close>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_close_r+0x1a>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_close_r+0x1a>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	200002f0 	.word	0x200002f0

08004208 <_lseek_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4d07      	ldr	r5, [pc, #28]	@ (8004228 <_lseek_r+0x20>)
 800420c:	4604      	mov	r4, r0
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	2200      	movs	r2, #0
 8004214:	602a      	str	r2, [r5, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	f7fc fd5e 	bl	8000cd8 <_lseek>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_lseek_r+0x1e>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_lseek_r+0x1e>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	200002f0 	.word	0x200002f0

0800422c <_read_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4d07      	ldr	r5, [pc, #28]	@ (800424c <_read_r+0x20>)
 8004230:	4604      	mov	r4, r0
 8004232:	4608      	mov	r0, r1
 8004234:	4611      	mov	r1, r2
 8004236:	2200      	movs	r2, #0
 8004238:	602a      	str	r2, [r5, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7fc fcec 	bl	8000c18 <_read>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_read_r+0x1e>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_read_r+0x1e>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200002f0 	.word	0x200002f0

08004250 <_write_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	@ (8004270 <_write_r+0x20>)
 8004254:	4604      	mov	r4, r0
 8004256:	4608      	mov	r0, r1
 8004258:	4611      	mov	r1, r2
 800425a:	2200      	movs	r2, #0
 800425c:	602a      	str	r2, [r5, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fc fcf7 	bl	8000c52 <_write>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_write_r+0x1e>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_write_r+0x1e>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	200002f0 	.word	0x200002f0

08004274 <__errno>:
 8004274:	4b01      	ldr	r3, [pc, #4]	@ (800427c <__errno+0x8>)
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000018 	.word	0x20000018

08004280 <__libc_init_array>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4d0d      	ldr	r5, [pc, #52]	@ (80042b8 <__libc_init_array+0x38>)
 8004284:	4c0d      	ldr	r4, [pc, #52]	@ (80042bc <__libc_init_array+0x3c>)
 8004286:	1b64      	subs	r4, r4, r5
 8004288:	10a4      	asrs	r4, r4, #2
 800428a:	2600      	movs	r6, #0
 800428c:	42a6      	cmp	r6, r4
 800428e:	d109      	bne.n	80042a4 <__libc_init_array+0x24>
 8004290:	4d0b      	ldr	r5, [pc, #44]	@ (80042c0 <__libc_init_array+0x40>)
 8004292:	4c0c      	ldr	r4, [pc, #48]	@ (80042c4 <__libc_init_array+0x44>)
 8004294:	f000 fd56 	bl	8004d44 <_init>
 8004298:	1b64      	subs	r4, r4, r5
 800429a:	10a4      	asrs	r4, r4, #2
 800429c:	2600      	movs	r6, #0
 800429e:	42a6      	cmp	r6, r4
 80042a0:	d105      	bne.n	80042ae <__libc_init_array+0x2e>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a8:	4798      	blx	r3
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7ee      	b.n	800428c <__libc_init_array+0xc>
 80042ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b2:	4798      	blx	r3
 80042b4:	3601      	adds	r6, #1
 80042b6:	e7f2      	b.n	800429e <__libc_init_array+0x1e>
 80042b8:	08004e20 	.word	0x08004e20
 80042bc:	08004e20 	.word	0x08004e20
 80042c0:	08004e20 	.word	0x08004e20
 80042c4:	08004e24 	.word	0x08004e24

080042c8 <__retarget_lock_init_recursive>:
 80042c8:	4770      	bx	lr

080042ca <__retarget_lock_acquire_recursive>:
 80042ca:	4770      	bx	lr

080042cc <__retarget_lock_release_recursive>:
 80042cc:	4770      	bx	lr
	...

080042d0 <_free_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4605      	mov	r5, r0
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d041      	beq.n	800435c <_free_r+0x8c>
 80042d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042dc:	1f0c      	subs	r4, r1, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bfb8      	it	lt
 80042e2:	18e4      	addlt	r4, r4, r3
 80042e4:	f000 f8e0 	bl	80044a8 <__malloc_lock>
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <_free_r+0x90>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	b933      	cbnz	r3, 80042fc <_free_r+0x2c>
 80042ee:	6063      	str	r3, [r4, #4]
 80042f0:	6014      	str	r4, [r2, #0]
 80042f2:	4628      	mov	r0, r5
 80042f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042f8:	f000 b8dc 	b.w	80044b4 <__malloc_unlock>
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d908      	bls.n	8004312 <_free_r+0x42>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	1821      	adds	r1, r4, r0
 8004304:	428b      	cmp	r3, r1
 8004306:	bf01      	itttt	eq
 8004308:	6819      	ldreq	r1, [r3, #0]
 800430a:	685b      	ldreq	r3, [r3, #4]
 800430c:	1809      	addeq	r1, r1, r0
 800430e:	6021      	streq	r1, [r4, #0]
 8004310:	e7ed      	b.n	80042ee <_free_r+0x1e>
 8004312:	461a      	mov	r2, r3
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	b10b      	cbz	r3, 800431c <_free_r+0x4c>
 8004318:	42a3      	cmp	r3, r4
 800431a:	d9fa      	bls.n	8004312 <_free_r+0x42>
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	1850      	adds	r0, r2, r1
 8004320:	42a0      	cmp	r0, r4
 8004322:	d10b      	bne.n	800433c <_free_r+0x6c>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	4401      	add	r1, r0
 8004328:	1850      	adds	r0, r2, r1
 800432a:	4283      	cmp	r3, r0
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	d1e0      	bne.n	80042f2 <_free_r+0x22>
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	6053      	str	r3, [r2, #4]
 8004336:	4408      	add	r0, r1
 8004338:	6010      	str	r0, [r2, #0]
 800433a:	e7da      	b.n	80042f2 <_free_r+0x22>
 800433c:	d902      	bls.n	8004344 <_free_r+0x74>
 800433e:	230c      	movs	r3, #12
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	e7d6      	b.n	80042f2 <_free_r+0x22>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	1821      	adds	r1, r4, r0
 8004348:	428b      	cmp	r3, r1
 800434a:	bf04      	itt	eq
 800434c:	6819      	ldreq	r1, [r3, #0]
 800434e:	685b      	ldreq	r3, [r3, #4]
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	bf04      	itt	eq
 8004354:	1809      	addeq	r1, r1, r0
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	6054      	str	r4, [r2, #4]
 800435a:	e7ca      	b.n	80042f2 <_free_r+0x22>
 800435c:	bd38      	pop	{r3, r4, r5, pc}
 800435e:	bf00      	nop
 8004360:	200002fc 	.word	0x200002fc

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0f      	ldr	r6, [pc, #60]	@ (80043a4 <sbrk_aligned+0x40>)
 8004368:	460c      	mov	r4, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	4605      	mov	r5, r0
 800436e:	b911      	cbnz	r1, 8004376 <sbrk_aligned+0x12>
 8004370:	f000 fcd8 	bl	8004d24 <_sbrk_r>
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fcd3 	bl	8004d24 <_sbrk_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d103      	bne.n	800438a <sbrk_aligned+0x26>
 8004382:	f04f 34ff 	mov.w	r4, #4294967295
 8004386:	4620      	mov	r0, r4
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	1cc4      	adds	r4, r0, #3
 800438c:	f024 0403 	bic.w	r4, r4, #3
 8004390:	42a0      	cmp	r0, r4
 8004392:	d0f8      	beq.n	8004386 <sbrk_aligned+0x22>
 8004394:	1a21      	subs	r1, r4, r0
 8004396:	4628      	mov	r0, r5
 8004398:	f000 fcc4 	bl	8004d24 <_sbrk_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d1f2      	bne.n	8004386 <sbrk_aligned+0x22>
 80043a0:	e7ef      	b.n	8004382 <sbrk_aligned+0x1e>
 80043a2:	bf00      	nop
 80043a4:	200002f8 	.word	0x200002f8

080043a8 <_malloc_r>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	1ccd      	adds	r5, r1, #3
 80043ae:	f025 0503 	bic.w	r5, r5, #3
 80043b2:	3508      	adds	r5, #8
 80043b4:	2d0c      	cmp	r5, #12
 80043b6:	bf38      	it	cc
 80043b8:	250c      	movcc	r5, #12
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	4606      	mov	r6, r0
 80043be:	db01      	blt.n	80043c4 <_malloc_r+0x1c>
 80043c0:	42a9      	cmp	r1, r5
 80043c2:	d904      	bls.n	80043ce <_malloc_r+0x26>
 80043c4:	230c      	movs	r3, #12
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	2000      	movs	r0, #0
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044a4 <_malloc_r+0xfc>
 80043d2:	f000 f869 	bl	80044a8 <__malloc_lock>
 80043d6:	f8d8 3000 	ldr.w	r3, [r8]
 80043da:	461c      	mov	r4, r3
 80043dc:	bb44      	cbnz	r4, 8004430 <_malloc_r+0x88>
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ffbf 	bl	8004364 <sbrk_aligned>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	4604      	mov	r4, r0
 80043ea:	d158      	bne.n	800449e <_malloc_r+0xf6>
 80043ec:	f8d8 4000 	ldr.w	r4, [r8]
 80043f0:	4627      	mov	r7, r4
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	d143      	bne.n	800447e <_malloc_r+0xd6>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d04b      	beq.n	8004492 <_malloc_r+0xea>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4639      	mov	r1, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	eb04 0903 	add.w	r9, r4, r3
 8004404:	f000 fc8e 	bl	8004d24 <_sbrk_r>
 8004408:	4581      	cmp	r9, r0
 800440a:	d142      	bne.n	8004492 <_malloc_r+0xea>
 800440c:	6821      	ldr	r1, [r4, #0]
 800440e:	1a6d      	subs	r5, r5, r1
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffa6 	bl	8004364 <sbrk_aligned>
 8004418:	3001      	adds	r0, #1
 800441a:	d03a      	beq.n	8004492 <_malloc_r+0xea>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	442b      	add	r3, r5
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	f8d8 3000 	ldr.w	r3, [r8]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	bb62      	cbnz	r2, 8004484 <_malloc_r+0xdc>
 800442a:	f8c8 7000 	str.w	r7, [r8]
 800442e:	e00f      	b.n	8004450 <_malloc_r+0xa8>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	1b52      	subs	r2, r2, r5
 8004434:	d420      	bmi.n	8004478 <_malloc_r+0xd0>
 8004436:	2a0b      	cmp	r2, #11
 8004438:	d917      	bls.n	800446a <_malloc_r+0xc2>
 800443a:	1961      	adds	r1, r4, r5
 800443c:	42a3      	cmp	r3, r4
 800443e:	6025      	str	r5, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	6059      	strne	r1, [r3, #4]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	bf08      	it	eq
 8004448:	f8c8 1000 	streq.w	r1, [r8]
 800444c:	5162      	str	r2, [r4, r5]
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f82f 	bl	80044b4 <__malloc_unlock>
 8004456:	f104 000b 	add.w	r0, r4, #11
 800445a:	1d23      	adds	r3, r4, #4
 800445c:	f020 0007 	bic.w	r0, r0, #7
 8004460:	1ac2      	subs	r2, r0, r3
 8004462:	bf1c      	itt	ne
 8004464:	1a1b      	subne	r3, r3, r0
 8004466:	50a3      	strne	r3, [r4, r2]
 8004468:	e7af      	b.n	80043ca <_malloc_r+0x22>
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	42a3      	cmp	r3, r4
 800446e:	bf0c      	ite	eq
 8004470:	f8c8 2000 	streq.w	r2, [r8]
 8004474:	605a      	strne	r2, [r3, #4]
 8004476:	e7eb      	b.n	8004450 <_malloc_r+0xa8>
 8004478:	4623      	mov	r3, r4
 800447a:	6864      	ldr	r4, [r4, #4]
 800447c:	e7ae      	b.n	80043dc <_malloc_r+0x34>
 800447e:	463c      	mov	r4, r7
 8004480:	687f      	ldr	r7, [r7, #4]
 8004482:	e7b6      	b.n	80043f2 <_malloc_r+0x4a>
 8004484:	461a      	mov	r2, r3
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	d1fb      	bne.n	8004484 <_malloc_r+0xdc>
 800448c:	2300      	movs	r3, #0
 800448e:	6053      	str	r3, [r2, #4]
 8004490:	e7de      	b.n	8004450 <_malloc_r+0xa8>
 8004492:	230c      	movs	r3, #12
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f80c 	bl	80044b4 <__malloc_unlock>
 800449c:	e794      	b.n	80043c8 <_malloc_r+0x20>
 800449e:	6005      	str	r5, [r0, #0]
 80044a0:	e7d6      	b.n	8004450 <_malloc_r+0xa8>
 80044a2:	bf00      	nop
 80044a4:	200002fc 	.word	0x200002fc

080044a8 <__malloc_lock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	@ (80044b0 <__malloc_lock+0x8>)
 80044aa:	f7ff bf0e 	b.w	80042ca <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	200002f4 	.word	0x200002f4

080044b4 <__malloc_unlock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	@ (80044bc <__malloc_unlock+0x8>)
 80044b6:	f7ff bf09 	b.w	80042cc <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	200002f4 	.word	0x200002f4

080044c0 <__sfputc_r>:
 80044c0:	6893      	ldr	r3, [r2, #8]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	b410      	push	{r4}
 80044c8:	6093      	str	r3, [r2, #8]
 80044ca:	da08      	bge.n	80044de <__sfputc_r+0x1e>
 80044cc:	6994      	ldr	r4, [r2, #24]
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	db01      	blt.n	80044d6 <__sfputc_r+0x16>
 80044d2:	290a      	cmp	r1, #10
 80044d4:	d103      	bne.n	80044de <__sfputc_r+0x1e>
 80044d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044da:	f7ff bde8 	b.w	80040ae <__swbuf_r>
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	1c58      	adds	r0, r3, #1
 80044e2:	6010      	str	r0, [r2, #0]
 80044e4:	7019      	strb	r1, [r3, #0]
 80044e6:	4608      	mov	r0, r1
 80044e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <__sfputs_r>:
 80044ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f0:	4606      	mov	r6, r0
 80044f2:	460f      	mov	r7, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	18d5      	adds	r5, r2, r3
 80044f8:	42ac      	cmp	r4, r5
 80044fa:	d101      	bne.n	8004500 <__sfputs_r+0x12>
 80044fc:	2000      	movs	r0, #0
 80044fe:	e007      	b.n	8004510 <__sfputs_r+0x22>
 8004500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004504:	463a      	mov	r2, r7
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff ffda 	bl	80044c0 <__sfputc_r>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d1f3      	bne.n	80044f8 <__sfputs_r+0xa>
 8004510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004514 <_vfiprintf_r>:
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	460d      	mov	r5, r1
 800451a:	b09d      	sub	sp, #116	@ 0x74
 800451c:	4614      	mov	r4, r2
 800451e:	4698      	mov	r8, r3
 8004520:	4606      	mov	r6, r0
 8004522:	b118      	cbz	r0, 800452c <_vfiprintf_r+0x18>
 8004524:	6a03      	ldr	r3, [r0, #32]
 8004526:	b90b      	cbnz	r3, 800452c <_vfiprintf_r+0x18>
 8004528:	f7ff fcd0 	bl	8003ecc <__sinit>
 800452c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800452e:	07d9      	lsls	r1, r3, #31
 8004530:	d405      	bmi.n	800453e <_vfiprintf_r+0x2a>
 8004532:	89ab      	ldrh	r3, [r5, #12]
 8004534:	059a      	lsls	r2, r3, #22
 8004536:	d402      	bmi.n	800453e <_vfiprintf_r+0x2a>
 8004538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800453a:	f7ff fec6 	bl	80042ca <__retarget_lock_acquire_recursive>
 800453e:	89ab      	ldrh	r3, [r5, #12]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	d501      	bpl.n	8004548 <_vfiprintf_r+0x34>
 8004544:	692b      	ldr	r3, [r5, #16]
 8004546:	b99b      	cbnz	r3, 8004570 <_vfiprintf_r+0x5c>
 8004548:	4629      	mov	r1, r5
 800454a:	4630      	mov	r0, r6
 800454c:	f7ff fdee 	bl	800412c <__swsetup_r>
 8004550:	b170      	cbz	r0, 8004570 <_vfiprintf_r+0x5c>
 8004552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004554:	07dc      	lsls	r4, r3, #31
 8004556:	d504      	bpl.n	8004562 <_vfiprintf_r+0x4e>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	b01d      	add	sp, #116	@ 0x74
 800455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004562:	89ab      	ldrh	r3, [r5, #12]
 8004564:	0598      	lsls	r0, r3, #22
 8004566:	d4f7      	bmi.n	8004558 <_vfiprintf_r+0x44>
 8004568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800456a:	f7ff feaf 	bl	80042cc <__retarget_lock_release_recursive>
 800456e:	e7f3      	b.n	8004558 <_vfiprintf_r+0x44>
 8004570:	2300      	movs	r3, #0
 8004572:	9309      	str	r3, [sp, #36]	@ 0x24
 8004574:	2320      	movs	r3, #32
 8004576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800457a:	f8cd 800c 	str.w	r8, [sp, #12]
 800457e:	2330      	movs	r3, #48	@ 0x30
 8004580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004730 <_vfiprintf_r+0x21c>
 8004584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004588:	f04f 0901 	mov.w	r9, #1
 800458c:	4623      	mov	r3, r4
 800458e:	469a      	mov	sl, r3
 8004590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004594:	b10a      	cbz	r2, 800459a <_vfiprintf_r+0x86>
 8004596:	2a25      	cmp	r2, #37	@ 0x25
 8004598:	d1f9      	bne.n	800458e <_vfiprintf_r+0x7a>
 800459a:	ebba 0b04 	subs.w	fp, sl, r4
 800459e:	d00b      	beq.n	80045b8 <_vfiprintf_r+0xa4>
 80045a0:	465b      	mov	r3, fp
 80045a2:	4622      	mov	r2, r4
 80045a4:	4629      	mov	r1, r5
 80045a6:	4630      	mov	r0, r6
 80045a8:	f7ff ffa1 	bl	80044ee <__sfputs_r>
 80045ac:	3001      	adds	r0, #1
 80045ae:	f000 80a7 	beq.w	8004700 <_vfiprintf_r+0x1ec>
 80045b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045b4:	445a      	add	r2, fp
 80045b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80045b8:	f89a 3000 	ldrb.w	r3, [sl]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 809f 	beq.w	8004700 <_vfiprintf_r+0x1ec>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295
 80045c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045cc:	f10a 0a01 	add.w	sl, sl, #1
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	9307      	str	r3, [sp, #28]
 80045d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80045da:	4654      	mov	r4, sl
 80045dc:	2205      	movs	r2, #5
 80045de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e2:	4853      	ldr	r0, [pc, #332]	@ (8004730 <_vfiprintf_r+0x21c>)
 80045e4:	f7fb fdf4 	bl	80001d0 <memchr>
 80045e8:	9a04      	ldr	r2, [sp, #16]
 80045ea:	b9d8      	cbnz	r0, 8004624 <_vfiprintf_r+0x110>
 80045ec:	06d1      	lsls	r1, r2, #27
 80045ee:	bf44      	itt	mi
 80045f0:	2320      	movmi	r3, #32
 80045f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f6:	0713      	lsls	r3, r2, #28
 80045f8:	bf44      	itt	mi
 80045fa:	232b      	movmi	r3, #43	@ 0x2b
 80045fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004600:	f89a 3000 	ldrb.w	r3, [sl]
 8004604:	2b2a      	cmp	r3, #42	@ 0x2a
 8004606:	d015      	beq.n	8004634 <_vfiprintf_r+0x120>
 8004608:	9a07      	ldr	r2, [sp, #28]
 800460a:	4654      	mov	r4, sl
 800460c:	2000      	movs	r0, #0
 800460e:	f04f 0c0a 	mov.w	ip, #10
 8004612:	4621      	mov	r1, r4
 8004614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004618:	3b30      	subs	r3, #48	@ 0x30
 800461a:	2b09      	cmp	r3, #9
 800461c:	d94b      	bls.n	80046b6 <_vfiprintf_r+0x1a2>
 800461e:	b1b0      	cbz	r0, 800464e <_vfiprintf_r+0x13a>
 8004620:	9207      	str	r2, [sp, #28]
 8004622:	e014      	b.n	800464e <_vfiprintf_r+0x13a>
 8004624:	eba0 0308 	sub.w	r3, r0, r8
 8004628:	fa09 f303 	lsl.w	r3, r9, r3
 800462c:	4313      	orrs	r3, r2
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	46a2      	mov	sl, r4
 8004632:	e7d2      	b.n	80045da <_vfiprintf_r+0xc6>
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	1d19      	adds	r1, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	9103      	str	r1, [sp, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	bfbb      	ittet	lt
 8004640:	425b      	neglt	r3, r3
 8004642:	f042 0202 	orrlt.w	r2, r2, #2
 8004646:	9307      	strge	r3, [sp, #28]
 8004648:	9307      	strlt	r3, [sp, #28]
 800464a:	bfb8      	it	lt
 800464c:	9204      	strlt	r2, [sp, #16]
 800464e:	7823      	ldrb	r3, [r4, #0]
 8004650:	2b2e      	cmp	r3, #46	@ 0x2e
 8004652:	d10a      	bne.n	800466a <_vfiprintf_r+0x156>
 8004654:	7863      	ldrb	r3, [r4, #1]
 8004656:	2b2a      	cmp	r3, #42	@ 0x2a
 8004658:	d132      	bne.n	80046c0 <_vfiprintf_r+0x1ac>
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	1d1a      	adds	r2, r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	9203      	str	r2, [sp, #12]
 8004662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004666:	3402      	adds	r4, #2
 8004668:	9305      	str	r3, [sp, #20]
 800466a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004740 <_vfiprintf_r+0x22c>
 800466e:	7821      	ldrb	r1, [r4, #0]
 8004670:	2203      	movs	r2, #3
 8004672:	4650      	mov	r0, sl
 8004674:	f7fb fdac 	bl	80001d0 <memchr>
 8004678:	b138      	cbz	r0, 800468a <_vfiprintf_r+0x176>
 800467a:	9b04      	ldr	r3, [sp, #16]
 800467c:	eba0 000a 	sub.w	r0, r0, sl
 8004680:	2240      	movs	r2, #64	@ 0x40
 8004682:	4082      	lsls	r2, r0
 8004684:	4313      	orrs	r3, r2
 8004686:	3401      	adds	r4, #1
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468e:	4829      	ldr	r0, [pc, #164]	@ (8004734 <_vfiprintf_r+0x220>)
 8004690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004694:	2206      	movs	r2, #6
 8004696:	f7fb fd9b 	bl	80001d0 <memchr>
 800469a:	2800      	cmp	r0, #0
 800469c:	d03f      	beq.n	800471e <_vfiprintf_r+0x20a>
 800469e:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <_vfiprintf_r+0x224>)
 80046a0:	bb1b      	cbnz	r3, 80046ea <_vfiprintf_r+0x1d6>
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	3307      	adds	r3, #7
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	3308      	adds	r3, #8
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b0:	443b      	add	r3, r7
 80046b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b4:	e76a      	b.n	800458c <_vfiprintf_r+0x78>
 80046b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ba:	460c      	mov	r4, r1
 80046bc:	2001      	movs	r0, #1
 80046be:	e7a8      	b.n	8004612 <_vfiprintf_r+0xfe>
 80046c0:	2300      	movs	r3, #0
 80046c2:	3401      	adds	r4, #1
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	4619      	mov	r1, r3
 80046c8:	f04f 0c0a 	mov.w	ip, #10
 80046cc:	4620      	mov	r0, r4
 80046ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d2:	3a30      	subs	r2, #48	@ 0x30
 80046d4:	2a09      	cmp	r2, #9
 80046d6:	d903      	bls.n	80046e0 <_vfiprintf_r+0x1cc>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0c6      	beq.n	800466a <_vfiprintf_r+0x156>
 80046dc:	9105      	str	r1, [sp, #20]
 80046de:	e7c4      	b.n	800466a <_vfiprintf_r+0x156>
 80046e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e4:	4604      	mov	r4, r0
 80046e6:	2301      	movs	r3, #1
 80046e8:	e7f0      	b.n	80046cc <_vfiprintf_r+0x1b8>
 80046ea:	ab03      	add	r3, sp, #12
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	462a      	mov	r2, r5
 80046f0:	4b12      	ldr	r3, [pc, #72]	@ (800473c <_vfiprintf_r+0x228>)
 80046f2:	a904      	add	r1, sp, #16
 80046f4:	4630      	mov	r0, r6
 80046f6:	f3af 8000 	nop.w
 80046fa:	4607      	mov	r7, r0
 80046fc:	1c78      	adds	r0, r7, #1
 80046fe:	d1d6      	bne.n	80046ae <_vfiprintf_r+0x19a>
 8004700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004702:	07d9      	lsls	r1, r3, #31
 8004704:	d405      	bmi.n	8004712 <_vfiprintf_r+0x1fe>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	059a      	lsls	r2, r3, #22
 800470a:	d402      	bmi.n	8004712 <_vfiprintf_r+0x1fe>
 800470c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800470e:	f7ff fddd 	bl	80042cc <__retarget_lock_release_recursive>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	065b      	lsls	r3, r3, #25
 8004716:	f53f af1f 	bmi.w	8004558 <_vfiprintf_r+0x44>
 800471a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800471c:	e71e      	b.n	800455c <_vfiprintf_r+0x48>
 800471e:	ab03      	add	r3, sp, #12
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	462a      	mov	r2, r5
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <_vfiprintf_r+0x228>)
 8004726:	a904      	add	r1, sp, #16
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f879 	bl	8004820 <_printf_i>
 800472e:	e7e4      	b.n	80046fa <_vfiprintf_r+0x1e6>
 8004730:	08004de4 	.word	0x08004de4
 8004734:	08004dee 	.word	0x08004dee
 8004738:	00000000 	.word	0x00000000
 800473c:	080044ef 	.word	0x080044ef
 8004740:	08004dea 	.word	0x08004dea

08004744 <_printf_common>:
 8004744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004748:	4616      	mov	r6, r2
 800474a:	4698      	mov	r8, r3
 800474c:	688a      	ldr	r2, [r1, #8]
 800474e:	690b      	ldr	r3, [r1, #16]
 8004750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004754:	4293      	cmp	r3, r2
 8004756:	bfb8      	it	lt
 8004758:	4613      	movlt	r3, r2
 800475a:	6033      	str	r3, [r6, #0]
 800475c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004760:	4607      	mov	r7, r0
 8004762:	460c      	mov	r4, r1
 8004764:	b10a      	cbz	r2, 800476a <_printf_common+0x26>
 8004766:	3301      	adds	r3, #1
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	0699      	lsls	r1, r3, #26
 800476e:	bf42      	ittt	mi
 8004770:	6833      	ldrmi	r3, [r6, #0]
 8004772:	3302      	addmi	r3, #2
 8004774:	6033      	strmi	r3, [r6, #0]
 8004776:	6825      	ldr	r5, [r4, #0]
 8004778:	f015 0506 	ands.w	r5, r5, #6
 800477c:	d106      	bne.n	800478c <_printf_common+0x48>
 800477e:	f104 0a19 	add.w	sl, r4, #25
 8004782:	68e3      	ldr	r3, [r4, #12]
 8004784:	6832      	ldr	r2, [r6, #0]
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	42ab      	cmp	r3, r5
 800478a:	dc26      	bgt.n	80047da <_printf_common+0x96>
 800478c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	3b00      	subs	r3, #0
 8004794:	bf18      	it	ne
 8004796:	2301      	movne	r3, #1
 8004798:	0692      	lsls	r2, r2, #26
 800479a:	d42b      	bmi.n	80047f4 <_printf_common+0xb0>
 800479c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047a0:	4641      	mov	r1, r8
 80047a2:	4638      	mov	r0, r7
 80047a4:	47c8      	blx	r9
 80047a6:	3001      	adds	r0, #1
 80047a8:	d01e      	beq.n	80047e8 <_printf_common+0xa4>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	6922      	ldr	r2, [r4, #16]
 80047ae:	f003 0306 	and.w	r3, r3, #6
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	bf02      	ittt	eq
 80047b6:	68e5      	ldreq	r5, [r4, #12]
 80047b8:	6833      	ldreq	r3, [r6, #0]
 80047ba:	1aed      	subeq	r5, r5, r3
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	bf0c      	ite	eq
 80047c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047c4:	2500      	movne	r5, #0
 80047c6:	4293      	cmp	r3, r2
 80047c8:	bfc4      	itt	gt
 80047ca:	1a9b      	subgt	r3, r3, r2
 80047cc:	18ed      	addgt	r5, r5, r3
 80047ce:	2600      	movs	r6, #0
 80047d0:	341a      	adds	r4, #26
 80047d2:	42b5      	cmp	r5, r6
 80047d4:	d11a      	bne.n	800480c <_printf_common+0xc8>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e008      	b.n	80047ec <_printf_common+0xa8>
 80047da:	2301      	movs	r3, #1
 80047dc:	4652      	mov	r2, sl
 80047de:	4641      	mov	r1, r8
 80047e0:	4638      	mov	r0, r7
 80047e2:	47c8      	blx	r9
 80047e4:	3001      	adds	r0, #1
 80047e6:	d103      	bne.n	80047f0 <_printf_common+0xac>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	3501      	adds	r5, #1
 80047f2:	e7c6      	b.n	8004782 <_printf_common+0x3e>
 80047f4:	18e1      	adds	r1, r4, r3
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	2030      	movs	r0, #48	@ 0x30
 80047fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047fe:	4422      	add	r2, r4
 8004800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004808:	3302      	adds	r3, #2
 800480a:	e7c7      	b.n	800479c <_printf_common+0x58>
 800480c:	2301      	movs	r3, #1
 800480e:	4622      	mov	r2, r4
 8004810:	4641      	mov	r1, r8
 8004812:	4638      	mov	r0, r7
 8004814:	47c8      	blx	r9
 8004816:	3001      	adds	r0, #1
 8004818:	d0e6      	beq.n	80047e8 <_printf_common+0xa4>
 800481a:	3601      	adds	r6, #1
 800481c:	e7d9      	b.n	80047d2 <_printf_common+0x8e>
	...

08004820 <_printf_i>:
 8004820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004824:	7e0f      	ldrb	r7, [r1, #24]
 8004826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004828:	2f78      	cmp	r7, #120	@ 0x78
 800482a:	4691      	mov	r9, r2
 800482c:	4680      	mov	r8, r0
 800482e:	460c      	mov	r4, r1
 8004830:	469a      	mov	sl, r3
 8004832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004836:	d807      	bhi.n	8004848 <_printf_i+0x28>
 8004838:	2f62      	cmp	r7, #98	@ 0x62
 800483a:	d80a      	bhi.n	8004852 <_printf_i+0x32>
 800483c:	2f00      	cmp	r7, #0
 800483e:	f000 80d1 	beq.w	80049e4 <_printf_i+0x1c4>
 8004842:	2f58      	cmp	r7, #88	@ 0x58
 8004844:	f000 80b8 	beq.w	80049b8 <_printf_i+0x198>
 8004848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800484c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004850:	e03a      	b.n	80048c8 <_printf_i+0xa8>
 8004852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004856:	2b15      	cmp	r3, #21
 8004858:	d8f6      	bhi.n	8004848 <_printf_i+0x28>
 800485a:	a101      	add	r1, pc, #4	@ (adr r1, 8004860 <_printf_i+0x40>)
 800485c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004860:	080048b9 	.word	0x080048b9
 8004864:	080048cd 	.word	0x080048cd
 8004868:	08004849 	.word	0x08004849
 800486c:	08004849 	.word	0x08004849
 8004870:	08004849 	.word	0x08004849
 8004874:	08004849 	.word	0x08004849
 8004878:	080048cd 	.word	0x080048cd
 800487c:	08004849 	.word	0x08004849
 8004880:	08004849 	.word	0x08004849
 8004884:	08004849 	.word	0x08004849
 8004888:	08004849 	.word	0x08004849
 800488c:	080049cb 	.word	0x080049cb
 8004890:	080048f7 	.word	0x080048f7
 8004894:	08004985 	.word	0x08004985
 8004898:	08004849 	.word	0x08004849
 800489c:	08004849 	.word	0x08004849
 80048a0:	080049ed 	.word	0x080049ed
 80048a4:	08004849 	.word	0x08004849
 80048a8:	080048f7 	.word	0x080048f7
 80048ac:	08004849 	.word	0x08004849
 80048b0:	08004849 	.word	0x08004849
 80048b4:	0800498d 	.word	0x0800498d
 80048b8:	6833      	ldr	r3, [r6, #0]
 80048ba:	1d1a      	adds	r2, r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6032      	str	r2, [r6, #0]
 80048c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048c8:	2301      	movs	r3, #1
 80048ca:	e09c      	b.n	8004a06 <_printf_i+0x1e6>
 80048cc:	6833      	ldr	r3, [r6, #0]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	1d19      	adds	r1, r3, #4
 80048d2:	6031      	str	r1, [r6, #0]
 80048d4:	0606      	lsls	r6, r0, #24
 80048d6:	d501      	bpl.n	80048dc <_printf_i+0xbc>
 80048d8:	681d      	ldr	r5, [r3, #0]
 80048da:	e003      	b.n	80048e4 <_printf_i+0xc4>
 80048dc:	0645      	lsls	r5, r0, #25
 80048de:	d5fb      	bpl.n	80048d8 <_printf_i+0xb8>
 80048e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	da03      	bge.n	80048f0 <_printf_i+0xd0>
 80048e8:	232d      	movs	r3, #45	@ 0x2d
 80048ea:	426d      	negs	r5, r5
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f0:	4858      	ldr	r0, [pc, #352]	@ (8004a54 <_printf_i+0x234>)
 80048f2:	230a      	movs	r3, #10
 80048f4:	e011      	b.n	800491a <_printf_i+0xfa>
 80048f6:	6821      	ldr	r1, [r4, #0]
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	0608      	lsls	r0, r1, #24
 80048fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004900:	d402      	bmi.n	8004908 <_printf_i+0xe8>
 8004902:	0649      	lsls	r1, r1, #25
 8004904:	bf48      	it	mi
 8004906:	b2ad      	uxthmi	r5, r5
 8004908:	2f6f      	cmp	r7, #111	@ 0x6f
 800490a:	4852      	ldr	r0, [pc, #328]	@ (8004a54 <_printf_i+0x234>)
 800490c:	6033      	str	r3, [r6, #0]
 800490e:	bf14      	ite	ne
 8004910:	230a      	movne	r3, #10
 8004912:	2308      	moveq	r3, #8
 8004914:	2100      	movs	r1, #0
 8004916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800491a:	6866      	ldr	r6, [r4, #4]
 800491c:	60a6      	str	r6, [r4, #8]
 800491e:	2e00      	cmp	r6, #0
 8004920:	db05      	blt.n	800492e <_printf_i+0x10e>
 8004922:	6821      	ldr	r1, [r4, #0]
 8004924:	432e      	orrs	r6, r5
 8004926:	f021 0104 	bic.w	r1, r1, #4
 800492a:	6021      	str	r1, [r4, #0]
 800492c:	d04b      	beq.n	80049c6 <_printf_i+0x1a6>
 800492e:	4616      	mov	r6, r2
 8004930:	fbb5 f1f3 	udiv	r1, r5, r3
 8004934:	fb03 5711 	mls	r7, r3, r1, r5
 8004938:	5dc7      	ldrb	r7, [r0, r7]
 800493a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800493e:	462f      	mov	r7, r5
 8004940:	42bb      	cmp	r3, r7
 8004942:	460d      	mov	r5, r1
 8004944:	d9f4      	bls.n	8004930 <_printf_i+0x110>
 8004946:	2b08      	cmp	r3, #8
 8004948:	d10b      	bne.n	8004962 <_printf_i+0x142>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	07df      	lsls	r7, r3, #31
 800494e:	d508      	bpl.n	8004962 <_printf_i+0x142>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	6861      	ldr	r1, [r4, #4]
 8004954:	4299      	cmp	r1, r3
 8004956:	bfde      	ittt	le
 8004958:	2330      	movle	r3, #48	@ 0x30
 800495a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800495e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004962:	1b92      	subs	r2, r2, r6
 8004964:	6122      	str	r2, [r4, #16]
 8004966:	f8cd a000 	str.w	sl, [sp]
 800496a:	464b      	mov	r3, r9
 800496c:	aa03      	add	r2, sp, #12
 800496e:	4621      	mov	r1, r4
 8004970:	4640      	mov	r0, r8
 8004972:	f7ff fee7 	bl	8004744 <_printf_common>
 8004976:	3001      	adds	r0, #1
 8004978:	d14a      	bne.n	8004a10 <_printf_i+0x1f0>
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	b004      	add	sp, #16
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	4832      	ldr	r0, [pc, #200]	@ (8004a58 <_printf_i+0x238>)
 800498e:	2778      	movs	r7, #120	@ 0x78
 8004990:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	6831      	ldr	r1, [r6, #0]
 8004998:	061f      	lsls	r7, r3, #24
 800499a:	f851 5b04 	ldr.w	r5, [r1], #4
 800499e:	d402      	bmi.n	80049a6 <_printf_i+0x186>
 80049a0:	065f      	lsls	r7, r3, #25
 80049a2:	bf48      	it	mi
 80049a4:	b2ad      	uxthmi	r5, r5
 80049a6:	6031      	str	r1, [r6, #0]
 80049a8:	07d9      	lsls	r1, r3, #31
 80049aa:	bf44      	itt	mi
 80049ac:	f043 0320 	orrmi.w	r3, r3, #32
 80049b0:	6023      	strmi	r3, [r4, #0]
 80049b2:	b11d      	cbz	r5, 80049bc <_printf_i+0x19c>
 80049b4:	2310      	movs	r3, #16
 80049b6:	e7ad      	b.n	8004914 <_printf_i+0xf4>
 80049b8:	4826      	ldr	r0, [pc, #152]	@ (8004a54 <_printf_i+0x234>)
 80049ba:	e7e9      	b.n	8004990 <_printf_i+0x170>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	e7f6      	b.n	80049b4 <_printf_i+0x194>
 80049c6:	4616      	mov	r6, r2
 80049c8:	e7bd      	b.n	8004946 <_printf_i+0x126>
 80049ca:	6833      	ldr	r3, [r6, #0]
 80049cc:	6825      	ldr	r5, [r4, #0]
 80049ce:	6961      	ldr	r1, [r4, #20]
 80049d0:	1d18      	adds	r0, r3, #4
 80049d2:	6030      	str	r0, [r6, #0]
 80049d4:	062e      	lsls	r6, r5, #24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	d501      	bpl.n	80049de <_printf_i+0x1be>
 80049da:	6019      	str	r1, [r3, #0]
 80049dc:	e002      	b.n	80049e4 <_printf_i+0x1c4>
 80049de:	0668      	lsls	r0, r5, #25
 80049e0:	d5fb      	bpl.n	80049da <_printf_i+0x1ba>
 80049e2:	8019      	strh	r1, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	4616      	mov	r6, r2
 80049ea:	e7bc      	b.n	8004966 <_printf_i+0x146>
 80049ec:	6833      	ldr	r3, [r6, #0]
 80049ee:	1d1a      	adds	r2, r3, #4
 80049f0:	6032      	str	r2, [r6, #0]
 80049f2:	681e      	ldr	r6, [r3, #0]
 80049f4:	6862      	ldr	r2, [r4, #4]
 80049f6:	2100      	movs	r1, #0
 80049f8:	4630      	mov	r0, r6
 80049fa:	f7fb fbe9 	bl	80001d0 <memchr>
 80049fe:	b108      	cbz	r0, 8004a04 <_printf_i+0x1e4>
 8004a00:	1b80      	subs	r0, r0, r6
 8004a02:	6060      	str	r0, [r4, #4]
 8004a04:	6863      	ldr	r3, [r4, #4]
 8004a06:	6123      	str	r3, [r4, #16]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0e:	e7aa      	b.n	8004966 <_printf_i+0x146>
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	4632      	mov	r2, r6
 8004a14:	4649      	mov	r1, r9
 8004a16:	4640      	mov	r0, r8
 8004a18:	47d0      	blx	sl
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d0ad      	beq.n	800497a <_printf_i+0x15a>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	079b      	lsls	r3, r3, #30
 8004a22:	d413      	bmi.n	8004a4c <_printf_i+0x22c>
 8004a24:	68e0      	ldr	r0, [r4, #12]
 8004a26:	9b03      	ldr	r3, [sp, #12]
 8004a28:	4298      	cmp	r0, r3
 8004a2a:	bfb8      	it	lt
 8004a2c:	4618      	movlt	r0, r3
 8004a2e:	e7a6      	b.n	800497e <_printf_i+0x15e>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4632      	mov	r2, r6
 8004a34:	4649      	mov	r1, r9
 8004a36:	4640      	mov	r0, r8
 8004a38:	47d0      	blx	sl
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d09d      	beq.n	800497a <_printf_i+0x15a>
 8004a3e:	3501      	adds	r5, #1
 8004a40:	68e3      	ldr	r3, [r4, #12]
 8004a42:	9903      	ldr	r1, [sp, #12]
 8004a44:	1a5b      	subs	r3, r3, r1
 8004a46:	42ab      	cmp	r3, r5
 8004a48:	dcf2      	bgt.n	8004a30 <_printf_i+0x210>
 8004a4a:	e7eb      	b.n	8004a24 <_printf_i+0x204>
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	f104 0619 	add.w	r6, r4, #25
 8004a52:	e7f5      	b.n	8004a40 <_printf_i+0x220>
 8004a54:	08004df5 	.word	0x08004df5
 8004a58:	08004e06 	.word	0x08004e06

08004a5c <__sflush_r>:
 8004a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a64:	0716      	lsls	r6, r2, #28
 8004a66:	4605      	mov	r5, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	d454      	bmi.n	8004b16 <__sflush_r+0xba>
 8004a6c:	684b      	ldr	r3, [r1, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	dc02      	bgt.n	8004a78 <__sflush_r+0x1c>
 8004a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dd48      	ble.n	8004b0a <__sflush_r+0xae>
 8004a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	d045      	beq.n	8004b0a <__sflush_r+0xae>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a84:	682f      	ldr	r7, [r5, #0]
 8004a86:	6a21      	ldr	r1, [r4, #32]
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	d030      	beq.n	8004aee <__sflush_r+0x92>
 8004a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	0759      	lsls	r1, r3, #29
 8004a92:	d505      	bpl.n	8004aa0 <__sflush_r+0x44>
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a9a:	b10b      	cbz	r3, 8004aa0 <__sflush_r+0x44>
 8004a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004aa4:	6a21      	ldr	r1, [r4, #32]
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b0      	blx	r6
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	d106      	bne.n	8004abe <__sflush_r+0x62>
 8004ab0:	6829      	ldr	r1, [r5, #0]
 8004ab2:	291d      	cmp	r1, #29
 8004ab4:	d82b      	bhi.n	8004b0e <__sflush_r+0xb2>
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b60 <__sflush_r+0x104>)
 8004ab8:	40ca      	lsrs	r2, r1
 8004aba:	07d6      	lsls	r6, r2, #31
 8004abc:	d527      	bpl.n	8004b0e <__sflush_r+0xb2>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	6062      	str	r2, [r4, #4]
 8004ac2:	04d9      	lsls	r1, r3, #19
 8004ac4:	6922      	ldr	r2, [r4, #16]
 8004ac6:	6022      	str	r2, [r4, #0]
 8004ac8:	d504      	bpl.n	8004ad4 <__sflush_r+0x78>
 8004aca:	1c42      	adds	r2, r0, #1
 8004acc:	d101      	bne.n	8004ad2 <__sflush_r+0x76>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	b903      	cbnz	r3, 8004ad4 <__sflush_r+0x78>
 8004ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ad6:	602f      	str	r7, [r5, #0]
 8004ad8:	b1b9      	cbz	r1, 8004b0a <__sflush_r+0xae>
 8004ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	d002      	beq.n	8004ae8 <__sflush_r+0x8c>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f7ff fbf4 	bl	80042d0 <_free_r>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aec:	e00d      	b.n	8004b0a <__sflush_r+0xae>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b0      	blx	r6
 8004af4:	4602      	mov	r2, r0
 8004af6:	1c50      	adds	r0, r2, #1
 8004af8:	d1c9      	bne.n	8004a8e <__sflush_r+0x32>
 8004afa:	682b      	ldr	r3, [r5, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0c6      	beq.n	8004a8e <__sflush_r+0x32>
 8004b00:	2b1d      	cmp	r3, #29
 8004b02:	d001      	beq.n	8004b08 <__sflush_r+0xac>
 8004b04:	2b16      	cmp	r3, #22
 8004b06:	d11e      	bne.n	8004b46 <__sflush_r+0xea>
 8004b08:	602f      	str	r7, [r5, #0]
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e022      	b.n	8004b54 <__sflush_r+0xf8>
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	e01b      	b.n	8004b4e <__sflush_r+0xf2>
 8004b16:	690f      	ldr	r7, [r1, #16]
 8004b18:	2f00      	cmp	r7, #0
 8004b1a:	d0f6      	beq.n	8004b0a <__sflush_r+0xae>
 8004b1c:	0793      	lsls	r3, r2, #30
 8004b1e:	680e      	ldr	r6, [r1, #0]
 8004b20:	bf08      	it	eq
 8004b22:	694b      	ldreq	r3, [r1, #20]
 8004b24:	600f      	str	r7, [r1, #0]
 8004b26:	bf18      	it	ne
 8004b28:	2300      	movne	r3, #0
 8004b2a:	eba6 0807 	sub.w	r8, r6, r7
 8004b2e:	608b      	str	r3, [r1, #8]
 8004b30:	f1b8 0f00 	cmp.w	r8, #0
 8004b34:	dde9      	ble.n	8004b0a <__sflush_r+0xae>
 8004b36:	6a21      	ldr	r1, [r4, #32]
 8004b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b3a:	4643      	mov	r3, r8
 8004b3c:	463a      	mov	r2, r7
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b0      	blx	r6
 8004b42:	2800      	cmp	r0, #0
 8004b44:	dc08      	bgt.n	8004b58 <__sflush_r+0xfc>
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b58:	4407      	add	r7, r0
 8004b5a:	eba8 0800 	sub.w	r8, r8, r0
 8004b5e:	e7e7      	b.n	8004b30 <__sflush_r+0xd4>
 8004b60:	20400001 	.word	0x20400001

08004b64 <_fflush_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	690b      	ldr	r3, [r1, #16]
 8004b68:	4605      	mov	r5, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	b913      	cbnz	r3, 8004b74 <_fflush_r+0x10>
 8004b6e:	2500      	movs	r5, #0
 8004b70:	4628      	mov	r0, r5
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	b118      	cbz	r0, 8004b7e <_fflush_r+0x1a>
 8004b76:	6a03      	ldr	r3, [r0, #32]
 8004b78:	b90b      	cbnz	r3, 8004b7e <_fflush_r+0x1a>
 8004b7a:	f7ff f9a7 	bl	8003ecc <__sinit>
 8004b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f3      	beq.n	8004b6e <_fflush_r+0xa>
 8004b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b88:	07d0      	lsls	r0, r2, #31
 8004b8a:	d404      	bmi.n	8004b96 <_fflush_r+0x32>
 8004b8c:	0599      	lsls	r1, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_fflush_r+0x32>
 8004b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b92:	f7ff fb9a 	bl	80042ca <__retarget_lock_acquire_recursive>
 8004b96:	4628      	mov	r0, r5
 8004b98:	4621      	mov	r1, r4
 8004b9a:	f7ff ff5f 	bl	8004a5c <__sflush_r>
 8004b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ba0:	07da      	lsls	r2, r3, #31
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	d4e4      	bmi.n	8004b70 <_fflush_r+0xc>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	059b      	lsls	r3, r3, #22
 8004baa:	d4e1      	bmi.n	8004b70 <_fflush_r+0xc>
 8004bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bae:	f7ff fb8d 	bl	80042cc <__retarget_lock_release_recursive>
 8004bb2:	e7dd      	b.n	8004b70 <_fflush_r+0xc>

08004bb4 <__swhatbuf_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	b096      	sub	sp, #88	@ 0x58
 8004bc0:	4615      	mov	r5, r2
 8004bc2:	461e      	mov	r6, r3
 8004bc4:	da0d      	bge.n	8004be2 <__swhatbuf_r+0x2e>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bcc:	f04f 0100 	mov.w	r1, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2340      	movne	r3, #64	@ 0x40
 8004bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bd8:	2000      	movs	r0, #0
 8004bda:	6031      	str	r1, [r6, #0]
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	b016      	add	sp, #88	@ 0x58
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
 8004be2:	466a      	mov	r2, sp
 8004be4:	f000 f87c 	bl	8004ce0 <_fstat_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	dbec      	blt.n	8004bc6 <__swhatbuf_r+0x12>
 8004bec:	9901      	ldr	r1, [sp, #4]
 8004bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bf6:	4259      	negs	r1, r3
 8004bf8:	4159      	adcs	r1, r3
 8004bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bfe:	e7eb      	b.n	8004bd8 <__swhatbuf_r+0x24>

08004c00 <__smakebuf_r>:
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c04:	079d      	lsls	r5, r3, #30
 8004c06:	4606      	mov	r6, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	d507      	bpl.n	8004c1c <__smakebuf_r+0x1c>
 8004c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	2301      	movs	r3, #1
 8004c16:	6163      	str	r3, [r4, #20]
 8004c18:	b003      	add	sp, #12
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1c:	ab01      	add	r3, sp, #4
 8004c1e:	466a      	mov	r2, sp
 8004c20:	f7ff ffc8 	bl	8004bb4 <__swhatbuf_r>
 8004c24:	9f00      	ldr	r7, [sp, #0]
 8004c26:	4605      	mov	r5, r0
 8004c28:	4639      	mov	r1, r7
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff fbbc 	bl	80043a8 <_malloc_r>
 8004c30:	b948      	cbnz	r0, 8004c46 <__smakebuf_r+0x46>
 8004c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c36:	059a      	lsls	r2, r3, #22
 8004c38:	d4ee      	bmi.n	8004c18 <__smakebuf_r+0x18>
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	e7e2      	b.n	8004c0c <__smakebuf_r+0xc>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	6020      	str	r0, [r4, #0]
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c56:	b15b      	cbz	r3, 8004c70 <__smakebuf_r+0x70>
 8004c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f851 	bl	8004d04 <_isatty_r>
 8004c62:	b128      	cbz	r0, 8004c70 <__smakebuf_r+0x70>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	431d      	orrs	r5, r3
 8004c74:	81a5      	strh	r5, [r4, #12]
 8004c76:	e7cf      	b.n	8004c18 <__smakebuf_r+0x18>

08004c78 <_putc_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	4606      	mov	r6, r0
 8004c80:	b118      	cbz	r0, 8004c8a <_putc_r+0x12>
 8004c82:	6a03      	ldr	r3, [r0, #32]
 8004c84:	b90b      	cbnz	r3, 8004c8a <_putc_r+0x12>
 8004c86:	f7ff f921 	bl	8003ecc <__sinit>
 8004c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c8c:	07d8      	lsls	r0, r3, #31
 8004c8e:	d405      	bmi.n	8004c9c <_putc_r+0x24>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	0599      	lsls	r1, r3, #22
 8004c94:	d402      	bmi.n	8004c9c <_putc_r+0x24>
 8004c96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c98:	f7ff fb17 	bl	80042ca <__retarget_lock_acquire_recursive>
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	da05      	bge.n	8004cb2 <_putc_r+0x3a>
 8004ca6:	69a2      	ldr	r2, [r4, #24]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	db12      	blt.n	8004cd2 <_putc_r+0x5a>
 8004cac:	b2eb      	uxtb	r3, r5
 8004cae:	2b0a      	cmp	r3, #10
 8004cb0:	d00f      	beq.n	8004cd2 <_putc_r+0x5a>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	6022      	str	r2, [r4, #0]
 8004cb8:	701d      	strb	r5, [r3, #0]
 8004cba:	b2ed      	uxtb	r5, r5
 8004cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cbe:	07da      	lsls	r2, r3, #31
 8004cc0:	d405      	bmi.n	8004cce <_putc_r+0x56>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	059b      	lsls	r3, r3, #22
 8004cc6:	d402      	bmi.n	8004cce <_putc_r+0x56>
 8004cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cca:	f7ff faff 	bl	80042cc <__retarget_lock_release_recursive>
 8004cce:	4628      	mov	r0, r5
 8004cd0:	bd70      	pop	{r4, r5, r6, pc}
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7ff f9e9 	bl	80040ae <__swbuf_r>
 8004cdc:	4605      	mov	r5, r0
 8004cde:	e7ed      	b.n	8004cbc <_putc_r+0x44>

08004ce0 <_fstat_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	@ (8004d00 <_fstat_r+0x20>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	f7fb ffd8 	bl	8000ca2 <_fstat>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	d102      	bne.n	8004cfc <_fstat_r+0x1c>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	b103      	cbz	r3, 8004cfc <_fstat_r+0x1c>
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	bf00      	nop
 8004d00:	200002f0 	.word	0x200002f0

08004d04 <_isatty_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	@ (8004d20 <_isatty_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fb ffd7 	bl	8000cc2 <_isatty>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_isatty_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_isatty_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200002f0 	.word	0x200002f0

08004d24 <_sbrk_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d06      	ldr	r5, [pc, #24]	@ (8004d40 <_sbrk_r+0x1c>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	f7fb ffe0 	bl	8000cf4 <_sbrk>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_sbrk_r+0x1a>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_sbrk_r+0x1a>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	200002f0 	.word	0x200002f0

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
